!function(e){function t(t){for(var n,i,o=t[0],a=t[1],s=0,c=[];s<o.length;s++)i=o[s],r[i]&&c.push(r[i][0]),r[i]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(l&&l(t);c.length;)c.shift()()}var n={},r={2:0};function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(e){var t=[],n=r[e];if(0!==n)if(n)t.push(n[2]);else{var o=new Promise(function(t,i){n=r[e]=[t,i]});t.push(n[2]=o);var a=document.getElementsByTagName("head")[0],s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(e){return i.p+""+({0:"optinomic-help",1:"start"}[e]||e)+".bundle.js"}(e);var l=setTimeout(function(){c({type:"timeout",target:s})},12e4);function c(t){s.onerror=s.onload=null,clearTimeout(l);var n=r[e];if(0!==n){if(n){var i=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src,a=new Error("Loading chunk "+e+" failed.\n("+i+": "+o+")");a.type=i,a.request=o,n[1](a)}r[e]=void 0}}s.onerror=s.onload=c,a.appendChild(s)}return Promise.all(t)},i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="dist/",i.oe=function(e){throw console.error(e),e};var o=window.webpackJsonp=window.webpackJsonp||[],a=o.push.bind(o);o.push=t,o=o.slice();for(var s=0;s<o.length;s++)t(o[s]);var l=a;i(i.s=84)}([function(e,t,n){"use strict";n(26),n(69),n(67),n(66),n(65),n(64),n(63),n(62),n(59),n(27),Polymer.Base=Polymer.LegacyElementMixin(HTMLElement).prototype,Polymer.html=Polymer.html},function(e,t,n){"use strict";var r;r=window.Polymer,window.Polymer=function(e){return window.Polymer._polymerFn(e)},r&&Object.assign(Polymer,r),window.Polymer._polymerFn=function(e){throw new Error("Load polymer.html to use the Polymer() function.")},window.Polymer.version="2.6.0",window.JSCompiler_renameProperty=function(e,t){return e}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"register",value:function(e){var t=void 0,n=document.createElement("template");if(n.innerHTML=e,n.content)t=n.content;else for(t=document.createDocumentFragment();n.firstChild;)t.appendChild(n.firstChild);document.importNode(t,!0)}},{key:"toBody",value:function(e){var t=e.trim();if(t){var n=document.createElement("div");n.innerHTML=t,n.firstChild&&(document.body?document.body.insertBefore(n.firstChild,document.body.firstChild):document.addEventListener("DOMContentLoaded",function(){document.body.insertBefore(n.firstChild,document.body.firstChild)}))}}}]),e}();e.exports=i},function(e,t,n){"use strict";n(1),function(){var e=0;function t(){}t.prototype.__mixinApplications,t.prototype.__mixinSet,Polymer.dedupingMixin=function(t){var n=t.__mixinApplications;n||(n=new WeakMap,t.__mixinApplications=n);var r=e++;return function(e){var i=e.__mixinSet;if(i&&i[r])return e;var o=n,a=o.get(e);a||(a=t(e),o.set(e,a));var s=Object.create(a.__mixinSet||i||null);return s[r]=!0,a.__mixinSet=s,a}}}()},function(e,t,n){"use strict";n(0),n(55),n(54),Polymer.AppScrollEffectsBehavior=[Polymer.IronScrollTargetBehavior,{properties:{effects:{type:String},effectsConfig:{type:Object,value:function(){return{}}},disabled:{type:Boolean,reflectToAttribute:!0,value:!1},threshold:{type:Number,value:0},thresholdTriggered:{type:Boolean,notify:!0,readOnly:!0,reflectToAttribute:!0}},observers:["_effectsChanged(effects, effectsConfig, isAttached)"],_updateScrollState:function(e){},isOnScreen:function(){return!1},isContentBelow:function(){return!1},_effectsRunFn:null,_effects:null,get _clampedScrollTop(){return Math.max(0,this._scrollTop)},detached:function(){this._tearDownEffects()},createEffect:function(e,t){var n=Polymer.AppLayout._scrollEffects[e];if(!n)throw new ReferenceError(this._getUndefinedMsg(e));var r=this._boundEffect(n,t||{});return r.setUp(),r},_effectsChanged:function(e,t,n){this._tearDownEffects(),e&&n&&(e.split(" ").forEach(function(e){var n;""!==e&&((n=Polymer.AppLayout._scrollEffects[e])?this._effects.push(this._boundEffect(n,t[e])):console.warn(this._getUndefinedMsg(e)))},this),this._setUpEffect())},_layoutIfDirty:function(){return this.offsetWidth},_boundEffect:function(e,t){t=t||{};var n=parseFloat(t.startsAt||0),r=parseFloat(t.endsAt||1),i=r-n,o=function(){},a=0===n&&1===r?e.run:function(t,r){e.run.call(this,Math.max(0,(t-n)/i),r)};return{setUp:e.setUp?e.setUp.bind(this,t):o,run:e.run?a.bind(this):o,tearDown:e.tearDown?e.tearDown.bind(this):o}},_setUpEffect:function(){this.isAttached&&this._effects&&(this._effectsRunFn=[],this._effects.forEach(function(e){!1!==e.setUp()&&this._effectsRunFn.push(e.run)},this))},_tearDownEffects:function(){this._effects&&this._effects.forEach(function(e){e.tearDown()}),this._effectsRunFn=[],this._effects=[]},_runEffects:function(e,t){this._effectsRunFn&&this._effectsRunFn.forEach(function(n){n(e,t)})},_scrollHandler:function(){if(!this.disabled){var e=this._clampedScrollTop;this._updateScrollState(e),this.threshold>0&&this._setThresholdTriggered(e>=this.threshold)}},_getDOMRef:function(e){console.warn("_getDOMRef","`"+e+"` is undefined")},_getUndefinedMsg:function(e){return"Scroll effect `"+e+"` is undefined. Did you forget to import app-layout/app-scroll-effects/effects/"+e+".html ?"}}]},function(e,t,n){"use strict";n(0);var r,i=n(2);i.toBody("<custom-style> <style is=custom-style>[hidden]{display:none!important}</style> </custom-style>"),i.toBody("<custom-style> <style is=custom-style>html{--layout:{display:-ms-flexbox;display:-webkit-flex;display:flex};--layout-inline:{display:-ms-inline-flexbox;display:-webkit-inline-flex;display:inline-flex};--layout-horizontal:{@apply --layout;-ms-flex-direction:row;-webkit-flex-direction:row;flex-direction:row};--layout-horizontal-reverse:{@apply --layout;-ms-flex-direction:row-reverse;-webkit-flex-direction:row-reverse;flex-direction:row-reverse};--layout-vertical:{@apply --layout;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column};--layout-vertical-reverse:{@apply --layout;-ms-flex-direction:column-reverse;-webkit-flex-direction:column-reverse;flex-direction:column-reverse};--layout-wrap:{-ms-flex-wrap:wrap;-webkit-flex-wrap:wrap;flex-wrap:wrap};--layout-wrap-reverse:{-ms-flex-wrap:wrap-reverse;-webkit-flex-wrap:wrap-reverse;flex-wrap:wrap-reverse};--layout-flex-auto:{-ms-flex:1 1 auto;-webkit-flex:1 1 auto;flex:1 1 auto};--layout-flex-none:{-ms-flex:none;-webkit-flex:none;flex:none};--layout-flex:{-ms-flex:1 1 .000000001px;-webkit-flex:1;flex:1;-webkit-flex-basis:.000000001px;flex-basis:.000000001px};--layout-flex-2:{-ms-flex:2;-webkit-flex:2;flex:2};--layout-flex-3:{-ms-flex:3;-webkit-flex:3;flex:3};--layout-flex-4:{-ms-flex:4;-webkit-flex:4;flex:4};--layout-flex-5:{-ms-flex:5;-webkit-flex:5;flex:5};--layout-flex-6:{-ms-flex:6;-webkit-flex:6;flex:6};--layout-flex-7:{-ms-flex:7;-webkit-flex:7;flex:7};--layout-flex-8:{-ms-flex:8;-webkit-flex:8;flex:8};--layout-flex-9:{-ms-flex:9;-webkit-flex:9;flex:9};--layout-flex-10:{-ms-flex:10;-webkit-flex:10;flex:10};--layout-flex-11:{-ms-flex:11;-webkit-flex:11;flex:11};--layout-flex-12:{-ms-flex:12;-webkit-flex:12;flex:12};--layout-start:{-ms-flex-align:start;-webkit-align-items:flex-start;align-items:flex-start};--layout-center:{-ms-flex-align:center;-webkit-align-items:center;align-items:center};--layout-end:{-ms-flex-align:end;-webkit-align-items:flex-end;align-items:flex-end};--layout-baseline:{-ms-flex-align:baseline;-webkit-align-items:baseline;align-items:baseline};--layout-start-justified:{-ms-flex-pack:start;-webkit-justify-content:flex-start;justify-content:flex-start};--layout-center-justified:{-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center};--layout-end-justified:{-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end};--layout-around-justified:{-ms-flex-pack:distribute;-webkit-justify-content:space-around;justify-content:space-around};--layout-justified:{-ms-flex-pack:justify;-webkit-justify-content:space-between;justify-content:space-between};--layout-center-center:{@apply --layout-center;@apply --layout-center-justified;};--layout-self-start:{-ms-align-self:flex-start;-webkit-align-self:flex-start;align-self:flex-start};--layout-self-center:{-ms-align-self:center;-webkit-align-self:center;align-self:center};--layout-self-end:{-ms-align-self:flex-end;-webkit-align-self:flex-end;align-self:flex-end};--layout-self-stretch:{-ms-align-self:stretch;-webkit-align-self:stretch;align-self:stretch};--layout-self-baseline:{-ms-align-self:baseline;-webkit-align-self:baseline;align-self:baseline};--layout-start-aligned:{-ms-flex-line-pack:start;-ms-align-content:flex-start;-webkit-align-content:flex-start;align-content:flex-start};--layout-end-aligned:{-ms-flex-line-pack:end;-ms-align-content:flex-end;-webkit-align-content:flex-end;align-content:flex-end};--layout-center-aligned:{-ms-flex-line-pack:center;-ms-align-content:center;-webkit-align-content:center;align-content:center};--layout-between-aligned:{-ms-flex-line-pack:justify;-ms-align-content:space-between;-webkit-align-content:space-between;align-content:space-between};--layout-around-aligned:{-ms-flex-line-pack:distribute;-ms-align-content:space-around;-webkit-align-content:space-around;align-content:space-around};--layout-block:{display:block};--layout-invisible:{visibility:hidden!important};--layout-relative:{position:relative};--layout-fit:{position:absolute;top:0;right:0;bottom:0;left:0};--layout-scroll:{-webkit-overflow-scrolling:touch;overflow:auto};--layout-fullbleed:{margin:0;height:100vh};--layout-fixed-top:{position:fixed;top:0;left:0;right:0};--layout-fixed-right:{position:fixed;top:0;right:0;bottom:0};--layout-fixed-bottom:{position:fixed;right:0;bottom:0;left:0};--layout-fixed-left:{position:fixed;top:0;bottom:0;left:0};}</style> </custom-style>"),(r=document.createElement("style")).textContent="[hidden] { display: none !important; }",document.head.appendChild(r)},function(e,t,n){"use strict";var r;n(33),n(27),r=Polymer.ElementMixin(HTMLElement),Polymer.Element=r,Polymer.html=Polymer.html},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n(3),function(){function e(e,t,n,r,o){var a=void 0;o&&(a="object"===(void 0===n?"undefined":i(n))&&null!==n)&&(r=e.__dataTemp[t]);var s=r!==n&&(r==r||n==n);return a&&s&&(e.__dataTemp[t]=n),s}Polymer.MutableData=Polymer.dedupingMixin(function(t){return function(n){function i(){return o(this,i),a(this,(i.__proto__||Object.getPrototypeOf(i)).apply(this,arguments))}return s(i,t),r(i,[{key:"_shouldPropertyChange",value:function(t,n,r){return e(this,t,n,r,!0)}}]),i}()}),Polymer.OptionalMutableData=Polymer.dedupingMixin(function(t){return function(n){function i(){return o(this,i),a(this,(i.__proto__||Object.getPrototypeOf(i)).apply(this,arguments))}return s(i,t),r(i,[{key:"_shouldPropertyChange",value:function(t,n,r){return e(this,t,n,r,this.mutableData)}}],[{key:"properties",get:function(){return{mutableData:Boolean}}}]),i}()}),Polymer.MutableData._mutablePropertyChange=e}()},function(e,t,n){"use strict";n(1),function(){var e=0,t=0,n=[],r=0,i=document.createTextNode("");new window.MutationObserver(function(){for(var e=n.length,r=0;r<e;r++){var i=n[r];if(i)try{i()}catch(e){setTimeout(function(){throw e})}}n.splice(0,e),t+=e}).observe(i,{characterData:!0}),Polymer.Async={timeOut:{after:function(e){return{run:function(t){return window.setTimeout(t,e)},cancel:function(e){window.clearTimeout(e)}}},run:function(e,t){return window.setTimeout(e,t)},cancel:function(e){window.clearTimeout(e)}},animationFrame:{run:function(e){return window.requestAnimationFrame(e)},cancel:function(e){window.cancelAnimationFrame(e)}},idlePeriod:{run:function(e){return window.requestIdleCallback?window.requestIdleCallback(e):window.setTimeout(e,16)},cancel:function(e){window.cancelIdleCallback?window.cancelIdleCallback(e):window.clearTimeout(e)}},microTask:{run:function(t){return i.textContent=r++,n.push(t),e++},cancel:function(e){var r=e-t;if(r>=0){if(!n[r])throw new Error("invalid async handle: "+e);n[r]=null}}}}}()},function(e,t,n){"use strict";n(1),function(){var e=/(url\()([^)]*)(\))/g,t=/(^\/)|(^#)|(^[\w-\d]*:)/,n=void 0,r=void 0;function i(e,i){if(e&&t.test(e))return e;if(void 0===n){n=!1;try{var o=new URL("b","http://a");o.pathname="c%20d",n="http://a/c%20d"===o.href}catch(e){}}return i||(i=document.baseURI||window.location.href),n?new URL(e,i).href:(r||((r=document.implementation.createHTMLDocument("temp")).base=r.createElement("base"),r.head.appendChild(r.base),r.anchor=r.createElement("a"),r.body.appendChild(r.anchor)),r.base.href=i,r.anchor.href=e,r.anchor.href||e)}Polymer.ResolveUrl={resolveCss:function(t,n){return t.replace(e,function(e,t,r,o){return t+"'"+i(r.replace(/["']/g,""),n)+"'"+o})},resolveUrl:i,pathFromUrl:function(e){return e.substring(0,e.lastIndexOf("/")+1)}}}()},function(e,t,n){"use strict";n(0),n(23),Polymer.AppLayoutBehavior=[Polymer.IronResizableBehavior,{listeners:{"app-reset-layout":"_appResetLayoutHandler","iron-resize":"resetLayout"},attached:function(){this.fire("app-reset-layout")},_appResetLayoutHandler:function(e){Polymer.dom(e).path[0]!==this&&(this.resetLayout(),e.stopPropagation())},_updateLayoutStates:function(){console.error("unimplemented")},resetLayout:function(){var e=this._updateLayoutStates.bind(this);Polymer.Async&&Polymer.Async.animationFrame?(this._layoutDebouncer=Polymer.Debouncer.debounce(this._layoutDebouncer,Polymer.Async.animationFrame,e),Polymer.enqueueDebouncer(this._layoutDebouncer)):this.debounce("resetLayout",e),this._notifyDescendantResize()},_notifyLayoutChanged:function(){var e=this;requestAnimationFrame(function(){e.fire("app-reset-layout")})},_notifyDescendantResize:function(){this.isAttached&&this._interestedResizables.forEach(function(e){this.resizerShouldNotify(e)&&this._notifyDescendant(e)},this)}}]},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n(1),n(14),n(7),function(){var e=null;function t(){return e}t.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:t,writable:!0}});var n=Polymer.PropertyEffects(t),s=Polymer.MutableData(n);var l=Polymer.PropertyEffects(function(){return function e(){a(this,e)}}()),c=function(e){function t(e){a(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n._configureProperties(e),n.root=n._stampTemplate(n.__dataHost);for(var r=n.children=[],o=n.root.firstChild;o;o=o.nextSibling)r.push(o),o.__templatizeInstance=n;n.__templatizeOwner&&n.__templatizeOwner.__hideTemplateChildren__&&n._showHideChildren(!0);var s=n.__templatizeOptions;return(e&&s.instanceProps||!s.instanceProps)&&n._enableProperties(),n}return o(t,l),r(t,[{key:"_configureProperties",value:function(e){if(this.__templatizeOptions.forwardHostProp)for(var t in this.__hostProps)this._setPendingProperty(t,this.__dataHost["_host_"+t]);for(var n in e)this._setPendingProperty(n,e[n])}},{key:"forwardHostProp",value:function(e,t){this._setPendingPropertyOrPath(e,t,!1,!0)&&this.__dataHost._enqueueClient(this)}},{key:"_addEventListenerToNode",value:function(e,t,n){var r=this;if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(e,t,function(e){e.model=r,n(e)});else{var i=this.__dataHost.__dataHost;i&&i._addEventListenerToNode(e,t,n)}}},{key:"_showHideChildren",value:function(e){for(var t=this.children,n=0;n<t.length;n++){var r=t[n];if(Boolean(e)!=Boolean(r.__hideTemplateChildren__))if(r.nodeType===Node.TEXT_NODE)e?(r.__polymerTextContent__=r.textContent,r.textContent=""):r.textContent=r.__polymerTextContent__;else if("slot"===r.localName)if(e)r.__polymerReplaced__=document.createComment("hidden-slot"),r.parentNode.replaceChild(r.__polymerReplaced__,r);else{var i=r.__polymerReplaced__;i&&i.parentNode.replaceChild(r,i)}else r.style&&(e?(r.__polymerDisplay__=r.style.display,r.style.display="none"):r.style.display=r.__polymerDisplay__);r.__hideTemplateChildren__=e,r._showHideChildren&&r._showHideChildren(e)}}},{key:"_setUnmanagedPropertyToNode",value:function(e,n,r){e.__hideTemplateChildren__&&e.nodeType==Node.TEXT_NODE&&"textContent"==n?e.__polymerTextContent__=r:function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_setUnmanagedPropertyToNode",this).call(this,e,n,r)}},{key:"dispatchEvent",value:function(e){return!0}},{key:"parentModel",get:function(){var e=this.__parentModel;if(!e){var t=void 0;e=this;do{e=e.__dataHost.__dataHost}while((t=e.__templatizeOptions)&&!t.parentModel);this.__parentModel=e}return e}}]),t}();c.prototype.__dataHost,c.prototype.__templatizeOptions,c.prototype._methodHost,c.prototype.__templatizeOwner,c.prototype.__hostProps;var u=Polymer.MutableData(c);function p(e,t,n){var r=n.mutableData?u:c,s=function(e){function t(){return a(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,r),t}();return s.prototype.__templatizeOptions=n,s.prototype._bindTemplate(e),function(e,t,n,r){var i=n.hostProps||{};for(var o in r.instanceProps){delete i[o];var a=r.notifyInstanceProp;a&&e.prototype._addPropertyEffect(o,e.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:f(o,a)})}if(r.forwardHostProp&&t.__dataHost)for(var s in i)e.prototype._addPropertyEffect(s,e.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:function(e,t,n){e.__dataHost._setPendingPropertyOrPath("_host_"+t,n[t],!0,!0)}})}(s,e,t,n),s}function h(t,r,l){var c=l.forwardHostProp;if(c){var u=r.templatizeTemplateClass;if(!u){var p=l.mutableData?s:n;u=r.templatizeTemplateClass=function(e){function t(){return a(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,p),t}();var h=r.hostProps;for(var f in h)u.prototype._addPropertyEffect("_host_"+f,u.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:d(f,c)}),u.prototype._createNotifyingProperty("_host_"+f)}!function(t,n){e=t,Object.setPrototypeOf(t,n.prototype),new n,e=null}(t,u),t.__dataProto&&Object.assign(t.__data,t.__dataProto),t.__dataTemp={},t.__dataPending=null,t.__dataOld=null,t._enableProperties()}}function d(e,t){return function(e,n,r){t.call(e.__templatizeOwner,n.substring("_host_".length),r[n])}}function f(e,t){return function(e,n,r){t.call(e.__templatizeOwner,e,n,r[n])}}Polymer.Templatize={templatize:function(e,t,n){if(n=n||{},e.__templatizeOwner)throw new Error("A <template> can only be templatized once");e.__templatizeOwner=t;var r=(t?t.constructor:c)._parseTemplate(e),s=r.templatizeInstanceClass;s||(s=p(e,r,n),r.templatizeInstanceClass=s),h(e,r,n);var l=function(e){function t(){return a(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,s),t}();return l.prototype._methodHost=function(e){var t=e.__dataHost;return t&&t._methodHost||t}(e),l.prototype.__dataHost=e,l.prototype.__templatizeOwner=t,l.prototype.__hostProps=r.hostProps,l=l},modelForElement:function(e,t){for(var n=void 0;t;)if(n=t.__templatizeInstance){if(n.__dataHost==e)return n;t=n.__dataHost}else t=t.parentNode;return null}},Polymer.TemplateInstanceBase=c}()},function(e,t,n){"use strict";n(1),function(){var e=[];function t(){for(var t=Boolean(e.length);e.length;)try{e.shift().flush()}catch(e){setTimeout(function(){throw e})}return t}Polymer.enqueueDebouncer=function(t){e.push(t)},Polymer.flush=function(){var e=void 0,n=void 0;do{e=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),n=t()}while(e||n)}}()},function(e,t,n){"use strict";var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(3),n(8),r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._asyncModule=null,this._callback=null,this._timer=null}return i(e,[{key:"setConfig",value:function(e,t){var n=this;this._asyncModule=e,this._callback=t,this._timer=this._asyncModule.run(function(){n._timer=null,n._callback()})}},{key:"cancel",value:function(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}},{key:"flush",value:function(){this.isActive()&&(this.cancel(),this._callback())}},{key:"isActive",value:function(){return null!=this._timer}}],[{key:"debounce",value:function(t,n,r){return t instanceof e?t.cancel():t=new e,t.setConfig(n,r),t}}]),e}(),Polymer.Debouncer=r},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n(1),n(3),n(82),n(30),n(29),n(81),function(){var e=Polymer.CaseMap,t=0,n={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},a=/[A-Z]/;function s(e,t){var n=e[t];if(n){if(!e.hasOwnProperty(t))for(var r in n=e[t]=Object.create(e[t]))for(var i=n[r],o=n[r]=Array(i.length),a=0;a<i.length;a++)o[a]=i[a]}else n=e[t]={};return n}function l(e,n,r,i,o,a){if(n){var s=!1,l=t++;for(var u in r)c(e,n,l,u,r,i,o,a)&&(s=!0);return s}return!1}function c(e,t,n,r,i,o,a,s){var l=!1,c=t[a?Polymer.Path.root(r):r];if(c)for(var p,h=0,d=c.length;h<d&&(p=c[h]);h++)p.info&&p.info.lastRun===n||a&&!u(r,p.trigger)||(p.info&&(p.info.lastRun=n),p.fn(e,r,i,o,p.info,a,s),l=!0);return l}function u(e,t){if(t){var n=t.name;return n==e||t.structured&&Polymer.Path.isAncestor(n,e)||t.wildcard&&Polymer.Path.isDescendant(n,e)}return!0}function p(e,t,n,r,i){var o="string"==typeof i.method?e[i.method]:i.method,a=i.property;o?o.call(e,e.__data[a],r[a]):i.dynamicFn||console.warn("observer method `"+i.method+"` not defined")}function h(e,t,n){var r=Polymer.Path.root(t);return r!==t&&(d(e,Polymer.CaseMap.camelToDashCase(r)+"-changed",n[t],t),!0)}function d(e,t,n,r){var i={value:n,queueProperty:!0};r&&(i.path=r),e.dispatchEvent(new CustomEvent(t,{detail:i}))}function f(e,t,n,r,i,o){var a=(o?Polymer.Path.root(t):t)!=t?t:null,s=a?Polymer.Path.get(e,a):e.__data[t];a&&void 0===s&&(s=n[t]),d(e,i.eventName,s,a)}function y(e,t,n,r,i){var o=e.__data[t];Polymer.sanitizeDOMValue&&(o=Polymer.sanitizeDOMValue(o,i.attrName,"attribute",e)),e._propertyToAttribute(t,i.attrName,o)}function _(e,t,n,r,i){var o=k(e,t,n,r,i),a=i.methodInfo;e.__dataHasAccessor&&e.__dataHasAccessor[a]?e._setPendingProperty(a,o,!0):e[a]=o}function m(t,n,r,i,o,a,s){r.bindings=r.bindings||[];var l={kind:i,target:o,parts:a,literal:s,isCompound:1!==a.length};if(r.bindings.push(l),function(e){return Boolean(e.target)&&"attribute"!=e.kind&&"text"!=e.kind&&!e.isCompound&&"{"===e.parts[0].mode}(l)){var c=l.parts[0],u=c.event,p=c.negate;l.listenerEvent=u||e.camelToDashCase(o)+"-changed",l.listenerNegate=p}for(var h=n.nodeInfoList.length,d=0;d<l.parts.length;d++){var f=l.parts[d];f.compoundIndex=d,v(t,n,l,f,h)}}function v(e,t,n,r,i){if(!r.literal)if("attribute"===n.kind&&"-"===n.target[0])console.warn("Cannot set attribute "+n.target+' because "-" is not a valid attribute starting character');else for(var o=r.dependencies,a={index:i,binding:n,part:r,evaluator:e},s=0;s<o.length;s++){var l=o[s];"string"==typeof l&&((l=E(l)).wildcard=!0),e._addTemplatePropertyEffect(t,l.rootProperty,{fn:g,info:a,trigger:l})}}function g(e,t,r,i,o,a,s){var l=s[o.index],c=o.binding,u=o.part;if(a&&u.source&&t.length>u.source.length&&"property"==c.kind&&!c.isCompound&&l.__isPropertyEffectsClient&&l.__dataHasAccessor&&l.__dataHasAccessor[c.target]){var p=r[t];t=Polymer.Path.translate(u.source,c.target,t),l._setPendingPropertyOrPath(t,p,!1,!0)&&e._enqueueClient(l)}else{!function(e,t,r,i,o){o=function(e,t,n,r){if(n.isCompound){var i=e.__dataCompoundStorage[n.target];i[r.compoundIndex]=t,t=i.join("")}return"attribute"!==n.kind&&("textContent"!==n.target&&("value"!==n.target||"input"!==e.localName&&"textarea"!==e.localName)||(t=void 0==t?"":t)),t}(t,o,r,i),Polymer.sanitizeDOMValue&&(o=Polymer.sanitizeDOMValue(o,r.target,r.kind,t));if("attribute"==r.kind)e._valueToNodeAttribute(t,o,r.target);else{var a=r.target;t.__isPropertyEffectsClient&&t.__dataHasAccessor&&t.__dataHasAccessor[a]?t[n.READ_ONLY]&&t[n.READ_ONLY][a]||t._setPendingProperty(a,o)&&e._enqueueClient(t):e._setUnmanagedPropertyToNode(t,a,o)}}(e,l,c,u,o.evaluator._evaluateBinding(e,u,t,r,i,a))}}function b(e,t){if(t.isCompound){for(var n=e.__dataCompoundStorage||(e.__dataCompoundStorage={}),r=t.parts,i=new Array(r.length),o=0;o<r.length;o++)i[o]=r[o].literal;var a=t.target;n[a]=i,t.literal&&"property"==t.kind&&(e[a]=t.literal)}}function w(e,t,r){if(r.listenerEvent){var i=r.parts[0];e.addEventListener(r.listenerEvent,function(e){!function(e,t,r,i,o){var a=void 0,s=e.detail,l=s&&s.path;l?(i=Polymer.Path.translate(r,i,l),a=s&&s.value):a=e.target[r],a=o?!a:a,t[n.READ_ONLY]&&t[n.READ_ONLY][i]||!t._setPendingPropertyOrPath(i,a,!0,Boolean(l))||s&&s.queueProperty||t._invalidateProperties()}(e,t,r.target,i.source,i.negate)})}}function P(e,t,n,r,i,a){a=t.static||a&&("object"!==(void 0===a?"undefined":o(a))||a[t.methodName]);for(var s,l={methodName:t.methodName,args:t.args,methodInfo:i,dynamicFn:a},c=0;c<t.args.length&&(s=t.args[c]);c++)s.literal||e._addPropertyEffect(s.rootProperty,n,{fn:r,info:l,trigger:s});a&&e._addPropertyEffect(t.methodName,n,{fn:r,info:l})}function k(e,t,n,r,i){var o=e._methodHost||e,a=o[i.methodName];if(a){var s=function(e,t,n,r){for(var i=[],o=0,a=t.length;o<a;o++){var s=t[o],l=s.name,c=void 0;if(s.literal?c=s.value:s.structured?void 0===(c=Polymer.Path.get(e,l))&&(c=r[l]):c=e[l],s.wildcard){var u=0===l.indexOf(n+"."),p=0===n.indexOf(l)&&!u;i[o]={path:p?n:l,value:p?r[n]:c,base:c}}else i[o]=c}return i}(e.__data,i.args,t,n);return a.apply(o,s)}i.dynamicFn||console.warn("method `"+i.methodName+"` not defined")}var S=[],O=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function C(e){for(var t="",n=0;n<e.length;n++){t+=e[n].literal||""}return t}function T(e){var t=e.match(/([^\s]+?)\(([\s\S]*)\)/);if(t){var n={methodName:t[1],static:!0,args:S};return t[2].trim()?function(e,t){return t.args=e.map(function(e){var n=E(e);return n.literal||(t.static=!1),n},this),t}(t[2].replace(/\\,/g,"&comma;").split(","),n):n}return null}function E(e){var t=e.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),n={name:t,value:"",literal:!1},r=t[0];switch("-"===r&&(r=t[1]),r>="0"&&r<="9"&&(r="#"),r){case"'":case'"':n.value=t.slice(1,-1),n.literal=!0;break;case"#":n.value=Number(t),n.literal=!0}return n.literal||(n.rootProperty=Polymer.Path.root(t),n.structured=Polymer.Path.isPath(t),n.structured&&(n.wildcard=".*"==t.slice(-2),n.wildcard&&(n.name=t.slice(0,-2)))),n}function x(e,t,n,r){var i=n+".splices";e.notifyPath(i,{indexSplices:r}),e.notifyPath(n+".length",t.length),e.__data[i]={indexSplices:null}}function A(e,t,n,r,i,o){x(e,t,n,[{index:r,addedCount:i,removed:o,object:t,type:"splice"}])}Polymer.PropertyEffects=Polymer.dedupingMixin(function(u){var d=Polymer.TemplateStamp(Polymer.PropertyAccessors(u)),v=function(u){function v(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,v);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(v.__proto__||Object.getPrototypeOf(v)).call(this));return e.__isPropertyEffectsClient=!0,e.__dataCounter=0,e.__dataClientsReady,e.__dataPendingClients,e.__dataToNotify,e.__dataLinkedPaths,e.__dataHasPaths,e.__dataCompoundStorage,e.__dataHost,e.__dataTemp,e.__dataClientsInitialized,e.__data,e.__dataPending,e.__dataOld,e.__computeEffects,e.__reflectEffects,e.__notifyEffects,e.__propagateEffects,e.__observeEffects,e.__readOnly,e.__templateInfo,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(v,d),r(v,[{key:"_initializeProperties",value:function(){i(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"_initializeProperties",this).call(this),I.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}},{key:"_initializeProtoProperties",value:function(e){this.__data=Object.create(e),this.__dataPending=Object.create(e),this.__dataOld={}}},{key:"_initializeInstanceProperties",value:function(e){var t=this[n.READ_ONLY];for(var r in e)t&&t[r]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[r]=this.__dataPending[r]=e[r])}},{key:"_addPropertyEffect",value:function(e,t,r){this._createPropertyAccessor(e,t==n.READ_ONLY);var i=s(this,t)[e];i||(i=this[t][e]=[]),i.push(r)}},{key:"_removePropertyEffect",value:function(e,t,n){var r=s(this,t)[e],i=r.indexOf(n);i>=0&&r.splice(i,1)}},{key:"_hasPropertyEffect",value:function(e,t){var n=this[t];return Boolean(n&&n[e])}},{key:"_hasReadOnlyEffect",value:function(e){return this._hasPropertyEffect(e,n.READ_ONLY)}},{key:"_hasNotifyEffect",value:function(e){return this._hasPropertyEffect(e,n.NOTIFY)}},{key:"_hasReflectEffect",value:function(e){return this._hasPropertyEffect(e,n.REFLECT)}},{key:"_hasComputedEffect",value:function(e){return this._hasPropertyEffect(e,n.COMPUTE)}},{key:"_setPendingPropertyOrPath",value:function(e,t,n,r){if(r||Polymer.Path.root(Array.isArray(e)?e[0]:e)!==e){if(!r){var o=Polymer.Path.get(this,e);if(!(e=Polymer.Path.set(this,e,t))||!i(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"_shouldPropertyChange",this).call(this,e,t,o))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(e,t,n))return function(e,t,n){var r=e.__dataLinkedPaths;if(r){var i=void 0;for(var o in r){var a=r[o];Polymer.Path.isDescendant(o,t)?(i=Polymer.Path.translate(o,a,t),e._setPendingPropertyOrPath(i,n,!0,!0)):Polymer.Path.isDescendant(a,t)&&(i=Polymer.Path.translate(a,o,t),e._setPendingPropertyOrPath(i,n,!0,!0))}}}(this,e,t),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[e])return this._setPendingProperty(e,t,n);this[e]=t}return!1}},{key:"_setUnmanagedPropertyToNode",value:function(e,t,n){n===e[t]&&"object"!=(void 0===n?"undefined":o(n))||(e[t]=n)}},{key:"_setPendingProperty",value:function(e,t,r){var i=this.__dataHasPaths&&Polymer.Path.isPath(e),o=i?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(e,t,o[e])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),e in this.__dataOld||(this.__dataOld[e]=this.__data[e]),i?this.__dataTemp[e]=t:this.__data[e]=t,this.__dataPending[e]=t,(i||this[n.NOTIFY]&&this[n.NOTIFY][e])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[e]=r),!0)}},{key:"_setProperty",value:function(e,t){this._setPendingProperty(e,t,!0)&&this._invalidateProperties()}},{key:"_invalidateProperties",value:function(){this.__dataReady&&this._flushProperties()}},{key:"_enqueueClient",value:function(e){this.__dataPendingClients=this.__dataPendingClients||[],e!==this&&this.__dataPendingClients.push(e)}},{key:"_flushProperties",value:function(){this.__dataCounter++,i(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"_flushProperties",this).call(this),this.__dataCounter--}},{key:"_flushClients",value:function(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}},{key:"__enableOrFlushClients",value:function(){var e=this.__dataPendingClients;if(e){this.__dataPendingClients=null;for(var t=0;t<e.length;t++){var n=e[t];n.__dataEnabled?n.__dataPending&&n._flushProperties():n._enableProperties()}}}},{key:"_readyClients",value:function(){this.__enableOrFlushClients()}},{key:"setProperties",value:function(e,t){for(var r in e)!t&&this[n.READ_ONLY]&&this[n.READ_ONLY][r]||this._setPendingPropertyOrPath(r,e[r],!0);this._invalidateProperties()}},{key:"ready",value:function(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}},{key:"_propertiesChanged",value:function(e,r,i){var o=this.__dataHasPaths;this.__dataHasPaths=!1,function(e,t,r,i){var o=e[n.COMPUTE];if(o)for(var a=t;l(e,o,a,r,i);)Object.assign(r,e.__dataOld),Object.assign(t,e.__dataPending),a=e.__dataPending,e.__dataPending=null}(this,r,i,o);var a=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(r,i,o),this._flushClients(),l(this,this[n.REFLECT],r,i,o),l(this,this[n.OBSERVE],r,i,o),a&&function(e,r,i,o,a){var s=e[n.NOTIFY],l=void 0,u=t++;for(var p in r)r[p]&&(s&&c(e,s,u,p,i,o,a)?l=!0:a&&h(e,p,i)&&(l=!0));var d=void 0;l&&(d=e.__dataHost)&&d._invalidateProperties&&d._invalidateProperties()}(this,a,r,i,o),1==this.__dataCounter&&(this.__dataTemp={})}},{key:"_propagatePropertyChanges",value:function(e,t,r){this[n.PROPAGATE]&&l(this,this[n.PROPAGATE],e,t,r);for(var i=this.__templateInfo;i;)l(this,i.propertyEffects,e,t,r,i.nodeList),i=i.nextTemplateInfo}},{key:"linkPaths",value:function(e,t){e=Polymer.Path.normalize(e),t=Polymer.Path.normalize(t),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[e]=t}},{key:"unlinkPaths",value:function(e){e=Polymer.Path.normalize(e),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[e]}},{key:"notifySplices",value:function(e,t){var n={path:""};x(this,Polymer.Path.get(this,e,n),n.path,t)}},{key:"get",value:function(e,t){return Polymer.Path.get(t||this,e)}},{key:"set",value:function(e,t,r){r?Polymer.Path.set(r,e,t):this[n.READ_ONLY]&&this[n.READ_ONLY][e]||this._setPendingPropertyOrPath(e,t,!0)&&this._invalidateProperties()}},{key:"push",value:function(e){for(var t={path:""},n=Polymer.Path.get(this,e,t),r=n.length,i=arguments.length,o=Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];var s=n.push.apply(n,o);return o.length&&A(this,n,t.path,r,o.length,[]),s}},{key:"pop",value:function(e){var t={path:""},n=Polymer.Path.get(this,e,t),r=Boolean(n.length),i=n.pop();return r&&A(this,n,t.path,n.length,0,[i]),i}},{key:"splice",value:function(e,t,n){for(var r=arguments.length,i=Array(r>3?r-3:0),o=3;o<r;o++)i[o-3]=arguments[o];var a={path:""},s=Polymer.Path.get(this,e,a);t<0?t=s.length-Math.floor(-t):t&&(t=Math.floor(t));var l=void 0;return l=2===arguments.length?s.splice(t):s.splice.apply(s,[t,n].concat(i)),(i.length||l.length)&&A(this,s,a.path,t,i.length,l),l}},{key:"shift",value:function(e){var t={path:""},n=Polymer.Path.get(this,e,t),r=Boolean(n.length),i=n.shift();return r&&A(this,n,t.path,0,0,[i]),i}},{key:"unshift",value:function(e){for(var t={path:""},n=Polymer.Path.get(this,e,t),r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];var a=n.unshift.apply(n,i);return i.length&&A(this,n,t.path,0,i.length,[]),a}},{key:"notifyPath",value:function(e,t){var n=void 0;if(1==arguments.length){var r={path:""};t=Polymer.Path.get(this,e,r),n=r.path}else n=Array.isArray(e)?Polymer.Path.normalize(e):e;this._setPendingPropertyOrPath(n,t,!0,!0)&&this._invalidateProperties()}},{key:"_createReadOnlyProperty",value:function(e,t){var r;this._addPropertyEffect(e,n.READ_ONLY),t&&(this["_set"+(r=e,r[0].toUpperCase()+r.substring(1))]=function(t){this._setProperty(e,t)})}},{key:"_createPropertyObserver",value:function(e,t,r){var i={property:e,method:t,dynamicFn:Boolean(r)};this._addPropertyEffect(e,n.OBSERVE,{fn:p,info:i,trigger:{name:e}}),r&&this._addPropertyEffect(t,n.OBSERVE,{fn:p,info:i,trigger:{name:t}})}},{key:"_createMethodObserver",value:function(e,t){var r=T(e);if(!r)throw new Error("Malformed observer expression '"+e+"'");P(this,r,n.OBSERVE,k,null,t)}},{key:"_createNotifyingProperty",value:function(t){this._addPropertyEffect(t,n.NOTIFY,{fn:f,info:{eventName:e.camelToDashCase(t)+"-changed",property:t}})}},{key:"_createReflectedProperty",value:function(e){var t=this.constructor.attributeNameForProperty(e);"-"===t[0]?console.warn("Property "+e+" cannot be reflected to attribute "+t+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(e,n.REFLECT,{fn:y,info:{attrName:t}})}},{key:"_createComputedProperty",value:function(e,t,r){var i=T(t);if(!i)throw new Error("Malformed computed expression '"+t+"'");P(this,i,n.COMPUTE,_,e,r)}},{key:"_bindTemplate",value:function(e,t){var n=this.constructor._parseTemplate(e),r=this.__templateInfo==n;if(!r)for(var i in n.propertyEffects)this._createPropertyAccessor(i);if(t&&((n=Object.create(n)).wasPreBound=r,!r&&this.__templateInfo)){var o=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=o.nextTemplateInfo=n,n.previousTemplateInfo=o,n}return this.__templateInfo=n}},{key:"_stampTemplate",value:function(e){I.beginHosting(this);var t=i(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"_stampTemplate",this).call(this,e);I.endHosting(this);var n=this._bindTemplate(e,!0);if(n.nodeList=t.nodeList,!n.wasPreBound)for(var r=n.childNodes=[],o=t.firstChild;o;o=o.nextSibling)r.push(o);return t.templateInfo=n,function(e,t){var n=t.nodeList,r=t.nodeInfoList;if(r.length)for(var i=0;i<r.length;i++){var o=r[i],a=n[i],s=o.bindings;if(s)for(var l=0;l<s.length;l++){var c=s[l];b(a,c),w(a,e,c)}a.__dataHost=e}}(this,n),this.__dataReady&&l(this,n.propertyEffects,this.__data,null,!1,n.nodeList),t}},{key:"_removeBoundDom",value:function(e){var t=e.templateInfo;t.previousTemplateInfo&&(t.previousTemplateInfo.nextTemplateInfo=t.nextTemplateInfo),t.nextTemplateInfo&&(t.nextTemplateInfo.previousTemplateInfo=t.previousTemplateInfo),this.__templateInfoLast==t&&(this.__templateInfoLast=t.previousTemplateInfo),t.previousTemplateInfo=t.nextTemplateInfo=null;for(var n=t.childNodes,r=0;r<n.length;r++){var i=n[r];i.parentNode.removeChild(i)}}},{key:"PROPERTY_EFFECT_TYPES",get:function(){return n}}],[{key:"addPropertyEffect",value:function(e,t,n){this.prototype._addPropertyEffect(e,t,n)}},{key:"createPropertyObserver",value:function(e,t,n){this.prototype._createPropertyObserver(e,t,n)}},{key:"createMethodObserver",value:function(e,t){this.prototype._createMethodObserver(e,t)}},{key:"createNotifyingProperty",value:function(e){this.prototype._createNotifyingProperty(e)}},{key:"createReadOnlyProperty",value:function(e,t){this.prototype._createReadOnlyProperty(e,t)}},{key:"createReflectedProperty",value:function(e){this.prototype._createReflectedProperty(e)}},{key:"createComputedProperty",value:function(e,t,n){this.prototype._createComputedProperty(e,t,n)}},{key:"bindTemplate",value:function(e){return this.prototype._bindTemplate(e)}},{key:"_addTemplatePropertyEffect",value:function(e,t,n){(e.hostProps=e.hostProps||{})[t]=!0;var r=e.propertyEffects=e.propertyEffects||{};(r[t]=r[t]||[]).push(n)}},{key:"_parseTemplateNode",value:function(e,t,n){var r=i(v.__proto__||Object.getPrototypeOf(v),"_parseTemplateNode",this).call(this,e,t,n);if(e.nodeType===Node.TEXT_NODE){var o=this._parseBindings(e.textContent,t);o&&(e.textContent=C(o)||" ",m(this,t,n,"text","textContent",o),r=!0)}return r}},{key:"_parseTemplateNodeAttribute",value:function(e,t,n,r,o){var s=this._parseBindings(o,t);if(s){var l=r,c="property";a.test(r)?c="attribute":"$"==r[r.length-1]&&(r=r.slice(0,-1),c="attribute");var u=C(s);return u&&"attribute"==c&&e.setAttribute(r,u),"input"===e.localName&&"value"===l&&e.setAttribute(l,""),e.removeAttribute(l),"property"===c&&(r=Polymer.CaseMap.dashToCamelCase(r)),m(this,t,n,c,r,s,u),!0}return i(v.__proto__||Object.getPrototypeOf(v),"_parseTemplateNodeAttribute",this).call(this,e,t,n,r,o)}},{key:"_parseTemplateNestedTemplate",value:function(e,t,n){var r=i(v.__proto__||Object.getPrototypeOf(v),"_parseTemplateNestedTemplate",this).call(this,e,t,n),o=n.templateInfo.hostProps;for(var a in o){m(this,t,n,"property","_host_"+a,[{mode:"{",source:a,dependencies:[a]}])}return r}},{key:"_parseBindings",value:function(e,t){for(var n=[],r=0,i=void 0;null!==(i=O.exec(e));){i.index>r&&n.push({literal:e.slice(r,i.index)});var o=i[1][0],a=Boolean(i[2]),s=i[3].trim(),l=!1,c="",u=-1;"{"==o&&(u=s.indexOf("::"))>0&&(c=s.substring(u+2),s=s.substring(0,u),l=!0);var p=T(s),h=[];if(p){for(var d=p.args,f=p.methodName,y=0;y<d.length;y++){var _=d[y];_.literal||h.push(_)}var m=t.dynamicFns;(m&&m[f]||p.static)&&(h.push(f),p.dynamicFn=!0)}else h.push(s);n.push({source:s,mode:o,negate:a,customEvent:l,signature:p,dependencies:h,event:c}),r=O.lastIndex}if(r&&r<e.length){var v=e.substring(r);v&&n.push({literal:v})}return n.length?n:null}},{key:"_evaluateBinding",value:function(e,t,n,r,i,o){var a=void 0;return a=t.signature?k(e,n,r,0,t.signature):n!=t.source?Polymer.Path.get(e,t.source):o&&Polymer.Path.isPath(n)?Polymer.Path.get(e,n):e.__data[n],t.negate&&(a=!a),a}}]),v}();return v,v});var I={stack:[],registerHost:function(e){this.stack.length&&this.stack[this.stack.length-1]._enqueueClient(e)},beginHosting:function(e){this.stack.push(e)},endHosting:function(e){var t=this.stack.length;t&&this.stack[t-1]==e&&this.stack.pop()}}}()},function(e,t,n){"use strict";n(0),function(){var e={"U+0008":"backspace","U+0009":"tab","U+001B":"esc","U+0020":"space","U+007F":"del"},t={8:"backspace",9:"tab",13:"enter",27:"esc",33:"pageup",34:"pagedown",35:"end",36:"home",32:"space",37:"left",38:"up",39:"right",40:"down",46:"del",106:"*"},n={shift:"shiftKey",ctrl:"ctrlKey",alt:"altKey",meta:"metaKey"},r=/[a-z0-9*]/,i=/U\+/,o=/^arrow/,a=/^space(bar)?/,s=/^escape$/;function l(e,t){var n="";if(e){var i=e.toLowerCase();" "===i||a.test(i)?n="space":s.test(i)?n="esc":1==i.length?t&&!r.test(i)||(n=i):n=o.test(i)?i.replace("arrow",""):"multiply"==i?"*":i}return n}function c(n,r){return n.key?l(n.key,r):n.detail&&n.detail.key?l(n.detail.key,r):(o=n.keyIdentifier,a="",o&&(o in e?a=e[o]:i.test(o)?(o=parseInt(o.replace("U+","0x"),16),a=String.fromCharCode(o).toLowerCase()):a=o.toLowerCase()),a||function(e){var n="";return Number(e)&&(n=e>=65&&e<=90?String.fromCharCode(32+e):e>=112&&e<=123?"f"+(e-112+1):e>=48&&e<=57?String(e-48):e>=96&&e<=105?String(e-96):t[e]),n}(n.keyCode)||"");var o,a}function u(e,t){return c(t,e.hasModifiers)===e.key&&(!e.hasModifiers||!!t.shiftKey==!!e.shiftKey&&!!t.ctrlKey==!!e.ctrlKey&&!!t.altKey==!!e.altKey&&!!t.metaKey==!!e.metaKey)}function p(e){return e.trim().split(" ").map(function(e){return function(e){return 1===e.length?{combo:e,key:e,event:"keydown"}:e.split("+").reduce(function(e,t){var r=t.split(":"),i=r[0],o=r[1];return i in n?(e[n[i]]=!0,e.hasModifiers=!0):(e.key=i,e.event=o||"keydown"),e},{combo:e.split(":").shift()})}(e)})}Polymer.IronA11yKeysBehavior={properties:{keyEventTarget:{type:Object,value:function(){return this}},stopKeyboardEventPropagation:{type:Boolean,value:!1},_boundKeyHandlers:{type:Array,value:function(){return[]}},_imperativeKeyBindings:{type:Object,value:function(){return{}}}},observers:["_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)"],keyBindings:{},registered:function(){this._prepKeyBindings()},attached:function(){this._listenKeyEventListeners()},detached:function(){this._unlistenKeyEventListeners()},addOwnKeyBinding:function(e,t){this._imperativeKeyBindings[e]=t,this._prepKeyBindings(),this._resetKeyEventListeners()},removeOwnKeyBindings:function(){this._imperativeKeyBindings={},this._prepKeyBindings(),this._resetKeyEventListeners()},keyboardEventMatchesKeys:function(e,t){for(var n=p(t),r=0;r<n.length;++r)if(u(n[r],e))return!0;return!1},_collectKeyBindings:function(){var e=this.behaviors.map(function(e){return e.keyBindings});return-1===e.indexOf(this.keyBindings)&&e.push(this.keyBindings),e},_prepKeyBindings:function(){for(var e in this._keyBindings={},this._collectKeyBindings().forEach(function(e){for(var t in e)this._addKeyBinding(t,e[t])},this),this._imperativeKeyBindings)this._addKeyBinding(e,this._imperativeKeyBindings[e]);for(var t in this._keyBindings)this._keyBindings[t].sort(function(e,t){var n=e[0].hasModifiers;return n===t[0].hasModifiers?0:n?-1:1})},_addKeyBinding:function(e,t){p(e).forEach(function(e){this._keyBindings[e.event]=this._keyBindings[e.event]||[],this._keyBindings[e.event].push([e,t])},this)},_resetKeyEventListeners:function(){this._unlistenKeyEventListeners(),this.isAttached&&this._listenKeyEventListeners()},_listenKeyEventListeners:function(){this.keyEventTarget&&Object.keys(this._keyBindings).forEach(function(e){var t=this._keyBindings[e],n=this._onKeyBindingEvent.bind(this,t);this._boundKeyHandlers.push([this.keyEventTarget,e,n]),this.keyEventTarget.addEventListener(e,n)},this)},_unlistenKeyEventListeners:function(){for(var e,t,n,r;this._boundKeyHandlers.length;)t=(e=this._boundKeyHandlers.pop())[0],n=e[1],r=e[2],t.removeEventListener(n,r)},_onKeyBindingEvent:function(e,t){if(this.stopKeyboardEventPropagation&&t.stopPropagation(),!t.defaultPrevented)for(var n=0;n<e.length;n++){var r=e[n][0],i=e[n][1];if(u(r,t)&&(this._triggerKeyHandler(r,i,t),t.defaultPrevented))return}},_triggerKeyHandler:function(e,t,n){var r=Object.create(e);r.keyboardEvent=n;var i=new CustomEvent(e.event,{detail:r,cancelable:!0});this[t].call(this,i),i.defaultPrevented&&n.preventDefault()}}}()},function(e,t,n){"use strict";n(0),n(15),n(40),Polymer.IronButtonStateImpl={properties:{pressed:{type:Boolean,readOnly:!0,value:!1,reflectToAttribute:!0,observer:"_pressedChanged"},toggles:{type:Boolean,value:!1,reflectToAttribute:!0},active:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},pointerDown:{type:Boolean,readOnly:!0,value:!1},receivedFocusFromKeyboard:{type:Boolean,readOnly:!0},ariaActiveAttribute:{type:String,value:"aria-pressed",observer:"_ariaActiveAttributeChanged"}},listeners:{down:"_downHandler",up:"_upHandler",tap:"_tapHandler"},observers:["_focusChanged(focused)","_activeChanged(active, ariaActiveAttribute)"],keyBindings:{"enter:keydown":"_asyncClick","space:keydown":"_spaceKeyDownHandler","space:keyup":"_spaceKeyUpHandler"},_mouseEventRe:/^mouse/,_tapHandler:function(){this.toggles?this._userActivate(!this.active):this.active=!1},_focusChanged:function(e){this._detectKeyboardFocus(e),e||this._setPressed(!1)},_detectKeyboardFocus:function(e){this._setReceivedFocusFromKeyboard(!this.pointerDown&&e)},_userActivate:function(e){this.active!==e&&(this.active=e,this.fire("change"))},_downHandler:function(e){this._setPointerDown(!0),this._setPressed(!0),this._setReceivedFocusFromKeyboard(!1)},_upHandler:function(){this._setPointerDown(!1),this._setPressed(!1)},_spaceKeyDownHandler:function(e){var t=e.detail.keyboardEvent,n=Polymer.dom(t).localTarget;this.isLightDescendant(n)||(t.preventDefault(),t.stopImmediatePropagation(),this._setPressed(!0))},_spaceKeyUpHandler:function(e){var t=e.detail.keyboardEvent,n=Polymer.dom(t).localTarget;this.isLightDescendant(n)||(this.pressed&&this._asyncClick(),this._setPressed(!1))},_asyncClick:function(){this.async(function(){this.click()},1)},_pressedChanged:function(e){this._changedButtonState()},_ariaActiveAttributeChanged:function(e,t){t&&t!=e&&this.hasAttribute(t)&&this.removeAttribute(t)},_activeChanged:function(e,t){this.toggles?this.setAttribute(this.ariaActiveAttribute,e?"true":"false"):this.removeAttribute(this.ariaActiveAttribute),this._changedButtonState()},_controlStateChanged:function(){this.disabled?this._setPressed(!1):this._changedButtonState()},_changedButtonState:function(){this._buttonStateChanged&&this._buttonStateChanged()}},Polymer.IronButtonState=[Polymer.IronA11yKeysBehavior,Polymer.IronButtonStateImpl]},function(e,t,n){"use strict";n(0),function(){Polymer.IronMeta=function(e){Polymer.IronMeta[" "](e),this.type=e&&e.type||"default",this.key=e&&e.key,e&&"value"in e&&(this.value=e.value)},Polymer.IronMeta[" "]=function(){},Polymer.IronMeta.types={},Polymer.IronMeta.prototype={get value(){var e=this.type,t=this.key;if(e&&t)return Polymer.IronMeta.types[e]&&Polymer.IronMeta.types[e][t]},set value(e){var t=this.type,n=this.key;t&&n&&(t=Polymer.IronMeta.types[t]=Polymer.IronMeta.types[t]||{},null==e?delete t[n]:t[n]=e)},get list(){if(this.type){var t=Polymer.IronMeta.types[this.type];return t?Object.keys(t).map(function(t){return e[this.type][t]},this):[]}},byKey:function(e){return this.key=e,this.value}};var e=Polymer.IronMeta.types;Polymer({is:"iron-meta",properties:{type:{type:String,value:"default"},key:{type:String},value:{type:String,notify:!0},self:{type:Boolean,observer:"_selfChanged"},__meta:{type:Boolean,computed:"__computeMeta(type, key, value)"}},hostAttributes:{hidden:!0},__computeMeta:function(e,t,n){var r=new Polymer.IronMeta({type:e,key:t});return void 0!==n&&n!==r.value?r.value=n:this.value!==r.value&&(this.value=r.value),r},get list(){return this.__meta&&this.__meta.list},_selfChanged:function(e){e&&(this.value=this)},byKey:function(e){return new Polymer.IronMeta({type:this.type,key:e}).value}})}()},function(e,t,n){"use strict";n(0),n(46),Polymer.IronSelectableBehavior={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:"tap",observer:"_activateEventChanged"},selectable:String,selectedClass:{type:String,value:"iron-selected"},selectedAttribute:{type:String,value:null},fallbackSelection:{type:String,value:null},items:{type:Array,readOnly:!0,notify:!0,value:function(){return[]}},_excludedLocalNames:{type:Object,value:function(){return{template:1,"dom-bind":1,"dom-if":1,"dom-repeat":1}}}},observers:["_updateAttrForSelected(attrForSelected)","_updateSelected(selected)","_checkFallback(fallbackSelection)"],created:function(){this._bindFilterItem=this._filterItem.bind(this),this._selection=new Polymer.IronSelection(this._applySelection.bind(this))},attached:function(){this._observer=this._observeItems(this),this._addListener(this.activateEvent)},detached:function(){this._observer&&Polymer.dom(this).unobserveNodes(this._observer),this._removeListener(this.activateEvent)},indexOf:function(e){return this.items?this.items.indexOf(e):-1},select:function(e){this.selected=e},selectPrevious:function(){var e=this.items.length,t=(Number(this._valueToIndex(this.selected))-1+e)%e;this.selected=this._indexToValue(t)},selectNext:function(){var e=(Number(this._valueToIndex(this.selected))+1)%this.items.length;this.selected=this._indexToValue(e)},selectIndex:function(e){this.select(this._indexToValue(e))},forceSynchronousItemUpdate:function(){this._observer&&"function"==typeof this._observer.flush?this._observer.flush():this._updateItems()},get _shouldUpdateSelection(){return null!=this.selected},_checkFallback:function(){this._updateSelected()},_addListener:function(e){this.listen(this,e,"_activateHandler")},_removeListener:function(e){this.unlisten(this,e,"_activateHandler")},_activateEventChanged:function(e,t){this._removeListener(t),this._addListener(e)},_updateItems:function(){var e=Polymer.dom(this).queryDistributedElements(this.selectable||"*");e=Array.prototype.filter.call(e,this._bindFilterItem),this._setItems(e)},_updateAttrForSelected:function(){this.selectedItem&&(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(e){if(this.items){var t=this._valueToItem(this.selected);t?this._selection.select(t):this._selection.clear(),this.fallbackSelection&&this.items.length&&void 0===this._selection.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(e){return!this._excludedLocalNames[e.localName]},_valueToItem:function(e){return null==e?null:this.items[this._valueToIndex(e)]},_valueToIndex:function(e){if(!this.attrForSelected)return Number(e);for(var t,n=0;t=this.items[n];n++)if(this._valueForItem(t)==e)return n},_indexToValue:function(e){if(!this.attrForSelected)return e;var t=this.items[e];return t?this._valueForItem(t):void 0},_valueForItem:function(e){if(!e)return null;if(!this.attrForSelected){var t=this.indexOf(e);return-1===t?null:t}var n=e[Polymer.CaseMap.dashToCamelCase(this.attrForSelected)];return void 0!=n?n:e.getAttribute(this.attrForSelected)},_applySelection:function(e,t){this.selectedClass&&this.toggleClass(this.selectedClass,t,e),this.selectedAttribute&&this.toggleAttribute(this.selectedAttribute,t,e),this._selectionChange(),this.fire("iron-"+(t?"select":"deselect"),{item:e})},_selectionChange:function(){this._setSelectedItem(this._selection.get())},_observeItems:function(e){return Polymer.dom(e).observeNodes(function(e){this._updateItems(),this._updateSelected(),this.fire("iron-items-changed",e,{bubbles:!1,cancelable:!1})})},_activateHandler:function(e){for(var t=e.target,n=this.items;t&&t!=this;){var r=n.indexOf(t);if(r>=0){var i=this._indexToValue(r);return void this._itemActivate(i,t)}t=t.parentNode}},_itemActivate:function(e,t){this.fire("iron-activate",{selected:e,item:t},{cancelable:!0}).defaultPrevented||this.select(e)}}},function(e,t,n){"use strict";n(4),Polymer.AppLayout.registerEffect("parallax-background",{setUp:function(e){var t={},n=parseFloat(e.scalar);t.background=this._getDOMRef("background"),t.backgroundFrontLayer=this._getDOMRef("backgroundFrontLayer"),t.backgroundRearLayer=this._getDOMRef("backgroundRearLayer"),t.deltaBg=t.backgroundFrontLayer.offsetHeight-t.background.offsetHeight,0===t.deltaBg?(isNaN(n)&&(n=.8),t.deltaBg=(this._dHeight||0)*n):(isNaN(n)&&(n=1),t.deltaBg=t.deltaBg*n),this._fxParallaxBackground=t},run:function(e,t){var n=this._fxParallaxBackground;this.transform("translate3d(0px, "+n.deltaBg*Math.min(1,e)+"px, 0px)",n.backgroundFrontLayer),n.backgroundRearLayer&&this.transform("translate3d(0px, "+n.deltaBg*Math.min(1,e)+"px, 0px)",n.backgroundRearLayer)},tearDown:function(){delete this._fxParallaxBackground}})},function(e,t,n){"use strict";n(4),function(){Polymer.AppLayout.registerEffect("resize-title",{setUp:function(){var e=this._getDOMRef("mainTitle"),t=this._getDOMRef("condensedTitle");if(!t)return console.warn("Scroll effect `resize-title`: undefined `condensed-title`"),!1;if(!e)return console.warn("Scroll effect `resize-title`: undefined `main-title`"),!1;t.style.willChange="opacity",t.style.webkitTransform="translateZ(0)",t.style.transform="translateZ(0)",t.style.webkitTransformOrigin="left top",t.style.transformOrigin="left top",e.style.willChange="opacity",e.style.webkitTransformOrigin="left top",e.style.transformOrigin="left top",e.style.webkitTransform="translateZ(0)",e.style.transform="translateZ(0)";var n=e.getBoundingClientRect(),r=t.getBoundingClientRect(),i={};i.scale=parseInt(window.getComputedStyle(t)["font-size"],10)/parseInt(window.getComputedStyle(e)["font-size"],10),i.titleDX=n.left-r.left,i.titleDY=n.top-r.top,i.condensedTitle=t,i.title=e,this._fxResizeTitle=i},run:function(e,t){var n,r,i=this._fxResizeTitle;this.condenses||(t=0),e>=1?(i.title.style.opacity=0,i.condensedTitle.style.opacity=1):(i.title.style.opacity=1,i.condensedTitle.style.opacity=0),n=Math.min(1,e),r=[[1,i.scale],[0,-i.titleDX],[t,t-i.titleDY]],function(e,t,n){this.transform("translate("+t+"px, "+n+"px) scale3d("+e+", "+e+", 1)",i.title)}.apply(this,r.map(function(e){return e[0]+(e[1]-e[0])*n}))},tearDown:function(){delete this._fxResizeTitle}})}()},function(e,t,n){"use strict";n(4),Polymer.AppLayout.registerEffect("waterfall",{run:function(){this.shadow=this.isOnScreen()&&this.isContentBelow()}})},function(e,t,n){"use strict";n(4),Polymer.AppLayout.registerEffect("blend-background",{setUp:function(){var e={};e.backgroundFrontLayer=this._getDOMRef("backgroundFrontLayer"),e.backgroundRearLayer=this._getDOMRef("backgroundRearLayer"),e.backgroundFrontLayer.style.willChange="opacity",e.backgroundFrontLayer.style.transform="translateZ(0)",e.backgroundRearLayer.style.willChange="opacity",e.backgroundRearLayer.style.transform="translateZ(0)",e.backgroundRearLayer.style.opacity=0,this._fxBlendBackground=e},run:function(e,t){var n=this._fxBlendBackground;n.backgroundFrontLayer.style.opacity=1-e,n.backgroundRearLayer.style.opacity=e},tearDown:function(){delete this._fxBlendBackground}})},function(e,t,n){"use strict";n(0),Polymer.IronResizableBehavior={properties:{_parentResizable:{type:Object,observer:"_parentResizableChanged"},_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){this._interestedResizables=[],this._boundNotifyResize=this.notifyResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){this._parentResizable?this._parentResizable.stopResizeNotificationsFor(this):window.removeEventListener("resize",this._boundNotifyResize),this._parentResizable=null},notifyResize:function(){this.isAttached&&(this._interestedResizables.forEach(function(e){this.resizerShouldNotify(e)&&this._notifyDescendant(e)},this),this._fireResize())},assignParentResizable:function(e){this._parentResizable=e},stopResizeNotificationsFor:function(e){var t=this._interestedResizables.indexOf(e);t>-1&&(this._interestedResizables.splice(t,1),this.unlisten(e,"iron-resize","_onDescendantIronResize"))},resizerShouldNotify:function(e){return!0},_onDescendantIronResize:function(e){this._notifyingDescendant?e.stopPropagation():Polymer.Settings.useShadow||this._fireResize()},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(e){var t=Polymer.dom(e).rootTarget;t!==this&&(-1===this._interestedResizables.indexOf(t)&&(this._interestedResizables.push(t),this.listen(t,"iron-resize","_onDescendantIronResize")),t.assignParentResizable(this),this._notifyDescendant(t),e.stopPropagation())},_parentResizableChanged:function(e){e&&window.removeEventListener("resize",this._boundNotifyResize)},_notifyDescendant:function(e){this.isAttached&&(this._notifyingDescendant=!0,e.notifyResize(),this._notifyingDescendant=!1)},_requestResizeNotifications:function(){if(this.isAttached)if("loading"===document.readyState){var e=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",function t(){document.removeEventListener("readystatechange",t),e()})}else this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0}),this._parentResizable||(window.addEventListener("resize",this._boundNotifyResize),this.notifyResize())}}},function(e,t,n){"use strict";n(1),function(){function e(e,t,n){return{index:e,removed:t,addedCount:n}}var t=0,n=1,r=2,i=3;function o(o,s,l,c,u,p){var h=0,d=0,f=void 0,y=Math.min(l-s,p-u);if(0==s&&0==u&&(h=function(e,t,n){for(var r=0;r<n;r++)if(!a(e[r],t[r]))return r;return n}(o,c,y)),l==o.length&&p==c.length&&(d=function(e,t,n){var r=e.length,i=t.length,o=0;for(;o<n&&a(e[--r],t[--i]);)o++;return o}(o,c,y-h)),u+=h,p-=d,(l-=d)-(s+=h)==0&&p-u==0)return[];if(s==l){for(f=e(s,[],0);u<p;)f.removed.push(c[u++]);return[f]}if(u==p)return[e(s,[],l-s)];var _=function(e){for(var o=e.length-1,a=e[0].length-1,s=e[o][a],l=[];o>0||a>0;)if(0!=o)if(0!=a){var c=e[o-1][a-1],u=e[o-1][a],p=e[o][a-1],h=void 0;(h=u<p?u<c?u:c:p<c?p:c)==c?(c==s?l.push(t):(l.push(n),s=c),o--,a--):h==u?(l.push(i),o--,s=u):(l.push(r),a--,s=p)}else l.push(i),o--;else l.push(r),a--;return l.reverse(),l}(function(e,t,n,r,i,o){for(var s=o-i+1,l=n-t+1,c=new Array(s),u=0;u<s;u++)c[u]=new Array(l),c[u][0]=u;for(var p=0;p<l;p++)c[0][p]=p;for(var h=1;h<s;h++)for(var d=1;d<l;d++)if(a(e[t+d-1],r[i+h-1]))c[h][d]=c[h-1][d-1];else{var f=c[h-1][d]+1,y=c[h][d-1]+1;c[h][d]=f<y?f:y}return c}(o,s,l,c,u,p));f=void 0;for(var m=[],v=s,g=u,b=0;b<_.length;b++)switch(_[b]){case t:f&&(m.push(f),f=void 0),v++,g++;break;case n:f||(f=e(v,[],0)),f.addedCount++,v++,f.removed.push(c[g]),g++;break;case r:f||(f=e(v,[],0)),f.addedCount++,v++;break;case i:f||(f=e(v,[],0)),f.removed.push(c[g]),g++}return f&&m.push(f),m}function a(e,t){return e===t}Polymer.ArraySplice={calculateSplices:function(e,t){return o(e,0,e.length,t,0,t.length)}}}()},function(e,t,n){"use strict";var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(1),n(3),n(76),r=Polymer.Gestures,Polymer.GestureEventListeners=Polymer.dedupingMixin(function(e){return function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,e),i(n,[{key:"_addEventListenerToNode",value:function(e,t,i){r.addListener(e,t,i)||o(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"_addEventListenerToNode",this).call(this,e,t,i)}},{key:"_removeEventListenerFromNode",value:function(e,t,i){r.removeListener(e,t,i)||o(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"_removeEventListenerFromNode",this).call(this,e,t,i)}}]),n}()})},function(e,t,n){"use strict";var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(78),n(33),n(25),n(75),n(3),n(74),n(73),n(72),n(71),r=window.ShadyCSS,Polymer.LegacyElementMixin=Polymer.dedupingMixin(function(e){var t=Polymer.DirMixin(Polymer.GestureEventListeners(Polymer.ElementMixin(e))),n={x:"pan-x",y:"pan-y",none:"none",all:"auto"},a=function(e){function a(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this));return e.isAttached,e.__boundListeners,e._debouncers,e._applyListeners(),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,t),i(a,[{key:"created",value:function(){}},{key:"connectedCallback",value:function(){o(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"connectedCallback",this).call(this),this.isAttached=!0,this.attached()}},{key:"attached",value:function(){}},{key:"disconnectedCallback",value:function(){o(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"disconnectedCallback",this).call(this),this.isAttached=!1,this.detached()}},{key:"detached",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,n){t!==n&&(o(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"attributeChangedCallback",this).call(this,e,t,n),this.attributeChanged(e,t,n))}},{key:"attributeChanged",value:function(e,t,n){}},{key:"_initializeProperties",value:function(){var e=Object.getPrototypeOf(this);e.hasOwnProperty("__hasRegisterFinished")||(e.__hasRegisterFinished=!0,this._registered()),o(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"_initializeProperties",this).call(this),this.root=this,this.created()}},{key:"_registered",value:function(){}},{key:"ready",value:function(){this._ensureAttributes(),o(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"ready",this).call(this)}},{key:"_ensureAttributes",value:function(){}},{key:"_applyListeners",value:function(){}},{key:"serialize",value:function(e){return this._serializeValue(e)}},{key:"deserialize",value:function(e,t){return this._deserializeValue(e,t)}},{key:"reflectPropertyToAttribute",value:function(e,t,n){this._propertyToAttribute(e,t,n)}},{key:"serializeValueToAttribute",value:function(e,t,n){this._valueToNodeAttribute(n||this,e,t)}},{key:"extend",value:function(e,t){if(!e||!t)return e||t;for(var n,r=Object.getOwnPropertyNames(t),i=0;i<r.length&&(n=r[i]);i++){var o=Object.getOwnPropertyDescriptor(t,n);o&&Object.defineProperty(e,n,o)}return e}},{key:"mixin",value:function(e,t){for(var n in t)e[n]=t[n];return e}},{key:"chainObject",value:function(e,t){return e&&t&&e!==t&&(e.__proto__=t),e}},{key:"instanceTemplate",value:function(e){var t=this.constructor._contentForTemplate(e);return document.importNode(t,!0)}},{key:"fire",value:function(e,t,n){n=n||{},t=null===t||void 0===t?{}:t;var r=new Event(e,{bubbles:void 0===n.bubbles||n.bubbles,cancelable:Boolean(n.cancelable),composed:void 0===n.composed||n.composed});return r.detail=t,(n.node||this).dispatchEvent(r),r}},{key:"listen",value:function(e,t,n){e=e||this;var r=this.__boundListeners||(this.__boundListeners=new WeakMap),i=r.get(e);i||(i={},r.set(e,i));var o=t+n;i[o]||(i[o]=this._addMethodEventListenerToNode(e,t,n,this))}},{key:"unlisten",value:function(e,t,n){e=e||this;var r=this.__boundListeners&&this.__boundListeners.get(e),i=t+n,o=r&&r[i];o&&(this._removeEventListenerFromNode(e,t,o),r[i]=null)}},{key:"setScrollDirection",value:function(e,t){Polymer.Gestures.setTouchAction(t||this,n[e]||"auto")}},{key:"$$",value:function(e){return this.root.querySelector(e)}},{key:"distributeContent",value:function(){window.ShadyDOM&&this.shadowRoot&&ShadyDOM.flush()}},{key:"getEffectiveChildNodes",value:function(){return Polymer.dom(this).getEffectiveChildNodes()}},{key:"queryDistributedElements",value:function(e){return Polymer.dom(this).queryDistributedElements(e)}},{key:"getEffectiveChildren",value:function(){return this.getEffectiveChildNodes().filter(function(e){return e.nodeType===Node.ELEMENT_NODE})}},{key:"getEffectiveTextContent",value:function(){for(var e,t=this.getEffectiveChildNodes(),n=[],r=0;e=t[r];r++)e.nodeType!==Node.COMMENT_NODE&&n.push(e.textContent);return n.join("")}},{key:"queryEffectiveChildren",value:function(e){var t=this.queryDistributedElements(e);return t&&t[0]}},{key:"queryAllEffectiveChildren",value:function(e){return this.queryDistributedElements(e)}},{key:"getContentChildNodes",value:function(e){var t=this.root.querySelector(e||"slot");return t?Polymer.dom(t).getDistributedNodes():[]}},{key:"getContentChildren",value:function(e){return this.getContentChildNodes(e).filter(function(e){return e.nodeType===Node.ELEMENT_NODE})}},{key:"isLightDescendant",value:function(e){return this!==e&&this.contains(e)&&this.getRootNode()===e.getRootNode()}},{key:"isLocalDescendant",value:function(e){return this.root===e.getRootNode()}},{key:"scopeSubtree",value:function(e,t){}},{key:"getComputedStyleValue",value:function(e){return r.getComputedStyleValue(this,e)}},{key:"debounce",value:function(e,t,n){return this._debouncers=this._debouncers||{},this._debouncers[e]=Polymer.Debouncer.debounce(this._debouncers[e],n>0?Polymer.Async.timeOut.after(n):Polymer.Async.microTask,t.bind(this))}},{key:"isDebouncerActive",value:function(e){this._debouncers=this._debouncers||{};var t=this._debouncers[e];return!(!t||!t.isActive())}},{key:"flushDebouncer",value:function(e){this._debouncers=this._debouncers||{};var t=this._debouncers[e];t&&t.flush()}},{key:"cancelDebouncer",value:function(e){this._debouncers=this._debouncers||{};var t=this._debouncers[e];t&&t.cancel()}},{key:"async",value:function(e,t){return t>0?Polymer.Async.timeOut.run(e.bind(this),t):~Polymer.Async.microTask.run(e.bind(this))}},{key:"cancelAsync",value:function(e){e<0?Polymer.Async.microTask.cancel(~e):Polymer.Async.timeOut.cancel(e)}},{key:"create",value:function(e,t){var n=document.createElement(e);if(t)if(n.setProperties)n.setProperties(t);else for(var r in t)n[r]=t[r];return n}},{key:"importHref",value:function(e,t,n,r){var i=t?t.bind(this):null,o=n?n.bind(this):null;return Polymer.importHref(e,i,o,r)}},{key:"elementMatches",value:function(e,t){return Polymer.dom.matchesSelector(t||this,e)}},{key:"toggleAttribute",value:function(e,t,n){n=n||this,1==arguments.length&&(t=!n.hasAttribute(e)),t?n.setAttribute(e,""):n.removeAttribute(e)}},{key:"toggleClass",value:function(e,t,n){n=n||this,1==arguments.length&&(t=!n.classList.contains(e)),t?n.classList.add(e):n.classList.remove(e)}},{key:"transform",value:function(e,t){(t=t||this).style.webkitTransform=e,t.style.transform=e}},{key:"translate3d",value:function(e,t,n,r){r=r||this,this.transform("translate3d("+e+","+t+","+n+")",r)}},{key:"arrayDelete",value:function(e,t){var n=void 0;if(Array.isArray(e)){if((n=e.indexOf(t))>=0)return e.splice(n,1)}else if((n=Polymer.Path.get(this,e).indexOf(t))>=0)return this.splice(e,n,1);return null}},{key:"_logger",value:function(e,t){var n;switch(Array.isArray(t)&&1===t.length&&Array.isArray(t[0])&&(t=t[0]),e){case"log":case"warn":case"error":(n=console)[e].apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t))}}},{key:"_log",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];this._logger("log",t)}},{key:"_warn",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];this._logger("warn",t)}},{key:"_error",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];this._logger("error",t)}},{key:"_logf",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return["[%s::%s]",this.is,e].concat(n)}},{key:"domHost",get:function(){var e=this.getRootNode();return e instanceof DocumentFragment?e.host:e}}]),a}();return a.prototype.is="",a})},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),function(){var e=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=t.toString()}return r(e,[{key:"toString",value:function(){return this.value}}]),e}();function t(t){if(t instanceof e)return t.value;throw new Error("non-literal value passed to Polymer.htmlLiteral: "+t)}Polymer.html=function(n){for(var r=document.createElement("template"),i=arguments.length,o=Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];return r.innerHTML=o.reduce(function(r,i,o){return r+function(n){if(n instanceof HTMLTemplateElement)return n.innerHTML;if(n instanceof e)return t(n);throw new Error("non-template value passed to Polymer.html: "+n)}(i)+n[o+1]},n[0]),r},Polymer.htmlLiteral=function(n){for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return new e(i.reduce(function(e,r,i){return e+t(r)+n[i+1]},n[0]))}}()},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(3),n(8),r=Polymer.Async.microTask,Polymer.PropertiesChanged=Polymer.dedupingMixin(function(e){return function(t){function n(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.__dataEnabled=!1,e.__dataReady=!1,e.__dataInvalid=!1,e.__data={},e.__dataPending=null,e.__dataOld=null,e.__dataInstanceProps=null,e.__serializing=!1,e._initializeProperties(),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,e),a(n,[{key:"_createPropertyAccessor",value:function(e,t){this._addPropertyToAttributeMap(e),this.hasOwnProperty("__dataHasAccessor")||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[e]||(this.__dataHasAccessor[e]=!0,this._definePropertyAccessor(e,t))}},{key:"_addPropertyToAttributeMap",value:function(e){if(this.hasOwnProperty("__dataAttributes")||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[e]){var t=this.constructor.attributeNameForProperty(e);this.__dataAttributes[t]=e}}},{key:"_definePropertyAccessor",value:function(e,t){Object.defineProperty(this,e,{get:function(){return this._getProperty(e)},set:t?function(){}:function(t){this._setProperty(e,t)}})}}],[{key:"createProperties",value:function(e){var t=this.prototype;for(var n in e)n in t||t._createPropertyAccessor(n)}},{key:"attributeNameForProperty",value:function(e){return e.toLowerCase()}},{key:"typeForProperty",value:function(e){}}]),a(n,[{key:"ready",value:function(){this.__dataReady=!0,this._flushProperties()}},{key:"_initializeProperties",value:function(){for(var e in this.__dataHasAccessor)this.hasOwnProperty(e)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[e]=this[e],delete this[e])}},{key:"_initializeInstanceProperties",value:function(e){Object.assign(this,e)}},{key:"_setProperty",value:function(e,t){this._setPendingProperty(e,t)&&this._invalidateProperties()}},{key:"_getProperty",value:function(e){return this.__data[e]}},{key:"_setPendingProperty",value:function(e,t,n){var r=this.__data[e],i=this._shouldPropertyChange(e,t,r);return i&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),!this.__dataOld||e in this.__dataOld||(this.__dataOld[e]=r),this.__data[e]=t,this.__dataPending[e]=t),i}},{key:"_invalidateProperties",value:function(){var e=this;!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,r.run(function(){e.__dataInvalid&&(e.__dataInvalid=!1,e._flushProperties())}))}},{key:"_enableProperties",value:function(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}},{key:"_flushProperties",value:function(){var e=this.__data,t=this.__dataPending,n=this.__dataOld;this._shouldPropertiesChange(e,t,n)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(e,t,n))}},{key:"_shouldPropertiesChange",value:function(e,t,n){return Boolean(t)}},{key:"_propertiesChanged",value:function(e,t,n){}},{key:"_shouldPropertyChange",value:function(e,t,n){return n!==t&&(n==n||t==t)}},{key:"attributeChangedCallback",value:function(e,t,r){t!==r&&this._attributeToProperty(e,r),o(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"attributeChangedCallback",this)&&o(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"attributeChangedCallback",this).call(this,e,t,r)}},{key:"_attributeToProperty",value:function(e,t,n){if(!this.__serializing){var r=this.__dataAttributes,i=r&&r[e]||e;this[i]=this._deserializeValue(t,n||this.constructor.typeForProperty(i))}}},{key:"_propertyToAttribute",value:function(e,t,n){this.__serializing=!0,n=arguments.length<3?this[e]:n,this._valueToNodeAttribute(this,n,t||this.constructor.attributeNameForProperty(e)),this.__serializing=!1}},{key:"_valueToNodeAttribute",value:function(e,t,n){var r=this._serializeValue(t);void 0===r?e.removeAttribute(n):e.setAttribute(n,r)}},{key:"_serializeValue",value:function(e){switch(void 0===e?"undefined":i(e)){case"boolean":return e?"":void 0;default:return null!=e?e.toString():void 0}}},{key:"_deserializeValue",value:function(e,t){switch(t){case Boolean:return null!==e;case Number:return Number(e);default:return e}}}]),n}()})},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(1),n(3),n(30),n(28),function(){for(var e=Polymer.CaseMap,t={},n=HTMLElement.prototype;n;){for(var a=Object.getOwnPropertyNames(n),s=0;s<a.length;s++)t[a[s]]=!0;n=Object.getPrototypeOf(n)}Polymer.PropertyAccessors=Polymer.dedupingMixin(function(n){var a=Polymer.PropertiesChanged(n);return function(n){function s(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,a),i(s,[{key:"_initializeProperties",value:function(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),o(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"_initializeProperties",this).call(this)}},{key:"_initializeProtoProperties",value:function(e){for(var t in e)this._setProperty(t,e[t])}},{key:"_ensureAttribute",value:function(e,t){this.hasAttribute(e)||this._valueToNodeAttribute(this,t,e)}},{key:"_serializeValue",value:function(e){switch(void 0===e?"undefined":r(e)){case"object":if(e instanceof Date)return e.toString();if(e)try{return JSON.stringify(e)}catch(e){return""}default:return o(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"_serializeValue",this).call(this,e)}}},{key:"_deserializeValue",value:function(e,t){var n=void 0;switch(t){case Object:try{n=JSON.parse(e)}catch(t){n=e}break;case Array:try{n=JSON.parse(e)}catch(t){n=null,console.warn("Polymer::Attributes: couldn't decode Array as JSON: "+e)}break;case Date:n=isNaN(e)?String(e):Number(e),n=new Date(n);break;default:n=o(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"_deserializeValue",this).call(this,e,t)}return n}},{key:"_definePropertyAccessor",value:function(e,n){!function(e,n){if(!t[n]){var r=e[n];void 0!==r&&(e.__data?e._setPendingProperty(n,r):(e.__dataProto?e.hasOwnProperty(JSCompiler_renameProperty("__dataProto",e))||(e.__dataProto=Object.create(e.__dataProto)):e.__dataProto={},e.__dataProto[n]=r))}}(this,e),o(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"_definePropertyAccessor",this).call(this,e,n)}},{key:"_hasAccessor",value:function(e){return this.__dataHasAccessor&&this.__dataHasAccessor[e]}},{key:"_isPropertyPending",value:function(e){return Boolean(this.__dataPending&&e in this.__dataPending)}}],[{key:"createPropertiesForAttributes",value:function(){for(var t=this.observedAttributes,n=0;n<t.length;n++)this.prototype._createPropertyAccessor(e.dashToCamelCase(t[n]))}},{key:"attributeNameForProperty",value:function(t){return e.camelToDashCase(t)}}]),s}()})}()},function(e,t,n){"use strict";var r,i,o,a;n(1),r={},i=/-[a-z]/g,o=/([A-Z])/g,a={dashToCamelCase:function(e){return r[e]||(r[e]=e.indexOf("-")<0?e:e.replace(i,function(e){return e[1].toUpperCase()}))},camelToDashCase:function(e){return r[e]||(r[e]=e.replace(o,"-$1").toLowerCase())}},Polymer.CaseMap=a},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n(9),function(){function e(e){var t=customElements.get("dom-module");return t?t.import(e):null}function t(e){var t=e.body?e.body:e,n=Polymer.ResolveUrl.resolveCss(t.textContent,e.baseURI),r=document.createElement("style");return r.textContent=n,r}var n={stylesFromModules:function(e){for(var t=e.trim().split(/\s+/),n=[],i=0;i<t.length;i++)n.push.apply(n,r(this.stylesFromModule(t[i])));return n},stylesFromModule:function(t){var n=e(t);if(!n)return console.warn("Could not find style data in module named",t),[];if(void 0===n._styles){var i=[];i.push.apply(i,r(this._stylesFromModuleImports(n)));var o=n.querySelector("template");o&&i.push.apply(i,r(this.stylesFromTemplate(o,n.assetpath))),n._styles=i}return n._styles},stylesFromTemplate:function(e,t){if(!e._styles){for(var n=[],i=e.content.querySelectorAll("style"),o=0;o<i.length;o++){var a=i[o],s=a.getAttribute("include");s&&n.push.apply(n,r(this.stylesFromModules(s).filter(function(e,t,n){return n.indexOf(e)===t}))),t&&(a.textContent=Polymer.ResolveUrl.resolveCss(a.textContent,t)),n.push(a)}e._styles=n}return e._styles},stylesFromModuleImports:function(t){var n=e(t);return n?this._stylesFromModuleImports(n):[]},_stylesFromModuleImports:function(e){for(var n=[],r=e.querySelectorAll("link[rel=import][type~=css]"),i=0;i<r.length;i++){var o=r[i];if(o.import){var a=o.import,s=o.hasAttribute("shady-unscoped");if(s&&!a._unscopedStyle){var l=t(a);l.setAttribute("shady-unscoped",""),a._unscopedStyle=l}else a._style||(a._style=t(a));n.push(s?a._unscopedStyle:a._style)}}return n},cssFromModules:function(e){for(var t=e.trim().split(/\s+/),n="",r=0;r<t.length;r++)n+=this.cssFromModule(t[r]);return n},cssFromModule:function(t){var n=e(t);if(n&&void 0===n._cssText){var r=this._cssFromModuleImports(n),i=n.querySelector("template");i&&(r+=this.cssFromTemplate(i,n.assetpath)),n._cssText=r||null}return n||console.warn("Could not find style data in module named",t),n&&n._cssText||""},cssFromTemplate:function(e,t){for(var n="",r=this.stylesFromTemplate(e,t),i=0;i<r.length;i++){var o=r[i];o.parentNode&&o.parentNode.removeChild(o),n+=o.textContent}return n},cssFromModuleImports:function(t){var n=e(t);return n?this._cssFromModuleImports(n):""},_cssFromModuleImports:function(e){for(var t="",n=this._stylesFromModuleImports(e),r=0;r<n.length;r++)t+=n[r].textContent;return t}};Polymer.StyleGather=n}()},function(e,t,n){"use strict";n(1),n(9),function(){Polymer.Settings=Polymer.Settings||{},Polymer.Settings.useShadow=!window.ShadyDOM,Polymer.Settings.useNativeCSSProperties=Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),Polymer.Settings.useNativeCustomElements=!window.customElements.polyfillWrapFlushCallback;var e=Polymer.rootPath||Polymer.ResolveUrl.pathFromUrl(document.baseURI||window.location.href);Polymer.rootPath=e,Polymer.setRootPath=function(e){Polymer.rootPath=e};var t=Polymer.sanitizeDOMValue;Polymer.sanitizeDOMValue=t,Polymer.setSanitizeDOMValue=function(e){Polymer.sanitizeDOMValue=e};Polymer.passiveTouchGestures=!1,Polymer.setPassiveTouchGestures=function(e){Polymer.passiveTouchGestures=e}}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(1),n(32),n(3),n(31),n(9),n(83),n(14),n(80),Polymer.ElementMixin=Polymer.dedupingMixin(function(e){var t=Polymer.PropertiesMixin(Polymer.PropertyEffects(e));return function(e){function n(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e._template,e._importPath,e.rootPath,e.importPath,e.root,e.$,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,t),r(n,null,[{key:"_finalizeClass",value:function(){i(n.__proto__||Object.getPrototypeOf(n),"_finalizeClass",this).call(this),this.hasOwnProperty(JSCompiler_renameProperty("is",this))&&this.is&&Polymer.telemetry.register(this.prototype);var e,t=((e=this).hasOwnProperty(JSCompiler_renameProperty("__ownObservers",e))||(e.__ownObservers=e.hasOwnProperty(JSCompiler_renameProperty("observers",e))?e.observers:null),e.__ownObservers);t&&this.createObservers(t,this._properties);var r=this.template;if(r)if("string"==typeof r){var o=document.createElement("template");o.innerHTML=r,r=o}else r=r.cloneNode(!0);this.prototype._template=r}},{key:"createProperties",value:function(e){for(var t in e)n=this.prototype,r=t,i=e[t],o=e,i.computed&&(i.readOnly=!0),i.computed&&!n._hasReadOnlyEffect(r)&&n._createComputedProperty(r,i.computed,o),i.readOnly&&!n._hasReadOnlyEffect(r)&&n._createReadOnlyProperty(r,!i.computed),i.reflectToAttribute&&!n._hasReflectEffect(r)&&n._createReflectedProperty(r),i.notify&&!n._hasNotifyEffect(r)&&n._createNotifyingProperty(r),i.observer&&n._createPropertyObserver(r,i.observer,o[i.observer]),n._addPropertyToAttributeMap(r);var n,r,i,o}},{key:"createObservers",value:function(e,t){for(var n=this.prototype,r=0;r<e.length;r++)n._createMethodObserver(e[r],t)}},{key:"template",get:function(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=Polymer.DomModule&&Polymer.DomModule.import(this.is,"template")||Object.getPrototypeOf(this.prototype).constructor.template),this._template}},{key:"importPath",get:function(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){var e=Polymer.DomModule&&Polymer.DomModule.import(this.is);this._importPath=e?e.assetpath:Object.getPrototypeOf(this.prototype).constructor.importPath}return this._importPath}}]),r(n,[{key:"_initializeProperties",value:function(){Polymer.telemetry.instanceCount++,this.constructor.finalize();var e=this.constructor.importPath;this.constructor._finalizeTemplate(this.localName),i(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"_initializeProperties",this).call(this),this.rootPath=Polymer.rootPath,this.importPath=e;var t=function(e){if(!e.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",e))){e.__propertyDefaults=null;var t=e._properties;for(var n in t){var r=t[n];"value"in r&&(e.__propertyDefaults=e.__propertyDefaults||{},e.__propertyDefaults[n]=r)}}return e.__propertyDefaults}(this.constructor);if(t)for(var r in t){var o=t[r];if(!this.hasOwnProperty(r)){var a="function"==typeof o.value?o.value.call(this):o.value;this._hasAccessor(r)?this._setPendingProperty(r,a,!0):this[r]=a}}}},{key:"connectedCallback",value:function(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),i(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"connectedCallback",this).call(this)}},{key:"ready",value:function(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),i(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"ready",this).call(this)}},{key:"_readyClients",value:function(){this._template&&(this.root=this._attachDom(this.root)),i(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"_readyClients",this).call(this)}},{key:"_attachDom",value:function(e){if(this.attachShadow)return e?(this.shadowRoot||this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e),this.shadowRoot):null;throw new Error("ShadowDOM not available. Polymer.Element can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}},{key:"updateStyles",value:function(e){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,e)}},{key:"resolveUrl",value:function(e,t){return!t&&this.importPath&&(t=Polymer.ResolveUrl.resolveUrl(this.importPath)),Polymer.ResolveUrl.resolveUrl(e,t)}}],[{key:"_processStyleText",value:function(e,t){return Polymer.ResolveUrl.resolveCss(e,t)}},{key:"_finalizeTemplate",value:function(e){var t=this.prototype._template;if(t&&!t.__polymerFinalized){t.__polymerFinalized=!0;var n=this.importPath;!function(e,t,n,r){for(var i=t.content.querySelectorAll("style"),o=Polymer.StyleGather.stylesFromTemplate(t),a=Polymer.StyleGather.stylesFromModuleImports(n),s=t.content.firstElementChild,l=0;l<a.length;l++){var c=a[l];c.textContent=e._processStyleText(c.textContent,r),t.content.insertBefore(c,s)}for(var u=0,p=0;p<o.length;p++){var h=o[p],d=i[u];d!==h?(h=h.cloneNode(!0),d.parentNode.insertBefore(h,d)):u++,h.textContent=e._processStyleText(h.textContent,r)}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(t,n)}(this,t,e,n?Polymer.ResolveUrl.resolveUrl(n):""),this.prototype._bindTemplate(t)}}},{key:"_parseTemplateContent",value:function(e,t,r){return t.dynamicFns=t.dynamicFns||this._properties,i(n.__proto__||Object.getPrototypeOf(n),"_parseTemplateContent",this).call(this,e,t,r)}}]),n}()}),Polymer.telemetry={instanceCount:0,registrations:[],_regLog:function(e){console.log("["+e.is+"]: registered")},register:function(e){this.registrations.push(e),Polymer.log&&this._regLog(e)},dumpRegistrations:function(){this.registrations.forEach(this._regLog)}},Polymer.updateStyles=function(e){window.ShadyCSS&&window.ShadyCSS.styleDocument(e)}},function(e,t,n){"use strict";n(0),n(17),Polymer({is:"iron-iconset-svg",properties:{name:{type:String,observer:"_nameChanged"},size:{type:Number,value:24},rtlMirroring:{type:Boolean,value:!1},useGlobalRtlAttribute:{type:Boolean,value:!1}},created:function(){this._meta=new Polymer.IronMeta({type:"iconset",key:null,value:null})},attached:function(){this.style.display="none"},getIconNames:function(){return this._icons=this._createIconMap(),Object.keys(this._icons).map(function(e){return this.name+":"+e},this)},applyIcon:function(e,t){this.removeIcon(e);var n=this._cloneIcon(t,this.rtlMirroring&&this._targetIsRTL(e));if(n){var r=Polymer.dom(e.root||e);return r.insertBefore(n,r.childNodes[0]),e._svgIcon=n}return null},removeIcon:function(e){e._svgIcon&&(Polymer.dom(e.root||e).removeChild(e._svgIcon),e._svgIcon=null)},_targetIsRTL:function(e){if(null==this.__targetIsRTL)if(this.useGlobalRtlAttribute){var t=document.body&&document.body.hasAttribute("dir")?document.body:document.documentElement;this.__targetIsRTL="rtl"===t.getAttribute("dir")}else e&&e.nodeType!==Node.ELEMENT_NODE&&(e=e.host),this.__targetIsRTL=e&&"rtl"===window.getComputedStyle(e).direction;return this.__targetIsRTL},_nameChanged:function(){this._meta.value=null,this._meta.key=this.name,this._meta.value=this,this.async(function(){this.fire("iron-iconset-added",this,{node:window})})},_createIconMap:function(){var e=Object.create(null);return Polymer.dom(this).querySelectorAll("[id]").forEach(function(t){e[t.id]=t}),e},_cloneIcon:function(e,t){return this._icons=this._icons||this._createIconMap(),this._prepareSvgClone(this._icons[e],this.size,t)},_prepareSvgClone:function(e,t,n){if(e){var r=e.cloneNode(!0),i=document.createElementNS("http://www.w3.org/2000/svg","svg"),o=r.getAttribute("viewBox")||"0 0 "+t+" "+t,a="pointer-events: none; display: block; width: 100%; height: 100%;";return n&&r.hasAttribute("mirror-in-rtl")&&(a+="-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;"),i.setAttribute("viewBox",o),i.setAttribute("preserveAspectRatio","xMidYMid meet"),i.setAttribute("focusable","false"),i.style.cssText=a,i.appendChild(r).removeAttribute("id"),i}return null}})},function(e,t,n){"use strict";n(34),n(2).toBody('<iron-iconset-svg name=optinomic-icons size=24> <svg> <defs> <g id=arrow-back> <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path> </g> <g id=menu> <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path> </g> <g id=chevron-right> <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path> </g> <g id=close> <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path> </g> </defs> </svg> </iron-iconset-svg>')},function(e,t,n){"use strict";n(0),n(2).toBody("<custom-style> <style is=custom-style>html{--google-red-100:#f4c7c3;--google-red-300:#e67c73;--google-red-500:#db4437;--google-red-700:#c53929;--google-blue-100:#c6dafc;--google-blue-300:#7baaf7;--google-blue-500:#4285f4;--google-blue-700:#3367d6;--google-green-100:#b7e1cd;--google-green-300:#57bb8a;--google-green-500:#0f9d58;--google-green-700:#0b8043;--google-yellow-100:#fce8b2;--google-yellow-300:#f7cb4d;--google-yellow-500:#f4b400;--google-yellow-700:#f09300;--google-grey-100:#f5f5f5;--google-grey-300:#e0e0e0;--google-grey-500:#9e9e9e;--google-grey-700:#616161;--paper-red-50:#ffebee;--paper-red-100:#ffcdd2;--paper-red-200:#ef9a9a;--paper-red-300:#e57373;--paper-red-400:#ef5350;--paper-red-500:#f44336;--paper-red-600:#e53935;--paper-red-700:#d32f2f;--paper-red-800:#c62828;--paper-red-900:#b71c1c;--paper-red-a100:#ff8a80;--paper-red-a200:#ff5252;--paper-red-a400:#ff1744;--paper-red-a700:#d50000;--paper-pink-50:#fce4ec;--paper-pink-100:#f8bbd0;--paper-pink-200:#f48fb1;--paper-pink-300:#f06292;--paper-pink-400:#ec407a;--paper-pink-500:#e91e63;--paper-pink-600:#d81b60;--paper-pink-700:#c2185b;--paper-pink-800:#ad1457;--paper-pink-900:#880e4f;--paper-pink-a100:#ff80ab;--paper-pink-a200:#ff4081;--paper-pink-a400:#f50057;--paper-pink-a700:#c51162;--paper-purple-50:#f3e5f5;--paper-purple-100:#e1bee7;--paper-purple-200:#ce93d8;--paper-purple-300:#ba68c8;--paper-purple-400:#ab47bc;--paper-purple-500:#9c27b0;--paper-purple-600:#8e24aa;--paper-purple-700:#7b1fa2;--paper-purple-800:#6a1b9a;--paper-purple-900:#4a148c;--paper-purple-a100:#ea80fc;--paper-purple-a200:#e040fb;--paper-purple-a400:#d500f9;--paper-purple-a700:#aa00ff;--paper-deep-purple-50:#ede7f6;--paper-deep-purple-100:#d1c4e9;--paper-deep-purple-200:#b39ddb;--paper-deep-purple-300:#9575cd;--paper-deep-purple-400:#7e57c2;--paper-deep-purple-500:#673ab7;--paper-deep-purple-600:#5e35b1;--paper-deep-purple-700:#512da8;--paper-deep-purple-800:#4527a0;--paper-deep-purple-900:#311b92;--paper-deep-purple-a100:#b388ff;--paper-deep-purple-a200:#7c4dff;--paper-deep-purple-a400:#651fff;--paper-deep-purple-a700:#6200ea;--paper-indigo-50:#e8eaf6;--paper-indigo-100:#c5cae9;--paper-indigo-200:#9fa8da;--paper-indigo-300:#7986cb;--paper-indigo-400:#5c6bc0;--paper-indigo-500:#3f51b5;--paper-indigo-600:#3949ab;--paper-indigo-700:#303f9f;--paper-indigo-800:#283593;--paper-indigo-900:#1a237e;--paper-indigo-a100:#8c9eff;--paper-indigo-a200:#536dfe;--paper-indigo-a400:#3d5afe;--paper-indigo-a700:#304ffe;--paper-blue-50:#e3f2fd;--paper-blue-100:#bbdefb;--paper-blue-200:#90caf9;--paper-blue-300:#64b5f6;--paper-blue-400:#42a5f5;--paper-blue-500:#2196f3;--paper-blue-600:#1e88e5;--paper-blue-700:#1976d2;--paper-blue-800:#1565c0;--paper-blue-900:#0d47a1;--paper-blue-a100:#82b1ff;--paper-blue-a200:#448aff;--paper-blue-a400:#2979ff;--paper-blue-a700:#2962ff;--paper-light-blue-50:#e1f5fe;--paper-light-blue-100:#b3e5fc;--paper-light-blue-200:#81d4fa;--paper-light-blue-300:#4fc3f7;--paper-light-blue-400:#29b6f6;--paper-light-blue-500:#03a9f4;--paper-light-blue-600:#039be5;--paper-light-blue-700:#0288d1;--paper-light-blue-800:#0277bd;--paper-light-blue-900:#01579b;--paper-light-blue-a100:#80d8ff;--paper-light-blue-a200:#40c4ff;--paper-light-blue-a400:#00b0ff;--paper-light-blue-a700:#0091ea;--paper-cyan-50:#e0f7fa;--paper-cyan-100:#b2ebf2;--paper-cyan-200:#80deea;--paper-cyan-300:#4dd0e1;--paper-cyan-400:#26c6da;--paper-cyan-500:#00bcd4;--paper-cyan-600:#00acc1;--paper-cyan-700:#0097a7;--paper-cyan-800:#00838f;--paper-cyan-900:#006064;--paper-cyan-a100:#84ffff;--paper-cyan-a200:#18ffff;--paper-cyan-a400:#00e5ff;--paper-cyan-a700:#00b8d4;--paper-teal-50:#e0f2f1;--paper-teal-100:#b2dfdb;--paper-teal-200:#80cbc4;--paper-teal-300:#4db6ac;--paper-teal-400:#26a69a;--paper-teal-500:#009688;--paper-teal-600:#00897b;--paper-teal-700:#00796b;--paper-teal-800:#00695c;--paper-teal-900:#004d40;--paper-teal-a100:#a7ffeb;--paper-teal-a200:#64ffda;--paper-teal-a400:#1de9b6;--paper-teal-a700:#00bfa5;--paper-green-50:#e8f5e9;--paper-green-100:#c8e6c9;--paper-green-200:#a5d6a7;--paper-green-300:#81c784;--paper-green-400:#66bb6a;--paper-green-500:#4caf50;--paper-green-600:#43a047;--paper-green-700:#388e3c;--paper-green-800:#2e7d32;--paper-green-900:#1b5e20;--paper-green-a100:#b9f6ca;--paper-green-a200:#69f0ae;--paper-green-a400:#00e676;--paper-green-a700:#00c853;--paper-light-green-50:#f1f8e9;--paper-light-green-100:#dcedc8;--paper-light-green-200:#c5e1a5;--paper-light-green-300:#aed581;--paper-light-green-400:#9ccc65;--paper-light-green-500:#8bc34a;--paper-light-green-600:#7cb342;--paper-light-green-700:#689f38;--paper-light-green-800:#558b2f;--paper-light-green-900:#33691e;--paper-light-green-a100:#ccff90;--paper-light-green-a200:#b2ff59;--paper-light-green-a400:#76ff03;--paper-light-green-a700:#64dd17;--paper-lime-50:#f9fbe7;--paper-lime-100:#f0f4c3;--paper-lime-200:#e6ee9c;--paper-lime-300:#dce775;--paper-lime-400:#d4e157;--paper-lime-500:#cddc39;--paper-lime-600:#c0ca33;--paper-lime-700:#afb42b;--paper-lime-800:#9e9d24;--paper-lime-900:#827717;--paper-lime-a100:#f4ff81;--paper-lime-a200:#eeff41;--paper-lime-a400:#c6ff00;--paper-lime-a700:#aeea00;--paper-yellow-50:#fffde7;--paper-yellow-100:#fff9c4;--paper-yellow-200:#fff59d;--paper-yellow-300:#fff176;--paper-yellow-400:#ffee58;--paper-yellow-500:#ffeb3b;--paper-yellow-600:#fdd835;--paper-yellow-700:#fbc02d;--paper-yellow-800:#f9a825;--paper-yellow-900:#f57f17;--paper-yellow-a100:#ffff8d;--paper-yellow-a200:#ffff00;--paper-yellow-a400:#ffea00;--paper-yellow-a700:#ffd600;--paper-amber-50:#fff8e1;--paper-amber-100:#ffecb3;--paper-amber-200:#ffe082;--paper-amber-300:#ffd54f;--paper-amber-400:#ffca28;--paper-amber-500:#ffc107;--paper-amber-600:#ffb300;--paper-amber-700:#ffa000;--paper-amber-800:#ff8f00;--paper-amber-900:#ff6f00;--paper-amber-a100:#ffe57f;--paper-amber-a200:#ffd740;--paper-amber-a400:#ffc400;--paper-amber-a700:#ffab00;--paper-orange-50:#fff3e0;--paper-orange-100:#ffe0b2;--paper-orange-200:#ffcc80;--paper-orange-300:#ffb74d;--paper-orange-400:#ffa726;--paper-orange-500:#ff9800;--paper-orange-600:#fb8c00;--paper-orange-700:#f57c00;--paper-orange-800:#ef6c00;--paper-orange-900:#e65100;--paper-orange-a100:#ffd180;--paper-orange-a200:#ffab40;--paper-orange-a400:#ff9100;--paper-orange-a700:#ff6500;--paper-deep-orange-50:#fbe9e7;--paper-deep-orange-100:#ffccbc;--paper-deep-orange-200:#ffab91;--paper-deep-orange-300:#ff8a65;--paper-deep-orange-400:#ff7043;--paper-deep-orange-500:#ff5722;--paper-deep-orange-600:#f4511e;--paper-deep-orange-700:#e64a19;--paper-deep-orange-800:#d84315;--paper-deep-orange-900:#bf360c;--paper-deep-orange-a100:#ff9e80;--paper-deep-orange-a200:#ff6e40;--paper-deep-orange-a400:#ff3d00;--paper-deep-orange-a700:#dd2c00;--paper-brown-50:#efebe9;--paper-brown-100:#d7ccc8;--paper-brown-200:#bcaaa4;--paper-brown-300:#a1887f;--paper-brown-400:#8d6e63;--paper-brown-500:#795548;--paper-brown-600:#6d4c41;--paper-brown-700:#5d4037;--paper-brown-800:#4e342e;--paper-brown-900:#3e2723;--paper-grey-50:#fafafa;--paper-grey-100:#f5f5f5;--paper-grey-200:#eeeeee;--paper-grey-300:#e0e0e0;--paper-grey-400:#bdbdbd;--paper-grey-500:#9e9e9e;--paper-grey-600:#757575;--paper-grey-700:#616161;--paper-grey-800:#424242;--paper-grey-900:#212121;--paper-blue-grey-50:#eceff1;--paper-blue-grey-100:#cfd8dc;--paper-blue-grey-200:#b0bec5;--paper-blue-grey-300:#90a4ae;--paper-blue-grey-400:#78909c;--paper-blue-grey-500:#607d8b;--paper-blue-grey-600:#546e7a;--paper-blue-grey-700:#455a64;--paper-blue-grey-800:#37474f;--paper-blue-grey-900:#263238;--dark-divider-opacity:0.12;--dark-disabled-opacity:0.38;--dark-secondary-opacity:0.54;--dark-primary-opacity:0.87;--light-divider-opacity:0.12;--light-disabled-opacity:0.3;--light-secondary-opacity:0.7;--light-primary-opacity:1.0}</style> </custom-style>")},function(e,t,n){"use strict";n(0),n(36),n(2).toBody("<custom-style> <style is=custom-style>html{--primary-text-color:var(--light-theme-text-color);--primary-background-color:var(--light-theme-background-color);--secondary-text-color:var(--light-theme-secondary-color);--disabled-text-color:var(--light-theme-disabled-color);--divider-color:var(--light-theme-divider-color);--error-color:var(--paper-deep-orange-a700);--primary-color:var(--paper-indigo-500);--light-primary-color:var(--paper-indigo-100);--dark-primary-color:var(--paper-indigo-700);--accent-color:var(--paper-pink-a200);--light-accent-color:var(--paper-pink-a100);--dark-accent-color:var(--paper-pink-a400);--light-theme-background-color:#ffffff;--light-theme-base-color:#000000;--light-theme-text-color:var(--paper-grey-900);--light-theme-secondary-color:#737373;--light-theme-disabled-color:#9b9b9b;--light-theme-divider-color:#dbdbdb;--dark-theme-background-color:var(--paper-grey-900);--dark-theme-base-color:#ffffff;--dark-theme-text-color:#ffffff;--dark-theme-secondary-color:#bcbcbc;--dark-theme-disabled-color:#646464;--dark-theme-divider-color:#3c3c3c;--text-primary-color:var(--dark-theme-text-color);--default-primary-color:var(--primary-color)}</style> </custom-style>")},function(e,t,n){"use strict";n(0),n(15),n(2).register("<dom-module id=paper-ripple> <template> <style>:host{display:block;position:absolute;border-radius:inherit;overflow:hidden;top:0;left:0;right:0;bottom:0;pointer-events:none}:host([animating]){-webkit-transform:translate(0,0);transform:translate3d(0,0,0)}#background,#waves,.wave,.wave-container{pointer-events:none;position:absolute;top:0;left:0;width:100%;height:100%}#background,.wave{opacity:0}#waves,.wave{overflow:hidden}.wave,.wave-container{border-radius:50%}:host(.circle) #background,:host(.circle) #waves{border-radius:50%}:host(.circle) .wave-container{overflow:hidden}</style> <div id=background></div> <div id=waves></div> </template> </dom-module>"),function(){var e={distance:function(e,t,n,r){var i=e-n,o=t-r;return Math.sqrt(i*i+o*o)},now:window.performance&&window.performance.now?window.performance.now.bind(window.performance):Date.now};function t(e){this.element=e,this.width=this.boundingRect.width,this.height=this.boundingRect.height,this.size=Math.max(this.width,this.height)}function n(e){this.element=e,this.color=window.getComputedStyle(e).color,this.wave=document.createElement("div"),this.waveContainer=document.createElement("div"),this.wave.style.backgroundColor=this.color,this.wave.classList.add("wave"),this.waveContainer.classList.add("wave-container"),Polymer.dom(this.waveContainer).appendChild(this.wave),this.resetInteractionState()}t.prototype={get boundingRect(){return this.element.getBoundingClientRect()},furthestCornerDistanceFrom:function(t,n){var r=e.distance(t,n,0,0),i=e.distance(t,n,this.width,0),o=e.distance(t,n,0,this.height),a=e.distance(t,n,this.width,this.height);return Math.max(r,i,o,a)}},n.MAX_RADIUS=300,n.prototype={get recenters(){return this.element.recenters},get center(){return this.element.center},get mouseDownElapsed(){var t;return this.mouseDownStart?(t=e.now()-this.mouseDownStart,this.mouseUpStart&&(t-=this.mouseUpElapsed),t):0},get mouseUpElapsed(){return this.mouseUpStart?e.now()-this.mouseUpStart:0},get mouseDownElapsedSeconds(){return this.mouseDownElapsed/1e3},get mouseUpElapsedSeconds(){return this.mouseUpElapsed/1e3},get mouseInteractionSeconds(){return this.mouseDownElapsedSeconds+this.mouseUpElapsedSeconds},get initialOpacity(){return this.element.initialOpacity},get opacityDecayVelocity(){return this.element.opacityDecayVelocity},get radius(){var e=this.containerMetrics.width*this.containerMetrics.width,t=this.containerMetrics.height*this.containerMetrics.height,r=1.1*Math.min(Math.sqrt(e+t),n.MAX_RADIUS)+5,i=1.1-r/n.MAX_RADIUS*.2,o=this.mouseInteractionSeconds/i,a=r*(1-Math.pow(80,-o));return Math.abs(a)},get opacity(){return this.mouseUpStart?Math.max(0,this.initialOpacity-this.mouseUpElapsedSeconds*this.opacityDecayVelocity):this.initialOpacity},get outerOpacity(){var e=.3*this.mouseUpElapsedSeconds,t=this.opacity;return Math.max(0,Math.min(e,t))},get isOpacityFullyDecayed(){return this.opacity<.01&&this.radius>=Math.min(this.maxRadius,n.MAX_RADIUS)},get isRestingAtMaxRadius(){return this.opacity>=this.initialOpacity&&this.radius>=Math.min(this.maxRadius,n.MAX_RADIUS)},get isAnimationComplete(){return this.mouseUpStart?this.isOpacityFullyDecayed:this.isRestingAtMaxRadius},get translationFraction(){return Math.min(1,this.radius/this.containerMetrics.size*2/Math.sqrt(2))},get xNow(){return this.xEnd?this.xStart+this.translationFraction*(this.xEnd-this.xStart):this.xStart},get yNow(){return this.yEnd?this.yStart+this.translationFraction*(this.yEnd-this.yStart):this.yStart},get isMouseDown(){return this.mouseDownStart&&!this.mouseUpStart},resetInteractionState:function(){this.maxRadius=0,this.mouseDownStart=0,this.mouseUpStart=0,this.xStart=0,this.yStart=0,this.xEnd=0,this.yEnd=0,this.slideDistance=0,this.containerMetrics=new t(this.element)},draw:function(){var e,t,n;this.wave.style.opacity=this.opacity,e=this.radius/(this.containerMetrics.size/2),t=this.xNow-this.containerMetrics.width/2,n=this.yNow-this.containerMetrics.height/2,this.waveContainer.style.webkitTransform="translate("+t+"px, "+n+"px)",this.waveContainer.style.transform="translate3d("+t+"px, "+n+"px, 0)",this.wave.style.webkitTransform="scale("+e+","+e+")",this.wave.style.transform="scale3d("+e+","+e+",1)"},downAction:function(t){var n=this.containerMetrics.width/2,r=this.containerMetrics.height/2;this.resetInteractionState(),this.mouseDownStart=e.now(),this.center?(this.xStart=n,this.yStart=r,this.slideDistance=e.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)):(this.xStart=t?t.detail.x-this.containerMetrics.boundingRect.left:this.containerMetrics.width/2,this.yStart=t?t.detail.y-this.containerMetrics.boundingRect.top:this.containerMetrics.height/2),this.recenters&&(this.xEnd=n,this.yEnd=r,this.slideDistance=e.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)),this.maxRadius=this.containerMetrics.furthestCornerDistanceFrom(this.xStart,this.yStart),this.waveContainer.style.top=(this.containerMetrics.height-this.containerMetrics.size)/2+"px",this.waveContainer.style.left=(this.containerMetrics.width-this.containerMetrics.size)/2+"px",this.waveContainer.style.width=this.containerMetrics.size+"px",this.waveContainer.style.height=this.containerMetrics.size+"px"},upAction:function(t){this.isMouseDown&&(this.mouseUpStart=e.now())},remove:function(){Polymer.dom(this.waveContainer.parentNode).removeChild(this.waveContainer)}},Polymer({is:"paper-ripple",behaviors:[Polymer.IronA11yKeysBehavior],properties:{initialOpacity:{type:Number,value:.25},opacityDecayVelocity:{type:Number,value:.8},recenters:{type:Boolean,value:!1},center:{type:Boolean,value:!1},ripples:{type:Array,value:function(){return[]}},animating:{type:Boolean,readOnly:!0,reflectToAttribute:!0,value:!1},holdDown:{type:Boolean,value:!1,observer:"_holdDownChanged"},noink:{type:Boolean,value:!1},_animating:{type:Boolean},_boundAnimate:{type:Function,value:function(){return this.animate.bind(this)}}},get target(){return this.keyEventTarget},keyBindings:{"enter:keydown":"_onEnterKeydown","space:keydown":"_onSpaceKeydown","space:keyup":"_onSpaceKeyup"},attached:function(){11==this.parentNode.nodeType?this.keyEventTarget=Polymer.dom(this).getOwnerRoot().host:this.keyEventTarget=this.parentNode;var e=this.keyEventTarget;this.listen(e,"up","uiUpAction"),this.listen(e,"down","uiDownAction")},detached:function(){this.unlisten(this.keyEventTarget,"up","uiUpAction"),this.unlisten(this.keyEventTarget,"down","uiDownAction"),this.keyEventTarget=null},get shouldKeepAnimating(){for(var e=0;e<this.ripples.length;++e)if(!this.ripples[e].isAnimationComplete)return!0;return!1},simulatedRipple:function(){this.downAction(null),this.async(function(){this.upAction()},1)},uiDownAction:function(e){this.noink||this.downAction(e)},downAction:function(e){this.holdDown&&this.ripples.length>0||(this.addRipple().downAction(e),this._animating||(this._animating=!0,this.animate()))},uiUpAction:function(e){this.noink||this.upAction(e)},upAction:function(e){this.holdDown||(this.ripples.forEach(function(t){t.upAction(e)}),this._animating=!0,this.animate())},onAnimationComplete:function(){this._animating=!1,this.$.background.style.backgroundColor=null,this.fire("transitionend")},addRipple:function(){var e=new n(this);return Polymer.dom(this.$.waves).appendChild(e.waveContainer),this.$.background.style.backgroundColor=e.color,this.ripples.push(e),this._setAnimating(!0),e},removeRipple:function(e){var t=this.ripples.indexOf(e);t<0||(this.ripples.splice(t,1),e.remove(),this.ripples.length||this._setAnimating(!1))},animate:function(){if(this._animating){var e,t;for(e=0;e<this.ripples.length;++e)(t=this.ripples[e]).draw(),this.$.background.style.opacity=t.outerOpacity,t.isOpacityFullyDecayed&&!t.isRestingAtMaxRadius&&this.removeRipple(t);this.shouldKeepAnimating||0!==this.ripples.length?window.requestAnimationFrame(this._boundAnimate):this.onAnimationComplete()}},_onEnterKeydown:function(){this.uiDownAction(),this.async(this.uiUpAction,1)},_onSpaceKeydown:function(){this.uiDownAction()},_onSpaceKeyup:function(){this.uiUpAction()},_holdDownChanged:function(e,t){void 0!==t&&(e?this.downAction():this.upAction())}})}()},function(e,t,n){"use strict";n(0),n(16),n(38),Polymer.PaperRippleBehavior={properties:{noink:{type:Boolean,observer:"_noinkChanged"},_rippleContainer:{type:Object}},_buttonStateChanged:function(){this.focused&&this.ensureRipple()},_downHandler:function(e){Polymer.IronButtonStateImpl._downHandler.call(this,e),this.pressed&&this.ensureRipple(e)},ensureRipple:function(e){if(!this.hasRipple()){this._ripple=this._createRipple(),this._ripple.noink=this.noink;var t=this._rippleContainer||this.root;if(t&&Polymer.dom(t).appendChild(this._ripple),e){var n=Polymer.dom(this._rippleContainer||this),r=Polymer.dom(e).rootTarget;n.deepContains(r)&&this._ripple.uiDownAction(e)}}},getRipple:function(){return this.ensureRipple(),this._ripple},hasRipple:function(){return Boolean(this._ripple)},_createRipple:function(){return document.createElement("paper-ripple")},_noinkChanged:function(e){this.hasRipple()&&(this._ripple.noink=e)}}},function(e,t,n){"use strict";n(0),Polymer.IronControlState={properties:{focused:{type:Boolean,value:!1,notify:!0,readOnly:!0,reflectToAttribute:!0},disabled:{type:Boolean,value:!1,notify:!0,observer:"_disabledChanged",reflectToAttribute:!0},_oldTabIndex:{type:String},_boundFocusBlurHandler:{type:Function,value:function(){return this._focusBlurHandler.bind(this)}},__handleEventRetargeting:{type:Boolean,value:function(){return!this.shadowRoot&&!Polymer.Element}}},observers:["_changedControlState(focused, disabled)"],ready:function(){this.addEventListener("focus",this._boundFocusBlurHandler,!0),this.addEventListener("blur",this._boundFocusBlurHandler,!0)},_focusBlurHandler:function(e){if(Polymer.Element)this._setFocused("focus"===e.type);else if(e.target===this)this._setFocused("focus"===e.type);else if(this.__handleEventRetargeting){var t=Polymer.dom(e).localTarget;this.isLightDescendant(t)||this.fire(e.type,{sourceEvent:e},{node:this,bubbles:e.bubbles,cancelable:e.cancelable})}},_disabledChanged:function(e,t){this.setAttribute("aria-disabled",e?"true":"false"),this.style.pointerEvents=e?"none":"",e?(this._oldTabIndex=this.getAttribute("tabindex"),this._setFocused(!1),this.tabIndex=-1,this.blur()):void 0!==this._oldTabIndex&&(null===this._oldTabIndex?this.removeAttribute("tabindex"):this.setAttribute("tabindex",this._oldTabIndex))},_changedControlState:function(){this._controlStateChanged&&this._controlStateChanged()}}},function(e,t,n){"use strict";n(0),n(16),n(39),Polymer.PaperInkyFocusBehaviorImpl={observers:["_focusedChanged(receivedFocusFromKeyboard)"],_focusedChanged:function(e){e&&this.ensureRipple(),this.hasRipple()&&(this._ripple.holdDown=e)},_createRipple:function(){var e=Polymer.PaperRippleBehavior._createRipple();return e.id="ink",e.setAttribute("center",""),e.classList.add("circle"),e}},Polymer.PaperInkyFocusBehavior=[Polymer.IronButtonState,Polymer.IronControlState,Polymer.PaperRippleBehavior,Polymer.PaperInkyFocusBehaviorImpl]},function(e,t,n){"use strict";n(0),n(17),n(5),n(2).register("<dom-module id=iron-icon> <template> <style>:host{@apply --layout-inline;@apply --layout-center-center;position:relative;vertical-align:middle;fill:var(--iron-icon-fill-color,currentcolor);stroke:var(--iron-icon-stroke-color,none);width:var(--iron-icon-width,24px);height:var(--iron-icon-height,24px);@apply --iron-icon;}:host([hidden]){display:none}</style> </template> </dom-module>"),Polymer({is:"iron-icon",properties:{icon:{type:String},theme:{type:String},src:{type:String},_meta:{value:Polymer.Base.create("iron-meta",{type:"iconset"})}},observers:["_updateIcon(_meta, isAttached)","_updateIcon(theme, isAttached)","_srcChanged(src, isAttached)","_iconChanged(icon, isAttached)"],_DEFAULT_ICONSET:"icons",_iconChanged:function(e){var t=(e||"").split(":");this._iconName=t.pop(),this._iconsetName=t.pop()||this._DEFAULT_ICONSET,this._updateIcon()},_srcChanged:function(e){this._updateIcon()},_usesIconset:function(){return this.icon||!this.src},_updateIcon:function(){this._usesIconset()?(this._img&&this._img.parentNode&&Polymer.dom(this.root).removeChild(this._img),""===this._iconName?this._iconset&&this._iconset.removeIcon(this):this._iconsetName&&this._meta&&(this._iconset=this._meta.byKey(this._iconsetName),this._iconset?(this._iconset.applyIcon(this,this._iconName,this.theme),this.unlisten(window,"iron-iconset-added","_updateIcon")):this.listen(window,"iron-iconset-added","_updateIcon"))):(this._iconset&&this._iconset.removeIcon(this),this._img||(this._img=document.createElement("img"),this._img.style.width="100%",this._img.style.height="100%",this._img.draggable=!1),this._img.src=this.src,Polymer.dom(this.root).appendChild(this._img))}})},function(e,t,n){"use strict";n(0),n(42),n(41),n(37),n(2).register('<dom-module id=paper-icon-button> <template strip-whitespace=""> <style>:host{display:inline-block;position:relative;padding:8px;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;z-index:0;line-height:1;width:40px;height:40px;-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:transparent;box-sizing:border-box!important;@apply --paper-icon-button;}:host #ink{color:var(--paper-icon-button-ink-color,var(--primary-text-color));opacity:.6}:host([disabled]){color:var(--paper-icon-button-disabled-text,var(--disabled-text-color));pointer-events:none;cursor:auto;@apply --paper-icon-button-disabled;}:host([hidden]){display:none!important}:host(:hover){@apply --paper-icon-button-hover;}iron-icon{--iron-icon-width:100%;--iron-icon-height:100%}</style> <iron-icon id=icon src=[[src]] icon=[[icon]] alt$=[[alt]]></iron-icon> </template> </dom-module>'),Polymer({is:"paper-icon-button",hostAttributes:{role:"button",tabindex:"0"},behaviors:[Polymer.PaperInkyFocusBehavior],properties:{src:{type:String},icon:{type:String},alt:{type:String,observer:"_altChanged"}},_altChanged:function(e,t){var n=this.getAttribute("aria-label");n&&t!=n||this.setAttribute("aria-label",e)}})},function(e,t,n){"use strict";n(0),n(18),Polymer.IronMultiSelectableBehaviorImpl={properties:{multi:{type:Boolean,value:!1,observer:"multiChanged"},selectedValues:{type:Array,notify:!0,value:function(){return[]}},selectedItems:{type:Array,readOnly:!0,notify:!0,value:function(){return[]}}},observers:["_updateSelected(selectedValues.splices)"],select:function(e){this.multi?this._toggleSelected(e):this.selected=e},multiChanged:function(e){this._selection.multi=e,this._updateSelected()},get _shouldUpdateSelection(){return null!=this.selected||null!=this.selectedValues&&this.selectedValues.length},_updateAttrForSelected:function(){this.multi?this.selectedItems&&this.selectedItems.length>0&&(this.selectedValues=this.selectedItems.map(function(e){return this._indexToValue(this.indexOf(e))},this).filter(function(e){return null!=e},this)):Polymer.IronSelectableBehavior._updateAttrForSelected.apply(this)},_updateSelected:function(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(e){e=e||[];var t=(this._valuesToItems(e)||[]).filter(function(e){return null!==e&&void 0!==e});this._selection.clear(t);for(var n=0;n<t.length;n++)this._selection.setItemSelected(t[n],!0);this.fallbackSelection&&!this._selection.get().length&&(this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection))},_selectionChange:function(){var e=this._selection.get();this.multi?(this._setSelectedItems(e),this._setSelectedItem(e.length?e[0]:null)):null!==e&&void 0!==e?(this._setSelectedItems([e]),this._setSelectedItem(e)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(e){var t=this.selectedValues.indexOf(e);t<0?this.push("selectedValues",e):this.splice("selectedValues",t,1)},_valuesToItems:function(e){return null==e?null:e.map(function(e){return this._valueToItem(e)},this)}},Polymer.IronMultiSelectableBehavior=[Polymer.IronSelectableBehavior,Polymer.IronMultiSelectableBehaviorImpl]},function(e,t,n){"use strict";n(0),n(44),Polymer({is:"iron-selector",behaviors:[Polymer.IronMultiSelectableBehavior]})},function(e,t,n){"use strict";n(0),Polymer.IronSelection=function(e){this.selection=[],this.selectCallback=e},Polymer.IronSelection.prototype={get:function(){return this.multi?this.selection.slice():this.selection[0]},clear:function(e){this.selection.slice().forEach(function(t){(!e||e.indexOf(t)<0)&&this.setItemSelected(t,!1)},this)},isSelected:function(e){return this.selection.indexOf(e)>=0},setItemSelected:function(e,t){if(null!=e&&t!==this.isSelected(e)){if(t)this.selection.push(e);else{var n=this.selection.indexOf(e);n>=0&&this.selection.splice(n,1)}this.selectCallback&&this.selectCallback(e,t)}},select:function(e){this.multi?this.toggle(e):this.get()!==e&&(this.setItemSelected(this.get(),!1),this.setItemSelected(e,!0))},toggle:function(e){this.setItemSelected(e,!this.isSelected(e))}}},function(e,t,n){"use strict";n(0),n(23),n(18),n(2).register("<dom-module id=iron-pages> <template> <style>:host{display:block}:host>::slotted(:not(slot):not(.iron-selected)){display:none!important}</style> <slot></slot> </template> </dom-module>"),Polymer({is:"iron-pages",behaviors:[Polymer.IronResizableBehavior,Polymer.IronSelectableBehavior],properties:{activateEvent:{type:String,value:null}},observers:["_selectedPageChanged(selected)"],_selectedPageChanged:function(e,t){this.async(this.notifyResize)}})},function(e,t,n){"use strict";n(0),n(5),n(2).register("<dom-module id=app-toolbar> <template> <style>:host{@apply --layout-horizontal;@apply --layout-center;position:relative;height:64px;padding:0 16px;pointer-events:none;font-size:var(--app-toolbar-font-size,20px)}:host ::slotted(*){pointer-events:auto}:host ::slotted(paper-icon-button){font-size:0}:host ::slotted([condensed-title]),:host ::slotted([main-title]){pointer-events:none;@apply --layout-flex;}:host ::slotted([bottom-item]){position:absolute;right:0;bottom:0;left:0}:host ::slotted([top-item]){position:absolute;top:0;right:0;left:0}:host ::slotted([spacer]){margin-left:64px}</style> <slot></slot> </template> </dom-module>"),Polymer({is:"app-toolbar"})},function(e,t,n){"use strict";n(4),Polymer.AppLayout.registerEffect("resize-snapped-title",{setUp:function(e){var t=this._getDOMRef("mainTitle"),n=this._getDOMRef("condensedTitle"),r=e.duration||"0.2s",i={};return n?t?(t.style.transitionProperty="opacity",t.style.transitionDuration=r,n.style.transitionProperty="opacity",n.style.transitionDuration=r,i.condensedTitle=n,i.title=t,void(this._fxResizeSnappedTitle=i)):(console.warn("Scroll effect `resize-snapped-title`: undefined `main-title`"),!1):(console.warn("Scroll effect `resize-snapped-title`: undefined `condensed-title`"),!1)},run:function(e,t){var n=this._fxResizeSnappedTitle;e>0?(n.title.style.opacity=0,n.condensedTitle.style.opacity=1):(n.title.style.opacity=1,n.condensedTitle.style.opacity=0)},tearDown:function(){var e=this._fxResizeSnappedTitle;e.title.style.transition="",e.condensedTitle.style.transition="",delete this._fxResizeSnappedTitle}})},function(e,t,n){"use strict";n(4),n(21),n(20),n(22),n(19),Polymer.AppLayout.registerEffect("material",{setUp:function(){return this.effects="waterfall resize-title blend-background parallax-background",!1}})},function(e,t,n){"use strict";n(4),Polymer.AppLayout.registerEffect("fade-background",{setUp:function(e){var t={},n=e.duration||"0.5s";t.backgroundFrontLayer=this._getDOMRef("backgroundFrontLayer"),t.backgroundRearLayer=this._getDOMRef("backgroundRearLayer"),t.backgroundFrontLayer.style.willChange="opacity",t.backgroundFrontLayer.style.webkitTransform="translateZ(0)",t.backgroundFrontLayer.style.transitionProperty="opacity",t.backgroundFrontLayer.style.transitionDuration=n,t.backgroundRearLayer.style.willChange="opacity",t.backgroundRearLayer.style.webkitTransform="translateZ(0)",t.backgroundRearLayer.style.transitionProperty="opacity",t.backgroundRearLayer.style.transitionDuration=n,this._fxFadeBackground=t},run:function(e,t){var n=this._fxFadeBackground;e>=1?(n.backgroundFrontLayer.style.opacity=0,n.backgroundRearLayer.style.opacity=1):(n.backgroundFrontLayer.style.opacity=1,n.backgroundRearLayer.style.opacity=0)},tearDown:function(){delete this._fxFadeBackground}})},function(e,t,n){"use strict";n(22),n(51),n(50),n(19),n(49),n(20),n(21)},function(e,t,n){"use strict";n(0),n(5),n(10),n(2).register("<dom-module id=app-header-layout> <template> <style>:host{display:block;position:relative;z-index:0}#wrapper ::slotted([slot=header]){@apply --layout-fixed-top;z-index:1}#wrapper.initializing ::slotted([slot=header]){position:relative}:host([has-scrolling-region]){height:100%}:host([has-scrolling-region]) #wrapper ::slotted([slot=header]){position:absolute}:host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]){position:relative}:host([has-scrolling-region]) #wrapper #contentContainer{@apply --layout-fit;overflow-y:auto;-webkit-overflow-scrolling:touch}:host([has-scrolling-region]) #wrapper.initializing #contentContainer{position:relative}:host([fullbleed]){@apply --layout-vertical;@apply --layout-fit;}:host([fullbleed]) #wrapper,:host([fullbleed]) #wrapper #contentContainer{@apply --layout-vertical;@apply --layout-flex;}#contentContainer{position:relative;z-index:0}@media print{:host([has-scrolling-region]) #wrapper #contentContainer{overflow-y:visible}}</style> <div id=wrapper class=initializing> <slot id=headerSlot name=header></slot> <div id=contentContainer> <slot></slot> </div> </div> </template> </dom-module>"),Polymer({is:"app-header-layout",behaviors:[Polymer.AppLayoutBehavior],properties:{hasScrollingRegion:{type:Boolean,value:!1,reflectToAttribute:!0}},observers:["resetLayout(isAttached, hasScrollingRegion)"],get header(){return Polymer.dom(this.$.headerSlot).getDistributedNodes()[0]},_updateLayoutStates:function(){var e=this.header;if(this.isAttached&&e){this.$.wrapper.classList.remove("initializing"),e.scrollTarget=this.hasScrollingRegion?this.$.contentContainer:this.ownerDocument.documentElement;var t=e.offsetHeight;this.hasScrollingRegion?(e.style.left="",e.style.right=""):requestAnimationFrame(function(){var t=this.getBoundingClientRect(),n=document.documentElement.clientWidth-t.right;e.style.left=t.left+"px",e.style.right=n+"px"}.bind(this));var n=this.$.contentContainer.style;e.fixed&&!e.condenses&&this.hasScrollingRegion?(n.marginTop=t+"px",n.paddingTop=""):(n.paddingTop=t+"px",n.marginTop="")}}})},function(e,t,n){"use strict";n(0),Polymer.AppLayout=Polymer.AppLayout||{},Polymer.AppLayout._scrollEffects={},Polymer.AppLayout._scrollTimer=null,Polymer.AppLayout.scrollTimingFunction=function(e,t,n,r){return-n*(e/=r)*(e-2)+t},Polymer.AppLayout.registerEffect=function(e,t){if(null!=Polymer.AppLayout._scrollEffects[e])throw new Error("effect `"+e+"` is already registered.");Polymer.AppLayout._scrollEffects[e]=t},Polymer.AppLayout.queryAllRoot=function(e,t){for(var n=[t],r=[];n.length>0;){var i=n.shift();r.push.apply(r,i.querySelectorAll(e));for(var o=0;i.children[o];o++)i.children[o].shadowRoot&&n.push(i.children[o].shadowRoot)}return r},Polymer.AppLayout.scroll=function(e){e=e||{};var t=document.documentElement,n=e.target||t,r="scrollBehavior"in n.style&&n.scroll,i=e.top||0,o=e.left||0,a=n===t?window.scrollTo:function(e,t){n.scrollLeft=e,n.scrollTop=t};if("smooth"===e.behavior)if(r)n.scroll(e);else{var s=Polymer.AppLayout.scrollTimingFunction,l=Date.now(),c=n===t?window.pageYOffset:n.scrollTop,u=n===t?window.pageXOffset:n.scrollLeft,p=i-c,h=o-u;(function e(){var t=Date.now()-l;t<300?(a(s(t,u,h,300),s(t,c,p,300)),requestAnimationFrame(e)):a(o,i)}).bind(this)()}else if("silent"===e.behavior){var d=Polymer.AppLayout.queryAllRoot("app-header",document.body);d.forEach(function(e){e.setAttribute("silent-scroll","")}),Polymer.AppLayout._scrollTimer&&window.cancelAnimationFrame(Polymer.AppLayout._scrollTimer),Polymer.AppLayout._scrollTimer=window.requestAnimationFrame(function(){d.forEach(function(e){e.removeAttribute("silent-scroll")}),Polymer.AppLayout._scrollTimer=null}),a(o,i)}else a(o,i)}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n(0),Polymer.IronScrollTargetBehavior={properties:{scrollTarget:{type:HTMLElement,value:function(){return this._defaultScrollTarget}}},observers:["_scrollTargetChanged(scrollTarget, isAttached)"],_shouldHaveListener:!0,_scrollTargetChanged:function(e,t){if(this._oldScrollTarget&&(this._toggleScrollListener(!1,this._oldScrollTarget),this._oldScrollTarget=null),t)if("document"===e)this.scrollTarget=this._doc;else if("string"==typeof e){var n=this.domHost;this.scrollTarget=n&&n.$?n.$[e]:Polymer.dom(this.ownerDocument).querySelector("#"+e)}else this._isValidScrollTarget()&&(this._oldScrollTarget=e,this._toggleScrollListener(this._shouldHaveListener,e))},_scrollHandler:function(){},get _defaultScrollTarget(){return this._doc},get _doc(){return this.ownerDocument.documentElement},get _scrollTop(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageYOffset:this.scrollTarget.scrollTop:0},get _scrollLeft(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.pageXOffset:this.scrollTarget.scrollLeft:0},set _scrollTop(e){this.scrollTarget===this._doc?window.scrollTo(window.pageXOffset,e):this._isValidScrollTarget()&&(this.scrollTarget.scrollTop=e)},set _scrollLeft(e){this.scrollTarget===this._doc?window.scrollTo(e,window.pageYOffset):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=e)},scroll:function(e,t){var n;"object"===(void 0===e?"undefined":r(e))?(n=e.left,t=e.top):n=e,n=n||0,t=t||0,this.scrollTarget===this._doc?window.scrollTo(n,t):this._isValidScrollTarget()&&(this.scrollTarget.scrollLeft=n,this.scrollTarget.scrollTop=t)},get _scrollTargetWidth(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerWidth:this.scrollTarget.offsetWidth:0},get _scrollTargetHeight(){return this._isValidScrollTarget()?this.scrollTarget===this._doc?window.innerHeight:this.scrollTarget.offsetHeight:0},_isValidScrollTarget:function(){return this.scrollTarget instanceof HTMLElement},_toggleScrollListener:function(e,t){var n=t===this._doc?window:t;e?this._boundScrollHandler||(this._boundScrollHandler=this._scrollHandler.bind(this),n.addEventListener("scroll",this._boundScrollHandler)):this._boundScrollHandler&&(n.removeEventListener("scroll",this._boundScrollHandler),this._boundScrollHandler=null)},toggleScrollListener:function(e){this._shouldHaveListener=e,this._toggleScrollListener(e,this.scrollTarget)}}},function(e,t,n){"use strict";n(0),n(5),n(4),n(10),n(2).register('<dom-module id=app-header> <template> <style>:host{position:relative;display:block;transition-timing-function:linear;transition-property:-webkit-transform;transition-property:transform}:host::before{position:absolute;right:0;bottom:-5px;left:0;width:100%;height:5px;content:"";transition:opacity .4s;pointer-events:none;opacity:0;box-shadow:inset 0 5px 6px -3px rgba(0,0,0,.4);will-change:opacity;@apply --app-header-shadow;}:host([shadow])::before{opacity:1}#background{@apply --layout-fit;overflow:hidden}#backgroundFrontLayer,#backgroundRearLayer{@apply --layout-fit;height:100%;pointer-events:none;background-size:cover}#backgroundFrontLayer{@apply --app-header-background-front-layer;}#backgroundRearLayer{opacity:0;@apply --app-header-background-rear-layer;}#contentContainer{position:relative;width:100%;height:100%}:host([disabled]),:host([disabled]) #backgroundFrontLayer,:host([disabled]) #backgroundRearLayer,:host([disabled])::after,:host([silent-scroll]),:host([silent-scroll]) #backgroundFrontLayer,:host([silent-scroll]) #backgroundRearLayer,:host([silent-scroll])::after{transition:none!important}:host([disabled]) ::slotted([sticky]),:host([disabled]) ::slotted(app-toolbar:first-of-type),:host([silent-scroll]) ::slotted([sticky]),:host([silent-scroll]) ::slotted(app-toolbar:first-of-type){transition:none!important}</style> <div id=contentContainer> <slot id=slot></slot> </div> </template> </dom-module>'),Polymer({is:"app-header",behaviors:[Polymer.AppScrollEffectsBehavior,Polymer.AppLayoutBehavior],properties:{condenses:{type:Boolean,value:!1},fixed:{type:Boolean,value:!1},reveals:{type:Boolean,value:!1},shadow:{type:Boolean,reflectToAttribute:!0,value:!1}},observers:["_configChanged(isAttached, condenses, fixed)"],_height:0,_dHeight:0,_stickyElTop:0,_stickyElRef:null,_top:0,_progress:0,_wasScrollingDown:!1,_initScrollTop:0,_initTimestamp:0,_lastTimestamp:0,_lastScrollTop:0,get _maxHeaderTop(){return this.fixed?this._dHeight:this._height+5},get _stickyEl(){if(this._stickyElRef)return this._stickyElRef;for(var e,t=Polymer.dom(this.$.slot).getDistributedNodes(),n=0;e=t[n];n++)if(e.nodeType===Node.ELEMENT_NODE){if(e.hasAttribute("sticky")){this._stickyElRef=e;break}this._stickyElRef||(this._stickyElRef=e)}return this._stickyElRef},_configChanged:function(){this.resetLayout(),this._notifyLayoutChanged()},_updateLayoutStates:function(){if(0!==this.offsetWidth||0!==this.offsetHeight){var e=this._clampedScrollTop,t=0===this._height||0===e,n=this.disabled;this._height=this.offsetHeight,this._stickyElRef=null,this.disabled=!0,t||this._updateScrollState(0,!0),this._mayMove()?this._dHeight=this._stickyEl?this._height-this._stickyEl.offsetHeight:0:this._dHeight=0,this._stickyElTop=this._stickyEl?this._stickyEl.offsetTop:0,this._setUpEffect(),t?this._updateScrollState(e,!0):(this._updateScrollState(this._lastScrollTop,!0),this._layoutIfDirty()),this.disabled=n}},_updateScrollState:function(e,t){if(0!==this._height){var n=0,r=0,i=this._top,o=(this._lastScrollTop,this._maxHeaderTop),a=e-this._lastScrollTop,s=Math.abs(a),l=e>this._lastScrollTop,c=performance.now();if(this._mayMove()&&(r=this._clamp(this.reveals?i+a:e,0,o)),e>=this._dHeight&&(r=this.condenses&&!this.fixed?Math.max(this._dHeight,r):r,this.style.transitionDuration="0ms"),this.reveals&&!this.disabled&&s<100&&((c-this._initTimestamp>300||this._wasScrollingDown!==l)&&(this._initScrollTop=e,this._initTimestamp=c),e>=o))if(Math.abs(this._initScrollTop-e)>30||s>10){l&&e>=o?r=o:!l&&e>=this._dHeight&&(r=this.condenses&&!this.fixed?this._dHeight:0);var u=a/(c-this._lastTimestamp);this.style.transitionDuration=this._clamp((r-i)/u,0,300)+"ms"}else r=this._top;n=0===this._dHeight?e>0?1:0:r/this._dHeight,t||(this._lastScrollTop=e,this._top=r,this._wasScrollingDown=l,this._lastTimestamp=c),(t||n!==this._progress||i!==r||0===e)&&(this._progress=n,this._runEffects(n,r),this._transformHeader(r))}},_mayMove:function(){return this.condenses||!this.fixed},willCondense:function(){return this._dHeight>0&&this.condenses},isOnScreen:function(){return 0!==this._height&&this._top<this._height},isContentBelow:function(){return 0===this._top?this._clampedScrollTop>0:this._clampedScrollTop-this._maxHeaderTop>=0},_transformHeader:function(e){this.translate3d(0,-e+"px",0),this._stickyEl&&this.translate3d(0,this.condenses&&e>=this._stickyElTop?Math.min(e,this._dHeight)-this._stickyElTop+"px":0,0,this._stickyEl)},_clamp:function(e,t,n){return Math.min(n,Math.max(t,e))},_ensureBgContainers:function(){this._bgContainer||(this._bgContainer=document.createElement("div"),this._bgContainer.id="background",this._bgRear=document.createElement("div"),this._bgRear.id="backgroundRearLayer",this._bgContainer.appendChild(this._bgRear),this._bgFront=document.createElement("div"),this._bgFront.id="backgroundFrontLayer",this._bgContainer.appendChild(this._bgFront),Polymer.dom(this.root).insertBefore(this._bgContainer,this.$.contentContainer))},_getDOMRef:function(e){switch(e){case"backgroundFrontLayer":return this._ensureBgContainers(),this._bgFront;case"backgroundRearLayer":return this._ensureBgContainers(),this._bgRear;case"background":return this._ensureBgContainers(),this._bgContainer;case"mainTitle":return Polymer.dom(this).querySelector("[main-title]");case"condensedTitle":return Polymer.dom(this).querySelector("[condensed-title]")}return null},getScrollState:function(){return{progress:this._progress,top:this._top}}})},function(e,t,n){"use strict";n(0),Polymer({is:"iron-media-query",properties:{queryMatches:{type:Boolean,value:!1,readOnly:!0,notify:!0},query:{type:String,observer:"queryChanged"},full:{type:Boolean,value:!1},_boundMQHandler:{value:function(){return this.queryHandler.bind(this)}},_mq:{value:null}},attached:function(){this.style.display="none",this.queryChanged()},detached:function(){this._remove()},_add:function(){this._mq&&this._mq.addListener(this._boundMQHandler)},_remove:function(){this._mq&&this._mq.removeListener(this._boundMQHandler),this._mq=null},queryChanged:function(){this._remove();var e=this.query;e&&(this.full||"("===e[0]||(e="("+e+")"),this._mq=window.matchMedia(e),this._add(),this.queryHandler(this._mq))},queryHandler:function(e){this._setQueryMatches(e.matches)}})},function(e,t,n){"use strict";n(0),n(57),n(10),n(2).register('<dom-module id=app-drawer-layout> <template> <style>:host{display:block;position:relative;z-index:0}:host ::slotted([slot=drawer]){z-index:1}:host([fullbleed]){@apply --layout-fit;}#contentContainer{position:relative;z-index:0;height:100%;transition:var(--app-drawer-layout-content-transition,none)}#contentContainer[drawer-position=left]{margin-left:var(--app-drawer-width,256px)}#contentContainer[drawer-position=right]{margin-right:var(--app-drawer-width,256px)}</style> <slot id=drawerSlot name=drawer></slot> <div id=contentContainer drawer-position$=[[_drawerPosition]]> <slot></slot> </div> <iron-media-query query="[[_computeMediaQuery(forceNarrow, responsiveWidth)]]" on-query-matches-changed=_onQueryMatchesChanged></iron-media-query> </template> </dom-module>'),Polymer({is:"app-drawer-layout",behaviors:[Polymer.AppLayoutBehavior],properties:{forceNarrow:{type:Boolean,value:!1},responsiveWidth:{type:String,value:"640px"},narrow:{type:Boolean,reflectToAttribute:!0,readOnly:!0,notify:!0},openedWhenNarrow:{type:Boolean,value:!1},_drawerPosition:{type:String}},listeners:{click:"_clickHandler"},observers:["_narrowChanged(narrow)"],get drawer(){return Polymer.dom(this.$.drawerSlot).getDistributedNodes()[0]},attached:function(){var e=this.drawer;e&&e.setAttribute("no-transition","")},_clickHandler:function(e){var t=Polymer.dom(e).localTarget;if(t&&t.hasAttribute("drawer-toggle")){var n=this.drawer;n&&!n.persistent&&n.toggle()}},_updateLayoutStates:function(){var e=this.drawer;this.isAttached&&e&&(this._drawerPosition=this.narrow?null:e.position,this._drawerNeedsReset&&(this.narrow?(e.opened=this.openedWhenNarrow,e.persistent=!1):e.opened=e.persistent=!0,e.hasAttribute("no-transition")&&Polymer.RenderStatus.afterNextRender(this,function(){e.removeAttribute("no-transition")}),this._drawerNeedsReset=!1))},_narrowChanged:function(){this._drawerNeedsReset=!0,this.resetLayout()},_onQueryMatchesChanged:function(e){this._setNarrow(e.detail.value)},_computeMediaQuery:function(e,t){return e?"(min-width: 0px)":"(max-width: "+t+")"}})},function(e,t,n){"use strict";var r;n(7),r=void 0,r=Polymer.MutableData._mutablePropertyChange,Polymer.MutableDataBehavior={_shouldPropertyChange:function(e,t,n){return r(this,e,t,n,!0)}},Polymer.OptionalMutableDataBehavior={properties:{mutableData:Boolean},_shouldPropertyChange:function(e,t,n){return r(this,e,t,n,this.mutableData)}}},function(e,t,n){"use strict";(function(){var e,t=!(window.ShadyDOM&&window.ShadyDOM.inUse);function n(n){e=(!n||!n.shimcssproperties)&&(t||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?e=window.ShadyCSS.nativeCss:window.ShadyCSS?(n(window.ShadyCSS),window.ShadyCSS=void 0):n(window.WebComponents&&window.WebComponents.flags);var r=e;function i(e,t){for(var n in t)null===n?e.style.removeProperty(n):e.style.setProperty(n,t[n])}var o,a=null,s=window.HTMLImports&&window.HTMLImports.whenReady||null;var l=null,c=null;function u(){this.customStyles=[],this.enqueued=!1}function p(e){!e.enqueued&&c&&(e.enqueued=!0,function(){var e=c;requestAnimationFrame(function(){s?s(e):(a||(a=new Promise(function(e){o=e}),"complete"===document.readyState?o():document.addEventListener("readystatechange",function(){"complete"===document.readyState&&o()})),a.then(function(){e&&e()}))})}())}u.prototype.c=function(e){e.__seenByShadyCSS||(e.__seenByShadyCSS=!0,this.customStyles.push(e),p(this))},u.prototype.b=function(e){return e.__shadyCSSCachedStyle?e.__shadyCSSCachedStyle:e.getStyle?e.getStyle():e},u.prototype.a=function(){for(var e=this.customStyles,t=0;t<e.length;t++){var n=e[t];if(!n.__shadyCSSCachedStyle){var r=this.b(n);r&&(r=r.__appliedElement||r,l&&l(r),n.__shadyCSSCachedStyle=r)}}return e},u.prototype.addCustomStyle=u.prototype.c,u.prototype.getStyleForCustomStyle=u.prototype.b,u.prototype.processStyles=u.prototype.a,Object.defineProperties(u.prototype,{transformCallback:{get:function(){return l},set:function(e){l=e}},validateCallback:{get:function(){return c},set:function(e){var t=!1;c||(t=!0),c=e,t&&p(this)}}});var h=new u;window.ShadyCSS||(window.ShadyCSS={prepareTemplate:function(){},styleSubtree:function(e,t){h.a(),i(e,t)},styleElement:function(){h.a()},styleDocument:function(e){h.a(),i(document.body,e)},getComputedStyleValue:function(e,t){return(e=window.getComputedStyle(e).getPropertyValue(t))?e.trim():""},nativeCss:r,nativeShadow:t}),window.ShadyCSS.CustomStyleInterface=h}).call(void 0)},function(e,t,n){"use strict";n(60)},function(e,t,n){"use strict";var r,i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(61),n(31),r=window.ShadyCSS.CustomStyleInterface,i=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._style=null,r.addCustomStyle(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,HTMLElement),o(t,[{key:"getStyle",value:function(){if(this._style)return this._style;var e=this.querySelector("style");if(!e)return null;this._style=e;var t=e.getAttribute("include");return t&&(e.removeAttribute("include"),e.textContent=Polymer.StyleGather.cssFromModules(t)+e.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}}]),t}(),window.customElements.define("custom-style",i),Polymer.CustomStyle=i},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n(6),n(3),n(24),function(){var e=Polymer.dedupingMixin(function(e){var t=Polymer.ElementMixin(e);return function(e){function n(){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.__lastItems=null,e.__lastMulti=null,e.__selectedMap=null,e}return a(n,t),r(n,null,[{key:"properties",get:function(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}},{key:"observers",get:function(){return["__updateSelection(multi, items.*)"]}}]),r(n,[{key:"__updateSelection",value:function(e,t){var n=t.path;if("items"==n){var r=t.base||[],i=this.__lastItems;if(e!==this.__lastMulti&&this.clearSelection(),i){var o=Polymer.ArraySplice.calculateSplices(r,i);this.__applySplices(o)}this.__lastItems=r,this.__lastMulti=e}else if("items.splices"==t.path)this.__applySplices(t.value.indexSplices);else{var a=n.slice("items.".length),s=parseInt(a,10);a.indexOf(".")<0&&a==s&&this.__deselectChangedIdx(s)}}},{key:"__applySplices",value:function(e){for(var t=this,n=this.__selectedMap,r=function(r){var i=e[r];n.forEach(function(e,t){e<i.index||(e>=i.index+i.removed.length?n.set(t,e+i.addedCount-i.removed.length):n.set(t,-1))});for(var o=0;o<i.addedCount;o++){var a=i.index+o;n.has(t.items[a])&&n.set(t.items[a],a)}},i=0;i<e.length;i++)r(i);this.__updateLinks();var o=0;n.forEach(function(e,r){e<0?(t.multi?t.splice("selected",o,1):t.selected=t.selectedItem=null,n.delete(r)):o++})}},{key:"__updateLinks",value:function(){var e=this;if(this.__dataLinkedPaths={},this.multi){var t=0;this.__selectedMap.forEach(function(n){n>=0&&e.linkPaths("items."+n,"selected."+t++)})}else this.__selectedMap.forEach(function(t){e.linkPaths("selected","items."+t),e.linkPaths("selectedItem","items."+t)})}},{key:"clearSelection",value:function(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}},{key:"isSelected",value:function(e){return this.__selectedMap.has(e)}},{key:"isIndexSelected",value:function(e){return this.isSelected(this.items[e])}},{key:"__deselectChangedIdx",value:function(e){var t=this,n=this.__selectedIndexForItemIndex(e);if(n>=0){var r=0;this.__selectedMap.forEach(function(e,i){n==r++&&t.deselect(i)})}}},{key:"__selectedIndexForItemIndex",value:function(e){var t=this.__dataLinkedPaths["items."+e];if(t)return parseInt(t.slice("selected.".length),10)}},{key:"deselect",value:function(e){var t=this.__selectedMap.get(e);if(t>=0){this.__selectedMap.delete(e);var n=void 0;this.multi&&(n=this.__selectedIndexForItemIndex(t)),this.__updateLinks(),this.multi?this.splice("selected",n,1):this.selected=this.selectedItem=null}}},{key:"deselectIndex",value:function(e){this.deselect(this.items[e])}},{key:"select",value:function(e){this.selectIndex(this.items.indexOf(e))}},{key:"selectIndex",value:function(e){var t=this.items[e];this.isSelected(t)?this.toggle&&this.deselectIndex(e):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(t,e),this.__updateLinks(),this.multi?this.push("selected",t):this.selected=this.selectedItem=t)}}]),n}()});Polymer.ArraySelectorMixin=e;var t=e(Polymer.Element),n=function(e){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return a(n,t),r(n,null,[{key:"is",get:function(){return"array-selector"}}]),n}();customElements.define(n.is,n),Polymer.ArraySelector=n}()},function(e,t,n){"use strict";var r,i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(6),n(11),n(13),n(12),r=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.__renderDebouncer=null,e.__invalidProps=null,e.__instance=null,e._lastIf=!1,e.__ctor=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Polymer.Element),o(t,null,[{key:"is",get:function(){return"dom-if"}},{key:"template",get:function(){return null}},{key:"properties",get:function(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"}}}}]),o(t,[{key:"__debounceRender",value:function(){var e=this;this.__renderDebouncer=Polymer.Debouncer.debounce(this.__renderDebouncer,Polymer.Async.microTask,function(){return e.__render()}),Polymer.enqueueDebouncer(this.__renderDebouncer)}},{key:"disconnectedCallback",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"disconnectedCallback",this).call(this),this.parentNode&&(this.parentNode.nodeType!=Node.DOCUMENT_FRAGMENT_NODE||this.parentNode.host)||this.__teardownInstance()}},{key:"connectedCallback",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"connectedCallback",this).call(this),this.style.display="none",this.if&&this.__debounceRender()}},{key:"render",value:function(){Polymer.flush()}},{key:"__render",value:function(){if(this.if){if(!this.__ensureInstance())return;this._showHideChildren()}else this.restamp&&this.__teardownInstance();!this.restamp&&this.__instance&&this._showHideChildren(),this.if!=this._lastIf&&(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}},{key:"__ensureInstance",value:function(){var e=this,t=this.parentNode;if(t){if(!this.__ctor){var n=this.querySelector("template");if(!n){var r=new MutationObserver(function(){if(!e.querySelector("template"))throw new Error("dom-if requires a <template> child");r.disconnect(),e.__render()});return r.observe(this,{childList:!0}),!1}this.__ctor=Polymer.Templatize.templatize(n,this,{mutableData:!0,forwardHostProp:function(e,t){this.__instance&&(this.if?this.__instance.forwardHostProp(e,t):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[Polymer.Path.root(e)]=!0))}})}if(this.__instance){this.__syncHostProperties();var i=this.__instance.children;if(i&&i.length)if(this.previousSibling!==i[i.length-1])for(var o,a=0;a<i.length&&(o=i[a]);a++)t.insertBefore(o,this)}else this.__instance=new this.__ctor,t.insertBefore(this.__instance.root,this)}return!0}},{key:"__syncHostProperties",value:function(){var e=this.__invalidProps;if(e){for(var t in e)this.__instance._setPendingProperty(t,this.__dataHost[t]);this.__invalidProps=null,this.__instance._flushProperties()}}},{key:"__teardownInstance",value:function(){if(this.__instance){var e=this.__instance.children;if(e&&e.length)for(var t,n=e[0].parentNode,r=0;r<e.length&&(t=e[r]);r++)n.removeChild(t);this.__instance=null,this.__invalidProps=null}}},{key:"_showHideChildren",value:function(){var e=this.__hideTemplateChildren__||!this.if;this.__instance&&this.__instance._showHideChildren(e)}}]),t}(),customElements.define(r.is,r),Polymer.DomIf=r},function(e,t,n){"use strict";var r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(6),n(11),n(13),n(12),n(7),function(){Polymer.TemplateInstanceBase;var e=Polymer.OptionalMutableData(Polymer.Element),t=function(t){function n(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.__instances=[],e.__limit=1/0,e.__pool=[],e.__renderDebouncer=null,e.__itemsIdxToInstIdx={},e.__chunkCount=null,e.__lastChunkTime=null,e.__sortFn=null,e.__filterFn=null,e.__observePaths=null,e.__ctor=null,e.__isDetached=!0,e.template=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,e),i(n,null,[{key:"is",get:function(){return"dom-repeat"}},{key:"template",get:function(){return null}},{key:"properties",get:function(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!0,readOnly:!0},initialCount:{type:Number,observer:"__initializeChunking"},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}},{key:"observers",get:function(){return["__itemsChanged(items.*)"]}}]),i(n,[{key:"disconnectedCallback",value:function(){r(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"disconnectedCallback",this).call(this),this.__isDetached=!0;for(var e=0;e<this.__instances.length;e++)this.__detachInstance(e)}},{key:"connectedCallback",value:function(){if(r(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"connectedCallback",this).call(this),this.style.display="none",this.__isDetached){this.__isDetached=!1;for(var e=this.parentNode,t=0;t<this.__instances.length;t++)this.__attachInstance(t,e)}}},{key:"__ensureTemplatized",value:function(){var e=this;if(!this.__ctor){var t=this.template=this.querySelector("template");if(!t){var n=new MutationObserver(function(){if(!e.querySelector("template"))throw new Error("dom-repeat requires a <template> child");n.disconnect(),e.__render()});return n.observe(this,{childList:!0}),!1}var r={};r[this.as]=!0,r[this.indexAs]=!0,r[this.itemsIndexAs]=!0,this.__ctor=Polymer.Templatize.templatize(t,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:r,forwardHostProp:function(e,t){for(var n,r=this.__instances,i=0;i<r.length&&(n=r[i]);i++)n.forwardHostProp(e,t)},notifyInstanceProp:function(e,t,n){if(Polymer.Path.matches(this.as,t)){var r=e[this.itemsIndexAs];t==this.as&&(this.items[r]=n);var i=Polymer.Path.translate(this.as,"items."+r,t);this.notifyPath(i,n)}}})}return!0}},{key:"__getMethodHost",value:function(){return this.__dataHost._methodHost||this.__dataHost}},{key:"__functionFromPropertyValue",value:function(e){if("string"==typeof e){var t=e,n=this.__getMethodHost();return function(){return n[t].apply(n,arguments)}}return e}},{key:"__sortChanged",value:function(e){this.__sortFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}},{key:"__filterChanged",value:function(e){this.__filterFn=this.__functionFromPropertyValue(e),this.items&&this.__debounceRender(this.__render)}},{key:"__computeFrameTime",value:function(e){return Math.ceil(1e3/e)}},{key:"__initializeChunking",value:function(){this.initialCount&&(this.__limit=this.initialCount,this.__chunkCount=this.initialCount,this.__lastChunkTime=performance.now())}},{key:"__tryRenderChunk",value:function(){this.items&&this.__limit<this.items.length&&this.__debounceRender(this.__requestRenderChunk)}},{key:"__requestRenderChunk",value:function(){var e=this;requestAnimationFrame(function(){return e.__renderChunk()})}},{key:"__renderChunk",value:function(){var e=performance.now(),t=this._targetFrameTime/(e-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*t)||1,this.__limit+=this.__chunkCount,this.__lastChunkTime=e,this.__debounceRender(this.__render)}},{key:"__observeChanged",value:function(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}},{key:"__itemsChanged",value:function(e){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(e.path,e.value)||(this.__initializeChunking(),this.__debounceRender(this.__render))}},{key:"__handleObservedPaths",value:function(e){if(this.__sortFn||this.__filterFn)if(e){if(this.__observePaths)for(var t=this.__observePaths,n=0;n<t.length;n++)0===e.indexOf(t[n])&&this.__debounceRender(this.__render,this.delay)}else this.__debounceRender(this.__render,this.delay)}},{key:"__debounceRender",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.__renderDebouncer=Polymer.Debouncer.debounce(this.__renderDebouncer,t>0?Polymer.Async.timeOut.after(t):Polymer.Async.microTask,e.bind(this)),Polymer.enqueueDebouncer(this.__renderDebouncer)}},{key:"render",value:function(){this.__debounceRender(this.__render),Polymer.flush()}},{key:"__render",value:function(){this.__ensureTemplatized()&&(this.__applyFullRefresh(),this.__pool.length=0,this._setRenderedItemCount(this.__instances.length),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this.__tryRenderChunk())}},{key:"__applyFullRefresh",value:function(){for(var e=this,t=this.items||[],n=new Array(t.length),r=0;r<t.length;r++)n[r]=r;this.__filterFn&&(n=n.filter(function(n,r,i){return e.__filterFn(t[n],r,i)})),this.__sortFn&&n.sort(function(n,r){return e.__sortFn(t[n],t[r])});for(var i=this.__itemsIdxToInstIdx={},o=0,a=Math.min(n.length,this.__limit);o<a;o++){var s=this.__instances[o],l=n[o],c=t[l];i[l]=o,s?(s._setPendingProperty(this.as,c),s._setPendingProperty(this.indexAs,o),s._setPendingProperty(this.itemsIndexAs,l),s._flushProperties()):this.__insertInstance(c,o,l)}for(var u=this.__instances.length-1;u>=o;u--)this.__detachAndRemoveInstance(u)}},{key:"__detachInstance",value:function(e){for(var t=this.__instances[e],n=0;n<t.children.length;n++){var r=t.children[n];t.root.appendChild(r)}return t}},{key:"__attachInstance",value:function(e,t){var n=this.__instances[e];t.insertBefore(n.root,this)}},{key:"__detachAndRemoveInstance",value:function(e){var t=this.__detachInstance(e);t&&this.__pool.push(t),this.__instances.splice(e,1)}},{key:"__stampInstance",value:function(e,t,n){var r={};return r[this.as]=e,r[this.indexAs]=t,r[this.itemsIndexAs]=n,new this.__ctor(r)}},{key:"__insertInstance",value:function(e,t,n){var r=this.__pool.pop();r?(r._setPendingProperty(this.as,e),r._setPendingProperty(this.indexAs,t),r._setPendingProperty(this.itemsIndexAs,n),r._flushProperties()):r=this.__stampInstance(e,t,n);var i=this.__instances[t+1],o=i?i.children[0]:this;return this.parentNode.insertBefore(r.root,o),this.__instances[t]=r,r}},{key:"_showHideChildren",value:function(e){for(var t=0;t<this.__instances.length;t++)this.__instances[t]._showHideChildren(e)}},{key:"__handleItemPath",value:function(e,t){var n=e.slice(6),r=n.indexOf("."),i=r<0?n:n.substring(0,r);if(i==parseInt(i,10)){var o=r<0?"":n.substring(r+1);this.__handleObservedPaths(o);var a=this.__itemsIdxToInstIdx[i],s=this.__instances[a];if(s){var l=this.as+(o?"."+o:"");s._setPendingPropertyOrPath(l,t,!1,!0),s._flushProperties()}return!0}}},{key:"itemForElement",value:function(e){var t=this.modelForElement(e);return t&&t[this.as]}},{key:"indexForElement",value:function(e){var t=this.modelForElement(e);return t&&t[this.indexAs]}},{key:"modelForElement",value:function(e){return Polymer.Templatize.modelForElement(this.template,e)}}]),n}();customElements.define(t.is,t),Polymer.DomRepeat=t}()},function(e,t,n){"use strict";var r,i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(14),n(7),n(25),r=Polymer.GestureEventListeners(Polymer.OptionalMutableData(Polymer.PropertyEffects(HTMLElement))),i=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.root=null,e.$=null,e.__children=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r),o(t,null,[{key:"observedAttributes",get:function(){return["mutable-data"]}}]),o(t,[{key:"attributeChangedCallback",value:function(){this.mutableData=!0}},{key:"connectedCallback",value:function(){this.style.display="none",this.render()}},{key:"disconnectedCallback",value:function(){this.__removeChildren()}},{key:"__insertChildren",value:function(){this.parentNode.insertBefore(this.root,this)}},{key:"__removeChildren",value:function(){if(this.__children)for(var e=0;e<this.__children.length;e++)this.root.appendChild(this.__children[e])}},{key:"render",value:function(){var e=this,t=void 0;if(!this.__children){if(!(t=t||this.querySelector("template"))){var n=new MutationObserver(function(){if(!(t=e.querySelector("template")))throw new Error("dom-bind requires a <template> child");n.disconnect(),e.render()});return void n.observe(this,{childList:!0})}this.root=this._stampTemplate(t),this.$=this.root.$,this.__children=[];for(var r=this.root.firstChild;r;r=r.nextSibling)this.__children[this.__children.length]=r;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}]),t}(),customElements.define("dom-bind",i),Polymer.DomBind=i},function(e,t,n){"use strict";n(11),function(){Polymer.TemplateInstanceBase;Polymer.Templatizer={templatize:function(e,t){this._templatizerTemplate=e,this.ctor=Polymer.Templatize.templatize(e,this,{mutableData:Boolean(t),parentModel:this._parentModel,instanceProps:this._instanceProps,forwardHostProp:this._forwardHostPropV2,notifyInstanceProp:this._notifyInstancePropV2})},stamp:function(e){return new this.ctor(e)},modelForElement:function(e){return Polymer.Templatize.modelForElement(this._templatizerTemplate,e)}}}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(26),function(){var e={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0};function t(e,t){if(!e)return t=t;t=Polymer.LegacyElementMixin(t),Array.isArray(e)||(e=[e]);var r=t.prototype.behaviors;return t=function e(t,r){for(var i=0;i<t.length;i++){var o=t[i];o&&(r=Array.isArray(o)?e(o,r):n(o,r))}return r}(e=function e(t,n,r){n=n||[];for(var i=t.length-1;i>=0;i--){var o=t[i];o?Array.isArray(o)?e(o,n):n.indexOf(o)<0&&(!r||r.indexOf(o)<0)&&n.unshift(o):console.warn("behavior is null, check for missing or 404 import")}return n}(e,null,r),t),r&&(e=r.concat(e)),t.prototype.behaviors=e,t}function n(t,n){var o=function(e){function o(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,n),r(o,[{key:"created",value:function(){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"created",this).call(this),t.created&&t.created.call(this)}},{key:"_registered",value:function(){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"_registered",this).call(this),t.beforeRegister&&t.beforeRegister.call(Object.getPrototypeOf(this)),t.registered&&t.registered.call(Object.getPrototypeOf(this))}},{key:"_applyListeners",value:function(){if(i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"_applyListeners",this).call(this),t.listeners)for(var e in t.listeners)this._addMethodEventListenerToNode(this,e,t.listeners[e])}},{key:"_ensureAttributes",value:function(){if(t.hostAttributes)for(var e in t.hostAttributes)this._ensureAttribute(e,t.hostAttributes[e]);i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"_ensureAttributes",this).call(this)}},{key:"ready",value:function(){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"ready",this).call(this),t.ready&&t.ready.call(this)}},{key:"attached",value:function(){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"attached",this).call(this),t.attached&&t.attached.call(this)}},{key:"detached",value:function(){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"detached",this).call(this),t.detached&&t.detached.call(this)}},{key:"attributeChanged",value:function(e,n,r){i(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"attributeChanged",this).call(this,e,n,r),t.attributeChanged&&t.attributeChanged.call(this,e,n,r)}}],[{key:"properties",get:function(){return t.properties}},{key:"observers",get:function(){return t.observers}},{key:"template",get:function(){return t._template||Polymer.DomModule&&Polymer.DomModule.import(this.is,"template")||n.template||this.prototype._template||null}}]),o}();for(var a in o.generatedFrom=t,t)if(!(a in e)){var s=Object.getOwnPropertyDescriptor(t,a);s&&Object.defineProperty(o.prototype,a,s)}return o}Polymer.Class=function(e){e||console.warn("Polymer.Class requires `info` argument");var r=n(e,e.behaviors?t(e.behaviors,HTMLElement):Polymer.LegacyElementMixin(HTMLElement));return r.is=e.is,r},Polymer.mixinBehaviors=t}()},function(e,t,n){"use strict";n(68),window.Polymer._polymerFn=function(e){var t=void 0;return t="function"==typeof e?e:Polymer.Class(e),customElements.define(t.is,t),t}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(24),n(8),function(){function e(e){return"slot"===e.localName}var t=function(){function t(e,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=e,this.callback=n,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=function(){r._schedule()},this.connect(),this._schedule()}return r(t,null,[{key:"getFlattenedNodes",value:function(t){return e(t)?(t=t).assignedNodes({flatten:!0}):Array.from(t.childNodes).map(function(t){return e(t)?(t=t).assignedNodes({flatten:!0}):[t]}).reduce(function(e,t){return e.concat(t)},[])}}]),r(t,[{key:"connect",value:function(){var t=this;e(this._target)?this._listenSlots([this._target]):this._target.children&&(this._listenSlots(this._target.children),window.ShadyDOM?this._shadyChildrenObserver=ShadyDOM.observeChildren(this._target,function(e){t._processMutations(e)}):(this._nativeChildrenObserver=new MutationObserver(function(e){t._processMutations(e)}),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}},{key:"disconnect",value:function(){e(this._target)?this._unlistenSlots([this._target]):this._target.children&&(this._unlistenSlots(this._target.children),window.ShadyDOM&&this._shadyChildrenObserver?(ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}},{key:"_schedule",value:function(){var e=this;this._scheduled||(this._scheduled=!0,Polymer.Async.microTask.run(function(){return e.flush()}))}},{key:"_processMutations",value:function(e){this._processSlotMutations(e),this.flush()}},{key:"_processSlotMutations",value:function(e){if(e)for(var t=0;t<e.length;t++){var n=e[t];n.addedNodes&&this._listenSlots(n.addedNodes),n.removedNodes&&this._unlistenSlots(n.removedNodes)}}},{key:"flush",value:function(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;for(var e,t={target:this._target,addedNodes:[],removedNodes:[]},n=this.constructor.getFlattenedNodes(this._target),r=Polymer.ArraySplice.calculateSplices(n,this._effectiveNodes),i=0;i<r.length&&(e=r[i]);i++)for(var o,a=0;a<e.removed.length&&(o=e.removed[a]);a++)t.removedNodes.push(o);for(var s,l=0;l<r.length&&(s=r[l]);l++)for(var c=s.index;c<s.index+s.addedCount;c++)t.addedNodes.push(n[c]);this._effectiveNodes=n;var u=!1;return(t.addedNodes.length||t.removedNodes.length)&&(u=!0,this.callback.call(this._target,t)),u}},{key:"_listenSlots",value:function(t){for(var n=0;n<t.length;n++){var r=t[n];e(r)&&r.addEventListener("slotchange",this._boundSchedule)}}},{key:"_unlistenSlots",value:function(t){for(var n=0;n<t.length;n++){var r=t[n];e(r)&&r.removeEventListener("slotchange",this._boundSchedule)}}}]),t}();Polymer.FlattenedNodesObserver=t}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n(1),n(32),n(70),n(12),function(){var e=Element.prototype,t=e.matches||e.matchesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector,n=function(e,n){return t.call(e,n)},o=function(){function e(t){i(this,e),this.node=t}return r(e,[{key:"observeNodes",value:function(e){return new Polymer.FlattenedNodesObserver(this.node,e)}},{key:"unobserveNodes",value:function(e){e.disconnect()}},{key:"notifyObserver",value:function(){}},{key:"deepContains",value:function(e){if(this.node.contains(e))return!0;for(var t=e,n=e.ownerDocument;t&&t!==n&&t!==this.node;)t=t.parentNode||t.host;return t===this.node}},{key:"getOwnerRoot",value:function(){return this.node.getRootNode()}},{key:"getDistributedNodes",value:function(){return"slot"===this.node.localName?this.node.assignedNodes({flatten:!0}):[]}},{key:"getDestinationInsertionPoints",value:function(){for(var e=[],t=this.node.assignedSlot;t;)e.push(t),t=t.assignedSlot;return e}},{key:"importNode",value:function(e,t){return(this.node instanceof Document?this.node:this.node.ownerDocument).importNode(e,t)}},{key:"getEffectiveChildNodes",value:function(){return Polymer.FlattenedNodesObserver.getFlattenedNodes(this.node)}},{key:"queryDistributedElements",value:function(e){for(var t,r=this.getEffectiveChildNodes(),i=[],o=0,a=r.length;o<a&&(t=r[o]);o++)t.nodeType===Node.ELEMENT_NODE&&n(t,e)&&i.push(t);return i}},{key:"activeElement",get:function(){var e=this.node;return void 0!==e._activeElement?e._activeElement:e.activeElement}}]),e}();!function(e,t){for(var n=function(n){var r=t[n];e[r]=function(){return this.node[r].apply(this.node,arguments)}},r=0;r<t.length;r++)n(r)}(o.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),function(e,t){for(var n=function(n){var r=t[n];Object.defineProperty(e,r,{get:function(){return this.node[r]},configurable:!0})},r=0;r<t.length;r++)n(r)}(o.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),function(e,t){for(var n=function(n){var r=t[n];Object.defineProperty(e,r,{get:function(){return this.node[r]},set:function(e){this.node[r]=e},configurable:!0})},r=0;r<t.length;r++)n(r)}(o.prototype,["textContent","innerHTML"]);var a=function(){function e(t){i(this,e),this.event=t}return r(e,[{key:"rootTarget",get:function(){return this.event.composedPath()[0]}},{key:"localTarget",get:function(){return this.event.target}},{key:"path",get:function(){return this.event.composedPath()}}]),e}();Polymer.DomApi=o,Polymer.DomApi.prototype.cloneNode,Polymer.DomApi.prototype.appendChild,Polymer.DomApi.prototype.insertBefore,Polymer.DomApi.prototype.removeChild,Polymer.DomApi.prototype.replaceChild,Polymer.DomApi.prototype.setAttribute,Polymer.DomApi.prototype.removeAttribute,Polymer.DomApi.prototype.querySelector,Polymer.DomApi.prototype.querySelectorAll,Polymer.dom=function(e){if(!(e=e||document).__domApi){var t=void 0;t=e instanceof Event?new a(e):new o(e),e.__domApi=t}return e.__domApi},Polymer.dom.matchesSelector=n,Polymer.dom.flush=Polymer.flush,Polymer.dom.addDebouncer=Polymer.enqueueDebouncer}()},function(e,t,n){"use strict";!function(){function e(){document.body.removeAttribute("unresolved")}window.WebComponents?window.addEventListener("WebComponentsReady",e):"interactive"===document.readyState||"complete"===document.readyState?e():window.addEventListener("DOMContentLoaded",e)}()},function(e,t,n){"use strict";n(1),function(){var e=!1,t=[],n=[];function r(){e=!0,requestAnimationFrame(function(){e=!1,i(t),setTimeout(function(){!function(e){for(var t=0,n=e.length;t<n;t++)o(e.shift())}(n)})})}function i(e){for(;e.length;)o(e.shift())}function o(e){var t=e[0],n=e[1],r=e[2];try{n.apply(t,r)}catch(e){setTimeout(function(){throw e})}}Polymer.RenderStatus={beforeNextRender:function(n,i,o){e||r(),t.push([n,i,o])},afterNextRender:function(t,i,o){e||r(),n.push([t,i,o])},flush:function(){for(;t.length||n.length;)i(t),i(n);e=!1}}}()},function(e,t,n){"use strict";n(1),function(){function e(e){window.HTMLImports?HTMLImports.whenReady(e):e()}Polymer.importHref=function(t,n,r,i){var o=document.head.querySelector('link[href="'+t+'"][import-href]');o||((o=document.createElement("link")).rel="import",o.href=t,o.setAttribute("import-href","")),i&&o.setAttribute("async","");var a=function(){o.removeEventListener("load",s),o.removeEventListener("error",l)},s=function(t){a(),o.__dynamicImportLoaded=!0,n&&e(function(){n(t)})},l=function(t){a(),o.parentNode&&o.parentNode.removeChild(o),r&&e(function(){r(t)})};return o.addEventListener("load",s),o.addEventListener("error",l),null==o.parentNode?document.head.appendChild(o):o.__dynamicImportLoaded&&o.dispatchEvent(new Event("load")),o}}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(29),function(){var e=/:host\(:dir\((ltr|rtl)\)\)/g,t=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,n=[],o=null,a="";function s(){a=document.documentElement.getAttribute("dir")}function l(e){e.__autoDirOptOut||e.setAttribute("dir",a)}function c(){s(),a=document.documentElement.getAttribute("dir");for(var e=0;e<n.length;e++)l(n[e])}Polymer.DirMixin=Polymer.dedupingMixin(function(a){o||(s(),(o=new MutationObserver(c)).observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));var u=Polymer.PropertyAccessors(a),p=function(a){function s(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this));return e.__autoDirOptOut=!1,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,u),r(s,null,[{key:"_processStyleText",value:function(e,t){return e=i(s.__proto__||Object.getPrototypeOf(s),"_processStyleText",this).call(this,e,t),e=this._replaceDirInCssText(e)}},{key:"_replaceDirInCssText",value:function(n){var r=n;return n!==(r=(r=r.replace(e,':host([dir="$1"])')).replace(t,':host([dir="$2"]) $1'))&&(this.__activateDir=!0),r}}]),r(s,[{key:"ready",value:function(){i(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"ready",this).call(this),this.__autoDirOptOut=this.hasAttribute("dir")}},{key:"connectedCallback",value:function(){u.prototype.connectedCallback&&i(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"connectedCallback",this).call(this),this.constructor.__activateDir&&(o&&o.takeRecords().length&&c(),n.push(this),l(this))}},{key:"disconnectedCallback",value:function(){if(u.prototype.disconnectedCallback&&i(s.prototype.__proto__||Object.getPrototypeOf(s.prototype),"disconnectedCallback",this).call(this),this.constructor.__activateDir){var e=n.indexOf(this);e>-1&&n.splice(e,1)}}}]),s}();return p.__activateDir=!1,p})}()},function(e,t,n){"use strict";n(1),n(8),n(13),function(){var e="string"==typeof document.head.style.touchAction,t="__polymerGesturesHandled",n="__polymerGesturesTouchAction",r=2500,i=["mousedown","mousemove","mouseup","click"],o=[0,1,4,2],a=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(e){return!1}}();function s(e){return i.indexOf(e)>-1}var l=!1;function c(t){if(!s(t)&&"touchend"!==t)return e&&l&&Polymer.passiveTouchGestures?{passive:!0}:void 0}!function(){try{var e=Object.defineProperty({},"passive",{get:function(){l=!0}});window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(e){}}();var u=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/),p=function(){};p.prototype.reset,p.prototype.mousedown,p.prototype.mousemove,p.prototype.mouseup,p.prototype.touchstart,p.prototype.touchmove,p.prototype.touchend,p.prototype.click;var h=[],d={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0};function f(e){var t=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e.labels||[]));if(!t.length){t=[];var n=e.getRootNode();if(e.id)for(var r=n.querySelectorAll("label[for = "+e.id+"]"),i=0;i<r.length;i++)t.push(r[i])}return t}var y=function(e){var n,r=e.sourceCapabilities;if((!r||r.firesTouchEvents)&&(e[t]={skip:!0},"click"===e.type)){var i=!1,o=e.composedPath&&e.composedPath();if(o)for(var a=0;a<o.length;a++){if(o[a].nodeType===Node.ELEMENT_NODE)if("label"===o[a].localName)h.push(o[a]);else if(n=o[a],d[n.localName])for(var s=f(o[a]),l=0;l<s.length;l++)i=i||h.indexOf(s[l])>-1;if(o[a]===v.mouse.target)return}if(i)return;e.preventDefault(),e.stopPropagation()}};function _(e){for(var t,n=u?["click"]:i,r=0;r<n.length;r++)t=n[r],e?(h.length=0,document.addEventListener(t,y,!0)):document.removeEventListener(t,y,!0)}function m(e){var t=e.type;if(!s(t))return!1;if("mousemove"===t){var n=void 0===e.buttons?1:e.buttons;return e instanceof window.MouseEvent&&!a&&(n=o[e.which]||0),Boolean(1&n)}return 0===(void 0===e.button?0:e.button)}var v={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function g(e,t,n){e.movefn=t,e.upfn=n,document.addEventListener("mousemove",t),document.addEventListener("mouseup",n)}function b(e){document.removeEventListener("mousemove",e.movefn),document.removeEventListener("mouseup",e.upfn),e.movefn=null,e.upfn=null}document.addEventListener("touchend",function(e){v.mouse.mouseIgnoreJob||_(!0),v.mouse.target=e.composedPath()[0],v.mouse.mouseIgnoreJob=Polymer.Debouncer.debounce(v.mouse.mouseIgnoreJob,Polymer.Async.timeOut.after(r),function(){_(),v.mouse.target=null,v.mouse.mouseIgnoreJob=null})},!!l&&{passive:!0});var w={gestures:{},recognizers:[],deepTargetFind:function(e,t){for(var n=document.elementFromPoint(e,t),r=n;r&&r.shadowRoot&&!window.ShadyDOM;){if(r===(r=r.shadowRoot.elementFromPoint(e,t)))break;r&&(n=r)}return n},_findOriginalTarget:function(e){if(e.composedPath){var t=e.composedPath();return t.length>0?t[0]:e.target}return e.target},_handleNative:function(n){var r=void 0,i=n.type,o=n.currentTarget.__polymerGestures;if(o){var a=o[i];if(a){if(!n[t]&&(n[t]={},"touch"===i.slice(0,5))){var s=(n=n).changedTouches[0];if("touchstart"===i&&1===n.touches.length&&(v.touch.id=s.identifier),v.touch.id!==s.identifier)return;e||"touchstart"!==i&&"touchmove"!==i||w._handleTouchAction(n)}if(!(r=n[t]).skip){for(var l,c=0;c<w.recognizers.length;c++)a[(l=w.recognizers[c]).name]&&!r[l.name]&&l.flow&&l.flow.start.indexOf(n.type)>-1&&l.reset&&l.reset();for(var u,p=0;p<w.recognizers.length;p++)a[(u=w.recognizers[p]).name]&&!r[u.name]&&(r[u.name]=!0,u[i](n))}}}},_handleTouchAction:function(e){var t=e.changedTouches[0],r=e.type;if("touchstart"===r)v.touch.x=t.clientX,v.touch.y=t.clientY,v.touch.scrollDecided=!1;else if("touchmove"===r){if(v.touch.scrollDecided)return;v.touch.scrollDecided=!0;var i=function(e){var t="auto",r=e.composedPath&&e.composedPath();if(r)for(var i,o=0;o<r.length;o++)if((i=r[o])[n]){t=i[n];break}return t}(e),o=!1,a=Math.abs(v.touch.x-t.clientX),s=Math.abs(v.touch.y-t.clientY);e.cancelable&&("none"===i?o=!0:"pan-x"===i?o=s>a:"pan-y"===i&&(o=a>s)),o?e.preventDefault():w.prevent("track")}},addListener:function(e,t,n){return!!this.gestures[t]&&(this._add(e,t,n),!0)},removeListener:function(e,t,n){return!!this.gestures[t]&&(this._remove(e,t,n),!0)},_add:function(e,t,n){var r=this.gestures[t],i=r.deps,o=r.name,a=e.__polymerGestures;a||(e.__polymerGestures=a={});for(var l,p,h=0;h<i.length;h++)l=i[h],u&&s(l)&&"click"!==l||((p=a[l])||(a[l]=p={_count:0}),0===p._count&&e.addEventListener(l,this._handleNative,c(l)),p[o]=(p[o]||0)+1,p._count=(p._count||0)+1);e.addEventListener(t,n),r.touchAction&&this.setTouchAction(e,r.touchAction)},_remove:function(e,t,n){var r=this.gestures[t],i=r.deps,o=r.name,a=e.__polymerGestures;if(a)for(var s,l,u=0;u<i.length;u++)(l=a[s=i[u]])&&l[o]&&(l[o]=(l[o]||1)-1,l._count=(l._count||1)-1,0===l._count&&e.removeEventListener(s,this._handleNative,c(s)));e.removeEventListener(t,n)},register:function(e){this.recognizers.push(e);for(var t=0;t<e.emits.length;t++)this.gestures[e.emits[t]]=e},_findRecognizerByEvent:function(e){for(var t,n=0;n<this.recognizers.length;n++){t=this.recognizers[n];for(var r=0;r<t.emits.length;r++)if(t.emits[r]===e)return t}return null},setTouchAction:function(t,r){e&&Polymer.Async.microTask.run(function(){t.style.touchAction=r}),t[n]=r},_fire:function(e,t,n){var r=new Event(t,{bubbles:!0,cancelable:!0,composed:!0});if(r.detail=n,e.dispatchEvent(r),r.defaultPrevented){var i=n.preventer||n.sourceEvent;i&&i.preventDefault&&i.preventDefault()}},prevent:function(e){var t=this._findRecognizerByEvent(e);t.info&&(t.info.prevent=!0)},resetMouseCanceller:function(){v.mouse.mouseIgnoreJob&&v.mouse.mouseIgnoreJob.flush()}};w.register({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){b(this.info)},mousedown:function(e){if(m(e)){var t=w._findOriginalTarget(e),n=this;g(this.info,function(e){m(e)||(n._fire("up",t,e),b(n.info))},function(e){m(e)&&n._fire("up",t,e),b(n.info)}),this._fire("down",t,e)}},touchstart:function(e){this._fire("down",w._findOriginalTarget(e),e.changedTouches[0],e)},touchend:function(e){this._fire("up",w._findOriginalTarget(e),e.changedTouches[0],e)},_fire:function(e,t,n,r){w._fire(t,e,{x:n.clientX,y:n.clientY,sourceEvent:n,preventer:r,prevent:function(e){return w.prevent(e)}})}}),w.register({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(e){this.moves.length>2&&this.moves.shift(),this.moves.push(e)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,b(this.info)},hasMovedEnough:function(e,t){if(this.info.prevent)return!1;if(this.info.started)return!0;var n=Math.abs(this.info.x-e),r=Math.abs(this.info.y-t);return n>=5||r>=5},mousedown:function(e){if(m(e)){var t=w._findOriginalTarget(e),n=this,r=function(e){var r=e.clientX,i=e.clientY;n.hasMovedEnough(r,i)&&(n.info.state=n.info.started?"mouseup"===e.type?"end":"track":"start","start"===n.info.state&&w.prevent("tap"),n.info.addMove({x:r,y:i}),m(e)||(n.info.state="end",b(n.info)),n._fire(t,e),n.info.started=!0)};g(this.info,r,function(e){n.info.started&&r(e),b(n.info)}),this.info.x=e.clientX,this.info.y=e.clientY}},touchstart:function(e){var t=e.changedTouches[0];this.info.x=t.clientX,this.info.y=t.clientY},touchmove:function(e){var t=w._findOriginalTarget(e),n=e.changedTouches[0],r=n.clientX,i=n.clientY;this.hasMovedEnough(r,i)&&("start"===this.info.state&&w.prevent("tap"),this.info.addMove({x:r,y:i}),this._fire(t,n),this.info.state="track",this.info.started=!0)},touchend:function(e){var t=w._findOriginalTarget(e),n=e.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:n.clientX,y:n.clientY}),this._fire(t,n,e))},_fire:function(e,t){var n=this.info.moves[this.info.moves.length-2],r=this.info.moves[this.info.moves.length-1],i=r.x-this.info.x,o=r.y-this.info.y,a=void 0,s=0;n&&(a=r.x-n.x,s=r.y-n.y),w._fire(e,"track",{state:this.info.state,x:t.clientX,y:t.clientY,dx:i,dy:o,ddx:a,ddy:s,sourceEvent:t,hover:function(){return w.deepTargetFind(t.clientX,t.clientY)}})}}),w.register({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},save:function(e){this.info.x=e.clientX,this.info.y=e.clientY},mousedown:function(e){m(e)&&this.save(e)},click:function(e){m(e)&&this.forward(e)},touchstart:function(e){this.save(e.changedTouches[0],e)},touchend:function(e){this.forward(e.changedTouches[0],e)},forward:function(e,t){var n=Math.abs(e.clientX-this.info.x),r=Math.abs(e.clientY-this.info.y),i=w._findOriginalTarget(t||e);i&&!i.disabled&&(isNaN(n)||isNaN(r)||n<=25&&r<=25||function(e){if("click"===e.type){if(0===e.detail)return!0;var t=w._findOriginalTarget(e);if(!t.nodeType||t.nodeType!==Node.ELEMENT_NODE)return!0;var n=t.getBoundingClientRect(),r=e.pageX,i=e.pageY;return!(r>=n.left&&r<=n.right&&i>=n.top&&i<=n.bottom)}return!1}(e))&&(this.info.prevent||w._fire(i,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:t}))}}),w.findOriginalTarget=w._findOriginalTarget,w.add=w.addListener,w.remove=w.removeListener,Polymer.Gestures=w}()},function(e,t,n){"use strict";(function(){var e={};function t(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function n(e){var n=r,i=e=e.replace(l,"").replace(c,""),o=new t;o.start=0,o.end=i.length;for(var a=o,s=0,u=i.length;s<u;s++)if("{"===i[s]){a.rules||(a.rules=[]);var p=a,h=p.rules[p.rules.length-1]||null;(a=new t).start=s+1,a.parent=p,a.previous=h,p.rules.push(a)}else"}"===i[s]&&(a.end=s+1,a=a.parent||o);return n(o,e)}function r(e,t){var n=t.substring(e.start,e.end-1);if(e.parsedCssText=e.cssText=n.trim(),e.parent&&(n=(n=(n=function(e){return e.replace(/\\([0-9a-f]{1,6})\s/gi,function(e,t){for(t=6-(e=t).length;t--;)e="0"+e;return"\\"+e})}(n=t.substring(e.previous?e.previous.end:e.parent.start,e.start-1))).replace(y," ")).substring(n.lastIndexOf(";")+1),n=e.parsedSelector=e.selector=n.trim(),e.atRule=0===n.indexOf("@"),e.atRule?0===n.indexOf("@media")?e.type=a:n.match(f)&&(e.type=o,e.keyframesName=e.selector.split(y).pop()):e.type=0===n.indexOf("--")?s:i),n=e.rules)for(var l,c=0,u=n.length;c<u&&(l=n[c]);c++)r(l,t);return e}var i=1,o=7,a=4,s=1e3,l=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,c=/@import[^;]*;/gim,u=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,p=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,h=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,d=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,f=/^@[^\s]*keyframes/,y=/\s+/g,_=Promise.resolve();function m(t){(t=e[t])&&(t._applyShimCurrentVersion=t._applyShimCurrentVersion||0,t._applyShimValidatingVersion=t._applyShimValidatingVersion||0,t._applyShimNextVersion=(t._applyShimNextVersion||0)+1)}function v(e){return e._applyShimCurrentVersion===e._applyShimNextVersion}var g,b=!(window.ShadyDOM&&window.ShadyDOM.inUse);function w(e){g=(!e||!e.shimcssproperties)&&(b||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?g=window.ShadyCSS.nativeCss:window.ShadyCSS?(w(window.ShadyCSS),window.ShadyCSS=void 0):w(window.WebComponents&&window.WebComponents.flags);var P=g,k=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,S=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,O=/@media\s(.*)/,C=new Set;function T(e){return e?("string"==typeof e&&(e=n(e)),function e(t,n,r){r=void 0===r?"":r;var i="";if(t.cssText||t.rules){var o,a=t.rules;if((o=a)&&(o=!((o=a[0])&&o.selector&&0===o.selector.indexOf("--"))),o){o=0;for(var s,l=a.length;o<l&&(s=a[o]);o++)i=e(s,n,i)}else n=n?t.cssText:(n=(n=t.cssText).replace(u,"").replace(p,"")).replace(h,"").replace(d,""),(i=n.trim())&&(i="  "+i+"\n")}return i&&(t.selector&&(r+=t.selector+" {\n"),r+=i,t.selector&&(r+="}\n\n")),r}(e,P)):""}function E(e){return!e.__cssRules&&e.textContent&&(e.__cssRules=n(e.textContent)),e.__cssRules||null}function x(e,t,n,r){if(e){var l=!1,c=e.type;if(r&&c===a){var u=e.selector.match(O);u&&(window.matchMedia(u[1]).matches||(l=!0))}if(c===i?t(e):n&&c===o?n(e):c===s&&(l=!0),(e=e.rules)&&!l){l=0,c=e.length;for(var p;l<c&&(p=e[l]);l++)x(p,t,n,r)}}}var A=/;\s*/m,I=/^\s*(initial)|(inherit)\s*$/,D=/\s*!important/;function R(){this.a={}}R.prototype.set=function(e,t){e=e.trim(),this.a[e]={h:t,i:{}}},R.prototype.get=function(e){return e=e.trim(),this.a[e]||null};var N=null;function M(){this.b=this.c=null,this.a=new R}function L(e,t){for(var n;n=S.exec(t);){var r=n[0],i=n[1];n=n.index;var o=t.slice(0,n+r.indexOf("@apply"));t=t.slice(n+r.length);var a=j(e,o);r=void 0;var s=e;i=i.replace(A,"");var l=[],c=s.a.get(i);if(c||(s.a.set(i,{}),c=s.a.get(i)),c){s.c&&(c.i[s.c]=!0);var u=c.h;for(r in u)c=[r,": var(",i,"_-_",r],(s=a&&a[r])&&c.push(",",s.replace(D,"")),c.push(")"),D.test(u[r])&&c.push(" !important"),l.push(c.join(""))}t=""+o+(r=l.join("; "))+t,S.lastIndex=n+r.length}return t}function j(e,t){t=t.split(";");for(var n,r,i,o={},a=0;a<t.length;a++)if((n=t[a])&&1<(i=n.split(":")).length){var s=e;r=n=i[0].trim(),i=i.slice(1).join(":");var l=I.exec(i);l&&(l[1]?(s.b||(s.b=document.createElement("meta"),s.b.setAttribute("apply-shim-measure",""),s.b.style.all="initial",document.head.appendChild(s.b)),r=window.getComputedStyle(s.b).getPropertyValue(r)):r="apply-shim-inherit",i=r),r=i,o[n]=r}return o}M.prototype.o=function(e){return e=S.test(e)||k.test(e),S.lastIndex=0,k.lastIndex=0,e},M.prototype.m=function(e,t){if(void 0===e.a){for(var n=[],r=e.content.querySelectorAll("style"),i=0;i<r.length;i++){var o=r[i];if(o.hasAttribute("shady-unscoped")){if(!b){var a=o.textContent;C.has(a)||(C.add(a),a=o.cloneNode(!0),document.head.appendChild(a)),o.parentNode.removeChild(o)}}else n.push(o.textContent),o.parentNode.removeChild(o)}(n=n.join("").trim())?((r=document.createElement("style")).textContent=n,e.content.insertBefore(r,e.content.firstChild),n=r):n=null,e.a=n}return(e=e.a)?this.j(e,t):null},M.prototype.j=function(e,t){t=void 0===t?"":t;var n=E(e);return this.l(n,t),e.textContent=T(n),n},M.prototype.f=function(e){var t=this,n=E(e);return x(n,function(e){":root"===e.selector&&(e.selector="html"),t.g(e)}),e.textContent=T(n),n},M.prototype.l=function(e,t){var n=this;this.c=t,x(e,function(e){n.g(e)}),this.c=null},M.prototype.g=function(e){e.cssText=function(e,t){return t=t.replace(k,function(t,n,r,i){return function(e,t,n,r,i){if(r&&function e(t,n){var r=t.indexOf("var(");if(-1===r)return n(t,"","","");e:{for(var i=0,o=r+3,a=t.length;o<a;o++)if("("===t[o])i++;else if(")"===t[o]&&0==--i)break e;o=-1}return i=t.substring(r+4,o),r=t.substring(0,r),t=e(t.substring(o+1),n),-1===(o=i.indexOf(","))?n(r,i.trim(),"",t):n(r,i.substring(0,o).trim(),i.substring(o+1).trim(),t)}(r,function(t,n){n&&e.a.get(n)&&(i="@apply "+n+";")}),!i)return t;var o=L(e,""+i),a=t.slice(0,t.indexOf("--")),s=o=j(e,o),l=e.a.get(n),c=l&&l.h;c?s=Object.assign(Object.create(c),o):e.a.set(n,s);var u,p=[],h=!1;for(u in s){var d=o[u];void 0===d&&(d="initial"),!c||u in c||(h=!0),p.push(n+"_-_"+u+": "+d)}return h&&function(e,t){if(N)for(var n in t.i)n!==e.c&&N(n)}(e,l),l&&(l.h=s),r&&(a=t+";"+a),""+a+p.join("; ")+";"}(e,t,n,r,i)}),L(e,t)}(this,e.parsedCssText),":root"===e.selector&&(e.selector=":host > *")},M.prototype.detectMixin=M.prototype.o,M.prototype.transformStyle=M.prototype.j,M.prototype.transformCustomStyle=M.prototype.f,M.prototype.transformRules=M.prototype.l,M.prototype.transformRule=M.prototype.g,M.prototype.transformTemplate=M.prototype.m,M.prototype._separator="_-_",Object.defineProperty(M.prototype,"invalidCallback",{get:function(){return N},set:function(e){N=e}});var F,z=null,B=window.HTMLImports&&window.HTMLImports.whenReady||null;var H=new M;function q(){var e=this;this.a=null,function(e){requestAnimationFrame(function(){B?B(e):(z||(z=new Promise(function(e){F=e}),"complete"===document.readyState?F():document.addEventListener("readystatechange",function(){"complete"===document.readyState&&F()})),z.then(function(){e&&e()}))})}(function(){U(e)}),H.invalidCallback=m}function U(e){e.a||(e.a=window.ShadyCSS.CustomStyleInterface,e.a&&(e.a.transformCallback=function(e){H.f(e)},e.a.validateCallback=function(){requestAnimationFrame(function(){e.a.enqueued&&K(e)})}))}function K(e){if(U(e),e.a){var t=e.a.processStyles();if(e.a.enqueued){for(var n=0;n<t.length;n++){var r=e.a.getStyleForCustomStyle(t[n]);r&&H.f(r)}e.a.enqueued=!1}}}if(q.prototype.prepareTemplate=function(t,n){U(this),e[n]=t,n=H.m(t,n),t._styleAst=n},q.prototype.styleSubtree=function(e,t){if(U(this),t)for(var n in t)null===n?e.style.removeProperty(n):e.style.setProperty(n,t[n]);if(e.shadowRoot)for(this.styleElement(e),e=e.shadowRoot.children||e.shadowRoot.childNodes,t=0;t<e.length;t++)this.styleSubtree(e[t]);else for(e=e.children||e.childNodes,t=0;t<e.length;t++)this.styleSubtree(e[t])},q.prototype.styleElement=function(t){U(this);var n,r=t.localName;n=r?-1<r.indexOf("-")?r:t.getAttribute&&t.getAttribute("is")||"":t.is,(r=e[n])&&!v(r)&&((v(r)||r._applyShimValidatingVersion!==r._applyShimNextVersion)&&(this.prepareTemplate(r,n),function(e){e._applyShimValidatingVersion=e._applyShimNextVersion,e.b||(e.b=!0,_.then(function(){e._applyShimCurrentVersion=e._applyShimNextVersion,e.b=!1}))}(r)),(t=t.shadowRoot)&&(t=t.querySelector("style"))&&(t.__cssRules=r._styleAst,t.textContent=T(r._styleAst)))},q.prototype.styleDocument=function(e){U(this),this.styleSubtree(document.body,e)},!window.ShadyCSS||!window.ShadyCSS.ScopingShim){var V=new q,$=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate:function(e,t){K(V),V.prepareTemplate(e,t)},styleSubtree:function(e,t){K(V),V.styleSubtree(e,t)},styleElement:function(e){K(V),V.styleElement(e)},styleDocument:function(e){K(V),V.styleDocument(e)},getComputedStyleValue:function(e,t){return(e=window.getComputedStyle(e).getPropertyValue(t))?e.trim():""},nativeCss:P,nativeShadow:b},$&&(window.ShadyCSS.CustomStyleInterface=$)}window.ShadyCSS.ApplyShim=H}).call(void 0)},function(e,t,n){"use strict";n(77)},function(e,t,n){"use strict";n(0),n(5),n(2).register("<dom-module id=app-drawer> <template> <style>:host{position:fixed;top:-120px;right:0;bottom:-120px;left:0;visibility:hidden;transition-property:visibility}:host([opened]){visibility:visible}:host([persistent]){width:var(--app-drawer-width,256px)}:host([persistent][position=left]){right:auto}:host([persistent][position=right]){left:auto}#contentContainer{position:absolute;top:0;bottom:0;left:0;width:var(--app-drawer-width,256px);padding:120px 0;transition-property:-webkit-transform;transition-property:transform;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0);background-color:#fff;@apply --app-drawer-content-container;}#contentContainer[persistent]{width:100%}#contentContainer[position=right]{right:0;left:auto;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}#contentContainer[swipe-open]::after{position:fixed;top:0;bottom:0;left:100%;visibility:visible;width:20px;content:''}#contentContainer[swipe-open][position=right]::after{right:100%;left:auto}#contentContainer[opened]{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}#scrim{position:absolute;top:0;right:0;bottom:0;left:0;transition-property:opacity;-webkit-transform:translateZ(0);transform:translateZ(0);opacity:0;background:var(--app-drawer-scrim-background,rgba(0,0,0,.5))}#scrim.visible{opacity:1}:host([no-transition]) #contentContainer{transition-property:none}</style> <div id=scrim on-click=close></div> <div id=contentContainer opened$=[[opened]] persistent$=[[persistent]] position$=[[position]] swipe-open$=[[swipeOpen]]> <slot></slot> </div> </template> </dom-module>"),Polymer({is:"app-drawer",properties:{opened:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},persistent:{type:Boolean,value:!1,reflectToAttribute:!0},transitionDuration:{type:Number,value:200},align:{type:String,value:"left"},position:{type:String,readOnly:!0,reflectToAttribute:!0},swipeOpen:{type:Boolean,value:!1,reflectToAttribute:!0},noFocusTrap:{type:Boolean,value:!1},disableSwipe:{type:Boolean,value:!1}},observers:["resetLayout(position, isAttached)","_resetPosition(align, isAttached)","_styleTransitionDuration(transitionDuration)","_openedPersistentChanged(opened, persistent)"],_translateOffset:0,_trackDetails:null,_drawerState:0,_boundEscKeydownHandler:null,_firstTabStop:null,_lastTabStop:null,attached:function(){Polymer.RenderStatus.afterNextRender(this,function(){this._boundEscKeydownHandler=this._escKeydownHandler.bind(this),this.addEventListener("keydown",this._tabKeydownHandler.bind(this)),this.listen(this,"track","_track"),this.setScrollDirection("y")}),this.fire("app-reset-layout")},detached:function(){document.removeEventListener("keydown",this._boundEscKeydownHandler)},open:function(){this.opened=!0},close:function(){this.opened=!1},toggle:function(){this.opened=!this.opened},getWidth:function(){return this._savedWidth||this.$.contentContainer.offsetWidth},_isRTL:function(){return"rtl"===window.getComputedStyle(this).direction},_resetPosition:function(){switch(this.align){case"start":return void this._setPosition(this._isRTL()?"right":"left");case"end":return void this._setPosition(this._isRTL()?"left":"right")}this._setPosition(this.align)},_escKeydownHandler:function(e){27===e.keyCode&&(e.preventDefault(),this.close())},_track:function(e){if(!this.persistent&&!this.disableSwipe)switch(e.preventDefault(),e.detail.state){case"start":this._trackStart(e);break;case"track":this._trackMove(e);break;case"end":this._trackEnd(e)}},_trackStart:function(e){this._drawerState=this._DRAWER_STATE.TRACKING;var t=this.$.contentContainer.getBoundingClientRect();this._savedWidth=t.width,"left"===this.position?this._translateOffset=t.left:this._translateOffset=t.right-window.innerWidth,this._trackDetails=[],this._styleTransitionDuration(0),this.style.visibility="visible"},_trackMove:function(e){this._translateDrawer(e.detail.dx+this._translateOffset),this._trackDetails.push({dx:e.detail.dx,timeStamp:Date.now()})},_trackEnd:function(e){var t=e.detail.dx+this._translateOffset,n=this.getWidth(),r="left"===this.position?t>=0||t<=-n:t<=0||t>=n;if(!r){var i=this._trackDetails;if(this._trackDetails=null,this._flingDrawer(e,i),this._drawerState===this._DRAWER_STATE.FLINGING)return}var o=n/2;e.detail.dx<-o?this.opened="right"===this.position:e.detail.dx>o&&(this.opened="left"===this.position),r?this.debounce("_resetDrawerState",this._resetDrawerState):this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration),this._styleTransitionDuration(this.transitionDuration),this._resetDrawerTranslate(),this.style.visibility=""},_calculateVelocity:function(e,t){for(var n,r=Date.now(),i=r-100,o=0,a=t.length-1;o<=a;){var s=o+a>>1,l=t[s];l.timeStamp>=i?(n=l,a=s-1):o=s+1}return n?(e.detail.dx-n.dx)/(r-n.timeStamp||1):0},_flingDrawer:function(e,t){var n=this._calculateVelocity(e,t);if(!(Math.abs(n)<this._MIN_FLING_THRESHOLD)){this._drawerState=this._DRAWER_STATE.FLINGING;var r,i=e.detail.dx+this._translateOffset,o=this.getWidth(),a="left"===this.position,s=n>0;r=!s&&a?-(i+o):s&&!a?o-i:-i,s?(n=Math.max(n,this._MIN_TRANSITION_VELOCITY),this.opened="left"===this.position):(n=Math.min(n,-this._MIN_TRANSITION_VELOCITY),this.opened="right"===this.position);var l=this._FLING_INITIAL_SLOPE*r/n;this._styleTransitionDuration(l),this._styleTransitionTimingFunction(this._FLING_TIMING_FUNCTION),this._resetDrawerTranslate(),this.debounce("_resetDrawerState",this._resetDrawerState,l)}},_styleTransitionDuration:function(e){this.style.transitionDuration=e+"ms",this.$.contentContainer.style.transitionDuration=e+"ms",this.$.scrim.style.transitionDuration=e+"ms"},_styleTransitionTimingFunction:function(e){this.$.contentContainer.style.transitionTimingFunction=e,this.$.scrim.style.transitionTimingFunction=e},_translateDrawer:function(e){var t=this.getWidth();"left"===this.position?(e=Math.max(-t,Math.min(e,0)),this.$.scrim.style.opacity=1+e/t):(e=Math.max(0,Math.min(e,t)),this.$.scrim.style.opacity=1-e/t),this.translate3d(e+"px","0","0",this.$.contentContainer)},_resetDrawerTranslate:function(){this.$.scrim.style.opacity="",this.transform("",this.$.contentContainer)},_resetDrawerState:function(){var e=this._drawerState;e===this._DRAWER_STATE.FLINGING&&(this._styleTransitionDuration(this.transitionDuration),this._styleTransitionTimingFunction(""),this.style.visibility=""),this._savedWidth=null,this.opened?this._drawerState=this.persistent?this._DRAWER_STATE.OPENED_PERSISTENT:this._DRAWER_STATE.OPENED:this._drawerState=this._DRAWER_STATE.CLOSED,e!==this._drawerState&&(this._drawerState===this._DRAWER_STATE.OPENED?(this._setKeyboardFocusTrap(),document.addEventListener("keydown",this._boundEscKeydownHandler),document.body.style.overflow="hidden"):(document.removeEventListener("keydown",this._boundEscKeydownHandler),document.body.style.overflow=""),e!==this._DRAWER_STATE.INIT&&this.fire("app-drawer-transitioned"))},resetLayout:function(){this.fire("app-reset-layout")},_setKeyboardFocusTrap:function(){if(!this.noFocusTrap){var e=['a[href]:not([tabindex="-1"])','area[href]:not([tabindex="-1"])','input:not([disabled]):not([tabindex="-1"])','select:not([disabled]):not([tabindex="-1"])','textarea:not([disabled]):not([tabindex="-1"])','button:not([disabled]):not([tabindex="-1"])','iframe:not([tabindex="-1"])','[tabindex]:not([tabindex="-1"])','[contentEditable=true]:not([tabindex="-1"])'].join(","),t=Polymer.dom(this).querySelectorAll(e);t.length>0?(this._firstTabStop=t[0],this._lastTabStop=t[t.length-1]):(this._firstTabStop=null,this._lastTabStop=null);var n=this.getAttribute("tabindex");n&&parseInt(n,10)>-1?this.focus():this._firstTabStop&&this._firstTabStop.focus()}},_tabKeydownHandler:function(e){if(!this.noFocusTrap){this._drawerState===this._DRAWER_STATE.OPENED&&9===e.keyCode&&(e.shiftKey?this._firstTabStop&&Polymer.dom(e).localTarget===this._firstTabStop&&(e.preventDefault(),this._lastTabStop.focus()):this._lastTabStop&&Polymer.dom(e).localTarget===this._lastTabStop&&(e.preventDefault(),this._firstTabStop.focus()))}},_openedPersistentChanged:function(e,t){this.toggleClass("visible",e&&!t,this.$.scrim),this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration)},_MIN_FLING_THRESHOLD:.2,_MIN_TRANSITION_VELOCITY:1.2,_FLING_TIMING_FUNCTION:"cubic-bezier(0.667, 1, 0.667, 1)",_FLING_INITIAL_SLOPE:1.5,_DRAWER_STATE:{INIT:0,OPENED:1,OPENED_PERSISTENT:2,CLOSED:3,TRACKING:4,FLINGING:5}})},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0};n(1),n(3),n(28),function(){Polymer.PropertiesMixin=Polymer.dedupingMixin(function(e){var t=Polymer.PropertiesChanged(e);function n(e){var t=Object.getPrototypeOf(e);return t.prototype instanceof a?t:null}function o(e){if(!e.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",e))){var t=null;e.hasOwnProperty(JSCompiler_renameProperty("properties",e))&&e.properties&&(t=function(e){var t={};for(var n in e){var r=e[n];t[n]="function"==typeof r?{type:r}:r}return t}(e.properties)),e.__ownProperties=t}return e.__ownProperties}var a=function(e){function a(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,t),r(a,[{key:"_initializeProperties",value:function(){this.constructor.finalize(),i(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"_initializeProperties",this).call(this)}},{key:"connectedCallback",value:function(){i(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"connectedCallback",this)&&i(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"connectedCallback",this).call(this),this._enableProperties()}},{key:"disconnectedCallback",value:function(){i(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"disconnectedCallback",this)&&i(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"disconnectedCallback",this).call(this)}}],[{key:"finalize",value:function(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){var e=n(this);e&&e.finalize(),this.__finalized=!0,this._finalizeClass()}}},{key:"_finalizeClass",value:function(){var e=o(this);e&&this.createProperties(e)}},{key:"typeForProperty",value:function(e){var t=this._properties[e];return t&&t.type}},{key:"observedAttributes",get:function(){var e=this,t=this._properties;return t?Object.keys(t).map(function(t){return e.attributeNameForProperty(t)}):[]}},{key:"_properties",get:function(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){var e=n(this);this.__properties=Object.assign({},e&&e._properties,o(this))}return this.__properties}}]),a}();return a})}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(3),function(){var e={"dom-if":!0,"dom-repeat":!0};function t(t){var n=t.getAttribute("is");if(n&&e[n]){var r=t;for(r.removeAttribute("is"),t=r.ownerDocument.createElement(n),r.parentNode.replaceChild(t,r),t.appendChild(r);r.attributes.length;)t.setAttribute(r.attributes[0].name,r.attributes[0].value),r.removeAttribute(r.attributes[0].name)}return t}function n(e,t){var r=t.parentInfo&&n(e,t.parentInfo);if(!r)return e;for(var i=r.firstChild,o=0;i;i=i.nextSibling)if(t.parentIndex===o++)return i}function i(e,t,n,r){r.id&&(t[r.id]=n)}function o(e,t,n){if(n.events&&n.events.length)for(var r,i=0,o=n.events;i<o.length&&(r=o[i]);i++)e._addMethodEventListenerToNode(t,r.name,r.value,e)}function a(e,t,n){n.templateInfo&&(t._templateInfo=n.templateInfo)}Polymer.TemplateStamp=Polymer.dedupingMixin(function(e){return function(s){function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,e),r(l,[{key:"_stampTemplate",value:function(e){e&&!e.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(e);var t=this.constructor._parseTemplate(e),r=t.nodeInfoList,s=t.content||e.content,l=document.importNode(s,!0);l.__noInsertionPoint=!t.hasInsertionPoint;var c=l.nodeList=new Array(r.length);l.$={};for(var u,p=0,h=r.length;p<h&&(u=r[p]);p++){var d=c[p]=n(l,u);i(0,l.$,d,u),a(0,d,u),o(this,d,u)}return l=l}},{key:"_addMethodEventListenerToNode",value:function(e,t,n,r){var i=function(e,t,n){return e=e._methodHost||e,function(t){e[n]?e[n](t,t.detail):console.warn("listener method `"+n+"` not defined")}}(r=r||e,0,n);return this._addEventListenerToNode(e,t,i),i}},{key:"_addEventListenerToNode",value:function(e,t,n){e.addEventListener(t,n)}},{key:"_removeEventListenerFromNode",value:function(e,t,n){e.removeEventListener(t,n)}}],[{key:"_parseTemplate",value:function(e,t){if(!e._templateInfo){var n=e._templateInfo={};n.nodeInfoList=[],n.stripWhiteSpace=t&&t.stripWhiteSpace||e.hasAttribute("strip-whitespace"),this._parseTemplateContent(e,n,{parent:null})}return e._templateInfo}},{key:"_parseTemplateContent",value:function(e,t,n){return this._parseTemplateNode(e.content,t,n)}},{key:"_parseTemplateNode",value:function(e,t,n){var r=void 0,i=e;return"template"!=i.localName||i.hasAttribute("preserve-content")?"slot"===i.localName&&(t.hasInsertionPoint=!0):r=this._parseTemplateNestedTemplate(i,t,n)||r,i.firstChild&&(r=this._parseTemplateChildNodes(i,t,n)||r),i.hasAttributes&&i.hasAttributes()&&(r=this._parseTemplateNodeAttributes(i,t,n)||r),r}},{key:"_parseTemplateChildNodes",value:function(e,n,r){if("script"!==e.localName&&"style"!==e.localName)for(var i,o=e.firstChild,a=0;o;o=i){if("template"==o.localName&&(o=t(o)),i=o.nextSibling,o.nodeType===Node.TEXT_NODE){for(var s=i;s&&s.nodeType===Node.TEXT_NODE;)o.textContent+=s.textContent,i=s.nextSibling,e.removeChild(s),s=i;if(n.stripWhiteSpace&&!o.textContent.trim()){e.removeChild(o);continue}}var l={parentIndex:a,parentInfo:r};this._parseTemplateNode(o,n,l)&&(l.infoIndex=n.nodeInfoList.push(l)-1),o.parentNode&&a++}}},{key:"_parseTemplateNestedTemplate",value:function(e,t,n){var r=this._parseTemplate(e,t);return(r.content=e.content.ownerDocument.createDocumentFragment()).appendChild(e.content),n.templateInfo=r,!0}},{key:"_parseTemplateNodeAttributes",value:function(e,t,n){for(var r,i=!1,o=Array.from(e.attributes),a=o.length-1;r=o[a];a--)i=this._parseTemplateNodeAttribute(e,t,n,r.name,r.value)||i;return i}},{key:"_parseTemplateNodeAttribute",value:function(e,t,n,r,i){return"on-"===r.slice(0,3)?(e.removeAttribute(r),n.events=n.events||[],n.events.push({name:r.slice(3),value:i}),!0):"id"===r&&(n.id=i,!0)}},{key:"_contentForTemplate",value:function(e){var t=e._templateInfo;return t&&t.content||e.content}}]),l}()})}()},function(e,t,n){"use strict";var r;n(1),(r={isPath:function(e){return e.indexOf(".")>=0},root:function(e){var t=e.indexOf(".");return-1===t?e:e.slice(0,t)},isAncestor:function(e,t){return 0===e.indexOf(t+".")},isDescendant:function(e,t){return 0===t.indexOf(e+".")},translate:function(e,t,n){return t+n.slice(e.length)},matches:function(e,t){return e===t||this.isAncestor(e,t)||this.isDescendant(e,t)},normalize:function(e){if(Array.isArray(e)){for(var t=[],n=0;n<e.length;n++)for(var r=e[n].toString().split("."),i=0;i<r.length;i++)t.push(r[i]);return t.join(".")}return e},split:function(e){return Array.isArray(e)?this.normalize(e).split("."):e.toString().split(".")},get:function(e,t,n){for(var r=e,i=this.split(t),o=0;o<i.length;o++){if(!r)return;r=r[i[o]]}return n&&(n.path=i.join(".")),r},set:function(e,t,n){var r=e,i=this.split(t),o=i[i.length-1];if(i.length>1){for(var a=0;a<i.length-1;a++){if(!(r=r[i[a]]))return}r[o]=n}else r[t]=n;return i.join(".")}}).isDeep=r.isPath,Polymer.Path=r},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(1),n(9),function(){var e={},t={};var n=function(n){function i(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(i.__proto__||Object.getPrototypeOf(i)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,HTMLElement),r(i,[{key:"attributeChangedCallback",value:function(e,t,n){t!==n&&this.register()}},{key:"register",value:function(n){var r;(n=n||this.id)&&(this.id=n,e[n]=this,t[n.toLowerCase()]=this,(r=this).querySelector("style")&&console.warn("dom-module %s has style outside template",r.id))}},{key:"assetpath",get:function(){if(!this.__assetpath){var e=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,t=Polymer.ResolveUrl.resolveUrl(this.getAttribute("assetpath")||"",e.baseURI);this.__assetpath=Polymer.ResolveUrl.pathFromUrl(t)}return this.__assetpath}}],[{key:"import",value:function(n,r){if(n){var i=function(n){return e[n]||t[n.toLowerCase()]}(n);return i&&r?i.querySelector(r):i}return null}},{key:"observedAttributes",get:function(){return["id"]}}]),i}();n.prototype.modules=e,customElements.define("dom-module",n),Polymer.DomModule=n}()},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(6),n(79),n(58),n(56),n(53),n(52),n(48),n(47),n(45),n(43),n(35),n(2).register('<dom-module id=optinomic-app> <template> <style>:host{--app-primary-color:#FAFAFA;--app-strong:#212121;--app-light:#9E9E9E;display:block}app-drawer-layout:not([narrow]) [drawer-toggle]{display:none}app-header{color:var(--app-light);background-color:var(--app-primary-color)}app-toolbar{color:var(--app-light);background-color:var(--app-primary-color);--app-toolbar-font-size:18px}app-header paper-icon-button{--paper-icon-button-ink-color:var(--app-strong)}.drawer-list{margin:0 20px}.drawer-list a{display:block;padding:0 16px;text-decoration:none;color:var(--app-strong);line-height:40px}.drawer-list a.iron-selected{color:#000;font-weight:700}app-drawer{--app-drawer-content-container:{background:var(--app-primary-color)};}.app-title{font-weight:300;letter-spacing:1.25px;line-height:18px}</style> <app-drawer-layout fullbleed="" force-narrow=""> <app-drawer id=drawer slot=drawer align=start swipe-open=true persistent=true> <app-toolbar class=app-title>Menu</app-toolbar> <iron-selector selected={{page}} attr-for-selected=name class=drawer-list role=navigation> <a name=start>Startseite</a> <a name=help>Dokumentation</a> </iron-selector> </app-drawer> <app-header-layout has-scrolling-region=""> <app-header slot=header condenses="" reveals="" effects=waterfall> <app-toolbar> <paper-icon-button icon=optinomic-icons:menu drawer-toggle=""></paper-icon-button> <div main-title="" class=app-title>Optinomic</div> </app-toolbar> </app-header> <iron-pages selected=[[page]] attr-for-selected=name fallback-selection=start role=main> <optinomic-start name=start></optinomic-start> <optinomic-help name=help></optinomic-help> </iron-pages> </app-header-layout> </app-drawer-layout> </template> </dom-module>');var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Polymer.Element),r(t,null,[{key:"is",get:function(){return"optinomic-app"}},{key:"properties",get:function(){return{page:{type:String,reflectToAttribute:!0,observer:"_pageChanged"},lazyPages:{type:Object,value:{start:function(){n.e(1).then(function(){var e=n(86);return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})},help:function(){n.e(0).then(function(){var e=n(85);return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}}}}}},{key:"observers",get:function(){return["_routePageChanged(page)"]}}]),r(t,[{key:"_routePageChanged",value:function(e){void 0!==e&&(this.page=e||"start",this.$.drawer.persistent||this.$.drawer.close())}},{key:"_pageChanged",value:function(e){e=e,this.lazyPages[e]?this.lazyPages[e]():this._showPage404()}},{key:"_showStart",value:function(){this.page="start"}},{key:"_showHelp",value:function(){this.page="view404"}},{key:"ready",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"ready",this).call(this),this._showStart()}}]),t}();window.customElements.define(i.is,i)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL3BvbHltZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2Jvb3QuaHRtbCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9seW1lci13ZWJwYWNrLWxvYWRlci9yZWdpc3Rlci1odG1sLXRlbXBsYXRlLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvbWl4aW4uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXNjcm9sbC1lZmZlY3RzL2FwcC1zY3JvbGwtZWZmZWN0cy1iZWhhdmlvci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbWl4aW5zL211dGFibGUtZGF0YS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3Jlc29sdmUtdXJsLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1sYXlvdXQtYmVoYXZpb3IvYXBwLWxheW91dC1iZWhhdmlvci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvdGVtcGxhdGl6ZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvZmx1c2guaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydHktZWZmZWN0cy5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1hMTF5LWtleXMtYmVoYXZpb3IvaXJvbi1hMTF5LWtleXMtYmVoYXZpb3IuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tYmVoYXZpb3JzL2lyb24tYnV0dG9uLXN0YXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLW1ldGEvaXJvbi1tZXRhLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXNlbGVjdG9yL2lyb24tc2VsZWN0YWJsZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtc2Nyb2xsLWVmZmVjdHMvZWZmZWN0cy9wYXJhbGxheC1iYWNrZ3JvdW5kLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1zY3JvbGwtZWZmZWN0cy9lZmZlY3RzL3Jlc2l6ZS10aXRsZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtc2Nyb2xsLWVmZmVjdHMvZWZmZWN0cy93YXRlcmZhbGwuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXNjcm9sbC1lZmZlY3RzL2VmZmVjdHMvYmxlbmQtYmFja2dyb3VuZC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1yZXNpemFibGUtYmVoYXZpb3IvaXJvbi1yZXNpemFibGUtYmVoYXZpb3IuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2FycmF5LXNwbGljZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbWl4aW5zL2dlc3R1cmUtZXZlbnQtbGlzdGVuZXJzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9sZWdhY3kvbGVnYWN5LWVsZW1lbnQtbWl4aW4uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2h0bWwtdGFnLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydGllcy1jaGFuZ2VkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydHktYWNjZXNzb3JzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi91dGlscy9jYXNlLW1hcC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvc3R5bGUtZ2F0aGVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi91dGlscy9zZXR0aW5ncy5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbWl4aW5zL2VsZW1lbnQtbWl4aW4uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24taWNvbnNldC1zdmcvaXJvbi1pY29uc2V0LXN2Zy5odG1sIiwid2VicGFjazovLy8uL3NyYy9vcHRpbm9taWMtaWNvbnMuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXN0eWxlcy9jb2xvci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItc3R5bGVzL2RlZmF1bHQtdGhlbWUuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLXJpcHBsZS9wYXBlci1yaXBwbGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWJlaGF2aW9ycy9wYXBlci1yaXBwbGUtYmVoYXZpb3IuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24tYmVoYXZpb3JzL2lyb24tY29udHJvbC1zdGF0ZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcGFwZXItYmVoYXZpb3JzL3BhcGVyLWlua3ktZm9jdXMtYmVoYXZpb3IuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2lyb24taWNvbi9pcm9uLWljb24uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXNlbGVjdG9yL2lyb24tbXVsdGktc2VsZWN0YWJsZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1zZWxlY3Rvci9pcm9uLXNlbGVjdG9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXNlbGVjdG9yL2lyb24tc2VsZWN0aW9uLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXBhZ2VzL2lyb24tcGFnZXMuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXRvb2xiYXIvYXBwLXRvb2xiYXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXNjcm9sbC1lZmZlY3RzL2VmZmVjdHMvcmVzaXplLXNuYXBwZWQtdGl0bGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXNjcm9sbC1lZmZlY3RzL2VmZmVjdHMvbWF0ZXJpYWwuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLXNjcm9sbC1lZmZlY3RzL2VmZmVjdHMvZmFkZS1iYWNrZ3JvdW5kLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1zY3JvbGwtZWZmZWN0cy9hcHAtc2Nyb2xsLWVmZmVjdHMuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLWhlYWRlci1sYXlvdXQvYXBwLWhlYWRlci1sYXlvdXQuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvaGVscGVycy9oZWxwZXJzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXNjcm9sbC10YXJnZXQtYmVoYXZpb3IvaXJvbi1zY3JvbGwtdGFyZ2V0LWJlaGF2aW9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1oZWFkZXIvYXBwLWhlYWRlci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1tZWRpYS1xdWVyeS9pcm9uLW1lZGlhLXF1ZXJ5Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1kcmF3ZXItbGF5b3V0L2FwcC1kcmF3ZXItbGF5b3V0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9zaGFkeWNzcy9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3NoYWR5Y3NzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2N1c3RvbS1zdHlsZS5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvZWxlbWVudHMvYXJyYXktc2VsZWN0b3IuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1pZi5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvZWxlbWVudHMvZG9tLXJlcGVhdC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvZWxlbWVudHMvZG9tLWJpbmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL2xlZ2FjeS90ZW1wbGF0aXplci1iZWhhdmlvci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbGVnYWN5L2NsYXNzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9sZWdhY3kvcG9seW1lci1mbi5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvZmxhdHRlbmVkLW5vZGVzLW9ic2VydmVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9sZWdhY3kvcG9seW1lci5kb20uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3VucmVzb2x2ZWQuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL3JlbmRlci1zdGF0dXMuaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL3V0aWxzL2ltcG9ydC1ocmVmLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9taXhpbnMvZGlyLW1peGluLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi91dGlscy9nZXN0dXJlcy5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvc2hhZHljc3MvYXBwbHktc2hpbS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9zaGFkeWNzcy9hcHBseS1zaGltLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1kcmF3ZXIvYXBwLWRyYXdlci5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnRpZXMtbWl4aW4uaHRtbCIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvbGliL21peGlucy90ZW1wbGF0ZS1zdGFtcC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvdXRpbHMvcGF0aC5odG1sIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvcG9seW1lci9saWIvZWxlbWVudHMvZG9tLW1vZHVsZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9vcHRpbm9taWMtYXBwLmh0bWwiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiaW5zdGFsbGVkTW9kdWxlcyIsIjIiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJlIiwicHJvbWlzZXMiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwicCIsIjAiLCIxIiwianNvbnBTY3JpcHRTcmMiLCJzZXRUaW1lb3V0Iiwib25TY3JpcHRDb21wbGV0ZSIsInR5cGUiLCJ0YXJnZXQiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJjaHVuayIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJlcnJvciIsIkVycm9yIiwicmVxdWVzdCIsInVuZGVmaW5lZCIsImFwcGVuZENoaWxkIiwiYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5Iiwib2UiLCJlcnIiLCJjb25zb2xlIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJiaW5kIiwic2xpY2UiLCJzIiwiUG9seW1lciIsIkJhc2UiLCJMZWdhY3lFbGVtZW50TWl4aW4iLCJIVE1MRWxlbWVudCIsImh0bWwiLCJ1c2VyUG9seW1lciIsImluZm8iLCJfcG9seW1lckZuIiwiYXNzaWduIiwidmVyc2lvbiIsIkpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkiLCJwcm9wIiwib2JqIiwiUmVnaXN0ZXJIdG1sVGVtcGxhdGUiLCJ2YWwiLCJjb250ZW50IiwidGVtcGxhdGUiLCJpbm5lckhUTUwiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZmlyc3RDaGlsZCIsImltcG9ydE5vZGUiLCJ0cmltbWVkVmFsIiwidHJpbSIsImRpdiIsImJvZHkiLCJpbnNlcnRCZWZvcmUiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVkdXBlSWQiLCJNaXhpbkZ1bmN0aW9uIiwiX19taXhpbkFwcGxpY2F0aW9ucyIsIl9fbWl4aW5TZXQiLCJkZWR1cGluZ01peGluIiwibWl4aW4iLCJtaXhpbkFwcGxpY2F0aW9ucyIsIldlYWtNYXAiLCJtaXhpbkRlZHVwZUlkIiwiYmFzZSIsImJhc2VTZXQiLCJtYXAiLCJleHRlbmRlZCIsInNldCIsIm1peGluU2V0IiwiY3JlYXRlIiwiQXBwU2Nyb2xsRWZmZWN0c0JlaGF2aW9yIiwiSXJvblNjcm9sbFRhcmdldEJlaGF2aW9yIiwicHJvcGVydGllcyIsImVmZmVjdHMiLCJTdHJpbmciLCJlZmZlY3RzQ29uZmlnIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwicmVmbGVjdFRvQXR0cmlidXRlIiwidGhyZXNob2xkIiwiTnVtYmVyIiwidGhyZXNob2xkVHJpZ2dlcmVkIiwibm90aWZ5IiwicmVhZE9ubHkiLCJvYnNlcnZlcnMiLCJfdXBkYXRlU2Nyb2xsU3RhdGUiLCJzY3JvbGxUb3AiLCJpc09uU2NyZWVuIiwiaXNDb250ZW50QmVsb3ciLCJfZWZmZWN0c1J1bkZuIiwiX2VmZmVjdHMiLCJfY2xhbXBlZFNjcm9sbFRvcCIsIk1hdGgiLCJtYXgiLCJ0aGlzIiwiX3Njcm9sbFRvcCIsImRldGFjaGVkIiwiX3RlYXJEb3duRWZmZWN0cyIsImNyZWF0ZUVmZmVjdCIsImVmZmVjdE5hbWUiLCJlZmZlY3RDb25maWciLCJlZmZlY3REZWYiLCJBcHBMYXlvdXQiLCJfc2Nyb2xsRWZmZWN0cyIsIlJlZmVyZW5jZUVycm9yIiwiX2dldFVuZGVmaW5lZE1zZyIsIl9ib3VuZEVmZmVjdCIsInNldFVwIiwiX2VmZmVjdHNDaGFuZ2VkIiwiaXNBdHRhY2hlZCIsInNwbGl0IiwiZm9yRWFjaCIsIndhcm4iLCJfc2V0VXBFZmZlY3QiLCJfbGF5b3V0SWZEaXJ0eSIsIm9mZnNldFdpZHRoIiwic3RhcnRzQXQiLCJwYXJzZUZsb2F0IiwiZW5kc0F0IiwiZGVsdGFTIiwibm9vcCIsInJ1bkZuIiwicnVuIiwicHJvZ3Jlc3MiLCJ5IiwidGVhckRvd24iLCJfcnVuRWZmZWN0cyIsIl9zY3JvbGxIYW5kbGVyIiwiX3NldFRocmVzaG9sZFRyaWdnZXJlZCIsIl9nZXRET01SZWYiLCJpZCIsInN0eWxlIiwidGV4dENvbnRlbnQiLCJFbGVtZW50IiwiRWxlbWVudE1peGluIiwibXV0YWJsZVByb3BlcnR5Q2hhbmdlIiwiaW5zdCIsIm9sZCIsIm11dGFibGVEYXRhIiwiaXNPYmplY3QiLCJfdHlwZW9mIiwiX19kYXRhVGVtcCIsInNob3VsZENoYW5nZSIsIk11dGFibGVEYXRhIiwic3VwZXJDbGFzcyIsIl9zdXBlckNsYXNzIiwiT3B0aW9uYWxNdXRhYmxlRGF0YSIsIl9zdXBlckNsYXNzMiIsIl9tdXRhYmxlUHJvcGVydHlDaGFuZ2UiLCJtaWNyb3Rhc2tDdXJySGFuZGxlIiwibWljcm90YXNrTGFzdEhhbmRsZSIsIm1pY3JvdGFza0NhbGxiYWNrcyIsIm1pY3JvdGFza05vZGVDb250ZW50IiwibWljcm90YXNrTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiTXV0YXRpb25PYnNlcnZlciIsImxlbiIsImNiIiwic3BsaWNlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJBc3luYyIsInRpbWVPdXQiLCJhZnRlciIsImRlbGF5IiwiZm4iLCJjYW5jZWwiLCJoYW5kbGUiLCJhbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWRsZVBlcmlvZCIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJtaWNyb1Rhc2siLCJjYWxsYmFjayIsImlkeCIsIkNTU19VUkxfUlgiLCJBQlNfVVJMIiwid29ya2luZ1VSTCIsInJlc29sdmVEb2MiLCJyZXNvbHZlVXJsIiwidXJsIiwiYmFzZVVSSSIsInRlc3QiLCJ1IiwiVVJMIiwicGF0aG5hbWUiLCJocmVmIiwibG9jYXRpb24iLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImFuY2hvciIsIlJlc29sdmVVcmwiLCJyZXNvbHZlQ3NzIiwiY3NzVGV4dCIsInJlcGxhY2UiLCJwcmUiLCJwb3N0IiwicGF0aEZyb21VcmwiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsIkFwcExheW91dEJlaGF2aW9yIiwiSXJvblJlc2l6YWJsZUJlaGF2aW9yIiwibGlzdGVuZXJzIiwiYXBwLXJlc2V0LWxheW91dCIsImlyb24tcmVzaXplIiwiYXR0YWNoZWQiLCJmaXJlIiwiX2FwcFJlc2V0TGF5b3V0SGFuZGxlciIsImRvbSIsInBhdGgiLCJyZXNldExheW91dCIsInN0b3BQcm9wYWdhdGlvbiIsIl91cGRhdGVMYXlvdXRTdGF0ZXMiLCJfbGF5b3V0RGVib3VuY2VyIiwiRGVib3VuY2VyIiwiZGVib3VuY2UiLCJlbnF1ZXVlRGVib3VuY2VyIiwiX25vdGlmeURlc2NlbmRhbnRSZXNpemUiLCJfbm90aWZ5TGF5b3V0Q2hhbmdlZCIsInNlbGYiLCJfaW50ZXJlc3RlZFJlc2l6YWJsZXMiLCJyZXNpemFibGUiLCJyZXNpemVyU2hvdWxkTm90aWZ5IiwiX25vdGlmeURlc2NlbmRhbnQiLCJuZXdJbnN0YW5jZSIsIkhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24iLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsIkRhdGFUZW1wbGF0ZSIsIlByb3BlcnR5RWZmZWN0cyIsIk11dGFibGVEYXRhVGVtcGxhdGUiLCJfY2xhc3MiLCJUZW1wbGF0ZUluc3RhbmNlQmFzZSIsIl9iYXNlIiwicHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsIl9jb25maWd1cmVQcm9wZXJ0aWVzIiwicm9vdCIsIl9zdGFtcFRlbXBsYXRlIiwiX19kYXRhSG9zdCIsImNoaWxkcmVuIiwibmV4dFNpYmxpbmciLCJfX3RlbXBsYXRpemVJbnN0YW5jZSIsIl9fdGVtcGxhdGl6ZU93bmVyIiwiX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fIiwiX3Nob3dIaWRlQ2hpbGRyZW4iLCJvcHRpb25zIiwiX190ZW1wbGF0aXplT3B0aW9ucyIsImluc3RhbmNlUHJvcHMiLCJfZW5hYmxlUHJvcGVydGllcyIsImZvcndhcmRIb3N0UHJvcCIsImhwcm9wIiwiX19ob3N0UHJvcHMiLCJfc2V0UGVuZGluZ1Byb3BlcnR5IiwiaXByb3AiLCJfc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoIiwiX2VucXVldWVDbGllbnQiLCJub2RlIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIl90aGlzMiIsIl9tZXRob2RIb3N0IiwicGFyZW50TW9kZWwiLCJfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZSIsIm1vZGVsIiwidGVtcGxhdGVIb3N0IiwiaGlkZSIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsIl9fcG9seW1lclRleHRDb250ZW50X18iLCJsb2NhbE5hbWUiLCJfX3BvbHltZXJSZXBsYWNlZF9fIiwiY3JlYXRlQ29tbWVudCIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJfX3BvbHltZXJEaXNwbGF5X18iLCJkaXNwbGF5IiwiX2dldCIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiX19wYXJlbnRNb2RlbCIsIk11dGFibGVUZW1wbGF0ZUluc3RhbmNlQmFzZSIsImNyZWF0ZVRlbXBsYXRpemVyQ2xhc3MiLCJ0ZW1wbGF0ZUluZm8iLCJrbGFzcyIsIl9iYXNlMiIsIl9pbmhlcml0cyIsIl9iaW5kVGVtcGxhdGUiLCJob3N0UHJvcHMiLCJ1c2VyTm90aWZ5SW5zdGFuY2VQcm9wIiwibm90aWZ5SW5zdGFuY2VQcm9wIiwiX2FkZFByb3BlcnR5RWZmZWN0IiwiUFJPUEVSVFlfRUZGRUNUX1RZUEVTIiwiTk9USUZZIiwiY3JlYXRlTm90aWZ5SW5zdGFuY2VQcm9wRWZmZWN0IiwiYWRkTm90aWZ5RWZmZWN0cyIsImFkZFByb3BhZ2F0ZUVmZmVjdHMiLCJ1c2VyRm9yd2FyZEhvc3RQcm9wIiwidGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3MiLCJfYmFzZTMiLCJfYmFzZTQiLCJUZW1wbGF0aXplZFRlbXBsYXRlIiwiUFJPUEFHQVRFIiwiY3JlYXRlRm9yd2FyZEhvc3RQcm9wRWZmZWN0IiwiX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5Iiwic2V0UHJvdG90eXBlT2YiLCJ1cGdyYWRlVGVtcGxhdGUiLCJfX2RhdGFQcm90byIsIl9fZGF0YSIsIl9fZGF0YVBlbmRpbmciLCJfX2RhdGFPbGQiLCJob3N0UHJvcCIsImluc3RQcm9wIiwiVGVtcGxhdGl6ZSIsInRlbXBsYXRpemUiLCJvd25lciIsIl9wYXJzZVRlbXBsYXRlIiwiYmFzZUNsYXNzIiwidGVtcGxhdGl6ZUluc3RhbmNlQ2xhc3MiLCJfYmFzZUNsYXNzIiwiVGVtcGxhdGVJbnN0YW5jZSIsImZpbmRNZXRob2RIb3N0IiwibW9kZWxGb3JFbGVtZW50IiwiZGVib3VuY2VyUXVldWUiLCJmbHVzaERlYm91bmNlcnMiLCJkaWRGbHVzaCIsImZsdXNoIiwiZGVib3VuY2VyIiwic2hhZHlET00iLCJkZWJvdW5jZXJzIiwiU2hhZHlET00iLCJTaGFkeUNTUyIsIlNjb3BpbmdTaGltIiwiX2FzeW5jTW9kdWxlIiwiX2NhbGxiYWNrIiwiX3RpbWVyIiwiYXN5bmNNb2R1bGUiLCJpc0FjdGl2ZSIsInNldENvbmZpZyIsIkNhc2VNYXAiLCJUWVBFUyIsIkNPTVBVVEUiLCJSRUZMRUNUIiwiT0JTRVJWRSIsIlJFQURfT05MWSIsImNhcGl0YWxBdHRyaWJ1dGVSZWdleCIsImVuc3VyZU93bkVmZmVjdE1hcCIsInByb3RvRngiLCJpbnN0RngiLCJBcnJheSIsInJ1bkVmZmVjdHMiLCJvbGRQcm9wcyIsImhhc1BhdGhzIiwiZXh0cmFBcmdzIiwicmFuIiwicnVuRWZmZWN0c0ZvclByb3BlcnR5IiwiZnhzIiwiUGF0aCIsImZ4IiwibGFzdFJ1biIsInBhdGhNYXRjaGVzVHJpZ2dlciIsInRyaWdnZXIiLCJ0cmlnZ2VyUGF0aCIsInN0cnVjdHVyZWQiLCJpc0FuY2VzdG9yIiwid2lsZGNhcmQiLCJpc0Rlc2NlbmRhbnQiLCJydW5PYnNlcnZlckVmZmVjdCIsIm1ldGhvZCIsImNoYW5nZWRQcm9wIiwiZHluYW1pY0ZuIiwibm90aWZ5UGF0aCIsInJvb3RQcm9wZXJ0eSIsImRpc3BhdGNoTm90aWZ5RXZlbnQiLCJjYW1lbFRvRGFzaENhc2UiLCJkZXRhaWwiLCJxdWV1ZVByb3BlcnR5IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwicnVuTm90aWZ5RWZmZWN0IiwicnVuUmVmbGVjdEVmZmVjdCIsInNhbml0aXplRE9NVmFsdWUiLCJhdHRyTmFtZSIsIl9wcm9wZXJ0eVRvQXR0cmlidXRlIiwicnVuQ29tcHV0ZWRFZmZlY3QiLCJyZXN1bHQiLCJydW5NZXRob2RFZmZlY3QiLCJjb21wdXRlZFByb3AiLCJtZXRob2RJbmZvIiwiX19kYXRhSGFzQWNjZXNzb3IiLCJhZGRCaW5kaW5nIiwibm9kZUluZm8iLCJraW5kIiwicGFydHMiLCJsaXRlcmFsIiwiYmluZGluZ3MiLCJiaW5kaW5nIiwiaXNDb21wb3VuZCIsIm1vZGUiLCJzaG91bGRBZGRMaXN0ZW5lciIsIl9iaW5kaW5nJHBhcnRzJCIsIm5lZ2F0ZSIsImxpc3RlbmVyRXZlbnQiLCJsaXN0ZW5lck5lZ2F0ZSIsImluZGV4Iiwibm9kZUluZm9MaXN0IiwicGFydCIsImNvbXBvdW5kSW5kZXgiLCJhZGRFZmZlY3RGb3JCaW5kaW5nUGFydCIsImRlcGVuZGVuY2llcyIsImV2YWx1YXRvciIsImoiLCJwYXJzZUFyZyIsIl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0IiwicnVuQmluZGluZ0VmZmVjdCIsIm5vZGVMaXN0Iiwic291cmNlIiwiX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCIsInRyYW5zbGF0ZSIsInN0b3JhZ2UiLCJfX2RhdGFDb21wb3VuZFN0b3JhZ2UiLCJqb2luIiwiY29tcHV0ZUJpbmRpbmdWYWx1ZSIsIl92YWx1ZVRvTm9kZUF0dHJpYnV0ZSIsIl9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZSIsImFwcGx5QmluZGluZ1ZhbHVlIiwiX2V2YWx1YXRlQmluZGluZyIsInNldHVwQ29tcG91bmRTdG9yYWdlIiwibGl0ZXJhbHMiLCJhZGROb3RpZnlMaXN0ZW5lciIsImZyb21Qcm9wIiwidG9QYXRoIiwiZnJvbVBhdGgiLCJfaW52YWxpZGF0ZVByb3BlcnRpZXMiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJjcmVhdGVNZXRob2RFZmZlY3QiLCJzaWciLCJlZmZlY3RGbiIsInN0YXRpYyIsIm1ldGhvZE5hbWUiLCJhcmciLCJhcmdzIiwiY29udGV4dCIsInZhbHVlcyIsInYiLCJiYXNlQ2hhbmdlZCIsImluZGV4T2YiLCJtYXRjaGVzIiwibWFyc2hhbEFyZ3MiLCJhcHBseSIsImVtcHR5QXJyYXkiLCJiaW5kaW5nUmVnZXgiLCJSZWdFeHAiLCJPUEVOX0JSQUNLRVQiLCJsaXRlcmFsRnJvbVBhcnRzIiwicGFyc2VNZXRob2QiLCJleHByZXNzaW9uIiwibWF0Y2giLCJhcmdMaXN0IiwicmF3QXJnIiwicGFyc2VBcmdzIiwiYSIsImZjIiwiaXNQYXRoIiwiX25vdGlmeVNwbGljZXMiLCJhcnJheSIsInNwbGljZXMiLCJzcGxpY2VzUGF0aCIsImluZGV4U3BsaWNlcyIsIm5vdGlmeVNwbGljZSIsImFkZGVkQ291bnQiLCJyZW1vdmVkIiwicHJvcGVydHlFZmZlY3RzQmFzZSIsIlRlbXBsYXRlU3RhbXAiLCJQcm9wZXJ0eUFjY2Vzc29ycyIsIl9wcm9wZXJ0eUVmZmVjdHNCYXNlIiwiX19kYXRhQ291bnRlciIsIl9fZGF0YUNsaWVudHNSZWFkeSIsIl9fZGF0YVBlbmRpbmdDbGllbnRzIiwiX19kYXRhVG9Ob3RpZnkiLCJfX2RhdGFMaW5rZWRQYXRocyIsIl9fZGF0YUhhc1BhdGhzIiwiX19kYXRhQ2xpZW50c0luaXRpYWxpemVkIiwiX19jb21wdXRlRWZmZWN0cyIsIl9fcmVmbGVjdEVmZmVjdHMiLCJfX25vdGlmeUVmZmVjdHMiLCJfX3Byb3BhZ2F0ZUVmZmVjdHMiLCJfX29ic2VydmVFZmZlY3RzIiwiX19yZWFkT25seSIsIl9fdGVtcGxhdGVJbmZvIiwiaG9zdFN0YWNrIiwicmVnaXN0ZXJIb3N0IiwiZWZmZWN0IiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJfaGFzUHJvcGVydHlFZmZlY3QiLCJzaG91bGROb3RpZnkiLCJpc1BhdGhOb3RpZmljYXRpb24iLCJpc0FycmF5IiwibGlua3MiLCJsaW5rIiwiYiIsImNvbXB1dGVMaW5rZWRQYXRocyIsInByZXZQcm9wcyIsIl9zaG91bGRQcm9wZXJ0eUNoYW5nZSIsIl9fZGF0YVJlYWR5IiwiX2ZsdXNoUHJvcGVydGllcyIsImNsaWVudCIsIl9fZW5hYmxlT3JGbHVzaENsaWVudHMiLCJfcmVhZHlDbGllbnRzIiwiY2xpZW50cyIsIl9fZGF0YUVuYWJsZWQiLCJzZXRSZWFkT25seSIsIl9mbHVzaENsaWVudHMiLCJjdXJyZW50UHJvcHMiLCJjaGFuZ2VkUHJvcHMiLCJjb21wdXRlRWZmZWN0cyIsImlucHV0UHJvcHMiLCJydW5Db21wdXRlZEVmZmVjdHMiLCJub3RpZnlQcm9wcyIsIl9wcm9wYWdhdGVQcm9wZXJ0eUNoYW5nZXMiLCJub3RpZmllZCIsImhvc3QiLCJydW5Ob3RpZnlFZmZlY3RzIiwicHJvcGVydHlFZmZlY3RzIiwibmV4dFRlbXBsYXRlSW5mbyIsInRvIiwiZnJvbSIsIm5vcm1hbGl6ZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJpdGVtcyIsIl9rZXkiLCJyZXQiLCJoYWRMZW5ndGgiLCJwb3AiLCJzdGFydCIsImRlbGV0ZUNvdW50IiwiX2xlbjIiLCJfa2V5MiIsImZsb29yIiwiY29uY2F0IiwiX2xlbjMiLCJfa2V5MyIsInVuc2hpZnQiLCJwcm9wUGF0aCIsInByb3RlY3RlZFNldHRlciIsInRvVXBwZXJDYXNlIiwiX3NldFByb3BlcnR5IiwiYXR0ciIsImF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eSIsImluc3RhbmNlQmluZGluZyIsIndhc1ByZUJvdW5kIiwibGFzdCIsIl9fdGVtcGxhdGVJbmZvTGFzdCIsInByZXZpb3VzVGVtcGxhdGVJbmZvIiwiYmVnaW5Ib3N0aW5nIiwiZW5kSG9zdGluZyIsIm5vZGVzIiwiY2hpbGROb2RlcyIsIl9pIiwic2V0dXBCaW5kaW5ncyIsInJlbW92ZUNoaWxkIiwiX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIiLCJfY3JlYXRlTWV0aG9kT2JzZXJ2ZXIiLCJfY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eSIsIl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eSIsIl9jcmVhdGVDb21wdXRlZFByb3BlcnR5Iiwibm90ZWQiLCJfcGFyc2VCaW5kaW5ncyIsIm9yaWdOYW1lIiwicmVtb3ZlQXR0cmlidXRlIiwiZGFzaFRvQ2FtZWxDYXNlIiwidGV4dCIsImxhc3RJbmRleCIsImV4ZWMiLCJjdXN0b21FdmVudCIsIm5vdGlmeUV2ZW50IiwiY29sb24iLCJzaWduYXR1cmUiLCJkeW5hbWljRm5zIiwic3RhY2siLCJzdGFja0xlbiIsIktFWV9JREVOVElGSUVSIiwiVSswMDA4IiwiVSswMDA5IiwiVSswMDFCIiwiVSswMDIwIiwiVSswMDdGIiwiS0VZX0NPREUiLCI4IiwiOSIsIjEzIiwiMjciLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjMyIiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NiIsIjEwNiIsIk1PRElGSUVSX0tFWVMiLCJjdHJsIiwiYWx0IiwibWV0YSIsIktFWV9DSEFSIiwiSURFTlRfQ0hBUiIsIkFSUk9XX0tFWSIsIlNQQUNFX0tFWSIsIkVTQ19LRVkiLCJ0cmFuc2Zvcm1LZXkiLCJrZXkiLCJub1NwZWNpYWxDaGFycyIsInZhbGlkS2V5IiwibEtleSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplZEtleUZvckV2ZW50Iiwia2V5RXZlbnQiLCJrZXlJZGVudCIsImtleUlkZW50aWZpZXIiLCJwYXJzZUludCIsImZyb21DaGFyQ29kZSIsImtleUNvZGUiLCJ0cmFuc2Zvcm1LZXlDb2RlIiwia2V5Q29tYm9NYXRjaGVzRXZlbnQiLCJrZXlDb21ibyIsImhhc01vZGlmaWVycyIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJwYXJzZUV2ZW50U3RyaW5nIiwiZXZlbnRTdHJpbmciLCJrZXlDb21ib1N0cmluZyIsImNvbWJvIiwicmVkdWNlIiwicGFyc2VkS2V5Q29tYm8iLCJrZXlDb21ib1BhcnQiLCJldmVudFBhcnRzIiwia2V5TmFtZSIsInBhcnNlS2V5Q29tYm9TdHJpbmciLCJJcm9uQTExeUtleXNCZWhhdmlvciIsImtleUV2ZW50VGFyZ2V0Iiwic3RvcEtleWJvYXJkRXZlbnRQcm9wYWdhdGlvbiIsIl9ib3VuZEtleUhhbmRsZXJzIiwiX2ltcGVyYXRpdmVLZXlCaW5kaW5ncyIsImtleUJpbmRpbmdzIiwicmVnaXN0ZXJlZCIsIl9wcmVwS2V5QmluZGluZ3MiLCJfbGlzdGVuS2V5RXZlbnRMaXN0ZW5lcnMiLCJfdW5saXN0ZW5LZXlFdmVudExpc3RlbmVycyIsImFkZE93bktleUJpbmRpbmciLCJoYW5kbGVyTmFtZSIsIl9yZXNldEtleUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlT3duS2V5QmluZGluZ3MiLCJrZXlib2FyZEV2ZW50TWF0Y2hlc0tleXMiLCJrZXlDb21ib3MiLCJfY29sbGVjdEtleUJpbmRpbmdzIiwiYmVoYXZpb3JzIiwiYmVoYXZpb3IiLCJfa2V5QmluZGluZ3MiLCJfYWRkS2V5QmluZGluZyIsInNvcnQiLCJrYjEiLCJrYjIiLCJiMSIsImtleXMiLCJib3VuZEtleUhhbmRsZXIiLCJfb25LZXlCaW5kaW5nRXZlbnQiLCJrZXlIYW5kbGVyVHVwbGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVmYXVsdFByZXZlbnRlZCIsIl90cmlnZ2VyS2V5SGFuZGxlciIsImtleWJvYXJkRXZlbnQiLCJjYW5jZWxhYmxlIiwicHJldmVudERlZmF1bHQiLCJJcm9uQnV0dG9uU3RhdGVJbXBsIiwicHJlc3NlZCIsIm9ic2VydmVyIiwidG9nZ2xlcyIsImFjdGl2ZSIsInBvaW50ZXJEb3duIiwicmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCIsImFyaWFBY3RpdmVBdHRyaWJ1dGUiLCJkb3duIiwidXAiLCJ0YXAiLCJlbnRlcjprZXlkb3duIiwic3BhY2U6a2V5ZG93biIsInNwYWNlOmtleXVwIiwiX21vdXNlRXZlbnRSZSIsIl90YXBIYW5kbGVyIiwiX3VzZXJBY3RpdmF0ZSIsIl9mb2N1c0NoYW5nZWQiLCJmb2N1c2VkIiwiX2RldGVjdEtleWJvYXJkRm9jdXMiLCJfc2V0UHJlc3NlZCIsIl9zZXRSZWNlaXZlZEZvY3VzRnJvbUtleWJvYXJkIiwiX2Rvd25IYW5kbGVyIiwiX3NldFBvaW50ZXJEb3duIiwiX3VwSGFuZGxlciIsIl9zcGFjZUtleURvd25IYW5kbGVyIiwibG9jYWxUYXJnZXQiLCJpc0xpZ2h0RGVzY2VuZGFudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIl9zcGFjZUtleVVwSGFuZGxlciIsIl9hc3luY0NsaWNrIiwiYXN5bmMiLCJjbGljayIsIl9wcmVzc2VkQ2hhbmdlZCIsIl9jaGFuZ2VkQnV0dG9uU3RhdGUiLCJfYXJpYUFjdGl2ZUF0dHJpYnV0ZUNoYW5nZWQiLCJvbGRWYWx1ZSIsImhhc0F0dHJpYnV0ZSIsIl9hY3RpdmVDaGFuZ2VkIiwiX2NvbnRyb2xTdGF0ZUNoYW5nZWQiLCJfYnV0dG9uU3RhdGVDaGFuZ2VkIiwiSXJvbkJ1dHRvblN0YXRlIiwiSXJvbk1ldGEiLCJ0eXBlcyIsImxpc3QiLCJtZXRhRGF0YXMiLCJieUtleSIsImlzIiwiX19tZXRhIiwiY29tcHV0ZWQiLCJob3N0QXR0cmlidXRlcyIsImhpZGRlbiIsIl9fY29tcHV0ZU1ldGEiLCJfc2VsZkNoYW5nZWQiLCJJcm9uU2VsZWN0YWJsZUJlaGF2aW9yIiwiYXR0ckZvclNlbGVjdGVkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEl0ZW0iLCJhY3RpdmF0ZUV2ZW50Iiwic2VsZWN0YWJsZSIsInNlbGVjdGVkQ2xhc3MiLCJzZWxlY3RlZEF0dHJpYnV0ZSIsImZhbGxiYWNrU2VsZWN0aW9uIiwiX2V4Y2x1ZGVkTG9jYWxOYW1lcyIsImRvbS1iaW5kIiwiZG9tLWlmIiwiZG9tLXJlcGVhdCIsImNyZWF0ZWQiLCJfYmluZEZpbHRlckl0ZW0iLCJfZmlsdGVySXRlbSIsIl9zZWxlY3Rpb24iLCJJcm9uU2VsZWN0aW9uIiwiX2FwcGx5U2VsZWN0aW9uIiwiX29ic2VydmVyIiwiX29ic2VydmVJdGVtcyIsIl9hZGRMaXN0ZW5lciIsInVub2JzZXJ2ZU5vZGVzIiwiX3JlbW92ZUxpc3RlbmVyIiwiaXRlbSIsInNlbGVjdCIsInNlbGVjdFByZXZpb3VzIiwiX3ZhbHVlVG9JbmRleCIsIl9pbmRleFRvVmFsdWUiLCJzZWxlY3ROZXh0Iiwic2VsZWN0SW5kZXgiLCJmb3JjZVN5bmNocm9ub3VzSXRlbVVwZGF0ZSIsIl91cGRhdGVJdGVtcyIsIl9zaG91bGRVcGRhdGVTZWxlY3Rpb24iLCJfY2hlY2tGYWxsYmFjayIsIl91cGRhdGVTZWxlY3RlZCIsImxpc3RlbiIsInVubGlzdGVuIiwiX2FjdGl2YXRlRXZlbnRDaGFuZ2VkIiwicXVlcnlEaXN0cmlidXRlZEVsZW1lbnRzIiwiZmlsdGVyIiwiX3NldEl0ZW1zIiwiX3VwZGF0ZUF0dHJGb3JTZWxlY3RlZCIsIl92YWx1ZUZvckl0ZW0iLCJfc2VsZWN0U2VsZWN0ZWQiLCJfdmFsdWVUb0l0ZW0iLCJjbGVhciIsInByb3BWYWx1ZSIsImdldEF0dHJpYnV0ZSIsImlzU2VsZWN0ZWQiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZUF0dHJpYnV0ZSIsIl9zZWxlY3Rpb25DaGFuZ2UiLCJfc2V0U2VsZWN0ZWRJdGVtIiwib2JzZXJ2ZU5vZGVzIiwibXV0YXRpb24iLCJidWJibGVzIiwiX2FjdGl2YXRlSGFuZGxlciIsInQiLCJfaXRlbUFjdGl2YXRlIiwicmVnaXN0ZXJFZmZlY3QiLCJjb25maWciLCJzY2FsYXIiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEZyb250TGF5ZXIiLCJiYWNrZ3JvdW5kUmVhckxheWVyIiwiZGVsdGFCZyIsIm9mZnNldEhlaWdodCIsImlzTmFOIiwiX2RIZWlnaHQiLCJfZnhQYXJhbGxheEJhY2tncm91bmQiLCJ0cmFuc2Zvcm0iLCJtaW4iLCJ0aXRsZSIsImNvbmRlbnNlZFRpdGxlIiwid2lsbENoYW5nZSIsIndlYmtpdFRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybU9yaWdpbiIsInRpdGxlQ2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvbmRlbnNlZFRpdGxlQ2xpZW50UmVjdCIsInNjYWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRpdGxlRFgiLCJsZWZ0IiwidGl0bGVEWSIsInRvcCIsIl9meFJlc2l6ZVRpdGxlIiwicG9pbnRzIiwiY29uZGVuc2VzIiwib3BhY2l0eSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwicG9pbnQiLCJzaGFkb3ciLCJfZnhCbGVuZEJhY2tncm91bmQiLCJfcGFyZW50UmVzaXphYmxlIiwiX25vdGlmeWluZ0Rlc2NlbmRhbnQiLCJpcm9uLXJlcXVlc3QtcmVzaXplLW5vdGlmaWNhdGlvbnMiLCJfYm91bmROb3RpZnlSZXNpemUiLCJub3RpZnlSZXNpemUiLCJfcmVxdWVzdFJlc2l6ZU5vdGlmaWNhdGlvbnMiLCJzdG9wUmVzaXplTm90aWZpY2F0aW9uc0ZvciIsIl9maXJlUmVzaXplIiwiYXNzaWduUGFyZW50UmVzaXphYmxlIiwicGFyZW50UmVzaXphYmxlIiwiZWxlbWVudCIsIl9vbkRlc2NlbmRhbnRJcm9uUmVzaXplIiwiU2V0dGluZ3MiLCJ1c2VTaGFkb3ciLCJfb25Jcm9uUmVxdWVzdFJlc2l6ZU5vdGlmaWNhdGlvbnMiLCJyb290VGFyZ2V0IiwiX3BhcmVudFJlc2l6YWJsZUNoYW5nZWQiLCJkZXNjZW5kYW50IiwicmVhZHlTdGF0ZSIsInJlYWR5c3RhdGVjaGFuZ2VkIiwibmV3U3BsaWNlIiwiRURJVF9MRUFWRSIsIkVESVRfVVBEQVRFIiwiRURJVF9BREQiLCJFRElUX0RFTEVURSIsImNhbGNTcGxpY2VzIiwiY3VycmVudCIsImN1cnJlbnRTdGFydCIsImN1cnJlbnRFbmQiLCJvbGRTdGFydCIsIm9sZEVuZCIsInByZWZpeENvdW50Iiwic3VmZml4Q291bnQiLCJtaW5MZW5ndGgiLCJzZWFyY2hMZW5ndGgiLCJlcXVhbHMiLCJzaGFyZWRQcmVmaXgiLCJpbmRleDEiLCJpbmRleDIiLCJjb3VudCIsInNoYXJlZFN1ZmZpeCIsIm9wcyIsImRpc3RhbmNlcyIsImVkaXRzIiwibm9ydGhXZXN0Iiwid2VzdCIsIm5vcnRoIiwicmV2ZXJzZSIsInNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyIsInJvd0NvdW50IiwiY29sdW1uQ291bnQiLCJfaiIsImNhbGNFZGl0RGlzdGFuY2VzIiwib2xkSW5kZXgiLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiQXJyYXlTcGxpY2UiLCJjYWxjdWxhdGVTcGxpY2VzIiwicHJldmlvdXMiLCJnZXN0dXJlcyIsIkdlc3R1cmVzIiwiR2VzdHVyZUV2ZW50TGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInN0eWxlSW50ZXJmYWNlIiwibGVnYWN5RWxlbWVudEJhc2UiLCJEaXJNaXhpbiIsIkRJUkVDVElPTl9NQVAiLCJ4Iiwibm9uZSIsIkxlZ2FjeUVsZW1lbnQiLCJfbGVnYWN5RWxlbWVudEJhc2UiLCJfX2JvdW5kTGlzdGVuZXJzIiwiX2RlYm91bmNlcnMiLCJfYXBwbHlMaXN0ZW5lcnMiLCJhdHRyaWJ1dGVDaGFuZ2VkIiwicHJvdG8iLCJfX2hhc1JlZ2lzdGVyRmluaXNoZWQiLCJfcmVnaXN0ZXJlZCIsIl9lbnN1cmVBdHRyaWJ1dGVzIiwiX3NlcmlhbGl6ZVZhbHVlIiwiX2Rlc2VyaWFsaXplVmFsdWUiLCJhdHRyaWJ1dGUiLCJhcGkiLCJuJCIsImdldE93blByb3BlcnR5TmFtZXMiLCJwZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9jb250ZW50Rm9yVGVtcGxhdGUiLCJFdmVudCIsImNvbXBvc2VkIiwiaGJsIiwiYmwiLCJfYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZSIsIl9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUiLCJkaXJlY3Rpb24iLCJzZXRUb3VjaEFjdGlvbiIsInNsY3RyIiwicXVlcnlTZWxlY3RvciIsInNoYWRvd1Jvb3QiLCJnZXRFZmZlY3RpdmVDaGlsZE5vZGVzIiwic2VsZWN0b3IiLCJFTEVNRU5UX05PREUiLCJjbiIsInRjIiwiQ09NTUVOVF9OT0RFIiwiZSQiLCJnZXREaXN0cmlidXRlZE5vZGVzIiwiZ2V0Q29udGVudENoaWxkTm9kZXMiLCJjb250YWlucyIsImdldFJvb3ROb2RlIiwiY29udGFpbmVyIiwic2hvdWxkT2JzZXJ2ZSIsImdldENvbXB1dGVkU3R5bGVWYWx1ZSIsImpvYk5hbWUiLCJ3YWl0Iiwid2FpdFRpbWUiLCJ0YWciLCJlbHQiLCJzZXRQcm9wZXJ0aWVzIiwib3B0QXN5bmMiLCJsb2FkRm4iLCJlcnJvckZuIiwiaW1wb3J0SHJlZiIsIm1hdGNoZXNTZWxlY3RvciIsImJvb2wiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJ0cmFuc2Zvcm1UZXh0IiwieiIsImFycmF5T3JQYXRoIiwibGV2ZWwiLCJfY29uc29sZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9sb2dnZXIiLCJfbGVuNCIsIl9rZXk0IiwiRG9jdW1lbnRGcmFnbWVudCIsIkxpdGVyYWxTdHJpbmciLCJzdHJpbmciLCJ0b1N0cmluZyIsImxpdGVyYWxWYWx1ZSIsInN0cmluZ3MiLCJhY2MiLCJodG1sVmFsdWUiLCJodG1sTGl0ZXJhbCIsIm1pY3JvdGFzayIsIlByb3BlcnRpZXNDaGFuZ2VkIiwiX19kYXRhSW52YWxpZCIsIl9fZGF0YUluc3RhbmNlUHJvcHMiLCJfX3NlcmlhbGl6aW5nIiwiX2luaXRpYWxpemVQcm9wZXJ0aWVzIiwiX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAiLCJfZGVmaW5lUHJvcGVydHlBY2Nlc3NvciIsIl9fZGF0YUF0dHJpYnV0ZXMiLCJfZ2V0UHJvcGVydHkiLCJleHQiLCJjaGFuZ2VkIiwiX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMiLCJyZWFkeSIsIl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlIiwiX3Byb3BlcnRpZXNDaGFuZ2VkIiwiX2F0dHJpYnV0ZVRvUHJvcGVydHkiLCJ0eXBlRm9yUHJvcGVydHkiLCJzdHIiLCJjYXNlTWFwIiwibmF0aXZlUHJvcGVydGllcyIsIl9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzIiwiRGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvdXRWYWx1ZSIsInBhcnNlIiwic2F2ZUFjY2Vzc29yVmFsdWUiLCJhJCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIkRBU0hfVE9fQ0FNRUwiLCJDQU1FTF9UT19EQVNIIiwiZGFzaCIsImNhbWVsIiwiaW1wb3J0TW9kdWxlIiwiUG9seW1lckRvbU1vZHVsZSIsImN1c3RvbUVsZW1lbnRzIiwiaW1wb3J0Iiwic3R5bGVGb3JJbXBvcnQiLCJpbXBvcnREb2MiLCJpbXBvcnRDc3MiLCJTdHlsZUdhdGhlciIsInN0eWxlc0Zyb21Nb2R1bGVzIiwibW9kdWxlSWRzIiwic3R5bGVzIiwic3R5bGVzRnJvbU1vZHVsZSIsIl9zdHlsZXMiLCJfc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMiLCJzdHlsZXNGcm9tVGVtcGxhdGUiLCJhc3NldHBhdGgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5jbHVkZSIsInN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIiwicCQiLCJ1bnNjb3BlZCIsIl91bnNjb3BlZFN0eWxlIiwiX3N0eWxlIiwiY3NzRnJvbU1vZHVsZXMiLCJjc3NGcm9tTW9kdWxlIiwiX2Nzc1RleHQiLCJfY3NzRnJvbU1vZHVsZUltcG9ydHMiLCJjc3NGcm9tVGVtcGxhdGUiLCJjc3NGcm9tTW9kdWxlSW1wb3J0cyIsInVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMiLCJuYXRpdmVDc3MiLCJ1c2VOYXRpdmVDdXN0b21FbGVtZW50cyIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJyb290UGF0aCIsInNldFJvb3RQYXRoIiwic2V0U2FuaXRpemVET01WYWx1ZSIsIm5ld1Nhbml0aXplRE9NVmFsdWUiLCJwYXNzaXZlVG91Y2hHZXN0dXJlcyIsInNldFBhc3NpdmVUb3VjaEdlc3R1cmVzIiwidXNlUGFzc2l2ZSIsInBvbHltZXJFbGVtZW50QmFzZSIsIlByb3BlcnRpZXNNaXhpbiIsIl9wb2x5bWVyRWxlbWVudEJhc2UiLCJQb2x5bWVyRWxlbWVudCIsIl90ZW1wbGF0ZSIsIl9pbXBvcnRQYXRoIiwiaW1wb3J0UGF0aCIsIiQiLCJ0ZWxlbWV0cnkiLCJyZWdpc3RlciIsIl9fb3duT2JzZXJ2ZXJzIiwiY3JlYXRlT2JzZXJ2ZXJzIiwiX3Byb3BlcnRpZXMiLCJjbG9uZU5vZGUiLCJhbGxQcm9wcyIsIl9oYXNSZWFkT25seUVmZmVjdCIsIl9oYXNSZWZsZWN0RWZmZWN0IiwiX2hhc05vdGlmeUVmZmVjdCIsIkRvbU1vZHVsZSIsImluc3RhbmNlQ291bnQiLCJmaW5hbGl6ZSIsIl9maW5hbGl6ZVRlbXBsYXRlIiwiX19wcm9wZXJ0eURlZmF1bHRzIiwicHJvcGVydHlEZWZhdWx0cyIsIl9oYXNBY2Nlc3NvciIsInN0eWxlRWxlbWVudCIsIl9hdHRhY2hEb20iLCJhdHRhY2hTaGFkb3ciLCJzdHlsZVN1YnRyZWUiLCJfX3BvbHltZXJGaW5hbGl6ZWQiLCJ0ZW1wbGF0ZVN0eWxlcyIsInN0eWxlc1dpdGhJbXBvcnRzIiwibGlua2VkU3R5bGVzIiwiZmlyc3RUZW1wbGF0ZUNoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJfcHJvY2Vzc1N0eWxlVGV4dCIsInRlbXBsYXRlU3R5bGVJbmRleCIsIl9zIiwidGVtcGxhdGVTdHlsZSIsInByZXBhcmVUZW1wbGF0ZSIsInByb2Nlc3NFbGVtZW50U3R5bGVzIiwicmVnaXN0cmF0aW9ucyIsIl9yZWdMb2ciLCJsb2ciLCJkdW1wUmVnaXN0cmF0aW9ucyIsInVwZGF0ZVN0eWxlcyIsInN0eWxlRG9jdW1lbnQiLCJzaXplIiwicnRsTWlycm9yaW5nIiwidXNlR2xvYmFsUnRsQXR0cmlidXRlIiwiX21ldGEiLCJnZXRJY29uTmFtZXMiLCJfaWNvbnMiLCJfY3JlYXRlSWNvbk1hcCIsImFwcGx5SWNvbiIsImljb25OYW1lIiwicmVtb3ZlSWNvbiIsInN2ZyIsIl9jbG9uZUljb24iLCJfdGFyZ2V0SXNSVEwiLCJwZGUiLCJfc3ZnSWNvbiIsIl9fdGFyZ2V0SXNSVEwiLCJnbG9iYWxFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiX25hbWVDaGFuZ2VkIiwiaWNvbnMiLCJpY29uIiwibWlycm9yQWxsb3dlZCIsIl9wcmVwYXJlU3ZnQ2xvbmUiLCJzb3VyY2VTdmciLCJjcmVhdGVFbGVtZW50TlMiLCJ2aWV3Qm94IiwidG9Cb2R5IiwiVXRpbGl0eSIsImRpc3RhbmNlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4RGVsdGEiLCJ5RGVsdGEiLCJzcXJ0Iiwibm93IiwicGVyZm9ybWFuY2UiLCJFbGVtZW50TWV0cmljcyIsIndpZHRoIiwiYm91bmRpbmdSZWN0IiwiaGVpZ2h0IiwiUmlwcGxlIiwiY29sb3IiLCJ3YXZlIiwid2F2ZUNvbnRhaW5lciIsImJhY2tncm91bmRDb2xvciIsInJlc2V0SW50ZXJhY3Rpb25TdGF0ZSIsImZ1cnRoZXN0Q29ybmVyRGlzdGFuY2VGcm9tIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwiTUFYX1JBRElVUyIsInJlY2VudGVycyIsImNlbnRlciIsIm1vdXNlRG93bkVsYXBzZWQiLCJlbGFwc2VkIiwibW91c2VEb3duU3RhcnQiLCJtb3VzZVVwU3RhcnQiLCJtb3VzZVVwRWxhcHNlZCIsIm1vdXNlRG93bkVsYXBzZWRTZWNvbmRzIiwibW91c2VVcEVsYXBzZWRTZWNvbmRzIiwibW91c2VJbnRlcmFjdGlvblNlY29uZHMiLCJpbml0aWFsT3BhY2l0eSIsIm9wYWNpdHlEZWNheVZlbG9jaXR5IiwicmFkaXVzIiwid2lkdGgyIiwiY29udGFpbmVyTWV0cmljcyIsImhlaWdodDIiLCJ3YXZlUmFkaXVzIiwiZHVyYXRpb24iLCJ0aW1lTm93IiwicG93IiwiYWJzIiwib3V0ZXJPcGFjaXR5Iiwid2F2ZU9wYWNpdHkiLCJpc09wYWNpdHlGdWxseURlY2F5ZWQiLCJtYXhSYWRpdXMiLCJpc1Jlc3RpbmdBdE1heFJhZGl1cyIsImlzQW5pbWF0aW9uQ29tcGxldGUiLCJ0cmFuc2xhdGlvbkZyYWN0aW9uIiwieE5vdyIsInhFbmQiLCJ4U3RhcnQiLCJ5Tm93IiwieUVuZCIsInlTdGFydCIsImlzTW91c2VEb3duIiwic2xpZGVEaXN0YW5jZSIsImRyYXciLCJkeCIsImR5IiwiZG93bkFjdGlvbiIsInhDZW50ZXIiLCJ5Q2VudGVyIiwidXBBY3Rpb24iLCJyaXBwbGVzIiwiYW5pbWF0aW5nIiwiaG9sZERvd24iLCJub2luayIsIl9hbmltYXRpbmciLCJfYm91bmRBbmltYXRlIiwiRnVuY3Rpb24iLCJhbmltYXRlIiwiZ2V0T3duZXJSb290Iiwic2hvdWxkS2VlcEFuaW1hdGluZyIsInNpbXVsYXRlZFJpcHBsZSIsInVpRG93bkFjdGlvbiIsImFkZFJpcHBsZSIsInVpVXBBY3Rpb24iLCJyaXBwbGUiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwid2F2ZXMiLCJfc2V0QW5pbWF0aW5nIiwicmVtb3ZlUmlwcGxlIiwicmlwcGxlSW5kZXgiLCJfb25FbnRlcktleWRvd24iLCJfb25TcGFjZUtleWRvd24iLCJfb25TcGFjZUtleXVwIiwiX2hvbGREb3duQ2hhbmdlZCIsIm5ld1ZhbCIsIm9sZFZhbCIsIlBhcGVyUmlwcGxlQmVoYXZpb3IiLCJfcmlwcGxlQ29udGFpbmVyIiwiZW5zdXJlUmlwcGxlIiwib3B0VHJpZ2dlcmluZ0V2ZW50IiwiaGFzUmlwcGxlIiwiX3JpcHBsZSIsIl9jcmVhdGVSaXBwbGUiLCJyaXBwbGVDb250YWluZXIiLCJkb21Db250YWluZXIiLCJkZWVwQ29udGFpbnMiLCJnZXRSaXBwbGUiLCJfbm9pbmtDaGFuZ2VkIiwiSXJvbkNvbnRyb2xTdGF0ZSIsIl9vbGRUYWJJbmRleCIsIl9ib3VuZEZvY3VzQmx1ckhhbmRsZXIiLCJfZm9jdXNCbHVySGFuZGxlciIsIl9faGFuZGxlRXZlbnRSZXRhcmdldGluZyIsIl9zZXRGb2N1c2VkIiwic291cmNlRXZlbnQiLCJfZGlzYWJsZWRDaGFuZ2VkIiwicG9pbnRlckV2ZW50cyIsInRhYkluZGV4IiwiYmx1ciIsIl9jaGFuZ2VkQ29udHJvbFN0YXRlIiwiUGFwZXJJbmt5Rm9jdXNCZWhhdmlvckltcGwiLCJfZm9jdXNlZENoYW5nZWQiLCJQYXBlcklua3lGb2N1c0JlaGF2aW9yIiwidGhlbWUiLCJfREVGQVVMVF9JQ09OU0VUIiwiX2ljb25DaGFuZ2VkIiwiX2ljb25OYW1lIiwiX2ljb25zZXROYW1lIiwiX3VwZGF0ZUljb24iLCJfc3JjQ2hhbmdlZCIsIl91c2VzSWNvbnNldCIsIl9pbWciLCJfaWNvbnNldCIsImRyYWdnYWJsZSIsInJvbGUiLCJ0YWJpbmRleCIsIl9hbHRDaGFuZ2VkIiwibmV3VmFsdWUiLCJsYWJlbCIsIklyb25NdWx0aVNlbGVjdGFibGVCZWhhdmlvckltcGwiLCJtdWx0aSIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0ZWRJdGVtcyIsIl90b2dnbGVTZWxlY3RlZCIsIm11bHRpQ2hhbmdlZCIsInVuZmlsdGVyZWRWYWx1ZSIsIl9zZWxlY3RNdWx0aSIsIl92YWx1ZXNUb0l0ZW1zIiwic2V0SXRlbVNlbGVjdGVkIiwiX3NldFNlbGVjdGVkSXRlbXMiLCJJcm9uTXVsdGlTZWxlY3RhYmxlQmVoYXZpb3IiLCJzZWxlY3RDYWxsYmFjayIsInNlbGVjdGlvbiIsImV4Y2x1ZGVzIiwidG9nZ2xlIiwiX3NlbGVjdGVkUGFnZUNoYW5nZWQiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfZnhSZXNpemVTbmFwcGVkVGl0bGUiLCJ0cmFuc2l0aW9uIiwiX2Z4RmFkZUJhY2tncm91bmQiLCJoYXNTY3JvbGxpbmdSZWdpb24iLCJoZWFkZXIiLCJoZWFkZXJTbG90Iiwid3JhcHBlciIsInNjcm9sbFRhcmdldCIsImNvbnRlbnRDb250YWluZXIiLCJvd25lckRvY3VtZW50IiwiaGVhZGVySGVpZ2h0IiwicmlnaHQiLCJyZWN0IiwicmlnaHRPZmZzZXQiLCJjbGllbnRXaWR0aCIsImNvbnRhaW5lclN0eWxlIiwiZml4ZWQiLCJtYXJnaW5Ub3AiLCJwYWRkaW5nVG9wIiwiX3Njcm9sbFRpbWVyIiwic2Nyb2xsVGltaW5nRnVuY3Rpb24iLCJxdWVyeUFsbFJvb3QiLCJxdWV1ZSIsInNjcm9sbCIsImRvY0VsIiwiaGFzTmF0aXZlU2Nyb2xsQmVoYXZpb3IiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG8iLCJ0aW1pbmdGbiIsInN0YXJ0VGltZSIsImN1cnJlbnRTY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImN1cnJlbnRTY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJkZWx0YVNjcm9sbFRvcCIsImRlbHRhU2Nyb2xsTGVmdCIsInVwZGF0ZUZyYW1lIiwiZWxhcHNlZFRpbWUiLCJoZWFkZXJzIiwiX2RlZmF1bHRTY3JvbGxUYXJnZXQiLCJfc2hvdWxkSGF2ZUxpc3RlbmVyIiwiX3Njcm9sbFRhcmdldENoYW5nZWQiLCJfb2xkU2Nyb2xsVGFyZ2V0IiwiX3RvZ2dsZVNjcm9sbExpc3RlbmVyIiwiX2RvYyIsImRvbUhvc3QiLCJfaXNWYWxpZFNjcm9sbFRhcmdldCIsIl9zY3JvbGxMZWZ0IiwibGVmdE9yT3B0aW9ucyIsIl9zY3JvbGxUYXJnZXRXaWR0aCIsImlubmVyV2lkdGgiLCJfc2Nyb2xsVGFyZ2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ5ZXMiLCJldmVudFRhcmdldCIsIl9ib3VuZFNjcm9sbEhhbmRsZXIiLCJ0b2dnbGVTY3JvbGxMaXN0ZW5lciIsInJldmVhbHMiLCJfaGVpZ2h0IiwiX3N0aWNreUVsVG9wIiwiX3N0aWNreUVsUmVmIiwiX3RvcCIsIl9wcm9ncmVzcyIsIl93YXNTY3JvbGxpbmdEb3duIiwiX2luaXRTY3JvbGxUb3AiLCJfaW5pdFRpbWVzdGFtcCIsIl9sYXN0VGltZXN0YW1wIiwiX2xhc3RTY3JvbGxUb3AiLCJfbWF4SGVhZGVyVG9wIiwiX3N0aWNreUVsIiwic2xvdCIsIl9jb25maWdDaGFuZ2VkIiwiZmlyc3RTZXR1cCIsImN1cnJlbnREaXNhYmxlZCIsIl9tYXlNb3ZlIiwib2Zmc2V0VG9wIiwiZm9yY2VVcGRhdGUiLCJsYXN0VG9wIiwibWF4SGVhZGVyVG9wIiwiZFNjcm9sbFRvcCIsImFic0RTY3JvbGxUb3AiLCJpc1Njcm9sbGluZ0Rvd24iLCJfY2xhbXAiLCJzY3JvbGxWZWxvY2l0eSIsIl90cmFuc2Zvcm1IZWFkZXIiLCJ3aWxsQ29uZGVuc2UiLCJ0cmFuc2xhdGUzZCIsIl9lbnN1cmVCZ0NvbnRhaW5lcnMiLCJfYmdDb250YWluZXIiLCJfYmdSZWFyIiwiX2JnRnJvbnQiLCJnZXRTY3JvbGxTdGF0ZSIsInF1ZXJ5TWF0Y2hlcyIsInF1ZXJ5IiwiZnVsbCIsIl9ib3VuZE1RSGFuZGxlciIsInF1ZXJ5SGFuZGxlciIsIl9tcSIsInF1ZXJ5Q2hhbmdlZCIsIl9yZW1vdmUiLCJfYWRkIiwibWF0Y2hNZWRpYSIsIm1xIiwiX3NldFF1ZXJ5TWF0Y2hlcyIsImZvcmNlTmFycm93IiwicmVzcG9uc2l2ZVdpZHRoIiwibmFycm93Iiwib3BlbmVkV2hlbk5hcnJvdyIsIl9kcmF3ZXJQb3NpdGlvbiIsImRyYXdlciIsImRyYXdlclNsb3QiLCJfY2xpY2tIYW5kbGVyIiwicGVyc2lzdGVudCIsInBvc2l0aW9uIiwiX2RyYXdlck5lZWRzUmVzZXQiLCJvcGVuZWQiLCJSZW5kZXJTdGF0dXMiLCJhZnRlck5leHRSZW5kZXIiLCJfbmFycm93Q2hhbmdlZCIsIl9vblF1ZXJ5TWF0Y2hlc0NoYW5nZWQiLCJfc2V0TmFycm93IiwiX2NvbXB1dGVNZWRpYVF1ZXJ5IiwiTXV0YWJsZURhdGFCZWhhdmlvciIsIk9wdGlvbmFsTXV0YWJsZURhdGFCZWhhdmlvciIsImYiLCJpblVzZSIsImciLCJzaGltY3NzcHJvcGVydGllcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIkNTUyIsInN1cHBvcnRzIiwiV2ViQ29tcG9uZW50cyIsImZsYWdzIiwiaCIsImsiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiSFRNTEltcG9ydHMiLCJ3aGVuUmVhZHkiLCJxIiwiY3VzdG9tU3R5bGVzIiwiZW5xdWV1ZWQiLCJ0aGVuIiwiX19zZWVuQnlTaGFkeUNTUyIsIl9fc2hhZHlDU1NDYWNoZWRTdHlsZSIsImdldFN0eWxlIiwiX19hcHBsaWVkRWxlbWVudCIsImFkZEN1c3RvbVN0eWxlIiwiZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSIsInByb2Nlc3NTdHlsZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidHJhbnNmb3JtQ2FsbGJhY2siLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5hdGl2ZVNoYWRvdyIsIkN1c3RvbVN0eWxlSW50ZXJmYWNlIiwiQ3VzdG9tU3R5bGUiLCJfSFRNTEVsZW1lbnQiLCJkZWZpbmUiLCJBcnJheVNlbGVjdG9yTWl4aW4iLCJlbGVtZW50QmFzZSIsIl9lbGVtZW50QmFzZSIsIl9fbGFzdEl0ZW1zIiwiX19sYXN0TXVsdGkiLCJfX3NlbGVjdGVkTWFwIiwiaXRlbXNJbmZvIiwibmV3SXRlbXMiLCJsYXN0SXRlbXMiLCJjbGVhclNlbGVjdGlvbiIsIl9fYXBwbHlTcGxpY2VzIiwiX19kZXNlbGVjdENoYW5nZWRJZHgiLCJoYXMiLCJfbG9vcCIsIl9fdXBkYXRlTGlua3MiLCJzaWR4IiwiZGVsZXRlIiwiX3RoaXMzIiwibGlua1BhdGhzIiwiTWFwIiwiX3RoaXM0IiwiX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4IiwiZGVzZWxlY3QiLCJkZXNlbGVjdEluZGV4IiwiYmFzZUFycmF5U2VsZWN0b3IiLCJBcnJheVNlbGVjdG9yIiwiX2Jhc2VBcnJheVNlbGVjdG9yIiwiRG9tSWYiLCJfUG9seW1lciRFbGVtZW50IiwiX19yZW5kZXJEZWJvdW5jZXIiLCJfX2ludmFsaWRQcm9wcyIsIl9faW5zdGFuY2UiLCJfbGFzdElmIiwiX19jdG9yIiwiaWYiLCJyZXN0YW1wIiwiX19yZW5kZXIiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiX190ZWFyZG93bkluc3RhbmNlIiwiX19kZWJvdW5jZVJlbmRlciIsIl9fZW5zdXJlSW5zdGFuY2UiLCJkaXNjb25uZWN0IiwiY2hpbGRMaXN0IiwiX19zeW5jSG9zdFByb3BlcnRpZXMiLCJjJCIsInByZXZpb3VzU2libGluZyIsInBhcmVudCIsImRvbVJlcGVhdEJhc2UiLCJEb21SZXBlYXQiLCJfZG9tUmVwZWF0QmFzZSIsIl9faW5zdGFuY2VzIiwiX19saW1pdCIsIkluZmluaXR5IiwiX19wb29sIiwiX19pdGVtc0lkeFRvSW5zdElkeCIsIl9fY2h1bmtDb3VudCIsIl9fbGFzdENodW5rVGltZSIsIl9fc29ydEZuIiwiX19maWx0ZXJGbiIsIl9fb2JzZXJ2ZVBhdGhzIiwiX19pc0RldGFjaGVkIiwiYXMiLCJpbmRleEFzIiwiaXRlbXNJbmRleEFzIiwicmVuZGVyZWRJdGVtQ291bnQiLCJpbml0aWFsQ291bnQiLCJ0YXJnZXRGcmFtZXJhdGUiLCJfdGFyZ2V0RnJhbWVUaW1lIiwiX19kZXRhY2hJbnN0YW5jZSIsIl9fYXR0YWNoSW5zdGFuY2UiLCJpJCIsImZ1bmN0aW9uT3JNZXRob2ROYW1lIiwiX19nZXRNZXRob2RIb3N0IiwiX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlIiwicmF0ZSIsImNlaWwiLCJfX3JlcXVlc3RSZW5kZXJDaHVuayIsIl9fcmVuZGVyQ2h1bmsiLCJjdXJyQ2h1bmtUaW1lIiwicmF0aW8iLCJyb3VuZCIsImNoYW5nZSIsIl9faGFuZGxlSXRlbVBhdGgiLCJfX2luaXRpYWxpemVDaHVua2luZyIsInBhdGhzIiwiX19lbnN1cmVUZW1wbGF0aXplZCIsIl9fYXBwbHlGdWxsUmVmcmVzaCIsIl9zZXRSZW5kZXJlZEl0ZW1Db3VudCIsIl9fdHJ5UmVuZGVyQ2h1bmsiLCJpc250SWR4VG9JdGVtc0lkeCIsIml0ZW1zSWR4VG9JbnN0SWR4IiwiaW5zdElkeCIsImxpbWl0IiwiaXRlbUlkeCIsIl9faW5zZXJ0SW5zdGFuY2UiLCJfX2RldGFjaEFuZFJlbW92ZUluc3RhbmNlIiwiZWwiLCJfX3N0YW1wSW5zdGFuY2UiLCJiZWZvcmVSb3ciLCJiZWZvcmVOb2RlIiwiaXRlbXNQYXRoIiwiZG90IiwiaXRlbXNJZHgiLCJpdGVtU3ViUGF0aCIsIl9faGFuZGxlT2JzZXJ2ZWRQYXRocyIsIml0ZW1QYXRoIiwiaW5zdGFuY2UiLCJkb21CaW5kQmFzZSIsIkRvbUJpbmQiLCJfZG9tQmluZEJhc2UiLCJfX2NoaWxkcmVuIiwicmVuZGVyIiwiX19yZW1vdmVDaGlsZHJlbiIsIl9faW5zZXJ0Q2hpbGRyZW4iLCJUZW1wbGF0aXplciIsIl90ZW1wbGF0aXplclRlbXBsYXRlIiwiY3RvciIsIl9wYXJlbnRNb2RlbCIsIl9pbnN0YW5jZVByb3BzIiwiX2ZvcndhcmRIb3N0UHJvcFYyIiwiX25vdGlmeUluc3RhbmNlUHJvcFYyIiwic3RhbXAiLCJtZXRhUHJvcHMiLCJiZWZvcmVSZWdpc3RlciIsIm1peGluQmVoYXZpb3JzIiwic3VwZXJCZWhhdmlvcnMiLCJfbWl4aW5CZWhhdmlvcnMiLCJHZW5lcmF0ZUNsYXNzRnJvbUluZm8iLCJmbGF0dGVuQmVoYXZpb3JzIiwiZXhjbHVkZSIsIlBvbHltZXJHZW5lcmF0ZWQiLCJfQmFzZSIsIl9lbnN1cmVBdHRyaWJ1dGUiLCJnZW5lcmF0ZWRGcm9tIiwiQ2xhc3MiLCJpc1Nsb3QiLCJGbGF0dGVuZWROb2Rlc09ic2VydmVyIiwiX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciIsIl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyIiwiX2Nvbm5lY3RlZCIsIl90YXJnZXQiLCJfZWZmZWN0aXZlTm9kZXMiLCJfc2NoZWR1bGVkIiwiX2JvdW5kU2NoZWR1bGUiLCJfc2NoZWR1bGUiLCJjb25uZWN0IiwiYXNzaWduZWROb2RlcyIsImZsYXR0ZW4iLCJfbGlzdGVuU2xvdHMiLCJvYnNlcnZlQ2hpbGRyZW4iLCJtdXRhdGlvbnMiLCJfcHJvY2Vzc011dGF0aW9ucyIsIl91bmxpc3RlblNsb3RzIiwidW5vYnNlcnZlQ2hpbGRyZW4iLCJfcHJvY2Vzc1Nsb3RNdXRhdGlvbnMiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwidGFrZVJlY29yZHMiLCJuZXdOb2RlcyIsImdldEZsYXR0ZW5lZE5vZGVzIiwibm9ybWFsaXplZE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIkRvbUFwaSIsIm9ic2VydmVySGFuZGxlIiwiZG9jIiwiaXAkIiwiYXNzaWduZWRTbG90IiwiZGVlcCIsIkRvY3VtZW50IiwiX2FjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwibWV0aG9kcyIsImZvcndhcmRNZXRob2RzIiwiX2xvb3AyIiwiZm9yd2FyZFJlYWRPbmx5UHJvcGVydGllcyIsIl9sb29wMyIsImZvcndhcmRQcm9wZXJ0aWVzIiwiRXZlbnRBcGkiLCJjb21wb3NlZFBhdGgiLCJfX2RvbUFwaSIsImhlbHBlciIsImFkZERlYm91bmNlciIsInNjaGVkdWxlZCIsImJlZm9yZVJlbmRlclF1ZXVlIiwiYWZ0ZXJSZW5kZXJRdWV1ZSIsInNjaGVkdWxlIiwiZmx1c2hRdWV1ZSIsImNhbGxNZXRob2QiLCJydW5RdWV1ZSIsImJlZm9yZU5leHRSZW5kZXIiLCJ3aGVuSW1wb3J0c1JlYWR5IiwicmVsIiwiY2xlYW51cCIsImxvYWRMaXN0ZW5lciIsImVycm9yTGlzdGVuZXIiLCJfX2R5bmFtaWNJbXBvcnRMb2FkZWQiLCJIT1NUX0RJUiIsIkVMX0RJUiIsIkRJUl9JTlNUQU5DRVMiLCJET0NVTUVOVF9ESVIiLCJnZXRSVEwiLCJzZXRSVEwiLCJfX2F1dG9EaXJPcHRPdXQiLCJ1cGRhdGVEaXJlY3Rpb24iLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwiRGlyIiwiX3JlcGxhY2VEaXJJbkNzc1RleHQiLCJyZXBsYWNlZFRleHQiLCJfX2FjdGl2YXRlRGlyIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIkhBU19OQVRJVkVfVEEiLCJ0b3VjaEFjdGlvbiIsIkhBTkRMRURfT0JKIiwiVE9VQ0hfQUNUSU9OIiwiTU9VU0VfVElNRU9VVCIsIk1PVVNFX0VWRU5UUyIsIk1PVVNFX1dISUNIX1RPX0JVVFRPTlMiLCJNT1VTRV9IQVNfQlVUVE9OUyIsIk1vdXNlRXZlbnQiLCJidXR0b25zIiwiaXNNb3VzZUV2ZW50IiwiU1VQUE9SVFNfUEFTU0lWRSIsIlBBU1NJVkVfVE9VQ0giLCJwYXNzaXZlIiwib3B0cyIsIklTX1RPVUNIX09OTFkiLCJHZXN0dXJlUmVjb2duaXplciIsInJlc2V0IiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsImNsaWNrZWRMYWJlbHMiLCJsYWJlbGxhYmxlIiwiYnV0dG9uIiwiaW5wdXQiLCJrZXlnZW4iLCJtZXRlciIsIm91dHB1dCIsInRleHRhcmVhIiwibWF0Y2hpbmdMYWJlbHMiLCJsYWJlbHMiLCJtYXRjaGluZyIsIm1vdXNlQ2FuY2VsbGVyIiwibW91c2VFdmVudCIsInNjIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsInNraXAiLCJjbGlja0Zyb21MYWJlbCIsIm93bmVyTGFiZWxzIiwiUE9JTlRFUlNUQVRFIiwibW91c2UiLCJzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIiLCJzZXR1cCIsImVuIiwiZXZlbnRzIiwiaGFzTGVmdE1vdXNlQnV0dG9uIiwiZXYiLCJ3aGljaCIsIm1vdXNlSWdub3JlSm9iIiwidG91Y2giLCJzY3JvbGxEZWNpZGVkIiwidHJhY2tEb2N1bWVudCIsInN0YXRlT2JqIiwibW92ZWZuIiwidXBmbiIsInVudHJhY2tEb2N1bWVudCIsInJlY29nbml6ZXJzIiwiZGVlcFRhcmdldEZpbmQiLCJlbGVtZW50RnJvbVBvaW50IiwibmV4dCIsIl9maW5kT3JpZ2luYWxUYXJnZXQiLCJ0YXJnZXRzIiwiX2hhbmRsZU5hdGl2ZSIsImhhbmRsZWQiLCJnb2JqIiwiY3VycmVudFRhcmdldCIsImdzIiwiY2hhbmdlZFRvdWNoZXMiLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsIl9oYW5kbGVUb3VjaEFjdGlvbiIsImZsb3ciLCJfciIsImNsaWVudFgiLCJjbGllbnRZIiwidGEiLCJmaXJzdFRvdWNoQWN0aW9uIiwicHJldmVudCIsImV2VHlwZSIsInJlY29nbml6ZXIiLCJkZXBzIiwiZGVwIiwiZ2QiLCJfY291bnQiLCJyZWNvZyIsImVtaXRzIiwiX2ZpbmRSZWNvZ25pemVyQnlFdmVudCIsImV2TmFtZSIsIl9maXJlIiwicHJldmVudGVyIiwicmVzZXRNb3VzZUNhbmNlbGxlciIsImVuZCIsInN0YXRlIiwic3RhcnRlZCIsIm1vdmVzIiwiYWRkTW92ZSIsIm1vdmUiLCJoYXNNb3ZlZEVub3VnaCIsImN0Iiwic2Vjb25kbGFzdCIsImxhc3Rtb3ZlIiwiZGR4IiwiZGR5IiwiaG92ZXIiLCJOYU4iLCJzYXZlIiwiZm9yd2FyZCIsImJjciIsInBhZ2VYIiwicGFnZVkiLCJib3R0b20iLCJpc1N5bnRoZXRpY0NsaWNrIiwiZmluZE9yaWdpbmFsVGFyZ2V0IiwicnVsZXMiLCJwYXJzZWRDc3NUZXh0IiwiYXRSdWxlIiwicGFyc2VkU2VsZWN0b3IiLCJrZXlmcmFtZXNOYW1lIiwiYmEiLCJjYSIsImRhIiwiZWEiLCJ3IiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImxhIiwiX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uIiwiX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9uIiwiX2FwcGx5U2hpbU5leHRWZXJzaW9uIiwiQSIsIkMiLCJCIiwiRCIsIkUiLCJHIiwiSCIsIm5hIiwiSSIsIlNldCIsIkoiLCJLIiwiX19jc3NSdWxlcyIsIkwiLCJvYSIsInBhIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiTSIsImFhIiwiRiIsInNhIiwicmEiLCJxYSIsImRldGVjdE1peGluIiwidHJhbnNmb3JtU3R5bGUiLCJ0cmFuc2Zvcm1DdXN0b21TdHlsZSIsInRyYW5zZm9ybVJ1bGVzIiwidHJhbnNmb3JtUnVsZSIsInRyYW5zZm9ybVRlbXBsYXRlIiwiX3NlcGFyYXRvciIsIlUiLCJUIiwiViIsIlciLCJ1YSIsIlgiLCJpbnZhbGlkQ2FsbGJhY2siLCJZIiwiX3N0eWxlQXN0IiwibWEiLCJaIiwidmEiLCJBcHBseVNoaW0iLCJhbGlnbiIsInN3aXBlT3BlbiIsIm5vRm9jdXNUcmFwIiwiZGlzYWJsZVN3aXBlIiwiX3RyYW5zbGF0ZU9mZnNldCIsIl90cmFja0RldGFpbHMiLCJfZHJhd2VyU3RhdGUiLCJfYm91bmRFc2NLZXlkb3duSGFuZGxlciIsIl9maXJzdFRhYlN0b3AiLCJfbGFzdFRhYlN0b3AiLCJfZXNjS2V5ZG93bkhhbmRsZXIiLCJfdGFiS2V5ZG93bkhhbmRsZXIiLCJzZXRTY3JvbGxEaXJlY3Rpb24iLCJvcGVuIiwiY2xvc2UiLCJnZXRXaWR0aCIsIl9zYXZlZFdpZHRoIiwiX2lzUlRMIiwiX3Jlc2V0UG9zaXRpb24iLCJfc2V0UG9zaXRpb24iLCJfdHJhY2siLCJfdHJhY2tTdGFydCIsIl90cmFja01vdmUiLCJfdHJhY2tFbmQiLCJfRFJBV0VSX1NUQVRFIiwiVFJBQ0tJTkciLCJfc3R5bGVUcmFuc2l0aW9uRHVyYXRpb24iLCJ2aXNpYmlsaXR5IiwiX3RyYW5zbGF0ZURyYXdlciIsInRpbWVTdGFtcCIsImRyYXdlcldpZHRoIiwiaXNJbkVuZFN0YXRlIiwidHJhY2tEZXRhaWxzIiwiX2ZsaW5nRHJhd2VyIiwiRkxJTkdJTkciLCJoYWxmV2lkdGgiLCJfcmVzZXREcmF3ZXJTdGF0ZSIsIl9yZXNldERyYXdlclRyYW5zbGF0ZSIsIl9jYWxjdWxhdGVWZWxvY2l0eSIsInRyYWNrRGV0YWlsIiwidGltZUxvd2VyQm91bmQiLCJtaWQiLCJ2ZWxvY2l0eSIsIl9NSU5fRkxJTkdfVEhSRVNIT0xEIiwiaXNQb3NpdGlvbkxlZnQiLCJpc1ZlbG9jaXR5UG9zaXRpdmUiLCJfTUlOX1RSQU5TSVRJT05fVkVMT0NJVFkiLCJfRkxJTkdfSU5JVElBTF9TTE9QRSIsIl9zdHlsZVRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsIl9GTElOR19USU1JTkdfRlVOQ1RJT04iLCJzY3JpbSIsInRpbWluZ0Z1bmN0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwib2xkU3RhdGUiLCJPUEVORURfUEVSU0lTVEVOVCIsIk9QRU5FRCIsIkNMT1NFRCIsIl9zZXRLZXlib2FyZEZvY3VzVHJhcCIsIm92ZXJmbG93IiwiSU5JVCIsImZvY3VzYWJsZUVsZW1lbnRzU2VsZWN0b3IiLCJmb2N1c2FibGVFbGVtZW50cyIsImZvY3VzIiwiX29wZW5lZFBlcnNpc3RlbnRDaGFuZ2VkIiwic3VwZXJQcm9wZXJ0aWVzQ2xhc3MiLCJzdXBlckN0b3IiLCJvd25Qcm9wZXJ0aWVzIiwibm9ybWFsaXplUHJvcGVydGllcyIsIl9fb3duUHJvcGVydGllcyIsIl9fZmluYWxpemVkIiwiX2ZpbmFsaXplQ2xhc3MiLCJjcmVhdGVQcm9wZXJ0aWVzIiwiX19wcm9wZXJ0aWVzIiwidGVtcGxhdGVFeHRlbnNpb25zIiwid3JhcFRlbXBsYXRlRXh0ZW5zaW9uIiwiZmluZFRlbXBsYXRlTm9kZSIsInBhcmVudEluZm8iLCJwYXJlbnRJbmRleCIsImFwcGx5SWRUb01hcCIsImFwcGx5RXZlbnRMaXN0ZW5lciIsImFwcGx5VGVtcGxhdGVDb250ZW50IiwiX3RlbXBsYXRlSW5mbyIsImRlY29yYXRlIiwiX19ub0luc2VydGlvblBvaW50IiwiaGFzSW5zZXJ0aW9uUG9pbnQiLCJjcmVhdGVOb2RlRXZlbnRIYW5kbGVyIiwib3V0ZXJUZW1wbGF0ZUluZm8iLCJzdHJpcFdoaXRlU3BhY2UiLCJfcGFyc2VUZW1wbGF0ZUNvbnRlbnQiLCJfcGFyc2VUZW1wbGF0ZU5vZGUiLCJfcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlIiwiX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzIiwiaGFzQXR0cmlidXRlcyIsIl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZXMiLCJjaGlsZEluZm8iLCJpbmZvSW5kZXgiLCJhdHRycyIsIl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZSIsImRvdEluZGV4IiwibmV3QmFzZSIsImlzRGVlcCIsImxjTW9kdWxlcyIsIl9fYXNzZXRwYXRoIiwiaW1wb3J0Rm9yRWxlbWVudCIsImZpbmRNb2R1bGUiLCJPcHRpbm9taWNBcHAiLCJwYWdlIiwibGF6eVBhZ2VzIiwiZGVmYXVsdCIsImhlbHAiLCJfc2hvd1BhZ2U0MDQiLCJfc2hvd1N0YXJ0Il0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQU9BLElBTkEsSUFLQUMsRUFBQUMsRUFMQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBSUFLLEVBQUEsRUFBQUMsS0FDUUQsRUFBQUYsRUFBQUksT0FBb0JGLElBQzVCSCxFQUFBQyxFQUFBRSxHQUNBRyxFQUFBTixJQUNBSSxFQUFBRyxLQUFBRCxFQUFBTixHQUFBLElBRUFNLEVBQUFOLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVCxFQUFBSCxLQUNBYSxFQUFBYixHQUFBRyxFQUFBSCxJQUlBLElBREFjLEtBQUFmLEdBQ0FNLEVBQUFDLFFBQ0FELEVBQUFVLE9BQUFWLEdBT0EsSUFBQVcsS0FLQVQsR0FDQVUsRUFBQSxHQVdBLFNBQUFDLEVBQUFsQixHQUdBLEdBQUFnQixFQUFBaEIsR0FDQSxPQUFBZ0IsRUFBQWhCLEdBQUFtQixRQUdBLElBQUFDLEVBQUFKLEVBQUFoQixJQUNBSSxFQUFBSixFQUNBcUIsR0FBQSxFQUNBRixZQVVBLE9BTkFOLEVBQUFiLEdBQUFZLEtBQUFRLEVBQUFELFFBQUFDLElBQUFELFFBQUFELEdBR0FFLEVBQUFDLEdBQUEsRUFHQUQsRUFBQUQsUUFLQUQsRUFBQUksRUFBQSxTQUFBckIsR0FDQSxJQUFBc0IsS0FLQUMsRUFBQWpCLEVBQUFOLEdBQ0EsT0FBQXVCLEVBR0EsR0FBQUEsRUFDQUQsRUFBQWYsS0FBQWdCLEVBQUEsUUFDSyxDQUVMLElBQUFDLEVBQUEsSUFBQUMsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSixFQUFBakIsRUFBQU4sSUFBQTBCLEVBQUFDLEtBRUFMLEVBQUFmLEtB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LEVBQUFYLE9BQUFvRixVQUFBLGlCQUFBekUsTUFBQXk4RCxRQUFBejhELE9BRUwwOEQsS0FBWSxXQUNQNThELEVBQUFJLEVBQUEsR0FBQTI3QyxLQUFBLGVBQUE3N0MsRUFBQUYsRUFBQSwyQkFBQUUsUUFBQXFELFdBQUFyRCxFQUFBWCxPQUFBb0YsVUFBQSxpQkFBQXpFLE1BQUF5OEQsUUFBQXo4RCw0Q0FRZixPQUdGLDRFQU1zQnU4RCxRQUdFbDZELElBQWJrNkQsSUFNTG4wRCxLQUFNbTBELEtBQU9BLEdBQVUsUUFHbEJuMEQsS0FBRXk4QixFQUFPOFUsT0FBV0csWUFDdkIxeEMsS0FBRXk4QixFQUFPOFUsT0FDZmdkLDhDQUdlNEYsR0FDVkEsRUFBRUEsRUFDQ24wRCxLQUFVbzBELFVBQU1ELEdBQ2xCbjBELEtBQVVvMEQsVUFDaEJELEtBQ01uMEQsS0FDTnUwRCxvREFJSXYwRCxLQUFNbTBELEtBQ1osNENBR01uMEQsS0FBTW0wRCxLQUNaLHFTQUtldm9ELENBQUFzb0QsRUFBQWg5RCxVQUFBMlUsV0FBQTVVLE9BQUE2VSxlQUFBb29ELEVBQUFoOUQsV0FBQSxRQUFBOEksTUFBQTVJLEtBQUE0SSxNQUNUQSxLQUNOdzBELG1CQTVFaUIsR0FpRmJoNUQsT0FBZW8rQixlQUFPNmEsT0FBYXlmLEVBQUdyc0MsR0FBZXFzQyIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MjogMFxuIFx0fTtcblxuIFx0Ly8gc2NyaXB0IHBhdGggZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIGpzb25wU2NyaXB0U3JjKGNodW5rSWQpIHtcbiBcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyAoe1wiMFwiOlwib3B0aW5vbWljLWhlbHBcIixcIjFcIjpcInN0YXJ0XCJ9W2NodW5rSWRdfHxjaHVua0lkKSArIFwiLmJ1bmRsZS5qc1wiXG4gXHR9XG5cblxuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG4gXHRcdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiBcdFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSh7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSk7XG4gXHRcdFx0XHR9LCAxMjAwMDApO1xuIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZTtcbiBcdFx0XHRcdGZ1bmN0aW9uIG9uU2NyaXB0Q29tcGxldGUoZXZlbnQpIHtcbiBcdFx0XHRcdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuIFx0XHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuIFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG4gXHRcdFx0XHRcdHZhciBjaHVuayA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0XHRcdFx0aWYoY2h1bmsgIT09IDApIHtcbiBcdFx0XHRcdFx0XHRpZihjaHVuaykge1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcbiBcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknKTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbiBcdFx0XHRcdFx0XHRcdGNodW5rWzFdKGVycm9yKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuIFx0fTtcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJkaXN0L1wiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODQpO1xuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9sZWdhY3kvbGVnYWN5LWVsZW1lbnQtbWl4aW4uaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9sZWdhY3kvcG9seW1lci1mbi5odG1sXCI+XG48IS0tIHRlbXBsYXRlIGVsZW1lbnRzIC0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9sZWdhY3kvdGVtcGxhdGl6ZXItYmVoYXZpb3IuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9lbGVtZW50cy9kb20tYmluZC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwibGliL2VsZW1lbnRzL2RvbS1yZXBlYXQuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9lbGVtZW50cy9kb20taWYuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9lbGVtZW50cy9hcnJheS1zZWxlY3Rvci5odG1sXCI+XG48IS0tIGN1c3RvbS1zdHlsZSAtLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJsaWIvZWxlbWVudHMvY3VzdG9tLXN0eWxlLmh0bWxcIj5cbjwhLS0gYmMgYmVoYXZpb3JzIC0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi9sZWdhY3kvbXV0YWJsZS1kYXRhLWJlaGF2aW9yLmh0bWxcIj5cbjwhLS0gaW1wb3J0IGh0bWwtdGFnIHRvIGV4cG9ydCBodG1sIC0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImxpYi91dGlscy9odG1sLXRhZy5odG1sXCI+XG48c2NyaXB0PlxuICAvLyBiY1xuICBQb2x5bWVyLkJhc2UgPSBQb2x5bWVyLkxlZ2FjeUVsZW1lbnRNaXhpbihIVE1MRWxlbWVudCkucHJvdG90eXBlO1xuXG4gIC8vIE5PVEU6IHRoaXMgaXMgaGVyZSBmb3IgbW9kdWxpemVyIHRvIGV4cG9ydCBgaHRtbGAgZm9yIHRoZSBtb2R1bGUgdmVyc2lvbiBvZiB0aGlzIGZpbGVcbiAgUG9seW1lci5odG1sID0gUG9seW1lci5odG1sO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgY29uc3QgdXNlclBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcblxuICAvKipcbiAgICogQG5hbWVzcGFjZSBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IFBvbHltZXIgaXMgYSBsaWdodHdlaWdodCBsaWJyYXJ5IGJ1aWx0IG9uIHRvcCBvZiB0aGUgd2ViXG4gICAqICAgc3RhbmRhcmRzLWJhc2VkIFdlYiBDb21wb25lbnRzIEFQSSdzLCBhbmQgbWFrZXMgaXQgZWFzeSB0byBidWlsZCB5b3VyXG4gICAqICAgb3duIGN1c3RvbSBIVE1MIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0geyFQb2x5bWVySW5pdH0gaW5mbyBQcm90b3R5cGUgZm9yIHRoZSBjdXN0b20gZWxlbWVudC4gSXQgbXVzdCBjb250YWluXG4gICAqICAgYW4gYGlzYCBwcm9wZXJ0eSB0byBzcGVjaWZ5IHRoZSBlbGVtZW50IG5hbWUuIE90aGVyIHByb3BlcnRpZXMgcG9wdWxhdGVcbiAgICogICB0aGUgZWxlbWVudCBwcm90b3R5cGUuIFRoZSBgcHJvcGVydGllc2AsIGBvYnNlcnZlcnNgLCBgaG9zdEF0dHJpYnV0ZXNgLFxuICAgKiAgIGFuZCBgbGlzdGVuZXJzYCBwcm9wZXJ0aWVzIGFyZSBwcm9jZXNzZWQgdG8gY3JlYXRlIGVsZW1lbnQgZmVhdHVyZXMuXG4gICAqIEByZXR1cm4geyFPYmplY3R9IFJldHVybnMgYSBjdXN0b20gZWxlbWVudCBjbGFzcyBmb3IgdGhlIGdpdmVuIHByb3ZpZGVkXG4gICAqICAgcHJvdG90eXBlIGBpbmZvYCBvYmplY3QuIFRoZSBuYW1lIG9mIHRoZSBlbGVtZW50IGlmIGdpdmVuIGJ5IGBpbmZvLmlzYC5cbiAgICovXG4gIHdpbmRvdy5Qb2x5bWVyID0gZnVuY3Rpb24oaW5mbykge1xuICAgIHJldHVybiB3aW5kb3cuUG9seW1lci5fcG9seW1lckZuKGluZm8pO1xuICB9O1xuXG4gIC8vIHN1cHBvcnQgdXNlciBzZXR0aW5ncyBvbiB0aGUgUG9seW1lciBvYmplY3RcbiAgaWYgKHVzZXJQb2x5bWVyKSB7XG4gICAgT2JqZWN0LmFzc2lnbihQb2x5bWVyLCB1c2VyUG9seW1lcik7XG4gIH1cblxuICAvLyBUbyBiZSBwbHVnZ2VkIGJ5IGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBpZiBsb2FkZWRcbiAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIFByb3RvdHlwZSBmb3IgdGhlIGN1c3RvbSBlbGVtZW50LiBJdCBtdXN0IGNvbnRhaW5cbiAgICogICBhbiBgaXNgIHByb3BlcnR5IHRvIHNwZWNpZnkgdGhlIGVsZW1lbnQgbmFtZS4gT3RoZXIgcHJvcGVydGllcyBwb3B1bGF0ZVxuICAgKiAgIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhlIGBwcm9wZXJ0aWVzYCwgYG9ic2VydmVyc2AsIGBob3N0QXR0cmlidXRlc2AsXG4gICAqICAgYW5kIGBsaXN0ZW5lcnNgIHByb3BlcnRpZXMgYXJlIHByb2Nlc3NlZCB0byBjcmVhdGUgZWxlbWVudCBmZWF0dXJlcy5cbiAgICogQHJldHVybiB7IU9iamVjdH0gUmV0dXJucyBhIGN1c3RvbSBlbGVtZW50IGNsYXNzIGZvciB0aGUgZ2l2ZW4gcHJvdmlkZWRcbiAgICogICBwcm90b3R5cGUgYGluZm9gIG9iamVjdC4gVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgaWYgZ2l2ZW4gYnkgYGluZm8uaXNgLlxuICAgKi9cbiAgd2luZG93LlBvbHltZXIuX3BvbHltZXJGbiA9IGZ1bmN0aW9uKGluZm8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZCBwb2x5bWVyLmh0bWwgdG8gdXNlIHRoZSBQb2x5bWVyKCkgZnVuY3Rpb24uJyk7XG4gIH07XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICB3aW5kb3cuUG9seW1lci52ZXJzaW9uID0gJzIuNi4wJztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAvKlxuICBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXMgcmVwbGFjZWQgYnkgdGhlIG11bmdlZCBuYW1lIGZvciBvYmplY3RbcHJvcGVydHldXG4gIFdlIGNhbm5vdCBhbGlhcyB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvIHVzZSBhIHNtYWxsIHNoaW0gdGhhdCBoYXMgdGhlIHNhbWUgYmVoYXZpb3Igd2hlbiBub3QgY29tcGlsaW5nLlxuICAqL1xuICB3aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3AsIG9iaikge1xuICAgIHJldHVybiBwcm9wO1xuICB9O1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5jbGFzcyBSZWdpc3Rlckh0bWxUZW1wbGF0ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgPHRlbXBsYXRlPmAgZWxlbWVudCB0byBob2xkIGA8ZG9tLW1vZHVsZT5gIGNvbnRlbnQuXG4gICAqIFRoaXMgYml0IG9mIGNvZGUgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIHRoZSBtYWluIGRvY3VtZW50LFxuICAgKiBjYWxsaW5nIGBpbXBvcnROb2RlYCBvbiB0aGUgYDx0ZW1wbGF0ZT5gLCB3aGljaCBpbiB0dXJuIHRyaWdnZXJzXG4gICAqIHRoZSBsaWZlY3ljbGUgb2YgdGhlIGA8ZG9tLW1vZHVsZT5gIGFuZCBhbGxvd3MgaXQgdG8gaW5zZXJ0IGl0c1xuICAgKiBjb250ZW50IGludG8gUG9seW1lcidzIGdsb2JhbCBtb2R1bGUgbWFwLiBXaGVuIGEgUG9seW1lciBlbGVtZW50XG4gICAqIGJvb3RzIHVwIGl0IHdpbGwgZmV0Y2ggaXRzIHRlbXBsYXRlIGZyb20gdGhpcyBtb2R1bGUgbWFwLlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyL2Jsb2IvbWFzdGVyL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5odG1sI0w1MDEtTDUzOFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsIEEgYDxkb20tbW9kdWxlPmAgYXMgYW4gSFRNTCBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyByZWdpc3Rlcih2YWwpIHtcbiAgICBsZXQgY29udGVudDtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsO1xuICAgIGlmICh0ZW1wbGF0ZS5jb250ZW50KSB7XG4gICAgICBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgd2hpbGUgKHRlbXBsYXRlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnQuaW1wb3J0Tm9kZShjb250ZW50LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogQ29udGVudCB0aGF0IHdpbGwgYmUgaW5qZWN0ZWQgaW50byB0aGUgbWFpbiBkb2N1bWVudC4gVGhpcyBpcyBwcmltYXJpbHlcbiAgICogZm9yIHRoaW5ncyBsaWtlIGA8aXJvbi1pY29uc2V0PmAgYW5kIGA8Y3VzdG9tLXN0eWxlPmAgd2hpY2ggZG8gbm90IGhhdmVcbiAgICogdGVtcGxhdGVzIGJ1dCByZWx5IG9uIEhUTUwgSW1wb3J0cyBhYmlsaXR5IHRvIGFwcGx5IGNvbnRlbnQgdG8gdGhlIG1haW5cbiAgICogZG9jdW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgQW4gSFRNTCBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyB0b0JvZHkodmFsKSB7XG4gICAgY29uc3QgdHJpbW1lZFZhbCA9IHZhbC50cmltKCk7XG4gICAgaWYgKHRyaW1tZWRWYWwpIHtcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9IHRyaW1tZWRWYWw7XG4gICAgICBpZiAoZGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShkaXYuZmlyc3RDaGlsZCwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoZGl2LmZpcnN0Q2hpbGQsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWdpc3Rlckh0bWxUZW1wbGF0ZTtcbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvb3QuaHRtbFwiPlxuXG48c2NyaXB0PlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIHVuaXF1ZSBnbG9iYWwgaWQgZm9yIGRlZHVwaW5nIG1peGlucy5cbiAgbGV0IGRlZHVwZUlkID0gMDtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtGdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIE1peGluRnVuY3Rpb24oKXt9XG4gIC8qKiBAdHlwZSB7KFdlYWtNYXAgfCB1bmRlZmluZWQpfSAqL1xuICBNaXhpbkZ1bmN0aW9uLnByb3RvdHlwZS5fX21peGluQXBwbGljYXRpb25zO1xuICAvKiogQHR5cGUgeyhPYmplY3QgfCB1bmRlZmluZWQpfSAqL1xuICBNaXhpbkZ1bmN0aW9uLnByb3RvdHlwZS5fX21peGluU2V0O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4gIC8qKlxuICAgKiBXcmFwcyBhbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiBzdWNoIHRoYXQgdGhlIG1peGluIGlzIG9ubHkgYXBwbGllZFxuICAgKiBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlbiBhcHBsaWVkIGl0cyBiYXNlIGFyZ3VtZW50LiBBbHNvIG1lbW9pemVzIG1peGluXG4gICAqIGFwcGxpY2F0aW9ucy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHBhcmFtIHtUfSBtaXhpbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiB0byB3cmFwXG4gICAqIEByZXR1cm4ge1R9XG4gICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgKi9cbiAgUG9seW1lci5kZWR1cGluZ01peGluID0gZnVuY3Rpb24obWl4aW4pIHtcbiAgICBsZXQgbWl4aW5BcHBsaWNhdGlvbnMgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucztcbiAgICBpZiAoIW1peGluQXBwbGljYXRpb25zKSB7XG4gICAgICBtaXhpbkFwcGxpY2F0aW9ucyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucyA9IG1peGluQXBwbGljYXRpb25zO1xuICAgIH1cbiAgICAvLyBtYWludGFpbiBhIHVuaXF1ZSBpZCBmb3IgZWFjaCBtaXhpblxuICAgIGxldCBtaXhpbkRlZHVwZUlkID0gZGVkdXBlSWQrKztcbiAgICBmdW5jdGlvbiBkZWR1cGluZ01peGluKGJhc2UpIHtcbiAgICAgIGxldCBiYXNlU2V0ID0gLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi8oYmFzZSkuX19taXhpblNldDtcbiAgICAgIGlmIChiYXNlU2V0ICYmIGJhc2VTZXRbbWl4aW5EZWR1cGVJZF0pIHtcbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgICB9XG4gICAgICBsZXQgbWFwID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgICBsZXQgZXh0ZW5kZWQgPSBtYXAuZ2V0KGJhc2UpO1xuICAgICAgaWYgKCFleHRlbmRlZCkge1xuICAgICAgICBleHRlbmRlZCA9IC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyhtaXhpbikoYmFzZSk7XG4gICAgICAgIG1hcC5zZXQoYmFzZSwgZXh0ZW5kZWQpO1xuICAgICAgfVxuICAgICAgLy8gY29weSBpbmhlcml0ZWQgbWl4aW4gc2V0IGZyb20gdGhlIGV4dGVuZGVkIGNsYXNzLCBvciB0aGUgYmFzZSBjbGFzc1xuICAgICAgLy8gTk9URTogd2UgYXZvaWQgdXNlIG9mIFNldCBoZXJlIGJlY2F1c2Ugc29tZSBicm93c2VyIChJRTExKVxuICAgICAgLy8gY2Fubm90IGV4dGVuZCBhIGJhc2UgU2V0IHZpYSB0aGUgY29uc3RydWN0b3IuXG4gICAgICBsZXQgbWl4aW5TZXQgPSBPYmplY3QuY3JlYXRlKC8qKiBAdHlwZSB7IU1peGluRnVuY3Rpb259ICovKGV4dGVuZGVkKS5fX21peGluU2V0IHx8IGJhc2VTZXQgfHwgbnVsbCk7XG4gICAgICBtaXhpblNldFttaXhpbkRlZHVwZUlkXSA9IHRydWU7XG4gICAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhleHRlbmRlZCkuX19taXhpblNldCA9IG1peGluU2V0O1xuICAgICAgcmV0dXJuIGV4dGVuZGVkO1xuICAgIH1cblxuICAgIHJldHVybiAvKiogQHR5cGUge1R9ICovIChkZWR1cGluZ01peGluKTtcbiAgfTtcbiAgLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xuXG59KSgpO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vaXJvbi1zY3JvbGwtdGFyZ2V0LWJlaGF2aW9yL2lyb24tc2Nyb2xsLXRhcmdldC1iZWhhdmlvci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaGVscGVycy9oZWxwZXJzLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgLyoqXG4gICAqIGBQb2x5bWVyLkFwcFNjcm9sbEVmZmVjdHNCZWhhdmlvcmAgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRoYXQgYWxsb3dzIGFuIGVsZW1lbnQgdG8gdXNlIHNjcm9sbHMgZWZmZWN0cy5cbiAgICpcbiAgICogIyMjIEltcG9ydGluZyB0aGUgYXBwLWxheW91dCBlZmZlY3RzXG4gICAqXG4gICAqIGFwcC1sYXlvdXQgcHJvdmlkZXMgYSBzZXQgb2Ygc2Nyb2xsIGVmZmVjdHMgdGhhdCBjYW4gYmUgdXNlZCBieSBleHBsaWNpdGx5IGltcG9ydGluZ1xuICAgKiBgYXBwLXNjcm9sbC1lZmZlY3RzLmh0bWxgOlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIvYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1zY3JvbGwtZWZmZWN0cy9hcHAtc2Nyb2xsLWVmZmVjdHMuaHRtbFwiPlxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlIHNjcm9sbCBlZmZlY3RzIGNhbiBhbHNvIGJlIHVzZWQgYnkgaW5kaXZpZHVhbGx5IGltcG9ydGluZ1xuICAgKiBgYXBwLWxheW91dC9hcHAtc2Nyb2xsLWVmZmVjdHMvZWZmZWN0cy9bZWZmZWN0TmFtZV0uaHRtbGAuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqICA8bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtc2Nyb2xsLWVmZmVjdHMvZWZmZWN0cy93YXRlcmZhbGwuaHRtbFwiPlxuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIENvbnN1bWluZyBlZmZlY3RzXG4gICAqXG4gICAqIEVmZmVjdHMgY2FuIGJlIGNvbnN1bWVkIHZpYSB0aGUgYGVmZmVjdHNgIHByb3BlcnR5LiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8YXBwLWhlYWRlciBlZmZlY3RzPVwid2F0ZXJmYWxsXCI+PC9hcHAtaGVhZGVyPlxuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIENyZWF0aW5nIHNjcm9sbCBlZmZlY3RzXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBjcmVhdGUgYSBjdXN0b20gc2Nyb2xsIGVmZmVjdCBpZiB5b3UgbmVlZCB0byBtb2RpZnkgdGhlIENTUyBvZiBhbiBlbGVtZW50XG4gICAqIGJhc2VkIG9uIHRoZSBzY3JvbGwgcG9zaXRpb24uXG4gICAqXG4gICAqIEEgc2Nyb2xsIGVmZmVjdCBkZWZpbml0aW9uIGlzIGFuIG9iamVjdCB3aXRoIGBzZXRVcCgpYCwgYHRlYXJEb3duKClgIGFuZCBgcnVuKClgIGZ1bmN0aW9ucy5cbiAgICpcbiAgICogVG8gcmVnaXN0ZXIgdGhlIGVmZmVjdCwgeW91IGNhbiB1c2UgYFBvbHltZXIuQXBwTGF5b3V0LnJlZ2lzdGVyRWZmZWN0KGVmZmVjdE5hbWUsIGVmZmVjdERlZilgXG4gICAqIEZvciBleGFtcGxlLCBsZXQncyBkZWZpbmUgYW4gZWZmZWN0IHRoYXQgcmVzaXplcyB0aGUgaGVhZGVyJ3MgbG9nbzpcbiAgICpcbiAgICogYGBganNcbiAgICogUG9seW1lci5BcHBMYXlvdXQucmVnaXN0ZXJFZmZlY3QoJ3Jlc2l6YWJsZS1sb2dvJywge1xuICAgKiAgIHNldFVwOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICogICAgIC8vIHRoZSBlZmZlY3QncyBjb25maWcgaXMgcGFzc2VkIHRvIHRoZSBzZXRVcC5cbiAgICogICAgIHRoaXMuX2Z4UmVzaXplTG9nbyA9IHsgbG9nbzogUG9seW1lci5kb20odGhpcykucXVlcnlTZWxlY3RvcignW2xvZ29dJykgfTtcbiAgICogICB9LFxuICAgKlxuICAgKiAgIHJ1bjogZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcbiAgICogICAgICAvLyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGVmZmVjdFxuICAgKiAgICAgIHRoaXMudHJhbnNmb3JtKCdzY2FsZTNkKCcgKyBwcm9ncmVzcyArICcsICcrIHByb2dyZXNzICsnLCAxKScsICB0aGlzLl9meFJlc2l6ZUxvZ28ubG9nbyk7XG4gICAqICAgfSxcbiAgICpcbiAgICogICB0ZWFyRG93bjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgLy8gY2xlYW4gdXAgYW5kIHJlc2V0IG9mIHN0YXRlc1xuICAgKiAgICAgIGRlbGV0ZSB0aGlzLl9meFJlc2l6ZUxvZ287XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIE5vdywgeW91IGNhbiBjb25zdW1lIHRoZSBlZmZlY3Q6XG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPGFwcC1oZWFkZXIgaWQ9XCJhcHBIZWFkZXJcIiBlZmZlY3RzPVwicmVzaXphYmxlLWxvZ29cIj5cbiAgICogICA8aW1nIGxvZ28gc3JjPVwibG9nby5zdmdcIj5cbiAgICogPC9hcHAtaGVhZGVyPlxuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIEltcGVyYXRpdmUgQVBJXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIHZhciBsb2dvRWZmZWN0ID0gYXBwSGVhZGVyLmNyZWF0ZUVmZmVjdCgncmVzaXphYmxlLWxvZ28nLCBlZmZlY3RDb25maWcpO1xuICAgKiAvLyBydW4gdGhlIGVmZmVjdDogbG9nb0VmZmVjdC5ydW4ocHJvZ3Jlc3MpO1xuICAgKiAvLyB0ZWFyIGRvd24gdGhlIGVmZmVjdDogbG9nb0VmZmVjdC50ZWFyRG93bigpO1xuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIENvbmZpZ3VyaW5nIGVmZmVjdHNcbiAgICpcbiAgICogRm9yIGVmZmVjdHMgaW5zdGFsbGVkIHZpYSB0aGUgYGVmZmVjdHNgIHByb3BlcnR5LCB0aGVpciBjb25maWd1cmF0aW9uIGNhbiBiZSBzZXRcbiAgICogdmlhIHRoZSBgZWZmZWN0c0NvbmZpZ2AgcHJvcGVydHkuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxhcHAtaGVhZGVyIGVmZmVjdHM9XCJ3YXRlcmZhbGxcIlxuICAgKiAgIGVmZmVjdHMtY29uZmlnPSd7XCJ3YXRlcmZhbGxcIjoge1wic3RhcnRzQXRcIjogMCwgXCJlbmRzQXRcIjogMC41fX0nPlxuICAgKiA8L2FwcC1oZWFkZXI+XG4gICAqIGBgYFxuICAgKlxuICAgKiBBbGwgZWZmZWN0cyBoYXZlIGEgYHN0YXJ0c0F0YCBhbmQgYGVuZHNBdGAgY29uZmlnIHByb3BlcnR5LiBUaGV5IHNwZWNpZnkgYXQgd2hhdFxuICAgKiBwb2ludCB0aGUgZWZmZWN0IHNob3VsZCBzdGFydCBhbmQgZW5kLiBUaGlzIHZhbHVlIGdvZXMgZnJvbSAwIHRvIDEgaW5jbHVzaXZlLlxuICAgKlxuICAgKiBAcG9seW1lckJlaGF2aW9yXG4gICAqL1xuICBQb2x5bWVyLkFwcFNjcm9sbEVmZmVjdHNCZWhhdmlvciA9IFtcbiAgICBQb2x5bWVyLklyb25TY3JvbGxUYXJnZXRCZWhhdmlvcixcbiAgIHtcblxuICAgIHByb3BlcnRpZXM6IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBBIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mIHRoZSBlZmZlY3RzIG5hbWVzIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBzY3JvbGxzLlxuICAgICAgICogZS5nLiBgd2F0ZXJmYWxsIHBhcmFsbGF4LWJhY2tncm91bmRgIGluc3RhbGxzIHRoZSBgd2F0ZXJmYWxsYCBhbmQgYHBhcmFsbGF4LWJhY2tncm91bmRgLlxuICAgICAgICovXG4gICAgICBlZmZlY3RzOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBvYmplY3QgdGhhdCBjb25maWd1cmF0ZXMgdGhlIGVmZmVjdHMgaW5zdGFsbGVkIHZpYSB0aGUgYGVmZmVjdHNgIHByb3BlcnR5LiBlLmcuXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGVsZW1lbnQuZWZmZWN0c0NvbmZpZyA9IHtcbiAgICAgICAqICAgXCJibGVuZC1iYWNrZ3JvdW5kXCI6IHtcbiAgICAgICAqICAgICBcInN0YXJ0c0F0XCI6IDAuNVxuICAgICAgICogICB9XG4gICAgICAgKiB9O1xuICAgICAgICogYGBgXG4gICAgICAgKiBFdmVyeSBlZmZlY3QgaGFzIGF0IGxlYXN0IHR3byBjb25maWcgcHJvcGVydGllczogYHN0YXJ0c0F0YCBhbmQgYGVuZHNBdGAuXG4gICAgICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGluZGljYXRlIHdoZW4gdGhlIGV2ZW50IHNob3VsZCBzdGFydCBhbmQgZW5kIHJlc3BlY3RpdmVseVxuICAgICAgICogYW5kIHJlbGF0aXZlIHRvIHRoZSBvdmVyYWxsIGVsZW1lbnQgcHJvZ3Jlc3MuIFNvIGZvciBleGFtcGxlLCBpZiBgYmxlbmQtYmFja2dyb3VuZGBcbiAgICAgICAqIHN0YXJ0cyBhdCBgMC41YCwgdGhlIGVmZmVjdCB3aWxsIG9ubHkgc3RhcnQgb25jZSB0aGUgY3VycmVudCBlbGVtZW50IHJlYWNoZXMgMC41XG4gICAgICAgKiBvZiBpdHMgcHJvZ3Jlc3MuIEluIHRoaXMgY29udGV4dCwgdGhlIHByb2dyZXNzIGlzIGEgdmFsdWUgaW4gdGhlIHJhbmdlIG9mIGBbMCwgMV1gXG4gICAgICAgKiB0aGF0IGluZGljYXRlcyB3aGVyZSB0aGlzIGVsZW1lbnQgaXMgb24gdGhlIHNjcmVlbiByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXG4gICAgICAgKi9cbiAgICAgIGVmZmVjdHNDb25maWc6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGVzIENTUyB0cmFuc2l0aW9ucyBhbmQgc2Nyb2xsIGVmZmVjdHMgb24gdGhlIGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEFsbG93cyB0byBzZXQgYSBgc2Nyb2xsVG9wYCB0aHJlc2hvbGQuIFdoZW4gZ3JlYXRlciB0aGFuIDAsIGB0aHJlc2hvbGRUcmlnZ2VyZWRgXG4gICAgICAgKiBpcyB0cnVlIG9ubHkgd2hlbiB0aGUgc2Nyb2xsIHRhcmdldCdzIGBzY3JvbGxUb3BgIGhhcyByZWFjaGVkIHRoaXMgdmFsdWUuXG4gICAgICAgKlxuICAgICAgICogRm9yIGV4YW1wbGUsIGlmIGB0aHJlc2hvbGQgPSAxMDBgLCBgdGhyZXNob2xkVHJpZ2dlcmVkYCBpcyB0cnVlIHdoZW4gdGhlIGBzY3JvbGxUb3BgXG4gICAgICAgKiBpcyBhdCBsZWFzdCBgMTAwYC5cbiAgICAgICAqL1xuICAgICAgdGhyZXNob2xkOiB7XG4gICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgdmFsdWU6IDBcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSBpZiB0aGUgYHNjcm9sbFRvcGAgdGhyZXNob2xkIChzZXQgaW4gYHNjcm9sbFRvcFRocmVzaG9sZGApIGhhc1xuICAgICAgICogYmVlbiByZWFjaGVkLlxuICAgICAgICovXG4gICAgICB0aHJlc2hvbGRUcmlnZ2VyZWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlXG4gICAgICB9XG4gICAgfSxcblxuICAgIG9ic2VydmVyczogW1xuICAgICAgJ19lZmZlY3RzQ2hhbmdlZChlZmZlY3RzLCBlZmZlY3RzQ29uZmlnLCBpc0F0dGFjaGVkKSdcbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc2Nyb2xsIHN0YXRlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlblxuICAgICAqIGJ5IHRoZSBjb25zdW1lciBvZiB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBfdXBkYXRlU2Nyb2xsU3RhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsVG9wXG4gICAgICovXG4gICAgX3VwZGF0ZVNjcm9sbFN0YXRlOiBmdW5jdGlvbihzY3JvbGxUb3ApIHt9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgb24gdGhlIHNjcmVlbi5cbiAgICAgKiBUaGF0IGlzLCB2aXNpYmxlIGluIHRoZSBjdXJyZW50IHZpZXdwb3J0LiBUaGlzIG1ldGhvZCBzaG91bGQgYmVcbiAgICAgKiBvdmVycmlkZGVuIGJ5IHRoZSBjb25zdW1lciBvZiB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBpc09uU2NyZWVuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc09uU2NyZWVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlJ3MgY29udGVudCBiZWxvdyB0aGUgY3VycmVudCBlbGVtZW50LiBUaGlzIG1ldGhvZFxuICAgICAqIHNob3VsZCBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjb25zdW1lciBvZiB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBpc0NvbnRlbnRCZWxvd1xuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNDb250ZW50QmVsb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGVmZmVjdHMgaGFuZGxlcnMgdGhhdCB3aWxsIHRha2UgcGxhY2UgZHVyaW5nIHNjcm9sbC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTxGdW5jdGlvbj59XG4gICAgICovXG4gICAgX2VmZmVjdHNSdW5GbjogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgdGhlIGVmZmVjdHMgZGVmaW5pdGlvbnMgaW5zdGFsbGVkIHZpYSB0aGUgYGVmZmVjdHNgIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PE9iamVjdD59XG4gICAgICovXG4gICAgX2VmZmVjdHM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2xhbXBlZCB2YWx1ZSBvZiBgX3Njcm9sbFRvcGAuXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG4gICAgZ2V0IF9jbGFtcGVkU2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMuX3Njcm9sbFRvcCk7XG4gICAgfSxcblxuICAgIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3RlYXJEb3duRWZmZWN0cygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVmZmVjdCBvYmplY3QgZnJvbSBhbiBlZmZlY3QncyBuYW1lIHRoYXQgY2FuIGJlIHVzZWQgdG8gcnVuXG4gICAgICogZWZmZWN0cyBwcm9ncmFtbWF0aWNhbGx5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVFZmZlY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZWZmZWN0TmFtZSBUaGUgZWZmZWN0J3MgbmFtZSByZWdpc3RlcmVkIHZpYSBgUG9seW1lci5BcHBMYXlvdXQucmVnaXN0ZXJFZmZlY3RgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0Q29uZmlnIFRoZSBlZmZlY3QgY29uZmlnIG9iamVjdC4gKE9wdGlvbmFsKVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gZWZmZWN0IG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuICAgICAqXG4gICAgICogICogYGVmZmVjdC5zZXRVcCgpYCwgU2V0cyB1cCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGUgZWZmZWN0LlxuICAgICAqICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYmVmb3JlIHRoZSBgZWZmZWN0YCBmdW5jdGlvbiByZXR1cm5zLlxuICAgICAqICAqIGBlZmZlY3QucnVuKHByb2dyZXNzLCB5KWAsIFJ1bnMgdGhlIGVmZmVjdCBnaXZlbiBhIGBwcm9ncmVzc2AuXG4gICAgICogICogYGVmZmVjdC50ZWFyRG93bigpYCwgQ2xlYW5zIHVwIGFueSBET00gbm9kZXMgb3IgZWxlbWVudCByZWZlcmVuY2VzIHVzZWQgYnkgdGhlIGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcGFyYWxsYXggPSBlbGVtZW50LmNyZWF0ZUVmZmVjdCgncGFyYWxsYXgtYmFja2dyb3VuZCcpO1xuICAgICAqIC8vIHJ1bnMgdGhlIGVmZmVjdFxuICAgICAqIHBhcmFsbGF4LnJ1bigwLjUsIDApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNyZWF0ZUVmZmVjdDogZnVuY3Rpb24oZWZmZWN0TmFtZSwgZWZmZWN0Q29uZmlnKSB7XG4gICAgICB2YXIgZWZmZWN0RGVmID0gUG9seW1lci5BcHBMYXlvdXQuX3Njcm9sbEVmZmVjdHNbZWZmZWN0TmFtZV07XG4gICAgICBpZiAoIWVmZmVjdERlZikge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IodGhpcy5fZ2V0VW5kZWZpbmVkTXNnKGVmZmVjdE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wID0gdGhpcy5fYm91bmRFZmZlY3QoZWZmZWN0RGVmLCBlZmZlY3RDb25maWcgfHwge30pO1xuICAgICAgcHJvcC5zZXRVcCgpO1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGBlZmZlY3RzYCBvciBgZWZmZWN0c0NvbmZpZ2AgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBfZWZmZWN0c0NoYW5nZWQ6IGZ1bmN0aW9uKGVmZmVjdHMsIGVmZmVjdHNDb25maWcsIGlzQXR0YWNoZWQpIHtcbiAgICAgIHRoaXMuX3RlYXJEb3duRWZmZWN0cygpO1xuXG4gICAgICBpZiAoIWVmZmVjdHMgfHwgIWlzQXR0YWNoZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWZmZWN0cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oZWZmZWN0TmFtZSkge1xuICAgICAgICB2YXIgZWZmZWN0RGVmO1xuICAgICAgICBpZiAoZWZmZWN0TmFtZSAhPT0gJycpIHtcbiAgICAgICAgICBpZiAoKGVmZmVjdERlZiA9IFBvbHltZXIuQXBwTGF5b3V0Ll9zY3JvbGxFZmZlY3RzW2VmZmVjdE5hbWVdKSkge1xuICAgICAgICAgICAgdGhpcy5fZWZmZWN0cy5wdXNoKHRoaXMuX2JvdW5kRWZmZWN0KGVmZmVjdERlZiwgZWZmZWN0c0NvbmZpZ1tlZmZlY3ROYW1lXSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5fZ2V0VW5kZWZpbmVkTXNnKGVmZmVjdE5hbWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuXG4gICAgICB0aGlzLl9zZXRVcEVmZmVjdCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgbGF5b3V0XG4gICAgICovXG4gICAgX2xheW91dElmRGlydHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0V2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZWZmZWN0IG9iamVjdCBib3VuZCB0byB0aGUgY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVmZmVjdERlZlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0c0NvbmZpZyBUaGUgZWZmZWN0IGNvbmZpZyBvYmplY3QgaWYgdGhlIGVmZmVjdCBhY2NlcHRzIGNvbmZpZyB2YWx1ZXMuIChPcHRpb25hbClcbiAgICAgKi9cbiAgICBfYm91bmRFZmZlY3Q6IGZ1bmN0aW9uKGVmZmVjdERlZiwgZWZmZWN0c0NvbmZpZykge1xuICAgICAgZWZmZWN0c0NvbmZpZyA9IGVmZmVjdHNDb25maWcgfHwge307XG4gICAgICB2YXIgc3RhcnRzQXQgPSBwYXJzZUZsb2F0KGVmZmVjdHNDb25maWcuc3RhcnRzQXQgfHwgMCk7XG4gICAgICB2YXIgZW5kc0F0ID0gcGFyc2VGbG9hdChlZmZlY3RzQ29uZmlnLmVuZHNBdCB8fCAxKTtcbiAgICAgIHZhciBkZWx0YVMgPSBlbmRzQXQgLSBzdGFydHNBdDtcbiAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgIC8vIGZhc3QgcGF0aCBpZiBwb3NzaWJsZVxuICAgICAgdmFyIHJ1bkZuID0gKHN0YXJ0c0F0ID09PSAwICYmIGVuZHNBdCA9PT0gMSkgPyBlZmZlY3REZWYucnVuIDpcbiAgICAgICAgZnVuY3Rpb24ocHJvZ3Jlc3MsIHkpIHtcbiAgICAgICAgICBlZmZlY3REZWYucnVuLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgKHByb2dyZXNzIC0gc3RhcnRzQXQpIC8gZGVsdGFTKSwgeSk7XG4gICAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZXRVcDogZWZmZWN0RGVmLnNldFVwID8gZWZmZWN0RGVmLnNldFVwLmJpbmQodGhpcywgZWZmZWN0c0NvbmZpZykgOiBub29wLFxuICAgICAgICBydW46IGVmZmVjdERlZi5ydW4gPyBydW5Gbi5iaW5kKHRoaXMpIDogbm9vcCxcbiAgICAgICAgdGVhckRvd246IGVmZmVjdERlZi50ZWFyRG93biA/IGVmZmVjdERlZi50ZWFyRG93bi5iaW5kKHRoaXMpIDogbm9vcFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgZWZmZWN0cy5cbiAgICAgKi9cbiAgICBfc2V0VXBFZmZlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCAmJiB0aGlzLl9lZmZlY3RzKSB7XG4gICAgICAgIHRoaXMuX2VmZmVjdHNSdW5GbiA9IFtdO1xuICAgICAgICB0aGlzLl9lZmZlY3RzLmZvckVhY2goZnVuY3Rpb24oZWZmZWN0RGVmKSB7XG4gICAgICAgICAgLy8gaW5zdGFsbCB0aGUgZWZmZWN0IG9ubHkgaWYgbm8gZXJyb3Igd2FzIHJlcG9ydGVkXG4gICAgICAgICAgaWYgKGVmZmVjdERlZi5zZXRVcCgpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fZWZmZWN0c1J1bkZuLnB1c2goZWZmZWN0RGVmLnJ1bik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGVhcnMgZG93biB0aGUgZWZmZWN0cy5cbiAgICAgKi9cbiAgICBfdGVhckRvd25FZmZlY3RzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9lZmZlY3RzKSB7XG4gICAgICAgIHRoaXMuX2VmZmVjdHMuZm9yRWFjaChmdW5jdGlvbihlZmZlY3REZWYpIHtcbiAgICAgICAgICBlZmZlY3REZWYudGVhckRvd24oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9lZmZlY3RzUnVuRm4gPSBbXTtcbiAgICAgIHRoaXMuX2VmZmVjdHMgPSBbXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUnVucyB0aGUgZWZmZWN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwIFRoZSBwcm9ncmVzc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IFRoZSB0b3AgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXG4gICAgICovXG4gICAgX3J1bkVmZmVjdHM6IGZ1bmN0aW9uKHAsIHkpIHtcbiAgICAgIGlmICh0aGlzLl9lZmZlY3RzUnVuRm4pIHtcbiAgICAgICAgdGhpcy5fZWZmZWN0c1J1bkZuLmZvckVhY2goZnVuY3Rpb24ocnVuKSB7XG4gICAgICAgICAgcnVuKHAsIHkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHRoZSBgX3Njcm9sbEhhbmRsZXJgLlxuICAgICAqL1xuICAgIF9zY3JvbGxIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5fY2xhbXBlZFNjcm9sbFRvcDtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsU3RhdGUoc2Nyb2xsVG9wKTtcbiAgICAgICAgaWYgKHRoaXMudGhyZXNob2xkID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NldFRocmVzaG9sZFRyaWdnZXJlZChzY3JvbGxUb3AgPj0gdGhpcy50aHJlc2hvbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHJldHVybiBhIHJlZmVyZW5jZSB0byBhIG5vZGUgaW4gdGhlIGxvY2FsIERPTS5cbiAgICAgKiBUaGUgbm9kZSBpcyBjb25zdW1lZCBieSBhIHNjcm9sbCBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIGZvciB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBfZ2V0RE9NUmVmOiBmdW5jdGlvbihpZCkge1xuICAgICAgY29uc29sZS53YXJuKCdfZ2V0RE9NUmVmJywgJ2AnKyBpZCArJ2AgaXMgdW5kZWZpbmVkJyk7XG4gICAgfSxcblxuICAgIF9nZXRVbmRlZmluZWRNc2c6IGZ1bmN0aW9uKGVmZmVjdE5hbWUpIHtcbiAgICAgIHJldHVybiAnU2Nyb2xsIGVmZmVjdCBgJyArIGVmZmVjdE5hbWUgKyAnYCBpcyB1bmRlZmluZWQuICcgK1xuICAgICAgICAgICdEaWQgeW91IGZvcmdldCB0byBpbXBvcnQgYXBwLWxheW91dC9hcHAtc2Nyb2xsLWVmZmVjdHMvZWZmZWN0cy8nICsgZWZmZWN0TmFtZSArICcuaHRtbCA/JztcbiAgICB9XG5cbiAgfV07XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cblxuPCEtLVxuVGhlIGA8aXJvbi1mbGV4LWxheW91dD5gIGNvbXBvbmVudCBwcm92aWRlcyBzaW1wbGUgd2F5cyB0byB1c2VcbltDU1MgZmxleGlibGUgYm94IGxheW91dF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvQ1NTL0ZsZXhpYmxlX2JveGVzKSxcbmFsc28ga25vd24gYXMgZmxleGJveC4gVGhpcyBjb21wb25lbnQgcHJvdmlkZXMgdHdvIGRpZmZlcmVudCB3YXlzIHRvIHVzZSBmbGV4Ym94OlxuXG4xLiBbTGF5b3V0IGNsYXNzZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC90cmVlL21hc3Rlci9pcm9uLWZsZXgtbGF5b3V0LWNsYXNzZXMuaHRtbCkuXG5UaGUgbGF5b3V0IGNsYXNzIHN0eWxlc2hlZXQgcHJvdmlkZXMgYSBzaW1wbGUgc2V0IG9mIGNsYXNzLWJhc2VkIGZsZXhib3ggcnVsZXMsIHRoYXRcbmxldCB5b3Ugc3BlY2lmeSBsYXlvdXQgcHJvcGVydGllcyBkaXJlY3RseSBpbiBtYXJrdXAuIFlvdSBtdXN0IGluY2x1ZGUgdGhpcyBmaWxlXG5pbiBldmVyeSBlbGVtZW50IHRoYXQgbmVlZHMgdG8gdXNlIHRoZW0uXG5cbiAgICBTYW1wbGUgdXNlOlxuXG4gICAgYGBgXG4gICAgPGN1c3RvbS1lbGVtZW50LWRlbW8+XG4gICAgICA8dGVtcGxhdGU+XG4gICAgICAgIDxzY3JpcHQgc3JjPVwiLi4vd2ViY29tcG9uZW50c2pzL3dlYmNvbXBvbmVudHMtbGl0ZS5qc1wiPjwvc2NyaXB0PlxuICAgICAgICA8bmV4dC1jb2RlLWJsb2NrPjwvbmV4dC1jb2RlLWJsb2NrPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2N1c3RvbS1lbGVtZW50LWRlbW8+XG4gICAgYGBgXG5cbiAgICBgYGBodG1sXG4gICAgPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImlyb24tZmxleC1sYXlvdXQtY2xhc3Nlcy5odG1sXCI+XG4gICAgPHN0eWxlIGlzPVwiY3VzdG9tLXN0eWxlXCIgaW5jbHVkZT1cImlyb24tZmxleCBpcm9uLWZsZXgtYWxpZ25tZW50XCI+PC9zdHlsZT5cbiAgICA8c3R5bGU+XG4gICAgICAudGVzdCB7IHdpZHRoOiAxMDBweDsgfVxuICAgIDwvc3R5bGU+XG4gICAgPGRpdiBjbGFzcz1cImxheW91dCBob3Jpem9udGFsIGNlbnRlci1jZW50ZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0ZXN0XCI+aG9yaXpvbnRhbCBsYXlvdXQgY2VudGVyIGFsaWdubWVudDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGBgYFxuXG4yLiBbQ3VzdG9tIENTUyBtaXhpbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC9ibG9iL21hc3Rlci9pcm9uLWZsZXgtbGF5b3V0Lmh0bWwpLlxuVGhlIG1peGluIHN0eWxlc2hlZXQgaW5jbHVkZXMgY3VzdG9tIENTUyBtaXhpbnMgdGhhdCBjYW4gYmUgYXBwbGllZCBpbnNpZGUgYSBDU1MgcnVsZSB1c2luZyB0aGUgYEBhcHBseWAgZnVuY3Rpb24uXG5cblBsZWFzZSBub3RlIHRoYXQgdGhlIG9sZCBbL2RlZXAvIGxheW91dCBjbGFzc2VzXShodHRwczovL2dpdGh1Yi5jb20vUG9seW1lckVsZW1lbnRzL2lyb24tZmxleC1sYXlvdXQvdHJlZS9tYXN0ZXIvY2xhc3NlcylcbmFyZSBkZXByZWNhdGVkLCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiBUbyBjb250aW51ZSB1c2luZyBsYXlvdXQgcHJvcGVydGllc1xuZGlyZWN0bHkgaW4gbWFya3VwLCBwbGVhc2Ugc3dpdGNoIHRvIHVzaW5nIHRoZSBuZXcgYGRvbS1tb2R1bGVgLWJhc2VkXG5bbGF5b3V0IGNsYXNzZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1mbGV4LWxheW91dC90cmVlL21hc3Rlci9pcm9uLWZsZXgtbGF5b3V0LWNsYXNzZXMuaHRtbCkuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoZSBuZXcgdmVyc2lvbiBkb2VzIG5vdCB1c2UgYC9kZWVwL2AsIGFuZCB0aGVyZWZvcmUgcmVxdWlyZXMgeW91XG50byBpbXBvcnQgdGhlIGBkb20tbW9kdWxlc2AgaW4gZXZlcnkgZWxlbWVudCB0aGF0IG5lZWRzIHRvIHVzZSB0aGVtLlxuXG5BIGNvbXBsZXRlIFtndWlkZV0oaHR0cHM6Ly9lbGVtZW50cy5wb2x5bWVyLXByb2plY3Qub3JnL2d1aWRlcy9mbGV4LWxheW91dCkgdG8gYDxpcm9uLWZsZXgtbGF5b3V0PmAgaXMgYXZhaWxhYmxlLlxuXG5AZ3JvdXAgSXJvbiBFbGVtZW50c1xuQHBzZXVkb0VsZW1lbnQgaXJvbi1mbGV4LWxheW91dFxuQGRlbW8gZGVtby9pbmRleC5odG1sXG4tLT5cbjxzY3JpcHQ+XG4gIC8vIFRoaXMgaXMgbGVmdCBvbmx5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggcHJvamVjdHNcbiAgLy8gdGhhdCBpbmNvcnJlY3RseSByZWxpZWQgb24gdW5zY29wZWQgZ2xvYmFsIFtoaWRkZW5dIHJ1bGVzO1xuICAvLyByZW1vdmluZyB3b3VsZCBiZSBhIGJyZWFraW5nIGNoYW5nZSwgYnV0IG5ldyBwcm9qZWN0c1xuICAvLyBzaG91bGQgbmV2ZXIgcmVseSBvbiB0aGlzLlxuICAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9ICdbaGlkZGVuXSB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSc7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH0pKCk7XG48L3NjcmlwdD5cbjxjdXN0b20tc3R5bGU+XG4gIDxzdHlsZSBpcz1cImN1c3RvbS1zdHlsZVwiPlxuICAgIFtoaWRkZW5dIHtcbiAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG4gIDwvc3R5bGU+XG48L2N1c3RvbS1zdHlsZT5cblxuPGN1c3RvbS1zdHlsZT5cbiAgPHN0eWxlIGlzPVwiY3VzdG9tLXN0eWxlXCI+XG4gICAgaHRtbCB7XG5cbiAgICAgIC0tbGF5b3V0OiB7XG4gICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1pbmxpbmU6IHtcbiAgICAgICAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94O1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1mbGV4O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWhvcml6b250YWw6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1ob3Jpem9udGFsLXJldmVyc2U6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC12ZXJ0aWNhbDoge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQ7XG5cbiAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LXZlcnRpY2FsLXJldmVyc2U6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0O1xuXG4gICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gICAgICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC13cmFwOiB7XG4gICAgICAgIC1tcy1mbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgIC13ZWJraXQtZmxleC13cmFwOiB3cmFwO1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC13cmFwLXJldmVyc2U6IHtcbiAgICAgICAgLW1zLWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlO1xuICAgICAgICAtd2Via2l0LWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlO1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZTtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtYXV0bzoge1xuICAgICAgICAtbXMtZmxleDogMSAxIGF1dG87XG4gICAgICAgIC13ZWJraXQtZmxleDogMSAxIGF1dG87XG4gICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC1ub25lOiB7XG4gICAgICAgIC1tcy1mbGV4OiBub25lO1xuICAgICAgICAtd2Via2l0LWZsZXg6IG5vbmU7XG4gICAgICAgIGZsZXg6IG5vbmU7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4OiB7XG4gICAgICAgIC1tcy1mbGV4OiAxIDEgMC4wMDAwMDAwMDFweDtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiAxO1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICAtd2Via2l0LWZsZXgtYmFzaXM6IDAuMDAwMDAwMDAxcHg7XG4gICAgICAgIGZsZXgtYmFzaXM6IDAuMDAwMDAwMDAxcHg7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTI6IHtcbiAgICAgICAgLW1zLWZsZXg6IDI7XG4gICAgICAgIC13ZWJraXQtZmxleDogMjtcbiAgICAgICAgZmxleDogMjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtMzoge1xuICAgICAgICAtbXMtZmxleDogMztcbiAgICAgICAgLXdlYmtpdC1mbGV4OiAzO1xuICAgICAgICBmbGV4OiAzO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC00OiB7XG4gICAgICAgIC1tcy1mbGV4OiA0O1xuICAgICAgICAtd2Via2l0LWZsZXg6IDQ7XG4gICAgICAgIGZsZXg6IDQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTU6IHtcbiAgICAgICAgLW1zLWZsZXg6IDU7XG4gICAgICAgIC13ZWJraXQtZmxleDogNTtcbiAgICAgICAgZmxleDogNTtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtNjoge1xuICAgICAgICAtbXMtZmxleDogNjtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiA2O1xuICAgICAgICBmbGV4OiA2O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC03OiB7XG4gICAgICAgIC1tcy1mbGV4OiA3O1xuICAgICAgICAtd2Via2l0LWZsZXg6IDc7XG4gICAgICAgIGZsZXg6IDc7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mbGV4LTg6IHtcbiAgICAgICAgLW1zLWZsZXg6IDg7XG4gICAgICAgIC13ZWJraXQtZmxleDogODtcbiAgICAgICAgZmxleDogODtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZsZXgtOToge1xuICAgICAgICAtbXMtZmxleDogOTtcbiAgICAgICAgLXdlYmtpdC1mbGV4OiA5O1xuICAgICAgICBmbGV4OiA5O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMDoge1xuICAgICAgICAtbXMtZmxleDogMTA7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTA7XG4gICAgICAgIGZsZXg6IDEwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMToge1xuICAgICAgICAtbXMtZmxleDogMTE7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTE7XG4gICAgICAgIGZsZXg6IDExO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZmxleC0xMjoge1xuICAgICAgICAtbXMtZmxleDogMTI7XG4gICAgICAgIC13ZWJraXQtZmxleDogMTI7XG4gICAgICAgIGZsZXg6IDEyO1xuICAgICAgfTtcblxuICAgICAgLyogYWxpZ25tZW50IGluIGNyb3NzIGF4aXMgKi9cblxuICAgICAgLS1sYXlvdXQtc3RhcnQ6IHtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0O1xuICAgICAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWNlbnRlcjoge1xuICAgICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1lbmQ6IHtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGVuZDtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWJhc2VsaW5lOiB7XG4gICAgICAgIC1tcy1mbGV4LWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICAgIH07XG5cbiAgICAgIC8qIGFsaWdubWVudCBpbiBtYWluIGF4aXMgKi9cblxuICAgICAgLS1sYXlvdXQtc3RhcnQtanVzdGlmaWVkOiB7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtY2VudGVyLWp1c3RpZmllZDoge1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZW5kLWp1c3RpZmllZDoge1xuICAgICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XG4gICAgICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWFyb3VuZC1qdXN0aWZpZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcbiAgICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1qdXN0aWZpZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWNlbnRlci1jZW50ZXI6IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlcjtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlci1qdXN0aWZpZWQ7XG4gICAgICB9O1xuXG4gICAgICAvKiBzZWxmIGFsaWdubWVudCAqL1xuXG4gICAgICAtLWxheW91dC1zZWxmLXN0YXJ0OiB7XG4gICAgICAgIC1tcy1hbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1zZWxmLWNlbnRlcjoge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2VsZi1lbmQ6IHtcbiAgICAgICAgLW1zLWFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgICAtd2Via2l0LWFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LXNlbGYtc3RyZXRjaDoge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogc3RyZXRjaDtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2VsZi1iYXNlbGluZToge1xuICAgICAgICAtbXMtYWxpZ24tc2VsZjogYmFzZWxpbmU7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tc2VsZjogYmFzZWxpbmU7XG4gICAgICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lO1xuICAgICAgfTtcblxuICAgICAgLyogbXVsdGktbGluZSBhbGlnbm1lbnQgaW4gbWFpbiBheGlzICovXG5cbiAgICAgIC0tbGF5b3V0LXN0YXJ0LWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdGFydDsgIC8qIElFMTAgKi9cbiAgICAgICAgLW1zLWFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWVuZC1hbGlnbmVkOiB7XG4gICAgICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kOyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtY2VudGVyLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBjZW50ZXI7ICAvKiBJRTEwICovXG4gICAgICAgIC1tcy1hbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIC13ZWJraXQtYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1iZXR3ZWVuLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBqdXN0aWZ5OyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgLXdlYmtpdC1hbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtYXJvdW5kLWFsaWduZWQ6IHtcbiAgICAgICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlOyAgLyogSUUxMCAqL1xuICAgICAgICAtbXMtYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICAtd2Via2l0LWFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgfTtcblxuICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICBPdGhlciBMYXlvdXRcbiAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAgIC0tbGF5b3V0LWJsb2NrOiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtaW52aXNpYmxlOiB7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtcmVsYXRpdmU6IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZml0OiB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtc2Nyb2xsOiB7XG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICB9O1xuXG4gICAgICAtLWxheW91dC1mdWxsYmxlZWQ6IHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgfTtcblxuICAgICAgLyogZml4ZWQgcG9zaXRpb24gKi9cblxuICAgICAgLS1sYXlvdXQtZml4ZWQtdG9wOiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZpeGVkLXJpZ2h0OiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgfTtcblxuICAgICAgLS1sYXlvdXQtZml4ZWQtYm90dG9tOiB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH07XG5cbiAgICAgIC0tbGF5b3V0LWZpeGVkLWxlZnQ6IHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH07XG5cbiAgICB9XG4gIDwvc3R5bGU+XG48L2N1c3RvbS1zdHlsZT5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJsaWIvbWl4aW5zL2VsZW1lbnQtbWl4aW4uaHRtbFwiPlxuPCEtLSBpbXBvcnQgaHRtbC10YWcgdG8gZXhwb3J0IGh0bWwgLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwibGliL3V0aWxzL2h0bWwtdGFnLmh0bWxcIj5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmdcbiAgICogZmVhdHVyZXMgaW5jbHVkaW5nIHRlbXBsYXRlIHN0YW1waW5nLCBkYXRhLWJpbmRpbmcsIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24sXG4gICAqIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb24uXG4gICAqXG4gICAqIEBjdXN0b21FbGVtZW50XG4gICAqIEBwb2x5bWVyXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5FbGVtZW50TWl4aW5cbiAgICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgYmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzXG4gICAqICAga2V5IG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMgaW5jbHVkaW5nIHRlbXBsYXRlIHN0YW1waW5nLCBkYXRhLWJpbmRpbmcsXG4gICAqICAgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbiwgYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvblxuICAgKi9cbiAgY29uc3QgRWxlbWVudCA9IFBvbHltZXIuRWxlbWVudE1peGluKEhUTUxFbGVtZW50KTtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIFBvbHltZXIuRWxlbWVudCA9IEVsZW1lbnQ7XG5cbiAgLy8gTk9URTogdGhpcyBpcyBoZXJlIGZvciBtb2R1bGl6ZXIgdG8gZXhwb3J0IGBodG1sYCBmb3IgdGhlIG1vZHVsZSB2ZXJzaW9uIG9mIHRoaXMgZmlsZVxuICBQb2x5bWVyLmh0bWwgPSBQb2x5bWVyLmh0bWw7XG59KSgpO1xuPC9zY3JpcHQ+IiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvbWl4aW4uaHRtbFwiPlxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ29tbW9uIGltcGxlbWVudGF0aW9uIGZvciBtaXhpbiAmIGJlaGF2aW9yXG4gIGZ1bmN0aW9uIG11dGFibGVQcm9wZXJ0eUNoYW5nZShpbnN0LCBwcm9wZXJ0eSwgdmFsdWUsIG9sZCwgbXV0YWJsZURhdGEpIHtcbiAgICBsZXQgaXNPYmplY3Q7XG4gICAgaWYgKG11dGFibGVEYXRhKSB7XG4gICAgICBpc09iamVjdCA9ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKTtcbiAgICAgIC8vIFB1bGwgYG9sZGAgZm9yIE9iamVjdHMgZnJvbSB0ZW1wIGNhY2hlLCBidXQgdHJlYXQgYG51bGxgIGFzIGEgcHJpbWl0aXZlXG4gICAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgICAgb2xkID0gaW5zdC5fX2RhdGFUZW1wW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrLCBidXQgcmV0dXJuIGZhbHNlIGZvciBOYU49PT1OYU5cbiAgICBsZXQgc2hvdWxkQ2hhbmdlID0gKG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSkpO1xuICAgIC8vIE9iamVjdHMgYXJlIHN0b3JlZCBpbiB0ZW1wb3JhcnkgY2FjaGUgKGNsZWFyZWQgYXQgZW5kIG9mXG4gICAgLy8gdHVybiksIHdoaWNoIGlzIHVzZWQgZm9yIGRpcnR5LWNoZWNraW5nXG4gICAgaWYgKGlzT2JqZWN0ICYmIHNob3VsZENoYW5nZSkge1xuICAgICAgaW5zdC5fX2RhdGFUZW1wW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gc2hvdWxkQ2hhbmdlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdG8gc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kIGFycmF5c1xuICAgKiAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKSwgZm9yIHVzZSBvbiBlbGVtZW50cyB1dGlsaXppbmdcbiAgICogYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYFxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHBlcmZvcm1zIHN0cmljdCBkaXJ0eSBjaGVja2luZyBvblxuICAgKiBvYmplY3RzLCB3aGljaCBtZWFucyB0aGF0IGFueSBkZWVwIG1vZGlmaWNhdGlvbnMgdG8gYW4gb2JqZWN0IG9yIGFycmF5IHdpbGxcbiAgICogbm90IGJlIHByb3BhZ2F0ZWQgdW5sZXNzIFwiaW1tdXRhYmxlXCIgZGF0YSBwYXR0ZXJucyBhcmUgdXNlZCAoaS5lLiBhbGwgb2JqZWN0XG4gICAqIHJlZmVyZW5jZXMgZnJvbSB0aGUgcm9vdCB0byB0aGUgbXV0YXRpb24gd2VyZSBjaGFuZ2VkKS5cbiAgICpcbiAgICogUG9seW1lciBhbHNvIHByb3ZpZGVzIGEgcHJvcHJpZXRhcnkgZGF0YSBtdXRhdGlvbiBhbmQgcGF0aCBub3RpZmljYXRpb24gQVBJXG4gICAqIChlLmcuIGBub3RpZnlQYXRoYCwgYHNldGAsIGFuZCBhcnJheSBtdXRhdGlvbiBBUEkncykgdGhhdCBhbGxvdyBlZmZpY2llbnRcbiAgICogbXV0YXRpb24gYW5kIG5vdGlmaWNhdGlvbiBvZiBkZWVwIGNoYW5nZXMgaW4gYW4gb2JqZWN0IGdyYXBoIHRvIGFsbCBlbGVtZW50c1xuICAgKiBib3VuZCB0byB0aGUgc2FtZSBvYmplY3QgZ3JhcGguXG4gICAqXG4gICAqIEluIGNhc2VzIHdoZXJlIG5laXRoZXIgaW1tdXRhYmxlIHBhdHRlcm5zIG5vciB0aGUgZGF0YSBtdXRhdGlvbiBBUEkgY2FuIGJlXG4gICAqIHVzZWQsIGFwcGx5aW5nIHRoaXMgbWl4aW4gd2lsbCBjYXVzZSBQb2x5bWVyIHRvIHNraXAgZGlydHkgY2hlY2tpbmcgZm9yXG4gICAqIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKS4gIFRoaXMgYWxsb3dzIGFcbiAgICogdXNlciB0byBtYWtlIGEgZGVlcCBtb2RpZmljYXRpb24gdG8gYSBib3VuZCBvYmplY3QgZ3JhcGgsIGFuZCB0aGVuIGVpdGhlclxuICAgKiBzaW1wbHkgcmUtc2V0IHRoZSBvYmplY3QgKGUuZy4gYHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zYCkgb3IgY2FsbCBgbm90aWZ5UGF0aGBcbiAgICogKGUuZy4gYHRoaXMubm90aWZ5UGF0aCgnaXRlbXMnKWApIHRvIHVwZGF0ZSB0aGUgdHJlZS4gIE5vdGUgdGhhdCBhbGxcbiAgICogZWxlbWVudHMgdGhhdCB3aXNoIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gZGVlcCBtdXRhdGlvbnMgbXVzdCBhcHBseSB0aGlzXG4gICAqIG1peGluIG9yIG90aGVyd2lzZSBza2lwIHN0cmljdCBkaXJ0eSBjaGVja2luZyBmb3Igb2JqZWN0cy9hcnJheXMuXG4gICAqIFNwZWNpZmljYWxseSwgYW55IGVsZW1lbnRzIGluIHRoZSBiaW5kaW5nIHRyZWUgYmV0d2VlbiB0aGUgc291cmNlIG9mIGFcbiAgICogbXV0YXRpb24gYW5kIHRoZSBjb25zdW1wdGlvbiBvZiBpdCBtdXN0IGFwcGx5IHRoaXMgbWl4aW4gb3IgZW5hYmxlIHRoZVxuICAgKiBgUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhYCBtaXhpbi5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gbWFrZSB0aGUgZGlydHkgY2hlY2sgc3RyYXRlZ3kgY29uZmlndXJhYmxlLCBzZWVcbiAgICogYFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YWAuXG4gICAqXG4gICAqIE5vdGUsIHRoZSBwZXJmb3JtYW5jZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcHJvcGFnYXRpbmcgbGFyZ2Ugb2JqZWN0IGdyYXBoc1xuICAgKiB3aWxsIGJlIHdvcnNlIGFzIG9wcG9zZWQgdG8gdXNpbmcgc3RyaWN0IGRpcnR5IGNoZWNraW5nIHdpdGggaW1tdXRhYmxlXG4gICAqIHBhdHRlcm5zIG9yIFBvbHltZXIncyBwYXRoIG5vdGlmaWNhdGlvbiBBUEkuXG4gICAqXG4gICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdG8gc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHNcbiAgICogICBhbmQgYXJyYXlzXG4gICAqL1xuICBQb2x5bWVyLk11dGFibGVEYXRhID0gUG9seW1lci5kZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICAgICAqL1xuICAgIGNsYXNzIE11dGFibGVEYXRhIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHRvIHByb3ZpZGUgb3B0aW9uIGZvciBza2lwcGluZ1xuICAgICAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nIGZvciBPYmplY3RzIGFuZCBBcnJheXMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgcHVsbHMgdGhlIHZhbHVlIHRvIGRpcnR5IGNoZWNrIGFnYWluc3QgZnJvbSB0aGUgYF9fZGF0YVRlbXBgXG4gICAgICAgKiBjYWNoZSAocmF0aGVyIHRoYW4gdGhlIG5vcm1hbCBgX19kYXRhYCBjYWNoZSkgZm9yIE9iamVjdHMuICBTaW5jZSB0aGUgdGVtcFxuICAgICAgICogY2FjaGUgaXMgY2xlYXJlZCBhdCB0aGUgZW5kIG9mIGEgdHVybiwgdGhpcyBpbXBsZW1lbnRhdGlvbiBhbGxvd3NcbiAgICAgICAqIHNpZGUtZWZmZWN0cyBvZiBkZWVwIG9iamVjdCBjaGFuZ2VzIHRvIGJlIHByb2Nlc3NlZCBieSByZS1zZXR0aW5nIHRoZVxuICAgICAgICogc2FtZSBvYmplY3QgKHVzaW5nIHRoZSB0ZW1wIGNhY2hlIGFzIGFuIGluLXR1cm4gYmFja3N0b3AgdG8gcHJldmVudFxuICAgICAgICogY3ljbGVzIGR1ZSB0byAyLXdheSBub3RpZmljYXRpb24pLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgICByZXR1cm4gbXV0YWJsZVByb3BlcnR5Q2hhbmdlKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgb2xkLCB0cnVlKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBNdXRhYmxlRGF0YTtcblxuICB9KTtcblxuXG4gIC8qKlxuICAgKiBFbGVtZW50IGNsYXNzIG1peGluIHRvIGFkZCB0aGUgb3B0aW9uYWwgYWJpbGl0eSB0byBza2lwIHN0cmljdFxuICAgKiBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZVxuICAgKiBcImRpcnR5XCIpIGJ5IHNldHRpbmcgYSBgbXV0YWJsZS1kYXRhYCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCBpbnN0YW5jZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCBwZXJmb3JtcyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgb25cbiAgICogb2JqZWN0cywgd2hpY2ggbWVhbnMgdGhhdCBhbnkgZGVlcCBtb2RpZmljYXRpb25zIHRvIGFuIG9iamVjdCBvciBhcnJheSB3aWxsXG4gICAqIG5vdCBiZSBwcm9wYWdhdGVkIHVubGVzcyBcImltbXV0YWJsZVwiIGRhdGEgcGF0dGVybnMgYXJlIHVzZWQgKGkuZS4gYWxsIG9iamVjdFxuICAgKiByZWZlcmVuY2VzIGZyb20gdGhlIHJvb3QgdG8gdGhlIG11dGF0aW9uIHdlcmUgY2hhbmdlZCkuXG4gICAqXG4gICAqIFBvbHltZXIgYWxzbyBwcm92aWRlcyBhIHByb3ByaWV0YXJ5IGRhdGEgbXV0YXRpb24gYW5kIHBhdGggbm90aWZpY2F0aW9uIEFQSVxuICAgKiAoZS5nLiBgbm90aWZ5UGF0aGAsIGBzZXRgLCBhbmQgYXJyYXkgbXV0YXRpb24gQVBJJ3MpIHRoYXQgYWxsb3cgZWZmaWNpZW50XG4gICAqIG11dGF0aW9uIGFuZCBub3RpZmljYXRpb24gb2YgZGVlcCBjaGFuZ2VzIGluIGFuIG9iamVjdCBncmFwaCB0byBhbGwgZWxlbWVudHNcbiAgICogYm91bmQgdG8gdGhlIHNhbWUgb2JqZWN0IGdyYXBoLlxuICAgKlxuICAgKiBJbiBjYXNlcyB3aGVyZSBuZWl0aGVyIGltbXV0YWJsZSBwYXR0ZXJucyBub3IgdGhlIGRhdGEgbXV0YXRpb24gQVBJIGNhbiBiZVxuICAgKiB1c2VkLCBhcHBseWluZyB0aGlzIG1peGluIHdpbGwgYWxsb3cgUG9seW1lciB0byBza2lwIGRpcnR5IGNoZWNraW5nIGZvclxuICAgKiBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikuICBUaGlzIGFsbG93cyBhXG4gICAqIHVzZXIgdG8gbWFrZSBhIGRlZXAgbW9kaWZpY2F0aW9uIHRvIGEgYm91bmQgb2JqZWN0IGdyYXBoLCBhbmQgdGhlbiBlaXRoZXJcbiAgICogc2ltcGx5IHJlLXNldCB0aGUgb2JqZWN0IChlLmcuIGB0aGlzLml0ZW1zID0gdGhpcy5pdGVtc2ApIG9yIGNhbGwgYG5vdGlmeVBhdGhgXG4gICAqIChlLmcuIGB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW1zJylgKSB0byB1cGRhdGUgdGhlIHRyZWUuICBOb3RlIHRoYXQgYWxsXG4gICAqIGVsZW1lbnRzIHRoYXQgd2lzaCB0byBiZSB1cGRhdGVkIGJhc2VkIG9uIGRlZXAgbXV0YXRpb25zIG11c3QgYXBwbHkgdGhpc1xuICAgKiBtaXhpbiBvciBvdGhlcndpc2Ugc2tpcCBzdHJpY3QgZGlydHkgY2hlY2tpbmcgZm9yIG9iamVjdHMvYXJyYXlzLlxuICAgKiBTcGVjaWZpY2FsbHksIGFueSBlbGVtZW50cyBpbiB0aGUgYmluZGluZyB0cmVlIGJldHdlZW4gdGhlIHNvdXJjZSBvZiBhXG4gICAqIG11dGF0aW9uIGFuZCB0aGUgY29uc3VtcHRpb24gb2YgaXQgbXVzdCBlbmFibGUgdGhpcyBtaXhpbiBvciBhcHBseSB0aGVcbiAgICogYFBvbHltZXIuTXV0YWJsZURhdGFgIG1peGluLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIG1peGluIGFkZHMgdGhlIGFiaWxpdHkgdG8gZm9yZ28gT2JqZWN0L0FycmF5IGRpcnR5IGNoZWNraW5nLFxuICAgKiB0aGUgYG11dGFibGVEYXRhYCBmbGFnIGRlZmF1bHRzIHRvIGZhbHNlIGFuZCBtdXN0IGJlIHNldCBvbiB0aGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIE5vdGUsIHRoZSBwZXJmb3JtYW5jZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcHJvcGFnYXRpbmcgbGFyZ2Ugb2JqZWN0IGdyYXBoc1xuICAgKiB3aWxsIGJlIHdvcnNlIGJ5IHJlbHlpbmcgb24gYG11dGFibGVEYXRhOiB0cnVlYCBhcyBvcHBvc2VkIHRvIHVzaW5nXG4gICAqIHN0cmljdCBkaXJ0eSBjaGVja2luZyB3aXRoIGltbXV0YWJsZSBwYXR0ZXJucyBvciBQb2x5bWVyJ3MgcGF0aCBub3RpZmljYXRpb25cbiAgICogQVBJLlxuICAgKlxuICAgKiBAbWl4aW5GdW5jdGlvblxuICAgKiBAcG9seW1lclxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRvIG9wdGlvbmFsbHkgc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmdcbiAgICogICBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzXG4gICAqL1xuICBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGEgPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBwb2x5bWVyXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAgICAgKi9cbiAgICBjbGFzcyBPcHRpb25hbE11dGFibGVEYXRhIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBJbnN0YW5jZS1sZXZlbCBmbGFnIGZvciBjb25maWd1cmluZyB0aGUgZGlydHktY2hlY2tpbmcgc3RyYXRlZ3lcbiAgICAgICAgICAgKiBmb3IgdGhpcyBlbGVtZW50LiAgV2hlbiB0cnVlLCBPYmplY3RzIGFuZCBBcnJheXMgd2lsbCBza2lwIGRpcnR5XG4gICAgICAgICAgICogY2hlY2tpbmcsIG90aGVyd2lzZSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tpbmcgd2lsbCBiZSB1c2VkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG11dGFibGVEYXRhOiBCb29sZWFuXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2AgdG8gcHJvdmlkZSBvcHRpb24gZm9yIHNraXBwaW5nXG4gICAgICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2tpbmcgZm9yIE9iamVjdHMgYW5kIEFycmF5cy5cbiAgICAgICAqXG4gICAgICAgKiBXaGVuIGB0aGlzLm11dGFibGVEYXRhYCBpcyB0cnVlIG9uIHRoaXMgaW5zdGFuY2UsIHRoaXMgbWV0aG9kXG4gICAgICAgKiBwdWxscyB0aGUgdmFsdWUgdG8gZGlydHkgY2hlY2sgYWdhaW5zdCBmcm9tIHRoZSBgX19kYXRhVGVtcGAgY2FjaGVcbiAgICAgICAqIChyYXRoZXIgdGhhbiB0aGUgbm9ybWFsIGBfX2RhdGFgIGNhY2hlKSBmb3IgT2JqZWN0cy4gIFNpbmNlIHRoZSB0ZW1wXG4gICAgICAgKiBjYWNoZSBpcyBjbGVhcmVkIGF0IHRoZSBlbmQgb2YgYSB0dXJuLCB0aGlzIGltcGxlbWVudGF0aW9uIGFsbG93c1xuICAgICAgICogc2lkZS1lZmZlY3RzIG9mIGRlZXAgb2JqZWN0IGNoYW5nZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHJlLXNldHRpbmcgdGhlXG4gICAgICAgKiBzYW1lIG9iamVjdCAodXNpbmcgdGhlIHRlbXAgY2FjaGUgYXMgYW4gaW4tdHVybiBiYWNrc3RvcCB0byBwcmV2ZW50XG4gICAgICAgKiBjeWNsZXMgZHVlIHRvIDItd2F5IG5vdGlmaWNhdGlvbikuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBjaGFuZ2VcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgb2xkKSB7XG4gICAgICAgIHJldHVybiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UodGhpcywgcHJvcGVydHksIHZhbHVlLCBvbGQsIHRoaXMubXV0YWJsZURhdGEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBPcHRpb25hbE11dGFibGVEYXRhO1xuXG4gIH0pO1xuXG4gIC8vIEV4cG9ydCBmb3IgdXNlIGJ5IGxlZ2FjeSBiZWhhdmlvclxuICBQb2x5bWVyLk11dGFibGVEYXRhLl9tdXRhYmxlUHJvcGVydHlDaGFuZ2UgPSBtdXRhYmxlUHJvcGVydHlDaGFuZ2U7XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib290Lmh0bWxcIj5cblxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTWljcm90YXNrIGltcGxlbWVudGVkIHVzaW5nIE11dGF0aW9uIE9ic2VydmVyXG4gIGxldCBtaWNyb3Rhc2tDdXJySGFuZGxlID0gMDtcbiAgbGV0IG1pY3JvdGFza0xhc3RIYW5kbGUgPSAwO1xuICBsZXQgbWljcm90YXNrQ2FsbGJhY2tzID0gW107XG4gIGxldCBtaWNyb3Rhc2tOb2RlQ29udGVudCA9IDA7XG4gIGxldCBtaWNyb3Rhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBuZXcgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIobWljcm90YXNrRmx1c2gpLm9ic2VydmUobWljcm90YXNrTm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcblxuICBmdW5jdGlvbiBtaWNyb3Rhc2tGbHVzaCgpIHtcbiAgICBjb25zdCBsZW4gPSBtaWNyb3Rhc2tDYWxsYmFja3MubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBjYiA9IG1pY3JvdGFza0NhbGxiYWNrc1tpXTtcbiAgICAgIGlmIChjYikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhyb3cgZTsgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWljcm90YXNrQ2FsbGJhY2tzLnNwbGljZSgwLCBsZW4pO1xuICAgIG1pY3JvdGFza0xhc3RIYW5kbGUgKz0gbGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZHVsZSB0aGF0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHN0cmF0ZWdpZXMgZm9yIGVucXVldWluZyBhc3luY2hyb25vdXNcbiAgICogdGFza3MuICBFYWNoIHN1Yi1tb2R1bGUgcHJvdmlkZXMgYSBzdGFuZGFyZCBgcnVuKGZuKWAgaW50ZXJmYWNlIHRoYXQgcmV0dXJucyBhXG4gICAqIGhhbmRsZSwgYW5kIGEgYGNhbmNlbChoYW5kbGUpYCBpbnRlcmZhY2UgZm9yIGNhbmNlbGluZyBhc3luYyB0YXNrcyBiZWZvcmVcbiAgICogdGhleSBydW4uXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgTW9kdWxlIHRoYXQgcHJvdmlkZXMgYSBudW1iZXIgb2Ygc3RyYXRlZ2llcyBmb3IgZW5xdWV1aW5nIGFzeW5jaHJvbm91c1xuICAgKiB0YXNrcy5cbiAgICovXG4gIFBvbHltZXIuQXN5bmMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHNldFRpbWVvdXRgLlxuICAgICAqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkFzeW5jXG4gICAgICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGBzZXRUaW1lb3V0YC5cbiAgICAgKi9cbiAgICB0aW1lT3V0OiB7XG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYSBzdWItbW9kdWxlIHdpdGggdGhlIGFzeW5jIGludGVyZmFjZSBwcm92aWRpbmcgdGhlIHByb3ZpZGVkXG4gICAgICAgKiBkZWxheS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5Bc3luYy50aW1lT3V0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IFRpbWUgdG8gd2FpdCBiZWZvcmUgY2FsbGluZyBjYWxsYmFja3MgaW4gbXNcbiAgICAgICAqIEByZXR1cm4geyFBc3luY0ludGVyZmFjZX0gQW4gYXN5bmMgdGltZW91dCBpbnRlcmZhY2VcbiAgICAgICAqL1xuICAgICAgYWZ0ZXIoZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBydW4oZm4pIHsgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBkZWxheSk7IH0sXG4gICAgICAgICAgY2FuY2VsKGhhbmRsZSkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGluIHRoZSBuZXh0IHRhc2suXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXN5bmMudGltZU91dFxuICAgICAgICogQHBhcmFtIHshRnVuY3Rpb259IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBkZWxheSBEZWxheSBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAgICAgKi9cbiAgICAgIHJ1bihmbiwgZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBkZWxheSk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgdGltZU91dGAgY2FsbGJhY2suXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXN5bmMudGltZU91dFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNhbmNlbChoYW5kbGUpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAuXG4gICAgICpcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXN5bmNcbiAgICAgKiBAc3VtbWFyeSBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAuXG4gICAgICovXG4gICAgYW5pbWF0aW9uRnJhbWU6IHtcbiAgICAgIC8qKlxuICAgICAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgdGltaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkFzeW5jLmFuaW1hdGlvbkZyYW1lXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgICAgICovXG4gICAgICBydW4oZm4pIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYGFuaW1hdGlvbkZyYW1lYCBjYWxsYmFjay5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5Bc3luYy5hbmltYXRpb25GcmFtZVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNhbmNlbChoYW5kbGUpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdElkbGVDYWxsYmFja2AuICBGYWxscyBiYWNrIHRvXG4gICAgICogYHNldFRpbWVvdXRgIG9uIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgYHJlcXVlc3RJZGxlQ2FsbGJhY2tgLlxuICAgICAqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkFzeW5jXG4gICAgICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0SWRsZUNhbGxiYWNrYC5cbiAgICAgKi9cbiAgICBpZGxlUGVyaW9kOiB7XG4gICAgICAvKipcbiAgICAgICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IGByZXF1ZXN0SWRsZUNhbGxiYWNrYCB0aW1pbmcuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXN5bmMuaWRsZVBlcmlvZFxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbighSWRsZURlYWRsaW5lKTp2b2lkfSBmbiBDYWxsYmFjayB0byBydW5cbiAgICAgICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAgICAgKi9cbiAgICAgIHJ1bihmbikge1xuICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgP1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKGZuKSA6XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZm4sIDE2KTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGBpZGxlUGVyaW9kYCBjYWxsYmFjay5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5Bc3luYy5pZGxlUGVyaW9kXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgY2FuY2VsKGhhbmRsZSkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrID9cbiAgICAgICAgICB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrKGhhbmRsZSkgOlxuICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFzayB0aW1pbmcuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgbWljcm90YXNrIHRpbWluZyBpcyBhY2hpZXZlZCB2aWEgYSBzaW5nbGUgYE11dGF0aW9uT2JzZXJ2ZXJgLFxuICAgICAqIGFuZCB0aHVzIGNhbGxiYWNrcyBlbnF1ZXVlZCB3aXRoIHRoaXMgQVBJIHdpbGwgYWxsIHJ1biBpbiBhIHNpbmdsZVxuICAgICAqIGJhdGNoLCBhbmQgbm90IGludGVybGVhdmVkIHdpdGggb3RoZXIgbWljcm90YXNrcyBzdWNoIGFzIHByb21pc2VzLlxuICAgICAqIFByb21pc2VzIGFyZSBhdm9pZGVkIGFzIGFuIGltcGxlbWVudGF0aW9uIGNob2ljZSBmb3IgdGhlIHRpbWUgYmVpbmdcbiAgICAgKiBkdWUgdG8gU2FmYXJpIGJ1Z3MgdGhhdCBjYXVzZSBQcm9taXNlcyB0byBsYWNrIG1pY3JvdGFzayBndWFyYW50ZWVzLlxuICAgICAqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkFzeW5jXG4gICAgICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFza1xuICAgICAqICAgdGltaW5nLlxuICAgICAqL1xuICAgIG1pY3JvVGFzazoge1xuXG4gICAgICAvKipcbiAgICAgICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IG1pY3JvdGFzayB0aW1pbmcuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXN5bmMubWljcm9UYXNrXG4gICAgICAgKiBAcGFyYW0geyFGdW5jdGlvbj19IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1blxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSBIYW5kbGUgdXNlZCBmb3IgY2FuY2VsaW5nIHRhc2tcbiAgICAgICAqL1xuICAgICAgcnVuKGNhbGxiYWNrKSB7XG4gICAgICAgIG1pY3JvdGFza05vZGUudGV4dENvbnRlbnQgPSBtaWNyb3Rhc2tOb2RlQ29udGVudCsrO1xuICAgICAgICBtaWNyb3Rhc2tDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBtaWNyb3Rhc2tDdXJySGFuZGxlKys7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGBtaWNyb1Rhc2tgIGNhbGxiYWNrLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkFzeW5jLm1pY3JvVGFza1xuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNhbmNlbChoYW5kbGUpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gaGFuZGxlIC0gbWljcm90YXNrTGFzdEhhbmRsZTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgaWYgKCFtaWNyb3Rhc2tDYWxsYmFja3NbaWR4XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFzeW5jIGhhbmRsZTogJyArIGhhbmRsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1pY3JvdGFza0NhbGxiYWNrc1tpZHhdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICB9O1xuXG59KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYm9vdC5odG1sXCI+XG5cbjxzY3JpcHQ+XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGxldCBDU1NfVVJMX1JYID0gLyh1cmxcXCgpKFteKV0qKShcXCkpL2c7XG4gICAgbGV0IEFCU19VUkwgPSAvKF5cXC8pfCheIyl8KF5bXFx3LVxcZF0qOikvO1xuICAgIGxldCB3b3JraW5nVVJMO1xuICAgIGxldCByZXNvbHZlRG9jO1xuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIHRoZSBnaXZlbiBVUkwgYWdhaW5zdCB0aGUgcHJvdmlkZWQgYGJhc2VVcmknLlxuICAgICAqIFxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1zIG5vIHJlc29sdXRpb24gZm9yIFVSTHMgdGhhdCBzdGFydFxuICAgICAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICAgICAqIFVSTCByZXNvbHV0aW9uLCB1c2UgYHdpbmRvdy5VUkxgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUmVzb2x2ZVVybFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHJlc29sdmVcbiAgICAgKiBAcGFyYW0gez9zdHJpbmc9fSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlc29sdmUgdGhlIFVSTCBhZ2FpbnN0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBVUkxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVXJsKHVybCwgYmFzZVVSSSkge1xuICAgICAgaWYgKHVybCAmJiBBQlNfVVJMLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuICAgICAgLy8gTGF6eSBmZWF0dXJlIGRldGVjdGlvbi5cbiAgICAgIGlmICh3b3JraW5nVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd29ya2luZ1VSTCA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKCdiJywgJ2h0dHA6Ly9hJyk7XG4gICAgICAgICAgdS5wYXRobmFtZSA9ICdjJTIwZCc7XG4gICAgICAgICAgd29ya2luZ1VSTCA9ICh1LmhyZWYgPT09ICdodHRwOi8vYS9jJTIwZCcpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gc2lsZW50bHkgZmFpbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWJhc2VVUkkpIHtcbiAgICAgICAgYmFzZVVSSSA9IGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICB9XG4gICAgICBpZiAod29ya2luZ1VSTCkge1xuICAgICAgICByZXR1cm4gKG5ldyBVUkwodXJsLCBiYXNlVVJJKSkuaHJlZjtcbiAgICAgIH1cbiAgICAgIC8vIEZhbGxiYWNrIHRvIGNyZWF0aW5nIGFuIGFuY2hvciBpbnRvIGEgZGlzY29ubmVjdGVkIGRvY3VtZW50LlxuICAgICAgaWYgKCFyZXNvbHZlRG9jKSB7XG4gICAgICAgIHJlc29sdmVEb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJ3RlbXAnKTtcbiAgICAgICAgcmVzb2x2ZURvYy5iYXNlID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgICAgIHJlc29sdmVEb2MuaGVhZC5hcHBlbmRDaGlsZChyZXNvbHZlRG9jLmJhc2UpO1xuICAgICAgICByZXNvbHZlRG9jLmFuY2hvciA9IHJlc29sdmVEb2MuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICByZXNvbHZlRG9jLmJvZHkuYXBwZW5kQ2hpbGQocmVzb2x2ZURvYy5hbmNob3IpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZURvYy5iYXNlLmhyZWYgPSBiYXNlVVJJO1xuICAgICAgcmVzb2x2ZURvYy5hbmNob3IuaHJlZiA9IHVybDtcbiAgICAgIHJldHVybiByZXNvbHZlRG9jLmFuY2hvci5ocmVmIHx8IHVybDtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIGFueSByZWxhdGl2ZSBVUkwncyBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHQgYWdhaW5zdCB0aGUgcHJvdmlkZWRcbiAgICAgKiBgb3duZXJEb2N1bWVudGAncyBgYmFzZVVSSWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5SZXNvbHZlVXJsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHQgQ1NTIHRleHQgdG8gcHJvY2Vzc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlc29sdmUgdGhlIFVSTCBhZ2FpbnN0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHRleHQgd2l0aCByZXNvbHZlZCBVUkwnc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVDc3MoY3NzVGV4dCwgYmFzZVVSSSkge1xuICAgICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShDU1NfVVJMX1JYLCBmdW5jdGlvbihtLCBwcmUsIHVybCwgcG9zdCkge1xuICAgICAgICByZXR1cm4gcHJlICsgJ1xcJycgK1xuICAgICAgICAgIHJlc29sdmVVcmwodXJsLnJlcGxhY2UoL1tcIiddL2csICcnKSwgYmFzZVVSSSkgK1xuICAgICAgICAgICdcXCcnICsgcG9zdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwYXRoIGZyb20gYSBnaXZlbiBgdXJsYC4gVGhlIHBhdGggaW5jbHVkZXMgdGhlIHRyYWlsaW5nXG4gICAgICogYC9gIGZyb20gdGhlIHVybC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlJlc29sdmVVcmxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIElucHV0IFVSTCB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHJlc29sdmVkIHBhdGhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXRoRnJvbVVybCh1cmwpIHtcbiAgICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciByZXNvbHZpbmcgcmVsYXRpdmUgVVJMJ3MuXG4gICAgICpcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICAgKiBAc3VtbWFyeSBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIHJlc29sdmluZyByZWxhdGl2ZSBVUkwncy5cbiAgICAgKi9cbiAgICBQb2x5bWVyLlJlc29sdmVVcmwgPSB7XG4gICAgICByZXNvbHZlQ3NzOiByZXNvbHZlQ3NzLFxuICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcbiAgICAgIHBhdGhGcm9tVXJsOiBwYXRoRnJvbVVybFxuICAgIH07XG5cbiAgfSkoKTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi8uLi9wb2x5bWVyL3BvbHltZXIuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL2lyb24tcmVzaXphYmxlLWJlaGF2aW9yL2lyb24tcmVzaXphYmxlLWJlaGF2aW9yLmh0bWxcIj5cblxuPHNjcmlwdD5cblxuICAvKipcbiAgICogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLkFwcExheW91dEJlaGF2aW9yXG4gICAqKi9cbiAgUG9seW1lci5BcHBMYXlvdXRCZWhhdmlvciA9IFtcbiAgICBQb2x5bWVyLklyb25SZXNpemFibGVCZWhhdmlvciwge1xuXG4gICAgbGlzdGVuZXJzOiB7XG4gICAgICAnYXBwLXJlc2V0LWxheW91dCc6ICdfYXBwUmVzZXRMYXlvdXRIYW5kbGVyJyxcbiAgICAgICdpcm9uLXJlc2l6ZSc6ICdyZXNldExheW91dCdcbiAgICB9LFxuXG4gICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5maXJlKCdhcHAtcmVzZXQtbGF5b3V0Jyk7XG4gICAgfSxcblxuICAgIF9hcHBSZXNldExheW91dEhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChQb2x5bWVyLmRvbShlKS5wYXRoWzBdID09PSB0aGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVzZXRMYXlvdXQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSxcblxuICAgIF91cGRhdGVMYXlvdXRTdGF0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5lcnJvcigndW5pbXBsZW1lbnRlZCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGxheW91dC4gSWYgeW91IGNoYW5nZWQgdGhlIHNpemUgb2YgdGhpcyBlbGVtZW50IHZpYSBDU1NcbiAgICAgKiB5b3UgY2FuIG5vdGlmeSB0aGUgY2hhbmdlcyBieSBlaXRoZXIgZmlyaW5nIHRoZSBgaXJvbi1yZXNpemVgIGV2ZW50XG4gICAgICogb3IgY2FsbGluZyBgcmVzZXRMYXlvdXRgIGRpcmVjdGx5LlxuICAgICAqXG4gICAgICogQG1ldGhvZCByZXNldExheW91dFxuICAgICAqL1xuICAgIHJlc2V0TGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFBvbHltZXIgdjIueFxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGNiID0gdGhpcy5fdXBkYXRlTGF5b3V0U3RhdGVzLmJpbmQodGhpcyk7XG4gICAgICBpZiAoUG9seW1lci5Bc3luYyAmJiBQb2x5bWVyLkFzeW5jLmFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2xheW91dERlYm91bmNlciA9IFBvbHltZXIuRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgICAgdGhpcy5fbGF5b3V0RGVib3VuY2VyLFxuICAgICAgICAgICAgUG9seW1lci5Bc3luYy5hbmltYXRpb25GcmFtZSxcbiAgICAgICAgICAgIGNiKTtcbiAgICAgICAgUG9seW1lci5lbnF1ZXVlRGVib3VuY2VyKHRoaXMuX2xheW91dERlYm91bmNlcik7XG4gICAgICB9XG4gICAgICAvLyBQb2x5bWVyIHYxLnhcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmRlYm91bmNlKCdyZXNldExheW91dCcsIGNiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX25vdGlmeURlc2NlbmRhbnRSZXNpemUoKTtcbiAgICB9LFxuXG4gICAgX25vdGlmeUxheW91dENoYW5nZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgLy8gVE9ETzogdGhlIGV2ZW50IGBhcHAtcmVzZXQtbGF5b3V0YCBjYW4gYmUgZmlyZWQgc3luY2hyb25vdXNseVxuICAgICAgLy8gYXMgbG9uZyBhcyBgX3VwZGF0ZUxheW91dFN0YXRlc2Agd2FpdHMgZm9yIGFsbCB0aGUgbWljcm90YXNrcyBhZnRlciByQUYuXG4gICAgICAvLyBFLmcuIHJlcXVlc3RBbmltYXRpb25GcmFtZShzZXRUaW1lT3V0KCkpXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZmlyZSgnYXBwLXJlc2V0LWxheW91dCcpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9ub3RpZnlEZXNjZW5kYW50UmVzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5pc0F0dGFjaGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ludGVyZXN0ZWRSZXNpemFibGVzLmZvckVhY2goZnVuY3Rpb24ocmVzaXphYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZXJTaG91bGROb3RpZnkocmVzaXphYmxlKSkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeURlc2NlbmRhbnQocmVzaXphYmxlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9taXhpbnMvcHJvcGVydHktZWZmZWN0cy5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vbWl4aW5zL211dGFibGUtZGF0YS5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBCYXNlIGNsYXNzIGZvciBIVE1MVGVtcGxhdGVFbGVtZW50IGV4dGVuc2lvbiB0aGF0IGhhcyBwcm9wZXJ0eSBlZmZlY3RzXG4gICAgLy8gbWFjaGluZXJ5IGZvciBwcm9wYWdhdGluZyBob3N0IHByb3BlcnRpZXMgdG8gY2hpbGRyZW4uIFRoaXMgaXMgYW4gRVM1XG4gICAgLy8gY2xhc3Mgb25seSBiZWNhdXNlIEJhYmVsIChpbmNvcnJlY3RseSkgcmVxdWlyZXMgc3VwZXIoKSBpbiB0aGUgY2xhc3NcbiAgICAvLyBjb25zdHJ1Y3RvciBldmVuIHRob3VnaCBubyBgdGhpc2AgaXMgdXNlZCBhbmQgaXQgcmV0dXJucyBhbiBpbnN0YW5jZS5cbiAgICBsZXQgbmV3SW5zdGFuY2UgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24oKSB7IHJldHVybiBuZXdJbnN0YW5jZTsgfVxuICAgIEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShIVE1MVGVtcGxhdGVFbGVtZW50LnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgICAqIEBleHRlbmRzIHtIVE1MVGVtcGxhdGVFbGVtZW50RXh0ZW5zaW9ufVxuICAgICAqL1xuICAgIGNvbnN0IERhdGFUZW1wbGF0ZSA9IFBvbHltZXIuUHJvcGVydHlFZmZlY3RzKEhUTUxUZW1wbGF0ZUVsZW1lbnRFeHRlbnNpb24pO1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICAgICAqIEBleHRlbmRzIHtEYXRhVGVtcGxhdGV9XG4gICAgICovXG4gICAgY29uc3QgTXV0YWJsZURhdGFUZW1wbGF0ZSA9IFBvbHltZXIuTXV0YWJsZURhdGEoRGF0YVRlbXBsYXRlKTtcblxuICAgIC8vIEFwcGxpZXMgYSBEYXRhVGVtcGxhdGUgc3ViY2xhc3MgdG8gYSA8dGVtcGxhdGU+IGluc3RhbmNlXG4gICAgZnVuY3Rpb24gdXBncmFkZVRlbXBsYXRlKHRlbXBsYXRlLCBjb25zdHJ1Y3Rvcikge1xuICAgICAgbmV3SW5zdGFuY2UgPSB0ZW1wbGF0ZTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0ZW1wbGF0ZSwgY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICAgIG5ldyBjb25zdHJ1Y3RvcigpO1xuICAgICAgbmV3SW5zdGFuY2UgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEJhc2UgY2xhc3MgZm9yIFRlbXBsYXRlSW5zdGFuY2Unc1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAgICAgKi9cbiAgICBjb25zdCBiYXNlID0gUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHMoY2xhc3Mge30pO1xuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAY3VzdG9tRWxlbWVudFxuICAgICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNcbiAgICAgKiBAdW5yZXN0cmljdGVkXG4gICAgICovXG4gICAgY2xhc3MgVGVtcGxhdGVJbnN0YW5jZUJhc2UgZXh0ZW5kcyBiYXNlIHtcbiAgICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyZVByb3BlcnRpZXMocHJvcHMpO1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9zdGFtcFRlbXBsYXRlKHRoaXMuX19kYXRhSG9zdCk7XG4gICAgICAgIC8vIFNhdmUgbGlzdCBvZiBzdGFtcGVkIGNoaWxkcmVuXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbiA9IHRoaXMucm9vdC5maXJzdENoaWxkOyBuOyBuPW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKG4pO1xuICAgICAgICAgIG4uX190ZW1wbGF0aXplSW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fdGVtcGxhdGl6ZU93bmVyICYmXG4gICAgICAgICAgdGhpcy5fX3RlbXBsYXRpemVPd25lci5fX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18pIHtcbiAgICAgICAgICB0aGlzLl9zaG93SGlkZUNoaWxkcmVuKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZsdXNoIHByb3BzIG9ubHkgd2hlbiBwcm9wcyBhcmUgcGFzc2VkIGlmIGluc3RhbmNlIHByb3BzIGV4aXN0XG4gICAgICAgIC8vIG9yIHdoZW4gdGhlcmUgaXNuJ3QgaW5zdGFuY2UgcHJvcHMuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fX3RlbXBsYXRpemVPcHRpb25zO1xuICAgICAgICBpZiAoKHByb3BzICYmIG9wdGlvbnMuaW5zdGFuY2VQcm9wcykgfHwgIW9wdGlvbnMuaW5zdGFuY2VQcm9wcykge1xuICAgICAgICAgIHRoaXMuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBDb25maWd1cmUgdGhlIGdpdmVuIGBwcm9wc2AgYnkgY2FsbGluZyBgX3NldFBlbmRpbmdQcm9wZXJ0eWAuIEFsc29cbiAgICAgICAqIHNldHMgYW55IHByb3BlcnRpZXMgc3RvcmVkIGluIGBfX2hvc3RQcm9wc2AuXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIE9iamVjdCBvZiBwcm9wZXJ0eSBuYW1lLXZhbHVlIHBhaXJzIHRvIHNldC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9jb25maWd1cmVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fX3RlbXBsYXRpemVPcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5mb3J3YXJkSG9zdFByb3ApIHtcbiAgICAgICAgICBmb3IgKGxldCBocHJvcCBpbiB0aGlzLl9faG9zdFByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoaHByb3AsIHRoaXMuX19kYXRhSG9zdFsnX2hvc3RfJyArIGhwcm9wXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEFueSBpbnN0YW5jZSBwcm9wcyBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIHdpbGwgb3ZlcndyaXRlIGhvc3QgcHJvcHM7XG4gICAgICAgIC8vIG5vcm1hbGx5IHRoaXMgd291bGQgYmUgYSB1c2VyIGVycm9yIGJ1dCB3ZSBkb24ndCBzcGVjaWZpY2FsbHkgZmlsdGVyIHRoZW1cbiAgICAgICAgZm9yIChsZXQgaXByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoaXByb3AsIHByb3BzW2lwcm9wXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRm9yd2FyZHMgYSBob3N0IHByb3BlcnR5IHRvIHRoaXMgaW5zdGFuY2UuICBUaGlzIG1ldGhvZCBzaG91bGQgYmVcbiAgICAgICAqIGNhbGxlZCBvbiBpbnN0YW5jZXMgZnJvbSB0aGUgYG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wYCBjYWxsYmFja1xuICAgICAgICogdG8gcHJvcGFnYXRlIGNoYW5nZXMgb2YgaG9zdCBwcm9wZXJ0aWVzIHRvIGVhY2ggaW5zdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBlbnF1ZXVlcyB0aGUgY2hhbmdlLCB3aGljaCBhcmUgZmx1c2hlZCBhcyBhIGJhdGNoLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG9yIHBhdGggbmFtZVxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvZiB0aGUgcHJvcGVydHkgdG8gZm9yd2FyZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgZm9yd2FyZEhvc3RQcm9wKHByb3AsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocHJvcCwgdmFsdWUsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhSG9zdC5fZW5xdWV1ZUNsaWVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlIE5vZGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGFkZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZXRob2RIb3N0ICYmIHRoaXMuX190ZW1wbGF0aXplT3B0aW9ucy5wYXJlbnRNb2RlbCkge1xuICAgICAgICAgIC8vIElmIHRoaXMgaW5zdGFuY2Ugc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBwYXJlbnQgbW9kZWwsIGRlY29yYXRlXG4gICAgICAgICAgLy8gZXZlbnRzIHRoaXMgdGVtcGxhdGUgaW5zdGFuY2UgYXMgYG1vZGVsYFxuICAgICAgICAgIHRoaXMuX21ldGhvZEhvc3QuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5tb2RlbCA9IHRoaXM7XG4gICAgICAgICAgICBoYW5kbGVyKGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBkZWxlZ2F0ZSB0byB0aGUgdGVtcGxhdGUncyBob3N0ICh3aGljaCBjb3VsZCBiZSlcbiAgICAgICAgICAvLyBhbm90aGVyIHRlbXBsYXRlIGluc3RhbmNlXG4gICAgICAgICAgbGV0IHRlbXBsYXRlSG9zdCA9IHRoaXMuX19kYXRhSG9zdC5fX2RhdGFIb3N0O1xuICAgICAgICAgIGlmICh0ZW1wbGF0ZUhvc3QpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlSG9zdC5fYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBTaG93cyBvciBoaWRlcyB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdG9wIGxldmVsIGNoaWxkIGVsZW1lbnRzLiBGb3JcbiAgICAgICAqIHRleHQgbm9kZXMsIGB0ZXh0Q29udGVudGAgaXMgcmVtb3ZlZCB3aGlsZSBcImhpZGRlblwiIGFuZCByZXBsYWNlZCB3aGVuXG4gICAgICAgKiBcInNob3duLlwiXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpZGUgU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgY2hpbGRyZW47XG4gICAgICAgKiBzZXQgdG8gZmFsc2UgdG8gc2hvdyB0aGVtLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZSkge1xuICAgICAgICBsZXQgYyA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IG4gPSBjW2ldO1xuICAgICAgICAgIC8vIElnbm9yZSBub24tY2hhbmdlc1xuICAgICAgICAgIGlmIChCb29sZWFuKGhpZGUpICE9IEJvb2xlYW4obi5fX2hpZGVUZW1wbGF0ZUNoaWxkcmVuX18pKSB7XG4gICAgICAgICAgICBpZiAobi5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICAgICAgICBuLl9fcG9seW1lclRleHRDb250ZW50X18gPSBuLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIG4udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuLnRleHRDb250ZW50ID0gbi5fX3BvbHltZXJUZXh0Q29udGVudF9fO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgYW5kIHJlcGxhY2Ugc2xvdFxuICAgICAgICAgICAgfSBlbHNlIGlmIChuLmxvY2FsTmFtZSA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgICAgICAgIGlmIChoaWRlKSB7XG4gICAgICAgICAgICAgICAgbi5fX3BvbHltZXJSZXBsYWNlZF9fID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnaGlkZGVuLXNsb3QnKTtcbiAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG4uX19wb2x5bWVyUmVwbGFjZWRfXywgbik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZSA9IG4uX19wb2x5bWVyUmVwbGFjZWRfXztcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgICAgICAgcmVwbGFjZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuLCByZXBsYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAobi5zdHlsZSkge1xuICAgICAgICAgICAgICBpZiAoaGlkZSkge1xuICAgICAgICAgICAgICAgIG4uX19wb2x5bWVyRGlzcGxheV9fID0gbi5zdHlsZS5kaXNwbGF5O1xuICAgICAgICAgICAgICAgIG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuLnN0eWxlLmRpc3BsYXkgPSBuLl9fcG9seW1lckRpc3BsYXlfXztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBuLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyA9IGhpZGU7XG4gICAgICAgICAgaWYgKG4uX3Nob3dIaWRlQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIG4uX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBkZWZhdWx0IHByb3BlcnR5LWVmZmVjdHMgaW1wbGVtZW50YXRpb24gdG8gaW50ZXJjZXB0XG4gICAgICAgKiB0ZXh0Q29udGVudCBiaW5kaW5ncyB3aGlsZSBjaGlsZHJlbiBhcmUgXCJoaWRkZW5cIiBhbmQgY2FjaGUgaW5cbiAgICAgICAqIHByaXZhdGUgc3RvcmFnZSBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc2V0IGEgcHJvcGVydHkgb25cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIGlmIChub2RlLl9faGlkZVRlbXBsYXRlQ2hpbGRyZW5fXyAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PSBOb2RlLlRFWFRfTk9ERSAmJiBwcm9wID09ICd0ZXh0Q29udGVudCcpIHtcbiAgICAgICAgICBub2RlLl9fcG9seW1lclRleHRDb250ZW50X18gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdXBlci5fc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZpbmQgdGhlIHBhcmVudCBtb2RlbCBvZiB0aGlzIHRlbXBsYXRlIGluc3RhbmNlLiAgVGhlIHBhcmVudCBtb2RlbFxuICAgICAgICogaXMgZWl0aGVyIGFub3RoZXIgdGVtcGxhdGl6ZSBpbnN0YW5jZSB0aGF0IGhhZCBvcHRpb24gYHBhcmVudE1vZGVsOiB0cnVlYCxcbiAgICAgICAqIG9yIGVsc2UgdGhlIGhvc3QgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IFRoZSBwYXJlbnQgbW9kZWwgb2YgdGhpcyBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBnZXQgcGFyZW50TW9kZWwoKSB7XG4gICAgICAgIGxldCBtb2RlbCA9IHRoaXMuX19wYXJlbnRNb2RlbDtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICAgIG1vZGVsID0gdGhpcztcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBBIHRlbXBsYXRlIGluc3RhbmNlJ3MgYF9fZGF0YUhvc3RgIGlzIGEgPHRlbXBsYXRlPlxuICAgICAgICAgICAgLy8gYG1vZGVsLl9fZGF0YUhvc3QuX19kYXRhSG9zdGAgaXMgdGhlIHRlbXBsYXRlJ3MgaG9zdFxuICAgICAgICAgICAgbW9kZWwgPSBtb2RlbC5fX2RhdGFIb3N0Ll9fZGF0YUhvc3Q7XG4gICAgICAgICAgfSB3aGlsZSAoKG9wdGlvbnMgPSBtb2RlbC5fX3RlbXBsYXRpemVPcHRpb25zKSAmJiAhb3B0aW9ucy5wYXJlbnRNb2RlbCk7XG4gICAgICAgICAgdGhpcy5fX3BhcmVudE1vZGVsID0gbW9kZWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFN0dWIgb2YgSFRNTEVsZW1lbnQncyBgZGlzcGF0Y2hFdmVudGAsIHNvIHRoYXQgZWZmZWN0cyB0aGF0IG1heVxuICAgICAgICogZGlzcGF0Y2ggZXZlbnRzIHNhZmVseSBuby1vcC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCB0byBkaXNwYXRjaFxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gQWx3YXlzIHRydWUuXG4gICAgICAgKi9cbiAgICAgICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7IURhdGFUZW1wbGF0ZX0gKi9cbiAgICBUZW1wbGF0ZUluc3RhbmNlQmFzZS5wcm90b3R5cGUuX19kYXRhSG9zdDtcbiAgICAvKiogQHR5cGUgeyFUZW1wbGF0aXplT3B0aW9uc30gKi9cbiAgICBUZW1wbGF0ZUluc3RhbmNlQmFzZS5wcm90b3R5cGUuX190ZW1wbGF0aXplT3B0aW9ucztcbiAgICAvKiogQHR5cGUgeyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gKi9cbiAgICBUZW1wbGF0ZUluc3RhbmNlQmFzZS5wcm90b3R5cGUuX21ldGhvZEhvc3Q7XG4gICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgIFRlbXBsYXRlSW5zdGFuY2VCYXNlLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPd25lcjtcbiAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgVGVtcGxhdGVJbnN0YW5jZUJhc2UucHJvdG90eXBlLl9faG9zdFByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGV4dGVuZHMge1RlbXBsYXRlSW5zdGFuY2VCYXNlfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX011dGFibGVEYXRhfVxuICAgICAqL1xuICAgIGNvbnN0IE11dGFibGVUZW1wbGF0ZUluc3RhbmNlQmFzZSA9IFBvbHltZXIuTXV0YWJsZURhdGEoVGVtcGxhdGVJbnN0YW5jZUJhc2UpO1xuXG4gICAgZnVuY3Rpb24gZmluZE1ldGhvZEhvc3QodGVtcGxhdGUpIHtcbiAgICAgIC8vIFRlY2huaWNhbGx5IHRoaXMgc2hvdWxkIGJlIHRoZSBvd25lciBvZiB0aGUgb3V0ZXJtb3N0IHRlbXBsYXRlLlxuICAgICAgLy8gSW4gc2hhZG93IGRvbSwgdGhpcyBpcyBhbHdheXMgZ2V0Um9vdE5vZGUoKS5ob3N0LCBidXQgd2UgY2FuXG4gICAgICAvLyBhcHByb3hpbWF0ZSB0aGlzIHZpYSBjb29wZXJhdGlvbiB3aXRoIG91ciBkYXRhSG9zdCBhbHdheXMgc2V0dGluZ1xuICAgICAgLy8gYF9tZXRob2RIb3N0YCBhcyBsb25nIGFzIHRoZXJlIHdlcmUgYmluZGluZ3MgKG9yIGlkJ3MpIG9uIHRoaXNcbiAgICAgIC8vIGluc3RhbmNlIGNhdXNpbmcgaXQgdG8gZ2V0IGEgZGF0YUhvc3QuXG4gICAgICBsZXQgdGVtcGxhdGVIb3N0ID0gdGVtcGxhdGUuX19kYXRhSG9zdDtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUhvc3QgJiYgdGVtcGxhdGVIb3N0Ll9tZXRob2RIb3N0IHx8IHRlbXBsYXRlSG9zdDtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuICAgIC8qKlxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IGNsYXNzLnByb3RvdHlwZSBpcyBub3QgZGVmaW5lZCBmb3Igc29tZSByZWFzb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUZW1wbGF0aXplckNsYXNzKHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG9wdGlvbnMpIHtcbiAgICAgIC8vIEFub255bW91cyBjbGFzcyBjcmVhdGVkIGJ5IHRoZSB0ZW1wbGF0aXplXG4gICAgICBsZXQgYmFzZSA9IG9wdGlvbnMubXV0YWJsZURhdGEgP1xuICAgICAgICBNdXRhYmxlVGVtcGxhdGVJbnN0YW5jZUJhc2UgOiBUZW1wbGF0ZUluc3RhbmNlQmFzZTtcbiAgICAgIC8qKlxuICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIGxldCBrbGFzcyA9IGNsYXNzIGV4dGVuZHMgYmFzZSB7IH07XG4gICAgICBrbGFzcy5wcm90b3R5cGUuX190ZW1wbGF0aXplT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBrbGFzcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBhZGROb3RpZnlFZmZlY3RzKGtsYXNzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBrbGFzcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBjbGFzcy5wcm90b3R5cGUgaXMgbm90IGRlZmluZWQgZm9yIHNvbWUgcmVhc29uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUHJvcGFnYXRlRWZmZWN0cyh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKSB7XG4gICAgICBsZXQgdXNlckZvcndhcmRIb3N0UHJvcCA9IG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wO1xuICAgICAgaWYgKHVzZXJGb3J3YXJkSG9zdFByb3ApIHtcbiAgICAgICAgLy8gUHJvdmlkZSBkYXRhIEFQSSBhbmQgcHJvcGVydHkgZWZmZWN0cyBvbiBtZW1vaXplZCB0ZW1wbGF0ZSBjbGFzc1xuICAgICAgICBsZXQga2xhc3MgPSB0ZW1wbGF0ZUluZm8udGVtcGxhdGl6ZVRlbXBsYXRlQ2xhc3M7XG4gICAgICAgIGlmICgha2xhc3MpIHtcbiAgICAgICAgICBsZXQgYmFzZSA9IG9wdGlvbnMubXV0YWJsZURhdGEgPyBNdXRhYmxlRGF0YVRlbXBsYXRlIDogRGF0YVRlbXBsYXRlO1xuICAgICAgICAgIGtsYXNzID0gdGVtcGxhdGVJbmZvLnRlbXBsYXRpemVUZW1wbGF0ZUNsYXNzID1cbiAgICAgICAgICAgIGNsYXNzIFRlbXBsYXRpemVkVGVtcGxhdGUgZXh0ZW5kcyBiYXNlIHt9O1xuICAgICAgICAgIC8vIEFkZCB0ZW1wbGF0ZSAtID5pbnN0YW5jZXMgZWZmZWN0c1xuICAgICAgICAgIC8vIGFuZCBob3N0IDwtIHRlbXBsYXRlIGVmZmVjdHNcbiAgICAgICAgICBsZXQgaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIGhvc3RQcm9wcykge1xuICAgICAgICAgICAga2xhc3MucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdCgnX2hvc3RfJyArIHByb3AsXG4gICAgICAgICAgICAgIGtsYXNzLnByb3RvdHlwZS5QUk9QRVJUWV9FRkZFQ1RfVFlQRVMuUFJPUEFHQVRFLFxuICAgICAgICAgICAgICB7Zm46IGNyZWF0ZUZvcndhcmRIb3N0UHJvcEVmZmVjdChwcm9wLCB1c2VyRm9yd2FyZEhvc3RQcm9wKX0pO1xuICAgICAgICAgICAga2xhc3MucHJvdG90eXBlLl9jcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eSgnX2hvc3RfJyArIHByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGdyYWRlVGVtcGxhdGUodGVtcGxhdGUsIGtsYXNzKTtcbiAgICAgICAgLy8gTWl4IGFueSBwcmUtYm91bmQgZGF0YSBpbnRvIF9fZGF0YTsgbm8gbmVlZCB0byBmbHVzaCB0aGlzIHRvXG4gICAgICAgIC8vIGluc3RhbmNlcyBzaW5jZSB0aGV5IHB1bGwgZnJvbSB0aGUgdGVtcGxhdGUgYXQgaW5zdGFuY2UtdGltZVxuICAgICAgICBpZiAodGVtcGxhdGUuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgICAvLyBOb3RlLCBnZW5lcmFsbHkgYF9fZGF0YVByb3RvYCBjb3VsZCBiZSBjaGFpbmVkLCBidXQgaXQncyBndWFyYW50ZWVkXG4gICAgICAgICAgLy8gdG8gbm90IGJlIHNpbmNlIHRoaXMgaXMgYSB2YW5pbGxhIHRlbXBsYXRlIHdlIGp1c3QgYWRkZWQgZWZmZWN0cyB0b1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24odGVtcGxhdGUuX19kYXRhLCB0ZW1wbGF0ZS5fX2RhdGFQcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYXIgYW55IHBlbmRpbmcgZGF0YSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgdGVtcGxhdGUuX19kYXRhVGVtcCA9IHt9O1xuICAgICAgICB0ZW1wbGF0ZS5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgICAgdGVtcGxhdGUuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgICAgdGVtcGxhdGUuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9yd2FyZEhvc3RQcm9wRWZmZWN0KGhvc3RQcm9wLCB1c2VyRm9yd2FyZEhvc3RQcm9wKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZm9yd2FyZEhvc3RQcm9wKHRlbXBsYXRlLCBwcm9wLCBwcm9wcykge1xuICAgICAgICB1c2VyRm9yd2FyZEhvc3RQcm9wLmNhbGwodGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIsXG4gICAgICAgICAgcHJvcC5zdWJzdHJpbmcoJ19ob3N0XycubGVuZ3RoKSwgcHJvcHNbcHJvcF0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGROb3RpZnlFZmZlY3RzKGtsYXNzLCB0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBvcHRpb25zKSB7XG4gICAgICBsZXQgaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyB8fCB7fTtcbiAgICAgIGZvciAobGV0IGlwcm9wIGluIG9wdGlvbnMuaW5zdGFuY2VQcm9wcykge1xuICAgICAgICBkZWxldGUgaG9zdFByb3BzW2lwcm9wXTtcbiAgICAgICAgbGV0IHVzZXJOb3RpZnlJbnN0YW5jZVByb3AgPSBvcHRpb25zLm5vdGlmeUluc3RhbmNlUHJvcDtcbiAgICAgICAgaWYgKHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApIHtcbiAgICAgICAgICBrbGFzcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5RWZmZWN0KGlwcm9wLFxuICAgICAgICAgICAga2xhc3MucHJvdG90eXBlLlBST1BFUlRZX0VGRkVDVF9UWVBFUy5OT1RJRlksXG4gICAgICAgICAgICB7Zm46IGNyZWF0ZU5vdGlmeUluc3RhbmNlUHJvcEVmZmVjdChpcHJvcCwgdXNlck5vdGlmeUluc3RhbmNlUHJvcCl9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wICYmIHRlbXBsYXRlLl9fZGF0YUhvc3QpIHtcbiAgICAgICAgZm9yIChsZXQgaHByb3AgaW4gaG9zdFByb3BzKSB7XG4gICAgICAgICAga2xhc3MucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChocHJvcCxcbiAgICAgICAgICAgIGtsYXNzLnByb3RvdHlwZS5QUk9QRVJUWV9FRkZFQ1RfVFlQRVMuTk9USUZZLFxuICAgICAgICAgICAge2ZuOiBjcmVhdGVOb3RpZnlIb3N0UHJvcEVmZmVjdCgpfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVOb3RpZnlJbnN0YW5jZVByb3BFZmZlY3QoaW5zdFByb3AsIHVzZXJOb3RpZnlJbnN0YW5jZVByb3ApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBub3RpZnlJbnN0YW5jZVByb3AoaW5zdCwgcHJvcCwgcHJvcHMpIHtcbiAgICAgICAgdXNlck5vdGlmeUluc3RhbmNlUHJvcC5jYWxsKGluc3QuX190ZW1wbGF0aXplT3duZXIsXG4gICAgICAgICAgaW5zdCwgcHJvcCwgcHJvcHNbcHJvcF0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVOb3RpZnlIb3N0UHJvcEVmZmVjdCgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBub3RpZnlIb3N0UHJvcChpbnN0LCBwcm9wLCBwcm9wcykge1xuICAgICAgICBpbnN0Ll9fZGF0YUhvc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aCgnX2hvc3RfJyArIHByb3AsIHByb3BzW3Byb3BdLCB0cnVlLCB0cnVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW9kdWxlIGZvciBwcmVwYXJpbmcgYW5kIHN0YW1waW5nIGluc3RhbmNlcyBvZiB0ZW1wbGF0ZXMgdGhhdCB1dGlsaXplXG4gICAgICogUG9seW1lcidzIGRhdGEtYmluZGluZyBhbmQgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXIgZmVhdHVyZXMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIC8vIEdldCBhIHRlbXBsYXRlIGZyb20gc29tZXdoZXJlLCBlLmcuIGxpZ2h0IERPTVxuICAgICAqICAgICBsZXQgdGVtcGxhdGUgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJyk7XG4gICAgICogICAgIC8vIFByZXBhcmUgdGhlIHRlbXBsYXRlXG4gICAgICogICAgIGxldCBUZW1wbGF0ZUNsYXNzID0gUG9seW1lci5UZW1wbGF0aXplLnRlbXBsYXRpemUodGVtcGxhdGUpO1xuICAgICAqICAgICAvLyBJbnN0YW5jZSB0aGUgdGVtcGxhdGUgd2l0aCBhbiBpbml0aWFsIGRhdGEgbW9kZWxcbiAgICAgKiAgICAgbGV0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlQ2xhc3Moe215UHJvcDogJ2luaXRpYWwnfSk7XG4gICAgICogICAgIC8vIEluc2VydCB0aGUgaW5zdGFuY2UncyBET00gc29tZXdoZXJlLCBlLmcuIGVsZW1lbnQncyBzaGFkb3cgRE9NXG4gICAgICogICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChpbnN0YW5jZS5yb290KTtcbiAgICAgKiAgICAgLy8gQ2hhbmdpbmcgYSBwcm9wZXJ0eSBvbiB0aGUgaW5zdGFuY2Ugd2lsbCBwcm9wYWdhdGUgdG8gYmluZGluZ3NcbiAgICAgKiAgICAgLy8gaW4gdGhlIHRlbXBsYXRlXG4gICAgICogICAgIGluc3RhbmNlLm15UHJvcCA9ICduZXcgdmFsdWUnO1xuICAgICAqXG4gICAgICogVGhlIGBvcHRpb25zYCBkaWN0aW9uYXJ5IHBhc3NlZCB0byBgdGVtcGxhdGl6ZWAgYWxsb3dzIGZvciBjdXN0b21pemluZ1xuICAgICAqIGZlYXR1cmVzIG9mIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgY2xhc3MsIGluY2x1ZGluZyBob3cgb3V0ZXItc2NvcGUgaG9zdFxuICAgICAqIHByb3BlcnRpZXMgc2hvdWxkIGJlIGZvcndhcmRlZCBpbnRvIHRlbXBsYXRlIGluc3RhbmNlcywgaG93IGFueSBpbnN0YW5jZVxuICAgICAqIHByb3BlcnRpZXMgYWRkZWQgaW50byB0aGUgdGVtcGxhdGUncyBzY29wZSBzaG91bGQgYmUgbm90aWZpZWQgb3V0IHRvXG4gICAgICogdGhlIGhvc3QsIGFuZCB3aGV0aGVyIHRoZSBpbnN0YW5jZSBzaG91bGQgYmUgZGVjb3JhdGVkIGFzIGEgXCJwYXJlbnQgbW9kZWxcIlxuICAgICAqIG9mIGFueSBldmVudCBoYW5kbGVycy5cbiAgICAgKlxuICAgICAqICAgICAvLyBDdXN0b21pemUgcHJvcGVydHkgZm9yd2FyZGluZyBhbmQgZXZlbnQgbW9kZWwgZGVjb3JhdGlvblxuICAgICAqICAgICBsZXQgVGVtcGxhdGVDbGFzcyA9IFBvbHltZXIuVGVtcGxhdGl6ZS50ZW1wbGF0aXplKHRlbXBsYXRlLCB0aGlzLCB7XG4gICAgICogICAgICAgcGFyZW50TW9kZWw6IHRydWUsXG4gICAgICogICAgICAgZm9yd2FyZEhvc3RQcm9wKHByb3BlcnR5LCB2YWx1ZSkgey4uLn0sXG4gICAgICogICAgICAgaW5zdGFuY2VQcm9wczogey4uLn0sXG4gICAgICogICAgICAgbm90aWZ5SW5zdGFuY2VQcm9wKGluc3RhbmNlLCBwcm9wZXJ0eSwgdmFsdWUpIHsuLi59LFxuICAgICAqICAgICB9KTtcbiAgICAgKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgICAqIEBzdW1tYXJ5IE1vZHVsZSBmb3IgcHJlcGFyaW5nIGFuZCBzdGFtcGluZyBpbnN0YW5jZXMgb2YgdGVtcGxhdGVzXG4gICAgICogICB1dGlsaXppbmcgUG9seW1lciB0ZW1wbGF0aW5nIGZlYXR1cmVzLlxuICAgICAqL1xuICAgIFBvbHltZXIuVGVtcGxhdGl6ZSA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIGFub255bW91cyBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIGNsYXNzIGJvdW5kIHRvIHRoZVxuICAgICAgICogYDx0ZW1wbGF0ZT5gIHByb3ZpZGVkLiAgSW5zdGFuY2luZyB0aGUgY2xhc3Mgd2lsbCByZXN1bHQgaW4gdGhlXG4gICAgICAgKiB0ZW1wbGF0ZSBiZWluZyBzdGFtcGVkIGludG8gYSBkb2N1bWVudCBmcmFnbWVudCBzdG9yZWQgYXMgdGhlIGluc3RhbmNlJ3NcbiAgICAgICAqIGByb290YCBwcm9wZXJ0eSwgYWZ0ZXIgd2hpY2ggaXQgY2FuIGJlIGFwcGVuZGVkIHRvIHRoZSBET00uXG4gICAgICAgKlxuICAgICAgICogVGVtcGxhdGVzIG1heSB1dGlsaXplIGFsbCBQb2x5bWVyIGRhdGEtYmluZGluZyBmZWF0dXJlcyBhcyB3ZWxsIGFzXG4gICAgICAgKiBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMuICBFdmVudCBsaXN0ZW5lcnMgYW5kIGlubGluZSBjb21wdXRpbmdcbiAgICAgICAqIGZ1bmN0aW9ucyBpbiB0aGUgdGVtcGxhdGUgd2lsbCBiZSBjYWxsZWQgb24gdGhlIGhvc3Qgb2YgdGhlIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBjb25zdHJ1Y3RvciByZXR1cm5lZCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCBkaWN0aW9uYXJ5IG9mIGluaXRpYWxcbiAgICAgICAqIHByb3BlcnR5IHZhbHVlcyB0byBwcm9wYWdhdGUgaW50byB0ZW1wbGF0ZSBiaW5kaW5ncy4gIEFkZGl0aW9uYWxseVxuICAgICAgICogaG9zdCBwcm9wZXJ0aWVzIGNhbiBiZSBmb3J3YXJkZWQgaW4sIGFuZCBpbnN0YW5jZSBwcm9wZXJ0aWVzIGNhbiBiZVxuICAgICAgICogbm90aWZpZWQgb3V0IGJ5IHByb3ZpZGluZyBvcHRpb25hbCBjYWxsYmFja3MgaW4gdGhlIGBvcHRpb25zYCBkaWN0aW9uYXJ5LlxuICAgICAgICpcbiAgICAgICAqIFZhbGlkIGNvbmZpZ3VyYXRpb24gaW4gYG9wdGlvbnNgIGFyZSBhcyBmb2xsb3dzOlxuICAgICAgICpcbiAgICAgICAqIC0gYGZvcndhcmRIb3N0UHJvcChwcm9wZXJ0eSwgdmFsdWUpYDogQ2FsbGVkIHdoZW4gYSBwcm9wZXJ0eSByZWZlcmVuY2VkXG4gICAgICAgKiAgIGluIHRoZSB0ZW1wbGF0ZSBjaGFuZ2VkIG9uIHRoZSB0ZW1wbGF0ZSdzIGhvc3QuIEFzIHRoaXMgbGlicmFyeSBkb2VzXG4gICAgICAgKiAgIG5vdCByZXRhaW4gcmVmZXJlbmNlcyB0byB0ZW1wbGF0ZXMgaW5zdGFuY2VkIGJ5IHRoZSB1c2VyLCBpdCBpcyB0aGVcbiAgICAgICAqICAgdGVtcGxhdGl6ZSBvd25lcidzIHJlc3BvbnNpYmlsaXR5IHRvIGZvcndhcmQgaG9zdCBwcm9wZXJ0eSBjaGFuZ2VzIGludG9cbiAgICAgICAqICAgdXNlci1zdGFtcGVkIGluc3RhbmNlcy4gIFRoZSBgaW5zdGFuY2UuZm9yd2FyZEhvc3RQcm9wKHByb3BlcnR5LCB2YWx1ZSlgXG4gICAgICAgKiAgICBtZXRob2Qgb24gdGhlIGdlbmVyYXRlZCBjbGFzcyBzaG91bGQgYmUgY2FsbGVkIHRvIGZvcndhcmQgaG9zdFxuICAgICAgICogICBwcm9wZXJ0aWVzIGludG8gdGhlIHRlbXBsYXRlIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcHJvcGVydHktY2hhbmdlZFxuICAgICAgICogICBub3RpZmljYXRpb25zLiBBbnkgcHJvcGVydGllcyByZWZlcmVuY2VkIGluIHRoZSB0ZW1wbGF0ZSB0aGF0IGFyZSBub3RcbiAgICAgICAqICAgZGVmaW5lZCBpbiBgaW5zdGFuY2VQcm9wc2Agd2lsbCBiZSBub3RpZmllZCB1cCB0byB0aGUgdGVtcGxhdGUncyBob3N0XG4gICAgICAgKiAgIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgKiAtIGBpbnN0YW5jZVByb3BzYDogRGljdGlvbmFyeSBvZiBwcm9wZXJ0eSBuYW1lcyB0aGF0IHdpbGwgYmUgYWRkZWRcbiAgICAgICAqICAgdG8gdGhlIGluc3RhbmNlIGJ5IHRoZSB0ZW1wbGF0aXplIG93bmVyLiAgVGhlc2UgcHJvcGVydGllcyBzaGFkb3cgYW55XG4gICAgICAgKiAgIGhvc3QgcHJvcGVydGllcywgYW5kIGNoYW5nZXMgd2l0aGluIHRoZSB0ZW1wbGF0ZSB0byB0aGVzZSBwcm9wZXJ0aWVzXG4gICAgICAgKiAgIHdpbGwgcmVzdWx0IGluIGBub3RpZnlJbnN0YW5jZVByb3BgIGJlaW5nIGNhbGxlZC5cbiAgICAgICAqIC0gYG11dGFibGVEYXRhYDogV2hlbiBgdHJ1ZWAsIHRoZSBnZW5lcmF0ZWQgY2xhc3Mgd2lsbCBza2lwIHN0cmljdFxuICAgICAgICogICBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIChhbHdheXMgY29uc2lkZXIgdGhlbSB0byBiZVxuICAgICAgICogICBcImRpcnR5XCIpLlxuICAgICAgICogLSBgbm90aWZ5SW5zdGFuY2VQcm9wKGluc3RhbmNlLCBwcm9wZXJ0eSwgdmFsdWUpYDogQ2FsbGVkIHdoZW5cbiAgICAgICAqICAgYW4gaW5zdGFuY2UgcHJvcGVydHkgY2hhbmdlcy4gIFVzZXJzIG1heSBjaG9vc2UgdG8gY2FsbCBgbm90aWZ5UGF0aGBcbiAgICAgICAqICAgb24gZS5nLiB0aGUgb3duZXIgdG8gbm90aWZ5IHRoZSBjaGFuZ2UuXG4gICAgICAgKiAtIGBwYXJlbnRNb2RlbGA6IFdoZW4gYHRydWVgLCBldmVudHMgaGFuZGxlZCBieSBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAqICAgKGBvbi1ldmVudD1cImhhbmRsZXJcImApIHdpbGwgYmUgZGVjb3JhdGVkIHdpdGggYSBgbW9kZWxgIHByb3BlcnR5IHBvaW50aW5nXG4gICAgICAgKiAgIHRvIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0aGF0IHN0YW1wZWQgaXQuICBJdCB3aWxsIGFsc28gYmUgcmV0dXJuZWRcbiAgICAgICAqICAgZnJvbSBgaW5zdGFuY2UucGFyZW50TW9kZWxgIGluIGNhc2VzIHdoZXJlIHRlbXBsYXRlIGluc3RhbmNlIG5lc3RpbmdcbiAgICAgICAqICAgY2F1c2VzIGFuIGlubmVyIG1vZGVsIHRvIHNoYWRvdyBhbiBvdXRlciBtb2RlbC5cbiAgICAgICAqXG4gICAgICAgKiBBbGwgY2FsbGJhY2tzIGFyZSBjYWxsZWQgYm91bmQgdG8gdGhlIGBvd25lcmAuIEFueSBjb250ZXh0XG4gICAgICAgKiBuZWVkZWQgZm9yIHRoZSBjYWxsYmFja3MgKHN1Y2ggYXMgcmVmZXJlbmNlcyB0byBgaW5zdGFuY2VzYCBzdGFtcGVkKVxuICAgICAgICogc2hvdWxkIGJlIHN0b3JlZCBvbiB0aGUgYG93bmVyYCBzdWNoIHRoYXQgdGhleSBjYW4gYmUgcmV0cmlldmVkIHZpYVxuICAgICAgICogYHRoaXNgLlxuICAgICAgICpcbiAgICAgICAqIFdoZW4gYG9wdGlvbnMuZm9yd2FyZEhvc3RQcm9wYCBpcyBkZWNsYXJlZCBhcyBhbiBvcHRpb24sIGFueSBwcm9wZXJ0aWVzXG4gICAgICAgKiByZWZlcmVuY2VkIGluIHRoZSB0ZW1wbGF0ZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIGZyb20gdGhlIGhvc3Qgb2ZcbiAgICAgICAqIHRoZSBgPHRlbXBsYXRlPmAgdG8gaW5zdGFuY2VzLCB3aXRoIHRoZSBleGNlcHRpb24gb2YgYW55IHByb3BlcnRpZXMgbGlzdGVkIGluXG4gICAgICAgKiB0aGUgYG9wdGlvbnMuaW5zdGFuY2VQcm9wc2Agb2JqZWN0LiAgYGluc3RhbmNlUHJvcHNgIGFyZSBhc3N1bWVkIHRvIGJlXG4gICAgICAgKiBtYW5hZ2VkIGJ5IHRoZSBvd25lciBvZiB0aGUgaW5zdGFuY2VzLCBlaXRoZXIgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgKiBvciBzZXQgYWZ0ZXIgdGhlIGZhY3QuICBOb3RlLCBhbnkgcHJvcGVydGllcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3Igd2lsbFxuICAgICAgICogYWx3YXlzIGJlIHNldCB0byB0aGUgaW5zdGFuY2UgKHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5IHdvdWxkIG5vcm1hbGx5XG4gICAgICAgKiBiZSBmb3J3YXJkZWQgZnJvbSB0aGUgaG9zdCkuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0IGB0ZW1wbGF0aXplKClgIGNhbiBiZSBydW4gb25seSBvbmNlIGZvciBhIGdpdmVuIGA8dGVtcGxhdGU+YC5cbiAgICAgICAqIEZ1cnRoZXIgY2FsbHMgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IuIEFsc28sIHRoZXJlIGlzIGEgc3BlY2lhbFxuICAgICAgICogYmVoYXZpb3IgaWYgdGhlIHRlbXBsYXRlIHdhcyBkdXBsaWNhdGVkIHRocm91Z2ggYSBtZWNoYW5pc20gc3VjaCBhc1xuICAgICAgICogYDxkb20tcmVwZWF0PmAgb3IgYDx0ZXN0LWZpeHR1cmU+YC4gSW4gdGhpcyBjYXNlLCBhbGwgY2FsbHMgdG9cbiAgICAgICAqIGB0ZW1wbGF0aXplKClgIHJldHVybiB0aGUgc2FtZSBjbGFzcyBmb3IgYWxsIGR1cGxpY2F0ZXMgb2YgYSB0ZW1wbGF0ZS5cbiAgICAgICAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIGB0ZW1wbGF0aXplKClgIGlzIGdlbmVyYXRlZCBvbmx5IG9uY2UgdXNpbmdcbiAgICAgICAqIHRoZSBgb3B0aW9uc2AgZnJvbSB0aGUgZmlyc3QgY2FsbC4gVGhpcyBtZWFucyB0aGF0IGFueSBgb3B0aW9uc2BcbiAgICAgICAqIHByb3ZpZGVkIHRvIHN1YnNlcXVlbnQgY2FsbHMgd2lsbCBiZSBpZ25vcmVkLiBUaGVyZWZvcmUsIGl0IGlzIHZlcnlcbiAgICAgICAqIGltcG9ydGFudCBub3QgdG8gY2xvc2Ugb3ZlciBhbnkgdmFyaWFibGVzIGluc2lkZSB0aGUgY2FsbGJhY2tzLiBBbHNvLFxuICAgICAgICogYXJyb3cgZnVuY3Rpb25zIG11c3QgYmUgYXZvaWRlZCBiZWNhdXNlIHRoZXkgYmluZCB0aGUgb3V0ZXIgYHRoaXNgLlxuICAgICAgICogSW5zaWRlIHRoZSBjYWxsYmFja3MsIGFueSBjb250ZXh0dWFsIGluZm9ybWF0aW9uIGNhbiBiZSBhY2Nlc3NlZFxuICAgICAgICogdGhyb3VnaCBgdGhpc2AsIHdoaWNoIHBvaW50cyB0byB0aGUgYG93bmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5UZW1wbGF0aXplXG4gICAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byB0ZW1wbGF0aXplXG4gICAgICAgKiBAcGFyYW0ge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzPX0gb3duZXIgT3duZXIgb2YgdGhlIHRlbXBsYXRlIGluc3RhbmNlcztcbiAgICAgICAqICAgYW55IG9wdGlvbmFsIGNhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoaXMgb3duZXIuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBkaWN0aW9uYXJ5IChzZWUgc3VtbWFyeSBmb3IgZGV0YWlscylcbiAgICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUZW1wbGF0ZUluc3RhbmNlQmFzZSl9IEdlbmVyYXRlZCBjbGFzcyBib3VuZCB0byB0aGUgdGVtcGxhdGVcbiAgICAgICAqICAgcHJvdmlkZWRcbiAgICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgICAgICovXG4gICAgICB0ZW1wbGF0aXplKHRlbXBsYXRlLCBvd25lciwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshVGVtcGxhdGl6ZU9wdGlvbnN9ICovKG9wdGlvbnMgfHwge30pO1xuICAgICAgICBpZiAodGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgPHRlbXBsYXRlPiBjYW4gb25seSBiZSB0ZW1wbGF0aXplZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUuX190ZW1wbGF0aXplT3duZXIgPSBvd25lcjtcbiAgICAgICAgY29uc3QgY3RvciA9IG93bmVyID8gb3duZXIuY29uc3RydWN0b3IgOiBUZW1wbGF0ZUluc3RhbmNlQmFzZTtcbiAgICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IGN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAvLyBHZXQgbWVtb2l6ZWQgYmFzZSBjbGFzcyBmb3IgdGhlIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSwgd2hpY2hcbiAgICAgICAgLy8gaW5jbHVkZXMgcHJvcGVydHkgZWZmZWN0cyBmb3IgYmluZGluZyB0ZW1wbGF0ZSAmIGZvcndhcmRpbmdcbiAgICAgICAgbGV0IGJhc2VDbGFzcyA9IHRlbXBsYXRlSW5mby50ZW1wbGF0aXplSW5zdGFuY2VDbGFzcztcbiAgICAgICAgaWYgKCFiYXNlQ2xhc3MpIHtcbiAgICAgICAgICBiYXNlQ2xhc3MgPSBjcmVhdGVUZW1wbGF0aXplckNsYXNzKHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG9wdGlvbnMpO1xuICAgICAgICAgIHRlbXBsYXRlSW5mby50ZW1wbGF0aXplSW5zdGFuY2VDbGFzcyA9IGJhc2VDbGFzcztcbiAgICAgICAgfVxuICAgICAgICAvLyBIb3N0IHByb3BlcnR5IGZvcndhcmRpbmcgbXVzdCBiZSBpbnN0YWxsZWQgb250byB0ZW1wbGF0ZSBpbnN0YW5jZVxuICAgICAgICBhZGRQcm9wYWdhdGVFZmZlY3RzKHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG9wdGlvbnMpO1xuICAgICAgICAvLyBTdWJjbGFzcyBiYXNlIGNsYXNzIGFuZCBhZGQgcmVmZXJlbmNlIGZvciB0aGlzIHNwZWNpZmljIHRlbXBsYXRlXG4gICAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgICBsZXQga2xhc3MgPSBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIGV4dGVuZHMgYmFzZUNsYXNzIHt9O1xuICAgICAgICBrbGFzcy5wcm90b3R5cGUuX21ldGhvZEhvc3QgPSBmaW5kTWV0aG9kSG9zdCh0ZW1wbGF0ZSk7XG4gICAgICAgIGtsYXNzLnByb3RvdHlwZS5fX2RhdGFIb3N0ID0gdGVtcGxhdGU7XG4gICAgICAgIGtsYXNzLnByb3RvdHlwZS5fX3RlbXBsYXRpemVPd25lciA9IG93bmVyO1xuICAgICAgICBrbGFzcy5wcm90b3R5cGUuX19ob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzO1xuICAgICAgICBrbGFzcyA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24obmV3OlRlbXBsYXRlSW5zdGFuY2VCYXNlKX0gKi8oa2xhc3MpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgICAgcmV0dXJuIGtsYXNzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBcIm1vZGVsXCIgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gZWxlbWVudCwgd2hpY2hcbiAgICAgICAqIHNlcnZlcyBhcyB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRoZSBlbGVtZW50IGlzXG4gICAgICAgKiBjb250YWluZWQgaW4uIEEgdGVtcGxhdGUgbW9kZWwgaXMgYW4gaW5zdGFuY2Ugb2ZcbiAgICAgICAqIGBUZW1wbGF0ZUluc3RhbmNlQmFzZWAsIGFuZCBzaG91bGQgYmUgdXNlZCB0byBtYW5pcHVsYXRlIGRhdGFcbiAgICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRlbXBsYXRlIGluc3RhbmNlLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKlxuICAgICAgICogICBsZXQgbW9kZWwgPSBtb2RlbEZvckVsZW1lbnQoZWwpO1xuICAgICAgICogICBpZiAobW9kZWwuaW5kZXggPCAxMCkge1xuICAgICAgICogICAgIG1vZGVsLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgKiAgIH1cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5UZW1wbGF0aXplXG4gICAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRoZSBtb2RlbCB3aWxsIGJlIHJldHVybmVkIGZvclxuICAgICAgICogICBlbGVtZW50cyBzdGFtcGVkIGZyb20gdGhpcyB0ZW1wbGF0ZVxuICAgICAgICogQHBhcmFtIHtOb2RlPX0gbm9kZSBOb2RlIGZvciB3aGljaCB0byByZXR1cm4gYSB0ZW1wbGF0ZSBtb2RlbC5cbiAgICAgICAqIEByZXR1cm4ge1RlbXBsYXRlSW5zdGFuY2VCYXNlfSBUZW1wbGF0ZSBpbnN0YW5jZSByZXByZXNlbnRpbmcgdGhlXG4gICAgICAgKiAgIGJpbmRpbmcgc2NvcGUgZm9yIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgIG1vZGVsRm9yRWxlbWVudCh0ZW1wbGF0ZSwgbm9kZSkge1xuICAgICAgICBsZXQgbW9kZWw7XG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgLy8gQW4gZWxlbWVudCB3aXRoIGEgX190ZW1wbGF0aXplSW5zdGFuY2UgbWFya3MgdGhlIHRvcCBib3VuZGFyeVxuICAgICAgICAgIC8vIG9mIGEgc2NvcGU7IHdhbGsgdXAgdW50aWwgd2UgZmluZCBvbmUsIGFuZCB0aGVuIGVuc3VyZSB0aGF0XG4gICAgICAgICAgLy8gaXRzIF9fZGF0YUhvc3QgbWF0Y2hlcyBgdGhpc2AsIG1lYW5pbmcgdGhpcyBkb20tcmVwZWF0IHN0YW1wZWQgaXRcbiAgICAgICAgICBpZiAoKG1vZGVsID0gbm9kZS5fX3RlbXBsYXRpemVJbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIC8vIEZvdW5kIGFuIGVsZW1lbnQgc3RhbXBlZCBieSBhbm90aGVyIHRlbXBsYXRlOyBrZWVwIHdhbGtpbmcgdXBcbiAgICAgICAgICAgIC8vIGZyb20gaXRzIF9fZGF0YUhvc3RcbiAgICAgICAgICAgIGlmIChtb2RlbC5fX2RhdGFIb3N0ICE9IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIG5vZGUgPSBtb2RlbC5fX2RhdGFIb3N0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTdGlsbCBpbiBhIHRlbXBsYXRlIHNjb3BlLCBrZWVwIGdvaW5nIHVwIHVudGlsXG4gICAgICAgICAgICAvLyBhIF9fdGVtcGxhdGl6ZUluc3RhbmNlIGlzIGZvdW5kXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUG9seW1lci5UZW1wbGF0ZUluc3RhbmNlQmFzZSA9IFRlbXBsYXRlSW5zdGFuY2VCYXNlO1xuXG4gIH0pKCk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvb3QuaHRtbFwiPlxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGxldCBkZWJvdW5jZXJRdWV1ZSA9IFtdO1xuXG4gIC8qKlxuICAgKiBBZGRzIGEgYFBvbHltZXIuRGVib3VuY2VyYCB0byBhIGxpc3Qgb2YgZ2xvYmFsbHkgZmx1c2hhYmxlIHRhc2tzLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAcGFyYW0geyFQb2x5bWVyLkRlYm91bmNlcn0gZGVib3VuY2VyIERlYm91bmNlciB0byBlbnF1ZXVlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIgPSBmdW5jdGlvbihkZWJvdW5jZXIpIHtcbiAgICBkZWJvdW5jZXJRdWV1ZS5wdXNoKGRlYm91bmNlcik7XG4gIH07XG5cbiAgZnVuY3Rpb24gZmx1c2hEZWJvdW5jZXJzKCkge1xuICAgIGNvbnN0IGRpZEZsdXNoID0gQm9vbGVhbihkZWJvdW5jZXJRdWV1ZS5sZW5ndGgpO1xuICAgIHdoaWxlIChkZWJvdW5jZXJRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlYm91bmNlclF1ZXVlLnNoaWZ0KCkuZmx1c2goKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZEZsdXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlcyBzZXZlcmFsIGNsYXNzZXMgb2YgYXN5bmNocm9ub3VzbHkgcXVldWVkIHRhc2tzIHRvIGZsdXNoOlxuICAgKiAtIERlYm91bmNlcnMgYWRkZWQgdmlhIGBlbnF1ZXVlRGVib3VuY2VyYFxuICAgKiAtIFNoYWR5RE9NIGRpc3RyaWJ1dGlvblxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgUG9seW1lci5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzaGFkeURPTSwgZGVib3VuY2VycztcbiAgICBkbyB7XG4gICAgICBzaGFkeURPTSA9IHdpbmRvdy5TaGFkeURPTSAmJiBTaGFkeURPTS5mbHVzaCgpO1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0pIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLmZsdXNoKCk7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZXJzID0gZmx1c2hEZWJvdW5jZXJzKCk7XG4gICAgfSB3aGlsZSAoc2hhZHlET00gfHwgZGVib3VuY2Vycyk7XG4gIH07XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJtaXhpbi5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYXN5bmMuaHRtbFwiPlxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IENvbGxhcHNlIG11bHRpcGxlIGNhbGxiYWNrcyBpbnRvIG9uZSBpbnZvY2F0aW9uIGFmdGVyIGEgdGltZXIuXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqL1xuICBjbGFzcyBEZWJvdW5jZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fYXN5bmNNb2R1bGUgPSBudWxsO1xuICAgICAgdGhpcy5fY2FsbGJhY2sgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzY2hlZHVsZXI7IHRoYXQgaXMsIGEgbW9kdWxlIHdpdGggdGhlIEFzeW5jIGludGVyZmFjZSxcbiAgICAgKiBhIGNhbGxiYWNrIGFuZCBvcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBydW4gZnVuY3Rpb25cbiAgICAgKiBmcm9tIHRoZSBhc3luYyBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFBc3luY0ludGVyZmFjZX0gYXN5bmNNb2R1bGUgT2JqZWN0IHdpdGggQXN5bmMgaW50ZXJmYWNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gcnVuLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc2V0Q29uZmlnKGFzeW5jTW9kdWxlLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5fYXN5bmNNb2R1bGUgPSBhc3luY01vZHVsZTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLl90aW1lciA9IHRoaXMuX2FzeW5jTW9kdWxlLnJ1bigoKSA9PiB7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFuIGFjdGl2ZSBkZWJvdW5jZXIgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gaXRzZWxmLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjYW5jZWwoKSB7XG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgIHRoaXMuX2FzeW5jTW9kdWxlLmNhbmNlbCh0aGlzLl90aW1lcik7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmx1c2hlcyBhbiBhY3RpdmUgZGVib3VuY2VyIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZmx1c2goKSB7XG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZGVib3VuY2VyIGlzIGFjdGl2ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYWN0aXZlLlxuICAgICAqL1xuICAgIGlzQWN0aXZlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RpbWVyICE9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZXIgaWYgbm8gZGVib3VuY2VyIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlclxuICAgICAqIG9yIGl0IGNhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlciBvdGhlcndpc2UuIFRoZSBmb2xsb3dpbmdcbiAgICAgKiBleGFtcGxlIHNob3dzIGhvdyBhIGRlYm91bmNlciBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGhpbiBhXG4gICAgICogbWljcm90YXNrIGFuZCBcImRlYm91bmNlZFwiIHN1Y2ggdGhhdCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24gaXNcbiAgICAgKiBjYWxsZWQgb25jZS4gQWRkIHRoaXMgbWV0aG9kIHRvIGEgY3VzdG9tIGVsZW1lbnQ6XG4gICAgICpcbiAgICAgKiBfZGVib3VuY2VXb3JrKCkge1xuICAgICAqICAgdGhpcy5fZGVib3VuY2VKb2IgPSBQb2x5bWVyLkRlYm91bmNlci5kZWJvdW5jZSh0aGlzLl9kZWJvdW5jZUpvYixcbiAgICAgKiAgICAgICBQb2x5bWVyLkFzeW5jLm1pY3JvVGFzaywgKCkgPT4ge1xuICAgICAqICAgICB0aGlzLl9kb1dvcmsoKTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIElmIHRoZSBgX2RlYm91bmNlV29ya2AgbWV0aG9kIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoaW4gdGhlIHNhbWVcbiAgICAgKiBtaWNyb3Rhc2ssIHRoZSBgX2RvV29ya2AgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlIGF0IHRoZSBuZXh0XG4gICAgICogbWljcm90YXNrIGNoZWNrcG9pbnQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBJbiB0ZXN0aW5nIGl0IGlzIG9mdGVuIGNvbnZlbmllbnQgdG8gYXZvaWQgYXN5bmNocm9ueS4gVG8gYWNjb21wbGlzaFxuICAgICAqIHRoaXMgd2l0aCBhIGRlYm91bmNlciwgeW91IGNhbiB1c2UgYFBvbHltZXIuZW5xdWV1ZURlYm91bmNlcmAgYW5kXG4gICAgICogYFBvbHltZXIuZmx1c2hgLiBGb3IgZXhhbXBsZSwgZXh0ZW5kIHRoZSBhYm92ZSBleGFtcGxlIGJ5IGFkZGluZ1xuICAgICAqIGBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIodGhpcy5fZGVib3VuY2VKb2IpYCBhdCB0aGUgZW5kIG9mIHRoZVxuICAgICAqIGBfZGVib3VuY2VXb3JrYCBtZXRob2QuIFRoZW4gaW4gYSB0ZXN0LCBjYWxsIGBQb2x5bWVyLmZsdXNoYCB0byBlbnN1cmVcbiAgICAgKiB0aGUgZGVib3VuY2VyIGhhcyBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RlYm91bmNlcj99IGRlYm91bmNlciBEZWJvdW5jZXIgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7IUFzeW5jSW50ZXJmYWNlfSBhc3luY01vZHVsZSBPYmplY3Qgd2l0aCBBc3luYyBpbnRlcmZhY2VcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHshRGVib3VuY2VyfSBSZXR1cm5zIGEgZGVib3VuY2VyIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGVib3VuY2UoZGVib3VuY2VyLCBhc3luY01vZHVsZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChkZWJvdW5jZXIgaW5zdGFuY2VvZiBEZWJvdW5jZXIpIHtcbiAgICAgICAgZGVib3VuY2VyLmNhbmNlbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVib3VuY2VyID0gbmV3IERlYm91bmNlcigpO1xuICAgICAgfVxuICAgICAgZGVib3VuY2VyLnNldENvbmZpZyhhc3luY01vZHVsZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGRlYm91bmNlcjtcbiAgICB9XG4gIH1cblxuICBQb2x5bWVyLkRlYm91bmNlciA9IERlYm91bmNlcjtcbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2Jvb3QuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL21peGluLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9wYXRoLmh0bWxcIj5cbjwhLS0gZm9yIG5vdGlmeSwgcmVmbGVjdCAtLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9jYXNlLW1hcC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwicHJvcGVydHktYWNjZXNzb3JzLmh0bWxcIj5cbjwhLS0gZm9yIGFubm90YXRlZCBlZmZlY3RzIC0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cInRlbXBsYXRlLXN0YW1wLmh0bWxcIj5cblxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKiogQGNvbnN0IHtPYmplY3R9ICovXG4gIGNvbnN0IENhc2VNYXAgPSBQb2x5bWVyLkNhc2VNYXA7XG5cbiAgLy8gTW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIHVuaXF1ZSBJRCB1c2VkIGZvciBkZS1kdXBpbmcgZWZmZWN0cyB0cmlnZ2VyZWRcbiAgLy8gZnJvbSBtdWx0aXBsZSBwcm9wZXJ0aWVzIGluIHRoZSBzYW1lIHR1cm5cbiAgbGV0IGRlZHVwZUlkID0gMDtcblxuICAvKipcbiAgICogUHJvcGVydHkgZWZmZWN0IHR5cGVzOyBlZmZlY3RzIGFyZSBzdG9yZWQgb24gdGhlIHByb3RvdHlwZSB1c2luZyB0aGVzZSBrZXlzXG4gICAqIEBlbnVtIHtzdHJpbmd9XG4gICAqL1xuICBjb25zdCBUWVBFUyA9IHtcbiAgICBDT01QVVRFOiAnX19jb21wdXRlRWZmZWN0cycsXG4gICAgUkVGTEVDVDogJ19fcmVmbGVjdEVmZmVjdHMnLFxuICAgIE5PVElGWTogJ19fbm90aWZ5RWZmZWN0cycsXG4gICAgUFJPUEFHQVRFOiAnX19wcm9wYWdhdGVFZmZlY3RzJyxcbiAgICBPQlNFUlZFOiAnX19vYnNlcnZlRWZmZWN0cycsXG4gICAgUkVBRF9PTkxZOiAnX19yZWFkT25seSdcbiAgfTtcblxuICAvKiogQGNvbnN0IHtzdHJpbmd9ICovXG4gIGNvbnN0IGNhcGl0YWxBdHRyaWJ1dGVSZWdleCA9IC9bQS1aXS87XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHt7XG4gICAqIG5hbWU6IChzdHJpbmcgfCB1bmRlZmluZWQpLFxuICAgKiBzdHJ1Y3R1cmVkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZCksXG4gICAqIHdpbGRjYXJkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZClcbiAgICogfX1cbiAgICovXG4gIGxldCBEYXRhVHJpZ2dlcjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHt7XG4gICAqIGluZm86ID8sXG4gICAqIHRyaWdnZXI6ICghRGF0YVRyaWdnZXIgfCB1bmRlZmluZWQpLFxuICAgKiBmbjogKCFGdW5jdGlvbiB8IHVuZGVmaW5lZClcbiAgICogfX1cbiAgICovXG4gIGxldCBEYXRhRWZmZWN0OyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICBsZXQgUHJvcGVydHlFZmZlY3RzVHlwZTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLyoqXG4gICAqIEVuc3VyZXMgdGhhdCB0aGUgbW9kZWwgaGFzIGFuIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGUuXG4gICAqIFRoZSBtb2RlbCBtYXkgYmUgYSBwcm90b3R5cGUgb3IgYW4gaW5zdGFuY2UuXG4gICAqXG4gICAqIFByb3BlcnR5IGVmZmVjdHMgYXJlIHN0b3JlZCBhcyBhcnJheXMgb2YgZWZmZWN0cyBieSBwcm9wZXJ0eSBpbiBhIG1hcCxcbiAgICogYnkgbmFtZWQgdHlwZSBvbiB0aGUgbW9kZWwuIGUuZy5cbiAgICpcbiAgICogICBfX2NvbXB1dGVFZmZlY3RzOiB7XG4gICAqICAgICBmb286IFsgLi4uIF0sXG4gICAqICAgICBiYXI6IFsgLi4uIF1cbiAgICogICB9XG4gICAqXG4gICAqIElmIHRoZSBtb2RlbCBkb2VzIG5vdCB5ZXQgaGF2ZSBhbiBlZmZlY3QgbWFwIGZvciB0aGUgdHlwZSwgb25lIGlzIGNyZWF0ZWRcbiAgICogYW5kIHJldHVybmVkLiAgSWYgaXQgZG9lcywgYnV0IGl0IGlzIG5vdCBhbiBvd24gcHJvcGVydHkgKGkuZS4gdGhlXG4gICAqIHByb3RvdHlwZSBoYWQgZWZmZWN0cyksIHRoZSB0aGUgbWFwIGlzIGRlZXBseSBjbG9uZWQgYW5kIHRoZSBjb3B5IGlzXG4gICAqIHNldCBvbiB0aGUgbW9kZWwgYW5kIHJldHVybmVkLCByZWFkeSBmb3IgbmV3IGVmZmVjdHMgdG8gYmUgYWRkZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgUHJvcGVydHkgZWZmZWN0IHR5cGVcbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgb3duLXByb3BlcnR5IG1hcCBvZiBlZmZlY3RzIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZW5zdXJlT3duRWZmZWN0TWFwKG1vZGVsLCB0eXBlKSB7XG4gICAgbGV0IGVmZmVjdHMgPSBtb2RlbFt0eXBlXTtcbiAgICBpZiAoIWVmZmVjdHMpIHtcbiAgICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IHt9O1xuICAgIH0gZWxzZSBpZiAoIW1vZGVsLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICBlZmZlY3RzID0gbW9kZWxbdHlwZV0gPSBPYmplY3QuY3JlYXRlKG1vZGVsW3R5cGVdKTtcbiAgICAgIGZvciAobGV0IHAgaW4gZWZmZWN0cykge1xuICAgICAgICBsZXQgcHJvdG9GeCA9IGVmZmVjdHNbcF07XG4gICAgICAgIGxldCBpbnN0RnggPSBlZmZlY3RzW3BdID0gQXJyYXkocHJvdG9GeC5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8cHJvdG9GeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGluc3RGeFtpXSA9IHByb3RvRnhbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH1cblxuICAvLyAtLSBlZmZlY3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogUnVucyBhbGwgZWZmZWN0cyBvZiBhIGdpdmVuIHR5cGUgZm9yIHRoZSBnaXZlbiBzZXQgb2YgcHJvcGVydHkgY2hhbmdlc1xuICAgKiBvbiBhbiBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2Ugd2l0aCBlZmZlY3RzIHRvIHJ1blxuICAgKiBAcGFyYW0ge09iamVjdH0gZWZmZWN0cyBPYmplY3QgbWFwIG9mIHByb3BlcnR5LXRvLUFycmF5IG9mIGVmZmVjdHNcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtib29sZWFuPX0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICogQHBhcmFtIHsqPX0gZXh0cmFBcmdzIEFkZGl0aW9uYWwgbWV0YWRhdGEgdG8gcGFzcyB0byBlZmZlY3QgZnVuY3Rpb25cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlZmZlY3QgcmFuIGZvciB0aGlzIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5FZmZlY3RzKGluc3QsIGVmZmVjdHMsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykge1xuICAgIGlmIChlZmZlY3RzKSB7XG4gICAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgICBsZXQgaWQgPSBkZWR1cGVJZCsrO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICBpZiAocnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGVmZmVjdHMsIGlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpKSB7XG4gICAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJhbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBsaXN0IG9mIGVmZmVjdHMgZm9yIGEgZ2l2ZW4gcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVmZmVjdHMgT2JqZWN0IG1hcCBvZiBwcm9wZXJ0eS10by1BcnJheSBvZiBlZmZlY3RzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWR1cGVJZCBDb3VudGVyIHVzZWQgZm9yIGRlLWR1cGluZyBlZmZlY3RzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIE5hbWUgb2YgY2hhbmdlZCBwcm9wZXJ0eVxuICAgKiBAcGFyYW0geyp9IHByb3BzIENoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0geyp9IG9sZFByb3BzIE9sZCBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwYXJhbSB7Kj19IGV4dHJhQXJncyBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIHBhc3MgdG8gZWZmZWN0IGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWZmZWN0IHJhbiBmb3IgdGhpcyBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGVmZmVjdHMsIGRlZHVwZUlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgbGV0IHJvb3RQcm9wZXJ0eSA9IGhhc1BhdGhzID8gUG9seW1lci5QYXRoLnJvb3QocHJvcCkgOiBwcm9wO1xuICAgIGxldCBmeHMgPSBlZmZlY3RzW3Jvb3RQcm9wZXJ0eV07XG4gICAgaWYgKGZ4cykge1xuICAgICAgZm9yIChsZXQgaT0wLCBsPWZ4cy5sZW5ndGgsIGZ4OyAoaTxsKSAmJiAoZng9ZnhzW2ldKTsgaSsrKSB7XG4gICAgICAgIGlmICgoIWZ4LmluZm8gfHwgZnguaW5mby5sYXN0UnVuICE9PSBkZWR1cGVJZCkgJiZcbiAgICAgICAgICAgICghaGFzUGF0aHMgfHwgcGF0aE1hdGNoZXNUcmlnZ2VyKHByb3AsIGZ4LnRyaWdnZXIpKSkge1xuICAgICAgICAgIGlmIChmeC5pbmZvKSB7XG4gICAgICAgICAgICBmeC5pbmZvLmxhc3RSdW4gPSBkZWR1cGVJZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnguZm4oaW5zdCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBmeC5pbmZvLCBoYXNQYXRocywgZXh0cmFBcmdzKTtcbiAgICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcHJvcGVydHkvcGF0aCB0aGF0IGhhcyBjaGFuZ2VkIG1hdGNoZXMgdGhlIHRyaWdnZXJcbiAgICogY3JpdGVyaWEgZm9yIGFuIGVmZmVjdC4gIEEgdHJpZ2dlciBpcyBhIGRlc2NyaXB0b3Igd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIHN0cnVjdHVyZSwgd2hpY2ggbWF0Y2hlcyB0aGUgZGVzY3JpcHRvcnMgcmV0dXJuZWQgZnJvbSBgcGFyc2VBcmdgLlxuICAgKiBlLmcuIGZvciBgZm9vLmJhci4qYDpcbiAgICogYGBgXG4gICAqIHRyaWdnZXI6IHtcbiAgICogICBuYW1lOiAnYS5iJyxcbiAgICogICBzdHJ1Y3R1cmVkOiB0cnVlLFxuICAgKiAgIHdpbGRjYXJkOiB0cnVlXG4gICAqIH1cbiAgICogYGBgXG4gICAqIElmIG5vIHRyaWdnZXIgaXMgZ2l2ZW4sIHRoZSBwYXRoIGlzIGRlZW1lZCB0byBtYXRjaC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvciBwcm9wZXJ0eSB0aGF0IGNoYW5nZWRcbiAgICogQHBhcmFtIHtEYXRhVHJpZ2dlcn0gdHJpZ2dlciBEZXNjcmlwdG9yXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhdGggbWF0Y2hlZCB0aGUgdHJpZ2dlclxuICAgKi9cbiAgZnVuY3Rpb24gcGF0aE1hdGNoZXNUcmlnZ2VyKHBhdGgsIHRyaWdnZXIpIHtcbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGV0IHRyaWdnZXJQYXRoID0gdHJpZ2dlci5uYW1lO1xuICAgICAgcmV0dXJuICh0cmlnZ2VyUGF0aCA9PSBwYXRoKSB8fFxuICAgICAgICAodHJpZ2dlci5zdHJ1Y3R1cmVkICYmIFBvbHltZXIuUGF0aC5pc0FuY2VzdG9yKHRyaWdnZXJQYXRoLCBwYXRoKSkgfHxcbiAgICAgICAgKHRyaWdnZXIud2lsZGNhcmQgJiYgUG9seW1lci5QYXRoLmlzRGVzY2VuZGFudCh0cmlnZ2VyUGF0aCwgcGF0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50cyB0aGUgXCJvYnNlcnZlclwiIGVmZmVjdC5cbiAgICpcbiAgICogQ2FsbHMgdGhlIG1ldGhvZCB3aXRoIGBpbmZvLm1ldGhvZE5hbWVgIG9uIHRoZSBpbnN0YW5jZSwgcGFzc2luZyB0aGVcbiAgICogbmV3IGFuZCBvbGQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuT2JzZXJ2ZXJFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICAgIGxldCBmbiA9IHR5cGVvZiBpbmZvLm1ldGhvZCA9PT0gXCJzdHJpbmdcIiA/IGluc3RbaW5mby5tZXRob2RdIDogaW5mby5tZXRob2Q7XG4gICAgbGV0IGNoYW5nZWRQcm9wID0gaW5mby5wcm9wZXJ0eTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIGZuLmNhbGwoaW5zdCwgaW5zdC5fX2RhdGFbY2hhbmdlZFByb3BdLCBvbGRQcm9wc1tjaGFuZ2VkUHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIWluZm8uZHluYW1pY0ZuKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ29ic2VydmVyIG1ldGhvZCBgJyArIGluZm8ubWV0aG9kICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUnVucyBcIm5vdGlmeVwiIGVmZmVjdHMgZm9yIGEgc2V0IG9mIGNoYW5nZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICAgKiB3aWxsIGRpc3BhdGNoIHBhdGggbm90aWZpY2F0aW9uIGV2ZW50cyBpbiB0aGUgY2FzZSB0aGF0IHRoZSBwcm9wZXJ0eVxuICAgKiBjaGFuZ2VkIHdhcyBhIHBhdGggYW5kIHRoZSByb290IHByb3BlcnR5IGZvciB0aGF0IHBhdGggZGlkbid0IGhhdmUgYVxuICAgKiBcIm5vdGlmeVwiIGVmZmVjdC4gIFRoaXMgaXMgdG8gbWFpbnRhaW4gMS4wIGJlaGF2aW9yIHRoYXQgZGlkIG5vdCByZXF1aXJlXG4gICAqIGBub3RpZnk6IHRydWVgIHRvIGVuc3VyZSBvYmplY3Qgc3ViLXByb3BlcnR5IG5vdGlmaWNhdGlvbnMgd2VyZVxuICAgKiBzZW50LlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZnlQcm9wcyBCYWcgb2YgcHJvcGVydGllcyB0byBub3RpZnlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5Ob3RpZnlFZmZlY3RzKGluc3QsIG5vdGlmeVByb3BzLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgLy8gTm90aWZ5XG4gICAgbGV0IGZ4cyA9IGluc3RbVFlQRVMuTk9USUZZXTtcbiAgICBsZXQgbm90aWZpZWQ7XG4gICAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgICAvLyBUcnkgbm9ybWFsIG5vdGlmeSBlZmZlY3RzOyBpZiBub25lLCBmYWxsIGJhY2sgdG8gdHJ5IHBhdGggbm90aWZpY2F0aW9uXG4gICAgZm9yIChsZXQgcHJvcCBpbiBub3RpZnlQcm9wcykge1xuICAgICAgaWYgKG5vdGlmeVByb3BzW3Byb3BdKSB7XG4gICAgICAgIGlmIChmeHMgJiYgcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGZ4cywgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1BhdGhzICYmIG5vdGlmeVBhdGgoaW5zdCwgcHJvcCwgcHJvcHMpKSB7XG4gICAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZsdXNoIGhvc3QgaWYgd2UgYWN0dWFsbHkgbm90aWZpZWQgYW5kIGhvc3Qgd2FzIGJhdGNoaW5nXG4gICAgLy8gQW5kIHRoZSBob3N0IGhhcyBhbHJlYWR5IGluaXRpYWxpemVkIGNsaWVudHM7IHRoaXMgcHJldmVudHNcbiAgICAvLyBhbiBpc3N1ZSB3aXRoIGEgaG9zdCBvYnNlcnZpbmcgZGF0YSBjaGFuZ2VzIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgICBsZXQgaG9zdDtcbiAgICBpZiAobm90aWZpZWQgJiYgKGhvc3QgPSBpbnN0Ll9fZGF0YUhvc3QpICYmIGhvc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKSB7XG4gICAgICBob3N0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIHtwcm9wZXJ0eX0tY2hhbmdlZCBldmVudHMgd2l0aCBwYXRoIGluZm9ybWF0aW9uIGluIHRoZSBkZXRhaWxcbiAgICogb2JqZWN0IHRvIGluZGljYXRlIGEgc3ViLXBhdGggb2YgdGhlIHByb3BlcnR5IHdhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gZmlyZSB0aGUgZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdGhhdCB3YXMgY2hhbmdlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBhdGggd2FzIG5vdGlmaWVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBub3RpZnlQYXRoKGluc3QsIHBhdGgsIHByb3BzKSB7XG4gICAgbGV0IHJvb3RQcm9wZXJ0eSA9IFBvbHltZXIuUGF0aC5yb290KHBhdGgpO1xuICAgIGlmIChyb290UHJvcGVydHkgIT09IHBhdGgpIHtcbiAgICAgIGxldCBldmVudE5hbWUgPSBQb2x5bWVyLkNhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHJvb3RQcm9wZXJ0eSkgKyAnLWNoYW5nZWQnO1xuICAgICAgZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHByb3BzW3BhdGhdLCBwYXRoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHRvIGluZGljYXRlIGEgcHJvcGVydHkgKG9yIHBhdGgpXG4gICAqIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0byBmaXJlIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBzZW5kICgne3Byb3BlcnR5fS1jaGFuZ2VkJylcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGNoYW5nZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXRoIElmIGEgc3ViLXBhdGggb2YgdGhpcyBwcm9wZXJ0eSBjaGFuZ2VkLCB0aGUgcGF0aFxuICAgKiAgIHRoYXQgY2hhbmdlZCAob3B0aW9uYWwpLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoTm90aWZ5RXZlbnQoaW5zdCwgZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCkge1xuICAgIGxldCBkZXRhaWwgPSB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBxdWV1ZVByb3BlcnR5OiB0cnVlXG4gICAgfTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgZGV0YWlsLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8oaW5zdCkuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7IGRldGFpbCB9KSk7XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50cyB0aGUgXCJub3RpZnlcIiBlZmZlY3QuXG4gICAqXG4gICAqIERpc3BhdGNoZXMgYSBub24tYnViYmxpbmcgZXZlbnQgbmFtZWQgYGluZm8uZXZlbnROYW1lYCBvbiB0aGUgaW5zdGFuY2VcbiAgICogd2l0aCBhIGRldGFpbCBvYmplY3QgY29udGFpbmluZyB0aGUgbmV3IGB2YWx1ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bk5vdGlmeUVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocykge1xuICAgIGxldCByb290UHJvcGVydHkgPSBoYXNQYXRocyA/IFBvbHltZXIuUGF0aC5yb290KHByb3BlcnR5KSA6IHByb3BlcnR5O1xuICAgIGxldCBwYXRoID0gcm9vdFByb3BlcnR5ICE9IHByb3BlcnR5ID8gcHJvcGVydHkgOiBudWxsO1xuICAgIGxldCB2YWx1ZSA9IHBhdGggPyBQb2x5bWVyLlBhdGguZ2V0KGluc3QsIHBhdGgpIDogaW5zdC5fX2RhdGFbcHJvcGVydHldO1xuICAgIGlmIChwYXRoICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbHVlID0gcHJvcHNbcHJvcGVydHldOyAgLy8gc3BlY2lmaWNhbGx5IGZvciAuc3BsaWNlc1xuICAgIH1cbiAgICBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGluZm8uZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmdW5jdGlvbiBmb3IgMi13YXkgbm90aWZpY2F0aW9uIGV2ZW50cy4gUmVjZWl2ZXMgY29udGV4dFxuICAgKiBpbmZvcm1hdGlvbiBjYXB0dXJlZCBpbiB0aGUgYGFkZE5vdGlmeUxpc3RlbmVyYCBjbG9zdXJlIGZyb20gdGhlXG4gICAqIGBfX25vdGlmeUxpc3RlbmVyc2AgbWV0YWRhdGEuXG4gICAqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBub3RpZmllZCBwcm9wZXJ0eSB0byB0aGUgaG9zdCBwcm9wZXJ0eSBvciBwYXRoLiAgSWZcbiAgICogdGhlIGV2ZW50IGNvbnRhaW5lZCBwYXRoIGluZm9ybWF0aW9uLCB0cmFuc2xhdGUgdGhhdCBwYXRoIHRvIHRoZSBob3N0XG4gICAqIHNjb3BlJ3MgbmFtZSBmb3IgdGhhdCBwYXRoIGZpcnN0LlxuICAgKlxuICAgKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldmVudCBOb3RpZmljYXRpb24gZXZlbnQgKGUuZy4gJzxwcm9wZXJ0eT4tY2hhbmdlZCcpXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIGhhbmRsaW5nIHRoZSBub3RpZmljYXRpb24gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZyb21Qcm9wIENoaWxkIGVsZW1lbnQgcHJvcGVydHkgdGhhdCB3YXMgYm91bmRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvUGF0aCBIb3N0IHByb3BlcnR5L3BhdGggdGhhdCB3YXMgYm91bmRcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWdhdGUgV2hldGhlciB0aGUgYmluZGluZyB3YXMgbmVnYXRlZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlTm90aWZpY2F0aW9uKGV2ZW50LCBpbnN0LCBmcm9tUHJvcCwgdG9QYXRoLCBuZWdhdGUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgbGV0IGRldGFpbCA9IC8qKiBAdHlwZSB7T2JqZWN0fSAqLyhldmVudC5kZXRhaWwpO1xuICAgIGxldCBmcm9tUGF0aCA9IGRldGFpbCAmJiBkZXRhaWwucGF0aDtcbiAgICBpZiAoZnJvbVBhdGgpIHtcbiAgICAgIHRvUGF0aCA9IFBvbHltZXIuUGF0aC50cmFuc2xhdGUoZnJvbVByb3AsIHRvUGF0aCwgZnJvbVBhdGgpO1xuICAgICAgdmFsdWUgPSBkZXRhaWwgJiYgZGV0YWlsLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGV2ZW50LnRhcmdldFtmcm9tUHJvcF07XG4gICAgfVxuICAgIHZhbHVlID0gbmVnYXRlID8gIXZhbHVlIDogdmFsdWU7XG4gICAgaWYgKCFpbnN0W1RZUEVTLlJFQURfT05MWV0gfHwgIWluc3RbVFlQRVMuUkVBRF9PTkxZXVt0b1BhdGhdKSB7XG4gICAgICBpZiAoaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHRvUGF0aCwgdmFsdWUsIHRydWUsIEJvb2xlYW4oZnJvbVBhdGgpKVxuICAgICAgICAmJiAoIWRldGFpbCB8fCAhZGV0YWlsLnF1ZXVlUHJvcGVydHkpKSB7XG4gICAgICAgIGluc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudHMgdGhlIFwicmVmbGVjdFwiIGVmZmVjdC5cbiAgICpcbiAgICogU2V0cyB0aGUgYXR0cmlidXRlIG5hbWVkIGBpbmZvLmF0dHJOYW1lYCB0byB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBydW5SZWZsZWN0RWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgICBsZXQgdmFsdWUgPSBpbnN0Ll9fZGF0YVtwcm9wZXJ0eV07XG4gICAgaWYgKFBvbHltZXIuc2FuaXRpemVET01WYWx1ZSkge1xuICAgICAgdmFsdWUgPSBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUodmFsdWUsIGluZm8uYXR0ck5hbWUsICdhdHRyaWJ1dGUnLCAvKiogQHR5cGUge05vZGV9ICovKGluc3QpKTtcbiAgICB9XG4gICAgaW5zdC5fcHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgaW5mby5hdHRyTmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgXCJjb21wdXRlZFwiIGVmZmVjdHMgZm9yIGEgc2V0IG9mIGNoYW5nZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICAgKiBjb250aW51ZXMgdG8gcnVuIGNvbXB1dGVkIGVmZmVjdHMgYmFzZWQgb24gdGhlIG91dHB1dCBvZiBlYWNoIHBhc3MgdW50aWxcbiAgICogdGhlcmUgYXJlIG5vIG1vcmUgbmV3bHkgY29tcHV0ZWQgcHJvcGVydGllcy4gIFRoaXMgZW5zdXJlcyB0aGF0IGFsbFxuICAgKiBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBjb21wdXRlZCBieSB0aGUgaW5pdGlhbCBzZXQgb2YgY2hhbmdlcyBhcmVcbiAgICogY29tcHV0ZWQgYmVmb3JlIG90aGVyIGVmZmVjdHMgKGJpbmRpbmcgcHJvcGFnYXRpb24sIG9ic2VydmVycywgYW5kIG5vdGlmeSlcbiAgICogcnVuLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHshT2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3RzKGluc3QsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgbGV0IGNvbXB1dGVFZmZlY3RzID0gaW5zdFtUWVBFUy5DT01QVVRFXTtcbiAgICBpZiAoY29tcHV0ZUVmZmVjdHMpIHtcbiAgICAgIGxldCBpbnB1dFByb3BzID0gY2hhbmdlZFByb3BzO1xuICAgICAgd2hpbGUgKHJ1bkVmZmVjdHMoaW5zdCwgY29tcHV0ZUVmZmVjdHMsIGlucHV0UHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvbGRQcm9wcywgaW5zdC5fX2RhdGFPbGQpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGNoYW5nZWRQcm9wcywgaW5zdC5fX2RhdGFQZW5kaW5nKTtcbiAgICAgICAgaW5wdXRQcm9wcyA9IGluc3QuX19kYXRhUGVuZGluZztcbiAgICAgICAgaW5zdC5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50cyB0aGUgXCJjb21wdXRlZCBwcm9wZXJ0eVwiIGVmZmVjdCBieSBydW5uaW5nIHRoZSBtZXRob2Qgd2l0aCB0aGVcbiAgICogdmFsdWVzIG9mIHRoZSBhcmd1bWVudHMgc3BlY2lmaWVkIGluIHRoZSBgaW5mb2Agb2JqZWN0IGFuZCBzZXR0aW5nIHRoZVxuICAgKiByZXR1cm4gdmFsdWUgdG8gdGhlIGNvbXB1dGVkIHByb3BlcnR5IHNwZWNpZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkNvbXB1dGVkRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgICBsZXQgcmVzdWx0ID0gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pO1xuICAgIGxldCBjb21wdXRlZFByb3AgPSBpbmZvLm1ldGhvZEluZm87XG4gICAgaWYgKGluc3QuX19kYXRhSGFzQWNjZXNzb3IgJiYgaW5zdC5fX2RhdGFIYXNBY2Nlc3Nvcltjb21wdXRlZFByb3BdKSB7XG4gICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkoY29tcHV0ZWRQcm9wLCByZXN1bHQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0W2NvbXB1dGVkUHJvcF0gPSByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHBhdGggY2hhbmdlcyBiYXNlZCBvbiBwYXRoIGxpbmtzIHNldCB1cCB1c2luZyB0aGUgYGxpbmtQYXRoc2BcbiAgICogQVBJLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aG9zZSBwcm9wcyBhcmUgY2hhbmdpbmdcbiAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8KHN0cmluZ3xudW1iZXIpPn0gcGF0aCBQYXRoIHRoYXQgaGFzIGNoYW5nZWRcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvZiBjaGFuZ2VkIHBhdGhcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNvbXB1dGVMaW5rZWRQYXRocyhpbnN0LCBwYXRoLCB2YWx1ZSkge1xuICAgIGxldCBsaW5rcyA9IGluc3QuX19kYXRhTGlua2VkUGF0aHM7XG4gICAgaWYgKGxpbmtzKSB7XG4gICAgICBsZXQgbGluaztcbiAgICAgIGZvciAobGV0IGEgaW4gbGlua3MpIHtcbiAgICAgICAgbGV0IGIgPSBsaW5rc1thXTtcbiAgICAgICAgaWYgKFBvbHltZXIuUGF0aC5pc0Rlc2NlbmRhbnQoYSwgcGF0aCkpIHtcbiAgICAgICAgICBsaW5rID0gUG9seW1lci5QYXRoLnRyYW5zbGF0ZShhLCBiLCBwYXRoKTtcbiAgICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKFBvbHltZXIuUGF0aC5pc0Rlc2NlbmRhbnQoYiwgcGF0aCkpIHtcbiAgICAgICAgICBsaW5rID0gUG9seW1lci5QYXRoLnRyYW5zbGF0ZShiLCBhLCBwYXRoKTtcbiAgICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gLS0gYmluZGluZ3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGRzIGJpbmRpbmcgbWV0YWRhdGEgdG8gdGhlIGN1cnJlbnQgYG5vZGVJbmZvYCwgYW5kIGJpbmRpbmcgZWZmZWN0c1xuICAgKiBmb3IgYWxsIHBhcnQgZGVwZW5kZW5jaWVzIHRvIGB0ZW1wbGF0ZUluZm9gLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDbGFzcyB0aGF0IGBfcGFyc2VUZW1wbGF0ZWAgaXMgY3VycmVudGx5XG4gICAqICAgcnVubmluZyBvblxuICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2luZCBCaW5kaW5nIGtpbmQsIGVpdGhlciAncHJvcGVydHknLCAnYXR0cmlidXRlJywgb3IgJ3RleHQnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgVGFyZ2V0IHByb3BlcnR5IG5hbWVcbiAgICogQHBhcmFtIHshQXJyYXk8IUJpbmRpbmdQYXJ0Pn0gcGFydHMgQXJyYXkgb2YgYmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbGl0ZXJhbCBMaXRlcmFsIHRleHQgc3Vycm91bmRpbmcgYmluZGluZyBwYXJ0cyAoc3BlY2lmaWVkXG4gICAqICAgb25seSBmb3IgJ3Byb3BlcnR5JyBiaW5kaW5ncywgc2luY2UgdGhlc2UgbXVzdCBiZSBpbml0aWFsaXplZCBhcyBwYXJ0XG4gICAqICAgb2YgYm9vdC11cClcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGFkZEJpbmRpbmcoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIGtpbmQsIHRhcmdldCwgcGFydHMsIGxpdGVyYWwpIHtcbiAgICAvLyBDcmVhdGUgYmluZGluZyBtZXRhZGF0YSBhbmQgYWRkIHRvIG5vZGVJbmZvXG4gICAgbm9kZUluZm8uYmluZGluZ3MgPSBub2RlSW5mby5iaW5kaW5ncyB8fCBbXTtcbiAgICBsZXQgLyoqIEJpbmRpbmcgKi8gYmluZGluZyA9IHsga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCwgaXNDb21wb3VuZDogKHBhcnRzLmxlbmd0aCAhPT0gMSkgfTtcbiAgICBub2RlSW5mby5iaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgIC8vIEFkZCBsaXN0ZW5lciBpbmZvIHRvIGJpbmRpbmcgbWV0YWRhdGFcbiAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIoYmluZGluZykpIHtcbiAgICAgIGxldCB7ZXZlbnQsIG5lZ2F0ZX0gPSBiaW5kaW5nLnBhcnRzWzBdO1xuICAgICAgYmluZGluZy5saXN0ZW5lckV2ZW50ID0gZXZlbnQgfHwgKENhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHRhcmdldCkgKyAnLWNoYW5nZWQnKTtcbiAgICAgIGJpbmRpbmcubGlzdGVuZXJOZWdhdGUgPSBuZWdhdGU7XG4gICAgfVxuICAgIC8vIEFkZCBcInByb3BhZ2F0ZVwiIHByb3BlcnR5IGVmZmVjdHMgdG8gdGVtcGxhdGVJbmZvXG4gICAgbGV0IGluZGV4ID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaT0wOyBpPGJpbmRpbmcucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwYXJ0ID0gYmluZGluZy5wYXJ0c1tpXTtcbiAgICAgIHBhcnQuY29tcG91bmRJbmRleCA9IGk7XG4gICAgICBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgcHJvcGVydHkgZWZmZWN0cyB0byB0aGUgZ2l2ZW4gYHRlbXBsYXRlSW5mb2AgZm9yIHRoZSBnaXZlbiBiaW5kaW5nXG4gICAqIHBhcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENsYXNzIHRoYXQgYF9wYXJzZVRlbXBsYXRlYCBpcyBjdXJyZW50bHlcbiAgICogICBydW5uaW5nIG9uXG4gICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICogQHBhcmFtIHshQmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggaW50byBgbm9kZUluZm9MaXN0YCBmb3IgdGhpcyBub2RlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCkge1xuICAgIGlmICghcGFydC5saXRlcmFsKSB7XG4gICAgICBpZiAoYmluZGluZy5raW5kID09PSAnYXR0cmlidXRlJyAmJiBiaW5kaW5nLnRhcmdldFswXSA9PT0gJy0nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IHNldCBhdHRyaWJ1dGUgJyArIGJpbmRpbmcudGFyZ2V0ICtcbiAgICAgICAgICAnIGJlY2F1c2UgXCItXCIgaXMgbm90IGEgdmFsaWQgYXR0cmlidXRlIHN0YXJ0aW5nIGNoYXJhY3RlcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGRlcGVuZGVuY2llcyA9IHBhcnQuZGVwZW5kZW5jaWVzO1xuICAgICAgICBsZXQgaW5mbyA9IHsgaW5kZXgsIGJpbmRpbmcsIHBhcnQsIGV2YWx1YXRvcjogY29uc3RydWN0b3IgfTtcbiAgICAgICAgZm9yIChsZXQgaj0wOyBqPGRlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCB0cmlnZ2VyID0gZGVwZW5kZW5jaWVzW2pdO1xuICAgICAgICAgIGlmICh0eXBlb2YgdHJpZ2dlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdHJpZ2dlciA9IHBhcnNlQXJnKHRyaWdnZXIpO1xuICAgICAgICAgICAgdHJpZ2dlci53aWxkY2FyZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0cnVjdG9yLl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgdHJpZ2dlci5yb290UHJvcGVydHksIHtcbiAgICAgICAgICAgIGZuOiBydW5CaW5kaW5nRWZmZWN0LFxuICAgICAgICAgICAgaW5mbywgdHJpZ2dlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudHMgdGhlIFwiYmluZGluZ1wiIChwcm9wZXJ0eS9wYXRoIGJpbmRpbmcpIGVmZmVjdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGJpbmRpbmcgc3ludGF4IGlzIG92ZXJyaWRhYmxlIHZpYSBgX3BhcnNlQmluZGluZ3NgIGFuZFxuICAgKiBgX2V2YWx1YXRlQmluZGluZ2AuICBUaGlzIG1ldGhvZCB3aWxsIGNhbGwgYF9ldmFsdWF0ZUJpbmRpbmdgIGZvciBhbnlcbiAgICogbm9uLWxpdGVyYWwgcGFydHMgcmV0dXJuZWQgZnJvbSBgX3BhcnNlQmluZGluZ3NgLiAgSG93ZXZlcixcbiAgICogdGhlcmUgaXMgbm8gc3VwcG9ydCBmb3IgX3BhdGhfIGJpbmRpbmdzIHZpYSBjdXN0b20gYmluZGluZyBwYXJ0cyxcbiAgICogYXMgdGhpcyBpcyBzcGVjaWZpYyB0byBQb2x5bWVyJ3MgcGF0aCBiaW5kaW5nIHN5bnRheC5cbiAgICpcbiAgICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAqIEBwYXJhbSB7QXJyYXl9IG5vZGVMaXN0IExpc3Qgb2Ygbm9kZXMgYXNzb2NpYXRlZCB3aXRoIGBub2RlSW5mb0xpc3RgIHRlbXBsYXRlXG4gICAqICAgbWV0YWRhdGFcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkJpbmRpbmdFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocywgbm9kZUxpc3QpIHtcbiAgICBsZXQgbm9kZSA9IG5vZGVMaXN0W2luZm8uaW5kZXhdO1xuICAgIGxldCBiaW5kaW5nID0gaW5mby5iaW5kaW5nO1xuICAgIGxldCBwYXJ0ID0gaW5mby5wYXJ0O1xuICAgIC8vIFN1YnBhdGggbm90aWZpY2F0aW9uOiB0cmFuc2Zvcm0gcGF0aCBhbmQgc2V0IHRvIGNsaWVudFxuICAgIC8vIGUuZy46IGZvbz1cInt7b2JqLnN1Yn19XCIsIHBhdGg6ICdvYmouc3ViLnByb3AnLCBzZXQgJ2Zvby5wcm9wJz1vYmouc3ViLnByb3BcbiAgICBpZiAoaGFzUGF0aHMgJiYgcGFydC5zb3VyY2UgJiYgKHBhdGgubGVuZ3RoID4gcGFydC5zb3VyY2UubGVuZ3RoKSAmJlxuICAgICAgICAoYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpICYmICFiaW5kaW5nLmlzQ29tcG91bmQgJiZcbiAgICAgICAgbm9kZS5fX2lzUHJvcGVydHlFZmZlY3RzQ2xpZW50ICYmXG4gICAgICAgIG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvcltiaW5kaW5nLnRhcmdldF0pIHtcbiAgICAgIGxldCB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICAgICAgcGF0aCA9IFBvbHltZXIuUGF0aC50cmFuc2xhdGUocGFydC5zb3VyY2UsIGJpbmRpbmcudGFyZ2V0LCBwYXRoKTtcbiAgICAgIGlmIChub2RlLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSBpbmZvLmV2YWx1YXRvci5fZXZhbHVhdGVCaW5kaW5nKGluc3QsIHBhcnQsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gUHJvcGFnYXRlIHZhbHVlIHRvIGNoaWxkXG4gICAgICBhcHBseUJpbmRpbmdWYWx1ZShpbnN0LCBub2RlLCBiaW5kaW5nLCBwYXJ0LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhbiBcImJpbmRpbmdcIiAoYmluZGluZykgZWZmZWN0IHRvIGEgbm9kZSxcbiAgICogZWl0aGVyIGFzIGEgcHJvcGVydHkgb3IgYXR0cmlidXRlLlxuICAgKlxuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSBvd25pbmcgdGhlIGJpbmRpbmcgZWZmZWN0XG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBUYXJnZXQgbm9kZSBmb3IgYmluZGluZ1xuICAgKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAgICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseUJpbmRpbmdWYWx1ZShpbnN0LCBub2RlLCBiaW5kaW5nLCBwYXJ0LCB2YWx1ZSkge1xuICAgIHZhbHVlID0gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCk7XG4gICAgaWYgKFBvbHltZXIuc2FuaXRpemVET01WYWx1ZSkge1xuICAgICAgdmFsdWUgPSBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUodmFsdWUsIGJpbmRpbmcudGFyZ2V0LCBiaW5kaW5nLmtpbmQsIG5vZGUpO1xuICAgIH1cbiAgICBpZiAoYmluZGluZy5raW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ1xuICAgICAgaW5zdC5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHtFbGVtZW50fSAqLyhub2RlKSwgdmFsdWUsIGJpbmRpbmcudGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUHJvcGVydHkgYmluZGluZ1xuICAgICAgbGV0IHByb3AgPSBiaW5kaW5nLnRhcmdldDtcbiAgICAgIGlmIChub2RlLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgJiZcbiAgICAgICAgICBub2RlLl9fZGF0YUhhc0FjY2Vzc29yICYmIG5vZGUuX19kYXRhSGFzQWNjZXNzb3JbcHJvcF0pIHtcbiAgICAgICAgaWYgKCFub2RlW1RZUEVTLlJFQURfT05MWV0gfHwgIW5vZGVbVFlQRVMuUkVBRF9PTkxZXVtwcm9wXSkge1xuICAgICAgICAgIGlmIChub2RlLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcCwgdmFsdWUpKSB7XG4gICAgICAgICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlICB7XG4gICAgICAgIGluc3QuX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhbiBcImJpbmRpbmdcIiBlZmZlY3QgdmFsdWUgYmFzZWQgb24gY29tcG91bmQgJiBuZWdhdGlvblxuICAgKiBlZmZlY3QgbWV0YWRhdGEsIGFzIHdlbGwgYXMgaGFuZGxpbmcgZm9yIHNwZWNpYWwtY2FzZSBwcm9wZXJ0aWVzXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRoZSB2YWx1ZSB3aWxsIGJlIHNldCB0b1xuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAgICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAqIEByZXR1cm4geyp9IFRyYW5zZm9ybWVkIHZhbHVlIHRvIHNldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCkge1xuICAgIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICAgIGxldCBzdG9yYWdlID0gbm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2VbYmluZGluZy50YXJnZXRdO1xuICAgICAgc3RvcmFnZVtwYXJ0LmNvbXBvdW5kSW5kZXhdID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHN0b3JhZ2Uuam9pbignJyk7XG4gICAgfVxuICAgIGlmIChiaW5kaW5nLmtpbmQgIT09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAvLyBTb21lIGJyb3dzZXJzIHNlcmlhbGl6ZSBgdW5kZWZpbmVkYCB0byBgXCJ1bmRlZmluZWRcImBcbiAgICAgIGlmIChiaW5kaW5nLnRhcmdldCA9PT0gJ3RleHRDb250ZW50JyB8fFxuICAgICAgICAgIChiaW5kaW5nLnRhcmdldCA9PT0gJ3ZhbHVlJyAmJlxuICAgICAgICAgICAgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnIHx8IG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnKSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgYmluZGluZydzIG1ldGFkYXRhIG1lZXRzIGFsbCB0aGUgcmVxdWlyZW1lbnRzIHRvIGFsbG93XG4gICAqIDItd2F5IGJpbmRpbmcsIGFuZCB0aGVyZWZvcmUgYSBgPHByb3BlcnR5Pi1jaGFuZ2VkYCBldmVudCBsaXN0ZW5lciBzaG91bGQgYmVcbiAgICogYWRkZWQ6XG4gICAqIC0gdXNlZCBjdXJseSBicmFjZXNcbiAgICogLSBpcyBhIHByb3BlcnR5IChub3QgYXR0cmlidXRlKSBiaW5kaW5nXG4gICAqIC0gaXMgbm90IGEgdGV4dENvbnRlbnQgYmluZGluZ1xuICAgKiAtIGlzIG5vdCBjb21wb3VuZFxuICAgKlxuICAgKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiAyLXdheSBsaXN0ZW5lciBzaG91bGQgYmUgYWRkZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHNob3VsZEFkZExpc3RlbmVyKGJpbmRpbmcpIHtcbiAgICByZXR1cm4gQm9vbGVhbihiaW5kaW5nLnRhcmdldCkgJiZcbiAgICAgICAgICAgYmluZGluZy5raW5kICE9ICdhdHRyaWJ1dGUnICYmXG4gICAgICAgICAgIGJpbmRpbmcua2luZCAhPSAndGV4dCcgJiZcbiAgICAgICAgICAgIWJpbmRpbmcuaXNDb21wb3VuZCAmJlxuICAgICAgICAgICBiaW5kaW5nLnBhcnRzWzBdLm1vZGUgPT09ICd7JztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBjb21wb3VuZCBiaW5kaW5nIHN0b3JhZ2Ugc3RydWN0dXJlcywgbm90aWZ5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0XG4gICAqIHJlZmVyZW5jZXMgb250byB0aGUgYm91bmQgbm9kZUxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSW5zdGFuY2UgdGhhdCBiYXMgYmVlbiBwcmV2aW91c2x5IGJvdW5kXG4gICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGFcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHNldHVwQmluZGluZ3MoaW5zdCwgdGVtcGxhdGVJbmZvKSB7XG4gICAgLy8gU2V0dXAgY29tcG91bmQgc3RvcmFnZSwgZGF0YUhvc3QsIGFuZCBub3RpZnkgbGlzdGVuZXJzXG4gICAgbGV0IHtub2RlTGlzdCwgbm9kZUluZm9MaXN0fSA9IHRlbXBsYXRlSW5mbztcbiAgICBpZiAobm9kZUluZm9MaXN0Lmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBpbmZvID0gbm9kZUluZm9MaXN0W2ldO1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVMaXN0W2ldO1xuICAgICAgICBsZXQgYmluZGluZ3MgPSBpbmZvLmJpbmRpbmdzO1xuICAgICAgICBpZiAoYmluZGluZ3MpIHtcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8YmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgICAgICAgICBzZXR1cENvbXBvdW5kU3RvcmFnZShub2RlLCBiaW5kaW5nKTtcbiAgICAgICAgICAgIGFkZE5vdGlmeUxpc3RlbmVyKG5vZGUsIGluc3QsIGJpbmRpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLl9fZGF0YUhvc3QgPSBpbnN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBgX19kYXRhQ29tcG91bmRTdG9yYWdlYCBsb2NhbCBzdG9yYWdlIG9uIGEgYm91bmQgbm9kZSB3aXRoXG4gICAqIGluaXRpYWwgbGl0ZXJhbCBkYXRhIGZvciBjb21wb3VuZCBiaW5kaW5ncywgYW5kIHNldHMgdGhlIGpvaW5lZFxuICAgKiBsaXRlcmFsIHBhcnRzIHRvIHRoZSBib3VuZCBwcm9wZXJ0eS5cbiAgICpcbiAgICogV2hlbiBjaGFuZ2VzIHRvIGNvbXBvdW5kIHBhcnRzIG9jY3VyLCB0aGV5IGFyZSBmaXJzdCBzZXQgaW50byB0aGUgY29tcG91bmRcbiAgICogc3RvcmFnZSBhcnJheSBmb3IgdGhhdCBwcm9wZXJ0eSwgYW5kIHRoZW4gdGhlIGFycmF5IGlzIGpvaW5lZCB0byByZXN1bHQgaW5cbiAgICogdGhlIGZpbmFsIHZhbHVlIHNldCB0byB0aGUgcHJvcGVydHkvYXR0cmlidXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgQm91bmQgbm9kZSB0byBpbml0aWFsaXplXG4gICAqIEBwYXJhbSB7QmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBzZXR1cENvbXBvdW5kU3RvcmFnZShub2RlLCBiaW5kaW5nKSB7XG4gICAgaWYgKGJpbmRpbmcuaXNDb21wb3VuZCkge1xuICAgICAgLy8gQ3JlYXRlIGNvbXBvdW5kIHN0b3JhZ2UgbWFwXG4gICAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlIHx8XG4gICAgICAgIChub2RlLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSA9IHt9KTtcbiAgICAgIGxldCBwYXJ0cyA9IGJpbmRpbmcucGFydHM7XG4gICAgICAvLyBDb3B5IGxpdGVyYWxzIGZyb20gcGFydHMgaW50byBzdG9yYWdlIGZvciB0aGlzIGJpbmRpbmdcbiAgICAgIGxldCBsaXRlcmFscyA9IG5ldyBBcnJheShwYXJ0cy5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaj0wOyBqPHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxpdGVyYWxzW2pdID0gcGFydHNbal0ubGl0ZXJhbDtcbiAgICAgIH1cbiAgICAgIGxldCB0YXJnZXQgPSBiaW5kaW5nLnRhcmdldDtcbiAgICAgIHN0b3JhZ2VbdGFyZ2V0XSA9IGxpdGVyYWxzO1xuICAgICAgLy8gQ29uZmlndXJlIHByb3BlcnRpZXMgd2l0aCB0aGVpciBsaXRlcmFsIHBhcnRzXG4gICAgICBpZiAoYmluZGluZy5saXRlcmFsICYmIGJpbmRpbmcua2luZCA9PSAncHJvcGVydHknKSB7XG4gICAgICAgIG5vZGVbdGFyZ2V0XSA9IGJpbmRpbmcubGl0ZXJhbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIDItd2F5IGJpbmRpbmcgbm90aWZpY2F0aW9uIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBub2RlIHNwZWNpZmllZFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbm9kZSBDaGlsZCBlbGVtZW50IHRvIGFkZCBsaXN0ZW5lciB0b1xuICAgKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IEhvc3QgZWxlbWVudCBpbnN0YW5jZSB0byBoYW5kbGUgbm90aWZpY2F0aW9uIGV2ZW50XG4gICAqIEBwYXJhbSB7QmluZGluZ30gYmluZGluZyBCaW5kaW5nIG1ldGFkYXRhXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKSB7XG4gICAgaWYgKGJpbmRpbmcubGlzdGVuZXJFdmVudCkge1xuICAgICAgbGV0IHBhcnQgPSBiaW5kaW5nLnBhcnRzWzBdO1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcubGlzdGVuZXJFdmVudCwgZnVuY3Rpb24oZSkge1xuICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24oZSwgaW5zdCwgYmluZGluZy50YXJnZXQsIHBhcnQuc291cmNlLCBwYXJ0Lm5lZ2F0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyAtLSBmb3IgbWV0aG9kLWJhc2VkIGVmZmVjdHMgKGNvbXBsZXhPYnNlcnZlciAmIGNvbXB1dGVkKSAtLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGRzIHByb3BlcnR5IGVmZmVjdHMgZm9yIGVhY2ggYXJndW1lbnQgaW4gdGhlIG1ldGhvZCBzaWduYXR1cmUgKGFuZFxuICAgKiBvcHRpb25hbGx5LCBmb3IgdGhlIG1ldGhvZCBuYW1lIGlmIGBkeW5hbWljYCBpcyB0cnVlKSB0aGF0IGNhbGxzIHRoZVxuICAgKiBwcm92aWRlZCBlZmZlY3QgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudCB8IE9iamVjdH0gbW9kZWwgUHJvdG90eXBlIG9yIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiBwcm9wZXJ0eSBlZmZlY3QgdG8gYWRkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVmZmVjdEZuIEZ1bmN0aW9uIHRvIHJ1biB3aGVuIGFyZ3VtZW50cyBjaGFuZ2VcbiAgICogQHBhcmFtIHsqPX0gbWV0aG9kSW5mbyBFZmZlY3Qtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gYmUgaW5jbHVkZWQgaW5cbiAgICogICBtZXRob2QgZWZmZWN0IG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmcgd2hldGhlclxuICAgKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuIE5vdGUsXG4gICAqICAgZGVmYXVsdHMgdG8gdHJ1ZSBpZiB0aGUgc2lnbmF0dXJlIGlzIHN0YXRpYyAoc2lnLnN0YXRpYyBpcyB0cnVlKS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZEVmZmVjdChtb2RlbCwgc2lnLCB0eXBlLCBlZmZlY3RGbiwgbWV0aG9kSW5mbywgZHluYW1pY0ZuKSB7XG4gICAgZHluYW1pY0ZuID0gc2lnLnN0YXRpYyB8fCAoZHluYW1pY0ZuICYmXG4gICAgICAodHlwZW9mIGR5bmFtaWNGbiAhPT0gJ29iamVjdCcgfHwgZHluYW1pY0ZuW3NpZy5tZXRob2ROYW1lXSkpO1xuICAgIGxldCBpbmZvID0ge1xuICAgICAgbWV0aG9kTmFtZTogc2lnLm1ldGhvZE5hbWUsXG4gICAgICBhcmdzOiBzaWcuYXJncyxcbiAgICAgIG1ldGhvZEluZm8sXG4gICAgICBkeW5hbWljRm5cbiAgICB9O1xuICAgIGZvciAobGV0IGk9MCwgYXJnOyAoaTxzaWcuYXJncy5sZW5ndGgpICYmIChhcmc9c2lnLmFyZ3NbaV0pOyBpKyspIHtcbiAgICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgbW9kZWwuX2FkZFByb3BlcnR5RWZmZWN0KGFyZy5yb290UHJvcGVydHksIHR5cGUsIHtcbiAgICAgICAgICBmbjogZWZmZWN0Rm4sIGluZm86IGluZm8sIHRyaWdnZXI6IGFyZ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGR5bmFtaWNGbikge1xuICAgICAgbW9kZWwuX2FkZFByb3BlcnR5RWZmZWN0KHNpZy5tZXRob2ROYW1lLCB0eXBlLCB7XG4gICAgICAgIGZuOiBlZmZlY3RGbiwgaW5mbzogaW5mb1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGEgbWV0aG9kIHdpdGggYXJndW1lbnRzIG1hcnNoYWxlZCBmcm9tIHByb3BlcnRpZXMgb24gdGhlIGluc3RhbmNlXG4gICAqIGJhc2VkIG9uIHRoZSBtZXRob2Qgc2lnbmF0dXJlIGNvbnRhaW5lZCBpbiB0aGUgZWZmZWN0IG1ldGFkYXRhLlxuICAgKlxuICAgKiBNdWx0aS1wcm9wZXJ0eSBvYnNlcnZlcnMsIGNvbXB1dGVkIHByb3BlcnRpZXMsIGFuZCBpbmxpbmUgY29tcHV0aW5nXG4gICAqIGZ1bmN0aW9ucyBjYWxsIHRoaXMgZnVuY3Rpb24gdG8gaW52b2tlIHRoZSBtZXRob2QsIHRoZW4gdXNlIHRoZSByZXR1cm5cbiAgICogdmFsdWUgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gICAqIEByZXR1cm4geyp9IFJldHVybnMgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBtZXRob2QgaW52b2NhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pIHtcbiAgICAvLyBJbnN0YW5jZXMgY2FuIG9wdGlvbmFsbHkgaGF2ZSBhIF9tZXRob2RIb3N0IHdoaWNoIGFsbG93cyByZWRpcmVjdGluZyB3aGVyZVxuICAgIC8vIHRvIGZpbmQgbWV0aG9kcy4gQ3VycmVudGx5IHVzZWQgYnkgYHRlbXBsYXRpemVgLlxuICAgIGxldCBjb250ZXh0ID0gaW5zdC5fbWV0aG9kSG9zdCB8fCBpbnN0O1xuICAgIGxldCBmbiA9IGNvbnRleHRbaW5mby5tZXRob2ROYW1lXTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIGxldCBhcmdzID0gbWFyc2hhbEFyZ3MoaW5zdC5fX2RhdGEsIGluZm8uYXJncywgcHJvcGVydHksIHByb3BzKTtcbiAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKCFpbmZvLmR5bmFtaWNGbikge1xuICAgICAgY29uc29sZS53YXJuKCdtZXRob2QgYCcgKyBpbmZvLm1ldGhvZE5hbWUgKyAnYCBub3QgZGVmaW5lZCcpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVtcHR5QXJyYXkgPSBbXTtcblxuICAvLyBSZWd1bGFyIGV4cHJlc3Npb25zIHVzZWQgZm9yIGJpbmRpbmdcbiAgY29uc3QgSURFTlQgID0gJyg/OicgKyAnW2EtekEtWl8kXVtcXFxcdy46JFxcXFwtKl0qJyArICcpJztcbiAgY29uc3QgTlVNQkVSID0gJyg/OicgKyAnWy0rXT9bMC05XSpcXFxcLj9bMC05XSsoPzpbZUVdWy0rXT9bMC05XSspPycgKyAnKSc7XG4gIGNvbnN0IFNRVU9URV9TVFJJTkcgPSAnKD86JyArICdcXCcoPzpbXlxcJ1xcXFxcXFxcXXxcXFxcXFxcXC4pKlxcJycgKyAnKSc7XG4gIGNvbnN0IERRVU9URV9TVFJJTkcgPSAnKD86JyArICdcIig/OlteXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcIicgKyAnKSc7XG4gIGNvbnN0IFNUUklORyA9ICcoPzonICsgU1FVT1RFX1NUUklORyArICd8JyArIERRVU9URV9TVFJJTkcgKyAnKSc7XG4gIGNvbnN0IEFSR1VNRU5UID0gJyg/OignICsgSURFTlQgKyAnfCcgKyBOVU1CRVIgKyAnfCcgKyAgU1RSSU5HICsgJylcXFxccyonICsgJyknO1xuICBjb25zdCBBUkdVTUVOVFMgPSAnKD86JyArIEFSR1VNRU5UICsgJyg/OixcXFxccyonICsgQVJHVU1FTlQgKyAnKSonICsgJyknO1xuICBjb25zdCBBUkdVTUVOVF9MSVNUID0gJyg/OicgKyAnXFxcXChcXFxccyonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyg/OicgKyBBUkdVTUVOVFMgKyAnPycgKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwpXFxcXHMqJyArICcpJztcbiAgY29uc3QgQklORElORyA9ICcoJyArIElERU5UICsgJ1xcXFxzKicgKyBBUkdVTUVOVF9MSVNUICsgJz8nICsgJyknOyAvLyBHcm91cCAzXG4gIGNvbnN0IE9QRU5fQlJBQ0tFVCA9ICcoXFxcXFtcXFxcW3x7eyknICsgJ1xcXFxzKic7XG4gIGNvbnN0IENMT1NFX0JSQUNLRVQgPSAnKD86XV18fX0pJztcbiAgY29uc3QgTkVHQVRFID0gJyg/OighKVxcXFxzKik/JzsgLy8gR3JvdXAgMlxuICBjb25zdCBFWFBSRVNTSU9OID0gT1BFTl9CUkFDS0VUICsgTkVHQVRFICsgQklORElORyArIENMT1NFX0JSQUNLRVQ7XG4gIGNvbnN0IGJpbmRpbmdSZWdleCA9IG5ldyBSZWdFeHAoRVhQUkVTU0lPTiwgXCJnXCIpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzdHJpbmcgZnJvbSBiaW5kaW5nIHBhcnRzIG9mIGFsbCB0aGUgbGl0ZXJhbCBwYXJ0c1xuICAgKlxuICAgKiBAcGFyYW0geyFBcnJheTxCaW5kaW5nUGFydD59IHBhcnRzIEFsbCBwYXJ0cyB0byBzdHJpbmdpZnlcbiAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgbWFkZSBmcm9tIHRoZSBsaXRlcmFsIHBhcnRzXG4gICAqL1xuICBmdW5jdGlvbiBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKSB7XG4gICAgbGV0IHMgPSAnJztcbiAgICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBsaXRlcmFsID0gcGFydHNbaV0ubGl0ZXJhbDtcbiAgICAgIHMgKz0gbGl0ZXJhbCB8fCAnJztcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIGV4cHJlc3Npb24gc3RyaW5nIGZvciBhIG1ldGhvZCBzaWduYXR1cmUsIGFuZCByZXR1cm5zIGEgbWV0YWRhdGFcbiAgICogZGVzY3JpYmluZyB0aGUgbWV0aG9kIGluIHRlcm1zIG9mIGBtZXRob2ROYW1lYCwgYHN0YXRpY2AgKHdoZXRoZXIgYWxsIHRoZVxuICAgKiBhcmd1bWVudHMgYXJlIGxpdGVyYWxzKSwgYW5kIGFuIGFycmF5IG9mIGBhcmdzYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgZXhwcmVzc2lvbiB0byBwYXJzZVxuICAgKiBAcmV0dXJuIHs/TWV0aG9kU2lnbmF0dXJlfSBUaGUgbWV0aG9kIG1ldGFkYXRhIG9iamVjdCBpZiBhIG1ldGhvZCBleHByZXNzaW9uIHdhc1xuICAgKiAgIGZvdW5kLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pIHtcbiAgICAvLyB0cmllcyB0byBtYXRjaCB2YWxpZCBqYXZhc2NyaXB0IHByb3BlcnR5IG5hbWVzXG4gICAgbGV0IG0gPSBleHByZXNzaW9uLm1hdGNoKC8oW15cXHNdKz8pXFwoKFtcXHNcXFNdKilcXCkvKTtcbiAgICBpZiAobSkge1xuICAgICAgbGV0IG1ldGhvZE5hbWUgPSBtWzFdO1xuICAgICAgbGV0IHNpZyA9IHsgbWV0aG9kTmFtZSwgc3RhdGljOiB0cnVlLCBhcmdzOiBlbXB0eUFycmF5IH07XG4gICAgICBpZiAobVsyXS50cmltKCkpIHtcbiAgICAgICAgLy8gcmVwbGFjZSBlc2NhcGVkIGNvbW1hcyB3aXRoIGNvbW1hIGVudGl0eSwgc3BsaXQgb24gdW4tZXNjYXBlZCBjb21tYXNcbiAgICAgICAgbGV0IGFyZ3MgPSBtWzJdLnJlcGxhY2UoL1xcXFwsL2csICcmY29tbWE7Jykuc3BsaXQoJywnKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlQXJncyhhcmdzLCBzaWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNpZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBhbmQgc2V0cyB0aGUgYGFyZ3NgIHByb3BlcnR5IG9mIHRoZSBzdXBwbGllZFxuICAgKiBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0LiBTZXRzIHRoZSBgc3RhdGljYCBwcm9wZXJ0eSB0byBmYWxzZSBpZiBhbnlcbiAgICogYXJndW1lbnQgaXMgYSBub24tbGl0ZXJhbC5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gYXJnTGlzdCBBcnJheSBvZiBhcmd1bWVudCBuYW1lc1xuICAgKiBAcGFyYW0geyFNZXRob2RTaWduYXR1cmV9IHNpZyBNZXRob2Qgc2lnbmF0dXJlIG1ldGFkYXRhIG9iamVjdFxuICAgKiBAcmV0dXJuIHshTWV0aG9kU2lnbmF0dXJlfSBUaGUgdXBkYXRlZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZUFyZ3MoYXJnTGlzdCwgc2lnKSB7XG4gICAgc2lnLmFyZ3MgPSBhcmdMaXN0Lm1hcChmdW5jdGlvbihyYXdBcmcpIHtcbiAgICAgIGxldCBhcmcgPSBwYXJzZUFyZyhyYXdBcmcpO1xuICAgICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgICBzaWcuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH0sIHRoaXMpO1xuICAgIHJldHVybiBzaWc7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGFuIGluZGl2aWR1YWwgYXJndW1lbnQsIGFuZCByZXR1cm5zIGFuIGFyZ3VtZW50IG1ldGFkYXRhIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgKlxuICAgKiAgIHtcbiAgICogICAgIHZhbHVlOiAncHJvcCcsICAgICAgICAvLyBwcm9wZXJ0eS9wYXRoIG9yIGxpdGVyYWwgdmFsdWVcbiAgICogICAgIGxpdGVyYWw6IGZhbHNlLCAgICAgICAvLyB3aGV0aGVyIGFyZ3VtZW50IGlzIGEgbGl0ZXJhbFxuICAgKiAgICAgc3RydWN0dXJlZDogZmFsc2UsICAgIC8vIHdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGEgcGF0aFxuICAgKiAgICAgcm9vdFByb3BlcnR5OiAncHJvcCcsIC8vIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoXG4gICAqICAgICB3aWxkY2FyZDogZmFsc2UgICAgICAgLy8gd2hldGhlciB0aGUgYXJndW1lbnQgd2FzIGEgd2lsZGNhcmQgJy4qJyBwYXRoXG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmF3QXJnIFRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGFyZ3VtZW50XG4gICAqIEByZXR1cm4geyFNZXRob2RBcmd9IEFyZ3VtZW50IG1ldGFkYXRhIG9iamVjdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VBcmcocmF3QXJnKSB7XG4gICAgLy8gY2xlYW4gdXAgd2hpdGVzcGFjZVxuICAgIGxldCBhcmcgPSByYXdBcmcudHJpbSgpXG4gICAgICAvLyByZXBsYWNlIGNvbW1hIGVudGl0eSB3aXRoIGNvbW1hXG4gICAgICAucmVwbGFjZSgvJmNvbW1hOy9nLCAnLCcpXG4gICAgICAvLyByZXBhaXIgZXh0cmEgZXNjYXBlIHNlcXVlbmNlczsgbm90ZSBvbmx5IGNvbW1hcyBzdHJpY3RseSBuZWVkXG4gICAgICAvLyBlc2NhcGluZywgYnV0IHdlIGFsbG93IGFueSBvdGhlciBjaGFyIHRvIGJlIGVzY2FwZWQgc2luY2UgaXRzXG4gICAgICAvLyBsaWtlbHkgdXNlcnMgd2lsbCBkbyB0aGlzXG4gICAgICAucmVwbGFjZSgvXFxcXCguKS9nLCAnXFwkMScpXG4gICAgICA7XG4gICAgLy8gYmFzaWMgYXJndW1lbnQgZGVzY3JpcHRvclxuICAgIGxldCBhID0ge1xuICAgICAgbmFtZTogYXJnLFxuICAgICAgdmFsdWU6ICcnLFxuICAgICAgbGl0ZXJhbDogZmFsc2VcbiAgICB9O1xuICAgIC8vIGRldGVjdCBsaXRlcmFsIHZhbHVlIChtdXN0IGJlIFN0cmluZyBvciBOdW1iZXIpXG4gICAgbGV0IGZjID0gYXJnWzBdO1xuICAgIGlmIChmYyA9PT0gJy0nKSB7XG4gICAgICBmYyA9IGFyZ1sxXTtcbiAgICB9XG4gICAgaWYgKGZjID49ICcwJyAmJiBmYyA8PSAnOScpIHtcbiAgICAgIGZjID0gJyMnO1xuICAgIH1cbiAgICBzd2l0Y2goZmMpIHtcbiAgICAgIGNhc2UgXCInXCI6XG4gICAgICBjYXNlICdcIic6XG4gICAgICAgIGEudmFsdWUgPSBhcmcuc2xpY2UoMSwgLTEpO1xuICAgICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyMnOlxuICAgICAgICBhLnZhbHVlID0gTnVtYmVyKGFyZyk7XG4gICAgICAgIGEubGl0ZXJhbCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBpZiBub3QgbGl0ZXJhbCwgbG9vayBmb3Igc3RydWN0dXJlZCBwYXRoXG4gICAgaWYgKCFhLmxpdGVyYWwpIHtcbiAgICAgIGEucm9vdFByb3BlcnR5ID0gUG9seW1lci5QYXRoLnJvb3QoYXJnKTtcbiAgICAgIC8vIGRldGVjdCBzdHJ1Y3R1cmVkIHBhdGggKGhhcyBkb3RzKVxuICAgICAgYS5zdHJ1Y3R1cmVkID0gUG9seW1lci5QYXRoLmlzUGF0aChhcmcpO1xuICAgICAgaWYgKGEuc3RydWN0dXJlZCkge1xuICAgICAgICBhLndpbGRjYXJkID0gKGFyZy5zbGljZSgtMikgPT0gJy4qJyk7XG4gICAgICAgIGlmIChhLndpbGRjYXJkKSB7XG4gICAgICAgICAgYS5uYW1lID0gYXJnLnNsaWNlKDAsIC0yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHYXRoZXIgdGhlIGFyZ3VtZW50IHZhbHVlcyBmb3IgYSBtZXRob2Qgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCBhcnJheVxuICAgKiBvZiBhcmd1bWVudCBtZXRhZGF0YS5cbiAgICpcbiAgICogVGhlIGBwYXRoYCBhbmQgYHZhbHVlYCBhcmd1bWVudHMgYXJlIHVzZWQgdG8gZmlsbCBpbiB3aWxkY2FyZCBkZXNjcmlwdG9yXG4gICAqIHdoZW4gdGhlIG1ldGhvZCBpcyBiZWluZyBjYWxsZWQgYXMgYSByZXN1bHQgb2YgYSBwYXRoIG5vdGlmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgSW5zdGFuY2UgZGF0YSBzdG9yYWdlIG9iamVjdCB0byByZWFkIHByb3BlcnRpZXMgZnJvbVxuICAgKiBAcGFyYW0geyFBcnJheTwhTWV0aG9kQXJnPn0gYXJncyBBcnJheSBvZiBhcmd1bWVudCBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQcm9wZXJ0eS9wYXRoIG5hbWUgdGhhdCB0cmlnZ2VyZWQgdGhlIG1ldGhvZCBlZmZlY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICogQHJldHVybiB7QXJyYXk8Kj59IEFycmF5IG9mIGFyZ3VtZW50IHZhbHVlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gbWFyc2hhbEFyZ3MoZGF0YSwgYXJncywgcGF0aCwgcHJvcHMpIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgaT0wLCBsPWFyZ3MubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICBsZXQgbmFtZSA9IGFyZy5uYW1lO1xuICAgICAgbGV0IHY7XG4gICAgICBpZiAoYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgdiA9IGFyZy52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhcmcuc3RydWN0dXJlZCkge1xuICAgICAgICAgIHYgPSBQb2x5bWVyLlBhdGguZ2V0KGRhdGEsIG5hbWUpO1xuICAgICAgICAgIC8vIHdoZW4gZGF0YSBpcyBub3Qgc3RvcmVkIGUuZy4gYHNwbGljZXNgXG4gICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdiA9IHByb3BzW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2ID0gZGF0YVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyZy53aWxkY2FyZCkge1xuICAgICAgICAvLyBPbmx5IHNlbmQgdGhlIGFjdHVhbCBwYXRoIGNoYW5nZWQgaW5mbyBpZiB0aGUgY2hhbmdlIHRoYXRcbiAgICAgICAgLy8gY2F1c2VkIHRoZSBvYnNlcnZlciB0byBydW4gbWF0Y2hlZCB0aGUgd2lsZGNhcmRcbiAgICAgICAgbGV0IGJhc2VDaGFuZ2VkID0gKG5hbWUuaW5kZXhPZihwYXRoICsgJy4nKSA9PT0gMCk7XG4gICAgICAgIGxldCBtYXRjaGVzID0gKHBhdGguaW5kZXhPZihuYW1lKSA9PT0gMCAmJiAhYmFzZUNoYW5nZWQpO1xuICAgICAgICB2YWx1ZXNbaV0gPSB7XG4gICAgICAgICAgcGF0aDogbWF0Y2hlcyA/IHBhdGggOiBuYW1lLFxuICAgICAgICAgIHZhbHVlOiBtYXRjaGVzID8gcHJvcHNbcGF0aF0gOiB2LFxuICAgICAgICAgIGJhc2U6IHZcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc1tpXSA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICAvLyBkYXRhIGFwaVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhcnJheSBzcGxpY2Ugbm90aWZpY2F0aW9ucyAoYC5zcGxpY2VzYCBhbmQgYC5sZW5ndGhgKVxuICAgKlxuICAgKiBOb3RlOiB0aGlzIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBub3JtYWxpemVkIHBhdGhzXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSW5zdGFuY2UgdG8gc2VuZCBub3RpZmljYXRpb25zIHRvXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0aGUgbXV0YXRpb25zIG9jY3VycmVkIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNwbGljZXMgQXJyYXkgb2Ygc3BsaWNlIHJlY29yZHNcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIG5vdGlmeVNwbGljZXMoaW5zdCwgYXJyYXksIHBhdGgsIHNwbGljZXMpIHtcbiAgICBsZXQgc3BsaWNlc1BhdGggPSBwYXRoICsgJy5zcGxpY2VzJztcbiAgICBpbnN0Lm5vdGlmeVBhdGgoc3BsaWNlc1BhdGgsIHsgaW5kZXhTcGxpY2VzOiBzcGxpY2VzIH0pO1xuICAgIGluc3Qubm90aWZ5UGF0aChwYXRoICsgJy5sZW5ndGgnLCBhcnJheS5sZW5ndGgpO1xuICAgIC8vIE51bGwgaGVyZSB0byBhbGxvdyBwb3RlbnRpYWxseSBsYXJnZSBzcGxpY2UgcmVjb3JkcyB0byBiZSBHQydlZC5cbiAgICBpbnN0Ll9fZGF0YVtzcGxpY2VzUGF0aF0gPSB7aW5kZXhTcGxpY2VzOiBudWxsfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc3BsaWNlIHJlY29yZCBhbmQgc2VuZHMgYW4gYXJyYXkgc3BsaWNlIG5vdGlmaWNhdGlvbiBmb3JcbiAgICogdGhlIGRlc2NyaWJlZCBtdXRhdGlvblxuICAgKlxuICAgKiBOb3RlOiB0aGlzIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBub3JtYWxpemVkIHBhdGhzXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSW5zdGFuY2UgdG8gc2VuZCBub3RpZmljYXRpb25zIHRvXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0aGUgbXV0YXRpb25zIG9jY3VycmVkIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0aGUgYXJyYXkgbXV0YXRpb24gb2NjdXJyZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVkQ291bnQgTnVtYmVyIG9mIGFkZGVkIGl0ZW1zXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJlbW92ZWQgQXJyYXkgb2YgcmVtb3ZlZCBpdGVtc1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gbm90aWZ5U3BsaWNlKGluc3QsIGFycmF5LCBwYXRoLCBpbmRleCwgYWRkZWRDb3VudCwgcmVtb3ZlZCkge1xuICAgIG5vdGlmeVNwbGljZXMoaW5zdCwgYXJyYXksIHBhdGgsIFt7XG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBhZGRlZENvdW50OiBhZGRlZENvdW50LFxuICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgIG9iamVjdDogYXJyYXksXG4gICAgICB0eXBlOiAnc3BsaWNlJ1xuICAgIH1dKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIHVwcGVyLWNhc2VkIHZlcnNpb24gb2YgdGhlIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU3RyaW5nIHRvIHVwcGVyY2FzZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiB1cHBlcihuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBtZXRhLXByb2dyYW1taW5nIGZvciBQb2x5bWVyJ3MgdGVtcGxhdGVcbiAgICogYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiAoY29sbGVjdGl2ZWx5LCBcInByb3BlcnR5IGVmZmVjdHNcIikgc3lzdGVtLlxuICAgKlxuICAgKiBUaGlzIG1peGluIHVzZXMgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBrZXkgc3RhdGljIG1ldGhvZHMgZm9yIGFkZGluZ1xuICAgKiBwcm9wZXJ0eSBlZmZlY3RzIHRvIGFuIGVsZW1lbnQgY2xhc3M6XG4gICAqIC0gYGFkZFByb3BlcnR5RWZmZWN0YFxuICAgKiAtIGBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyYFxuICAgKiAtIGBjcmVhdGVNZXRob2RPYnNlcnZlcmBcbiAgICogLSBgY3JlYXRlTm90aWZ5aW5nUHJvcGVydHlgXG4gICAqIC0gYGNyZWF0ZVJlYWRPbmx5UHJvcGVydHlgXG4gICAqIC0gYGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5YFxuICAgKiAtIGBjcmVhdGVDb21wdXRlZFByb3BlcnR5YFxuICAgKiAtIGBiaW5kVGVtcGxhdGVgXG4gICAqXG4gICAqIEVhY2ggbWV0aG9kIGNyZWF0ZXMgb25lIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzLCBhbG9uZyB3aXRoIG1ldGFkYXRhXG4gICAqIHVzZWQgYnkgdGhpcyBtaXhpbidzIGltcGxlbWVudGF0aW9uIG9mIGBfcHJvcGVydGllc0NoYW5nZWRgIHRvIHBlcmZvcm1cbiAgICogdGhlIHByb3BlcnR5IGVmZmVjdHMuXG4gICAqXG4gICAqIFVuZGVyc2NvcmVkIHZlcnNpb25zIG9mIHRoZSBhYm92ZSBtZXRob2RzIGFsc28gZXhpc3Qgb24gdGhlIGVsZW1lbnRcbiAgICogcHJvdG90eXBlIGZvciBhZGRpbmcgcHJvcGVydHkgZWZmZWN0cyBvbiBpbnN0YW5jZXMgYXQgcnVudGltZS5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbWl4aW4gb3ZlcnJpZGVzIHNldmVyYWwgYFByb3BlcnR5QWNjZXNzb3JzYCBtZXRob2RzLCBpblxuICAgKiBtYW55IGNhc2VzIHRvIG1haW50YWluIGd1YXJhbnRlZXMgcHJvdmlkZWQgYnkgdGhlIFBvbHltZXIgMS54IGZlYXR1cmVzO1xuICAgKiBub3RhYmx5IGl0IGNoYW5nZXMgcHJvcGVydHkgYWNjZXNzb3JzIHRvIGJlIHN5bmNocm9ub3VzIGJ5IGRlZmF1bHRcbiAgICogd2hlcmVhcyB0aGUgZGVmYXVsdCB3aGVuIHVzaW5nIGBQcm9wZXJ0eUFjY2Vzc29yc2Agc3RhbmRhbG9uZSBpcyB0byBiZVxuICAgKiBhc3luYyBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBAbWl4aW5GdW5jdGlvblxuICAgKiBAcG9seW1lclxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuVGVtcGxhdGVTdGFtcFxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIG1ldGEtcHJvZ3JhbW1pbmcgZm9yIFBvbHltZXInc1xuICAgKiB0ZW1wbGF0ZSBiaW5kaW5nIGFuZCBkYXRhIG9ic2VydmF0aW9uIHN5c3RlbS5cbiAgICovXG4gIFBvbHltZXIuUHJvcGVydHlFZmZlY3RzID0gUG9seW1lci5kZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGV4dGVuZHMge3N1cGVyQ2xhc3N9XG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfVGVtcGxhdGVTdGFtcH1cbiAgICAgKiBAdW5yZXN0cmljdGVkXG4gICAgICovXG4gICAgY29uc3QgcHJvcGVydHlFZmZlY3RzQmFzZSA9IFBvbHltZXIuVGVtcGxhdGVTdGFtcChQb2x5bWVyLlByb3BlcnR5QWNjZXNzb3JzKHN1cGVyQ2xhc3MpKTtcblxuICAgIC8qKlxuICAgICAqIEBwb2x5bWVyXG4gICAgICogQG1peGluQ2xhc3NcbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9XG4gICAgICogQGV4dGVuZHMge3Byb3BlcnR5RWZmZWN0c0Jhc2V9XG4gICAgICogQHVucmVzdHJpY3RlZFxuICAgICAqL1xuICAgIGNsYXNzIFByb3BlcnR5RWZmZWN0cyBleHRlbmRzIHByb3BlcnR5RWZmZWN0c0Jhc2Uge1xuXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICAvLyBVc2VkIHRvIGlkZW50aWZ5IHVzZXJzIG9mIHRoaXMgbWl4aW4sIGFsYSBpbnN0YW5jZW9mXG4gICAgICAgIHRoaXMuX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCA9IHRydWU7XG4gICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgICAgICAvLyBOT1RFOiB1c2VkIHRvIHRyYWNrIHJlLWVudHJhbnQgY2FsbHMgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICAgIC8vIHBhdGggY2hhbmdlcyBkaXJ0eSBjaGVjayBhZ2FpbnN0IGBfX2RhdGFUZW1wYCBvbmx5IGR1cmluZyBvbmUgXCJ0dXJuXCJcbiAgICAgICAgLy8gYW5kIGFyZSBjbGVhcmVkIHdoZW4gYF9fZGF0YUNvdW50ZXJgIHJldHVybnMgdG8gMC5cbiAgICAgICAgdGhpcy5fX2RhdGFDb3VudGVyID0gMDtcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fZGF0YUNsaWVudHNSZWFkeTtcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cztcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzO1xuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHM7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZTtcbiAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFIb3N0O1xuICAgICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19kYXRhVGVtcDtcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fZGF0YUNsaWVudHNJbml0aWFsaXplZDtcbiAgICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YTtcbiAgICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmc7XG4gICAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX2RhdGFPbGQ7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fY29tcHV0ZUVmZmVjdHM7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fcmVmbGVjdEVmZmVjdHM7XG4gICAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgICB0aGlzLl9fbm90aWZ5RWZmZWN0cztcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICAgIHRoaXMuX19wcm9wYWdhdGVFZmZlY3RzO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX29ic2VydmVFZmZlY3RzO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgICAgdGhpcy5fX3JlYWRPbmx5O1xuICAgICAgICAvKiogQHR5cGUgeyFUZW1wbGF0ZUluZm99ICovXG4gICAgICAgIHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICB9XG5cbiAgICAgIGdldCBQUk9QRVJUWV9FRkZFQ1RfVFlQRVMoKSB7XG4gICAgICAgIHJldHVybiBUWVBFUztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgICAgICBob3N0U3RhY2sucmVnaXN0ZXJIb3N0KHRoaXMpO1xuICAgICAgICB0aGlzLl9fZGF0YUNsaWVudHNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzID0gZmFsc2U7XG4gICAgICAgIC8vIE1heSBiZSBzZXQgb24gaW5zdGFuY2UgcHJpb3IgdG8gdXBncmFkZVxuICAgICAgICB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSA9IHRoaXMuX19kYXRhQ29tcG91bmRTdG9yYWdlIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX19kYXRhSG9zdCA9IHRoaXMuX19kYXRhSG9zdCB8fCBudWxsO1xuICAgICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgICAgdGhpcy5fX2RhdGFDbGllbnRzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZXMgYFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNgIGltcGxlbWVudGF0aW9uIHRvIHByb3ZpZGUgYVxuICAgICAgICogbW9yZSBlZmZpY2llbnQgaW1wbGVtZW50YXRpb24gb2YgaW5pdGlhbGl6aW5nIHByb3BlcnRpZXMgZnJvbVxuICAgICAgICogdGhlIHByb3RvdHlwZSBvbiB0aGUgaW5zdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgUHJvcGVydGllcyB0byBpbml0aWFsaXplIG9uIHRoZSBwcm90b3R5cGVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICAgIHRoaXMuX19kYXRhID0gT2JqZWN0LmNyZWF0ZShwcm9wcyk7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29yc2AgaW1wbGVtZW50YXRpb24gdG8gYXZvaWQgc2V0dGluZ1xuICAgICAgICogYF9zZXRQcm9wZXJ0eWAncyBgc2hvdWxkTm90aWZ5OiB0cnVlYC5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIGluaXRpYWxpemUgb24gdGhlIGluc3RhbmNlXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfaW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgICBsZXQgcmVhZE9ubHkgPSB0aGlzW1RZUEVTLlJFQURfT05MWV07XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICBpZiAoIXJlYWRPbmx5IHx8ICFyZWFkT25seVtwcm9wXSkge1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gdGhpcy5fX2RhdGFQZW5kaW5nIHx8IHt9O1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSB0aGlzLl9fZGF0YU9sZCB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BdID0gdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFByb3RvdHlwZSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGFkZFByb3BlcnR5RWZmZWN0YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCB0eXBlID09IFRZUEVTLlJFQURfT05MWSk7XG4gICAgICAgIC8vIGVmZmVjdHMgYXJlIGFjY3VtdWxhdGVkIGludG8gYXJyYXlzIHBlciBwcm9wZXJ0eSBiYXNlZCBvbiB0eXBlXG4gICAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUpW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKCFlZmZlY3RzKSB7XG4gICAgICAgICAgZWZmZWN0cyA9IHRoaXNbdHlwZV1bcHJvcGVydHldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gcHJvcGVydHkgZWZmZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGUgZWZmZWN0IHdhcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0IHRvIHJlbW92ZVxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX3JlbW92ZVByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgICAgbGV0IGVmZmVjdHMgPSBlbnN1cmVPd25FZmZlY3RNYXAodGhpcywgdHlwZSlbcHJvcGVydHldO1xuICAgICAgICBsZXQgaWR4ID0gZWZmZWN0cy5pbmRleE9mKGVmZmVjdCk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgIGVmZmVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIHByb3BlcnR5IGVmZmVjdFxuICAgICAgICogb2YgYSBjZXJ0YWluIHR5cGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSkge1xuICAgICAgICBsZXQgZWZmZWN0cyA9IHRoaXNbdHlwZV07XG4gICAgICAgIHJldHVybiBCb29sZWFuKGVmZmVjdHMgJiYgZWZmZWN0c1twcm9wZXJ0eV0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWFkIG9ubHlcIlxuICAgICAgICogYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNSZWFkT25seUVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFQURfT05MWSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcIm5vdGlmeVwiXG4gICAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNOb3RpZnlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5OT1RJRlkpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWZsZWN0IHRvIGF0dHJpYnV0ZVwiXG4gICAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNSZWZsZWN0RWZmZWN0KHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVGTEVDVCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcImNvbXB1dGVkXCJcbiAgICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzIHR5cGVcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2hhc0NvbXB1dGVkRWZmZWN0KHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuQ09NUFVURSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJ1bnRpbWUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYSBwZW5kaW5nIHByb3BlcnR5IG9yIHBhdGguICBJZiB0aGUgcm9vdCBwcm9wZXJ0eSBvZiB0aGUgcGF0aCBpblxuICAgICAgICogcXVlc3Rpb24gaGFkIG5vIGFjY2Vzc29yLCB0aGUgcGF0aCBpcyBzZXQsIG90aGVyd2lzZSBpdCBpcyBlbnF1ZXVlZFxuICAgICAgICogdmlhIGBfc2V0UGVuZGluZ1Byb3BlcnR5YC5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzb2xhdGVzIHJlbGF0aXZlbHkgZXhwZW5zaXZlIGZ1bmN0aW9uYWxpdHkgbmVjZXNzYXJ5XG4gICAgICAgKiBmb3IgdGhlIHB1YmxpYyBBUEkgKGBzZXRgLCBgc2V0UHJvcGVydGllc2AsIGBub3RpZnlQYXRoYCwgYW5kIHByb3BlcnR5XG4gICAgICAgKiBjaGFuZ2UgbGlzdGVuZXJzIHZpYSB7ey4uLn19IGJpbmRpbmdzKSwgc3VjaCB0aGF0IGl0IGlzIG9ubHkgZG9uZVxuICAgICAgICogd2hlbiBwYXRocyBlbnRlciB0aGUgc3lzdGVtLCBhbmQgbm90IGF0IGV2ZXJ5IHByb3BhZ2F0aW9uIHN0ZXAuICBJdFxuICAgICAgICogYWxzbyBzZXRzIGEgYF9fZGF0YUhhc1BhdGhzYCBmbGFnIG9uIHRoZSBpbnN0YW5jZSB3aGljaCBpcyB1c2VkIHRvXG4gICAgICAgKiBmYXN0LXBhdGggc2xvd2VyIHBhdGgtbWF0Y2hpbmcgY29kZSBpbiB0aGUgcHJvcGVydHkgZWZmZWN0cyBob3N0IHBhdGhzLlxuICAgICAgICpcbiAgICAgICAqIGBwYXRoYCBjYW4gYmUgYSBwYXRoIHN0cmluZyBvciBhcnJheSBvZiBwYXRoIHBhcnRzIGFzIGFjY2VwdGVkIGJ5IHRoZVxuICAgICAgICogcHVibGljIEFQSS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxudW1iZXJ8c3RyaW5nPn0gcGF0aCBQYXRoIHRvIHNldFxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBTZXQgdG8gdHJ1ZSBpZiB0aGlzIGNoYW5nZSBzaG91bGRcbiAgICAgICAqICBjYXVzZSBhIHByb3BlcnR5IG5vdGlmaWNhdGlvbiBldmVudCBkaXNwYXRjaFxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gaXNQYXRoTm90aWZpY2F0aW9uIElmIHRoZSBwYXRoIGJlaW5nIHNldCBpcyBhIHBhdGhcbiAgICAgICAqICAgbm90aWZpY2F0aW9uIG9mIGFuIGFscmVhZHkgY2hhbmdlZCB2YWx1ZSwgYXMgb3Bwb3NlZCB0byBhIHJlcXVlc3RcbiAgICAgICAqICAgdG8gc2V0IGFuZCBub3RpZnkgdGhlIGNoYW5nZS4gIEluIHRoZSBsYXR0ZXIgYGZhbHNlYCBjYXNlLCBhIGRpcnR5XG4gICAgICAgKiAgIGNoZWNrIGlzIHBlcmZvcm1lZCBhbmQgdGhlbiB0aGUgdmFsdWUgaXMgc2V0IHRvIHRoZSBwYXRoIGJlZm9yZVxuICAgICAgICogICBlbnF1ZXVpbmcgdGhlIHBlbmRpbmcgcHJvcGVydHkgY2hhbmdlLlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm9wZXJ0eS9wYXRoIHdhcyBlbnF1ZXVlZCBpblxuICAgICAgICogICB0aGUgcGVuZGluZyBjaGFuZ2VzIGJhZy5cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgc2hvdWxkTm90aWZ5LCBpc1BhdGhOb3RpZmljYXRpb24pIHtcbiAgICAgICAgaWYgKGlzUGF0aE5vdGlmaWNhdGlvbiB8fFxuICAgICAgICAgICAgUG9seW1lci5QYXRoLnJvb3QoQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoKSAhPT0gcGF0aCkge1xuICAgICAgICAgIC8vIERpcnR5IGNoZWNrIGNoYW5nZXMgYmVpbmcgc2V0IHRvIGEgcGF0aCBhZ2FpbnN0IHRoZSBhY3R1YWwgb2JqZWN0LFxuICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBwYXRocyBpbnRvIHRoZSBzeXN0ZW07IGZyb20gaGVyZVxuICAgICAgICAgIC8vIHRoZSBvbmx5IGRpcnR5IGNoZWNrcyBhcmUgYWdhaW5zdCB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlIHRvIHByZXZlbnRcbiAgICAgICAgICAvLyBkdXBsaWNhdGUgd29yayBpbiB0aGUgc2FtZSB0dXJuIG9ubHkuIE5vdGUsIGlmIHRoaXMgd2FzIGEgbm90aWZpY2F0aW9uXG4gICAgICAgICAgLy8gb2YgYSBjaGFuZ2UgYWxyZWFkeSBzZXQgdG8gYSBwYXRoIChpc1BhdGhOb3RpZmljYXRpb246IHRydWUpLFxuICAgICAgICAgIC8vIHdlIGFsd2F5cyBsZXQgdGhlIGNoYW5nZSB0aHJvdWdoIGFuZCBza2lwIHRoZSBgc2V0YCBzaW5jZSBpdCB3YXNcbiAgICAgICAgICAvLyBhbHJlYWR5IGRpcnR5IGNoZWNrZWQgYXQgdGhlIHBvaW50IG9mIGVudHJ5IGFuZCB0aGUgdW5kZXJseWluZ1xuICAgICAgICAgIC8vIG9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgICBpZiAoIWlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgbGV0IG9sZCA9IFBvbHltZXIuUGF0aC5nZXQodGhpcywgcGF0aCk7XG4gICAgICAgICAgICBwYXRoID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChQb2x5bWVyLlBhdGguc2V0KHRoaXMsIHBhdGgsIHZhbHVlKSk7XG4gICAgICAgICAgICAvLyBVc2UgcHJvcGVydHktYWNjZXNzb3IncyBzaW1wbGVyIGRpcnR5IGNoZWNrXG4gICAgICAgICAgICBpZiAoIXBhdGggfHwgIXN1cGVyLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwYXRoLCB2YWx1ZSwgb2xkKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoLyoqQHR5cGV7c3RyaW5nfSovKHBhdGgpLCB2YWx1ZSwgc2hvdWxkTm90aWZ5KSkge1xuICAgICAgICAgICAgY29tcHV0ZUxpbmtlZFBhdGhzKHRoaXMsIHBhdGgsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5fX2RhdGFIYXNBY2Nlc3NvciAmJiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yW3BhdGhdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KC8qKkB0eXBle3N0cmluZ30qLyhwYXRoKSwgdmFsdWUsIHNob3VsZE5vdGlmeSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbcGF0aF0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgYSB2YWx1ZSB0byBhIG5vbi1Qb2x5bWVyIGVsZW1lbnQvbm9kZSdzIHByb3BlcnR5LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBtYWtlcyBhIGJlc3QtZWZmb3J0IGF0IGJpbmRpbmcgaW50ZXJvcDpcbiAgICAgICAqIFNvbWUgbmF0aXZlIGVsZW1lbnQgcHJvcGVydGllcyBoYXZlIHNpZGUtZWZmZWN0cyB3aGVuXG4gICAgICAgKiByZS1zZXR0aW5nIHRoZSBzYW1lIHZhbHVlIChlLmcuIHNldHRpbmcgYDxpbnB1dD4udmFsdWVgIHJlc2V0cyB0aGVcbiAgICAgICAqIGN1cnNvciBwb3NpdGlvbiksIHNvIHdlIGRvIGEgZGlydHktY2hlY2sgYmVmb3JlIHNldHRpbmcgdGhlIHZhbHVlLlxuICAgICAgICogSG93ZXZlciwgZm9yIGJldHRlciBpbnRlcm9wIHdpdGggbm9uLVBvbHltZXIgY3VzdG9tIGVsZW1lbnRzIHRoYXRcbiAgICAgICAqIGFjY2VwdCBvYmplY3RzLCB3ZSBleHBsaWNpdGx5IHJlLXNldCBvYmplY3QgY2hhbmdlcyBjb21pbmcgZnJvbSB0aGVcbiAgICAgICAqIFBvbHltZXIgd29ybGQgKHdoaWNoIG1heSBpbmNsdWRlIGRlZXAgb2JqZWN0IGNoYW5nZXMgd2l0aG91dCB0aGVcbiAgICAgICAqIHRvcCByZWZlcmVuY2UgY2hhbmdpbmcpLCBlcnJpbmcgb24gdGhlIHNpZGUgb2YgcHJvdmlkaW5nIG1vcmVcbiAgICAgICAqIGluZm9ybWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIGFsdGVybmF0ZSBhcHByb2FjaGVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc2V0IGEgcHJvcGVydHkgb25cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIC8vIEl0IGlzIGEganVkZ21lbnQgY2FsbCB0aGF0IHJlc2V0dGluZyBwcmltaXRpdmVzIGlzXG4gICAgICAgIC8vIFwiYmFkXCIgYW5kIHJlc2V0dGluZ3Mgb2JqZWN0cyBpcyBhbHNvIFwiZ29vZFwiOyBhbHRlcm5hdGl2ZWx5IHdlIGNvdWxkXG4gICAgICAgIC8vIGltcGxlbWVudCBhIHdoaXRlbGlzdCBvZiB0YWcgJiBwcm9wZXJ0eSB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXJcbiAgICAgICAgLy8gYmUgcmVzZXQgKGUuZy4gPGlucHV0Pi52YWx1ZSAmJiA8c2VsZWN0Pi52YWx1ZSlcbiAgICAgICAgaWYgKHZhbHVlICE9PSBub2RlW3Byb3BdIHx8IHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyB0aGUgYFByb3BlcnRpZXNDaGFuZ2VkYCBpbXBsZW1lbnRhdGlvbiB0byBpbnRyb2R1Y2Ugc3BlY2lhbFxuICAgICAgICogZGlydHkgY2hlY2sgbG9naWMgZGVwZW5kaW5nIG9uIHRoZSBwcm9wZXJ0eSAmIHZhbHVlIGJlaW5nIHNldDpcbiAgICAgICAqXG4gICAgICAgKiAxLiBBbnkgdmFsdWUgc2V0IHRvIGEgcGF0aCAoZS5nLiAnb2JqLnByb3AnOiA0MiBvciAnb2JqLnByb3AnOiB7Li4ufSlcbiAgICAgICAqICAgIFN0b3JlZCBpbiBgX19kYXRhVGVtcGAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBgX19kYXRhVGVtcGBcbiAgICAgICAqIDIuIE9iamVjdCBzZXQgdG8gc2ltcGxlIHByb3BlcnR5IChlLmcuICdwcm9wJzogey4uLn0pXG4gICAgICAgKiAgICBTdG9yZWQgaW4gYF9fZGF0YVRlbXBgIGFuZCBgX19kYXRhYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0XG4gICAgICAgKiAgICBgX19kYXRhVGVtcGAgYnkgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgX3Nob3VsZFByb3BlcnR5Q2hhbmdlYFxuICAgICAgICogMy4gUHJpbWl0aXZlIHZhbHVlIHNldCB0byBzaW1wbGUgcHJvcGVydHkgKGUuZy4gJ3Byb3AnOiA0MilcbiAgICAgICAqICAgIFN0b3JlZCBpbiBgX19kYXRhYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGBfX2RhdGFgXG4gICAgICAgKlxuICAgICAgICogVGhlIGRpcnR5LWNoZWNrIGlzIGltcG9ydGFudCB0byBwcmV2ZW50IGN5Y2xlcyBkdWUgdG8gdHdvLXdheVxuICAgICAgICogbm90aWZpY2F0aW9uLCBidXQgcGF0aHMgYW5kIG9iamVjdHMgYXJlIG9ubHkgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGFueVxuICAgICAgICogcHJldmlvdXMgdmFsdWUgc2V0IGR1cmluZyB0aGlzIHR1cm4gdmlhIGEgXCJ0ZW1wb3JhcnkgY2FjaGVcIiB0aGF0IGlzXG4gICAgICAgKiBjbGVhcmVkIHdoZW4gdGhlIGxhc3QgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgZXhpdHMuIFRoaXMgaXMgc286XG4gICAgICAgKiBhLiBhbnkgY2FjaGVkIGFycmF5IHBhdGhzIChlLmcuICdhcnJheS4zLnByb3AnKSBtYXkgYmUgaW52YWxpZGF0ZWRcbiAgICAgICAqICAgIGR1ZSB0byBhcnJheSBtdXRhdGlvbnMgbGlrZSBzaGlmdC91bnNoaWZ0L3NwbGljZTsgdGhpcyBpcyBmaW5lXG4gICAgICAgKiAgICBzaW5jZSBwYXRoIGNoYW5nZXMgYXJlIGRpcnR5LWNoZWNrZWQgYXQgdXNlciBlbnRyeSBwb2ludHMgbGlrZSBgc2V0YFxuICAgICAgICogYi4gZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgb25seSBsYXN0cyBvbmUgdHVybiB0byBhbGxvdyB0aGUgdXNlclxuICAgICAgICogICAgdG8gbXV0YXRlIHRoZSBvYmplY3QgaW4tcGxhY2UgYW5kIHJlLXNldCBpdCB3aXRoIHRoZSBzYW1lIGlkZW50aXR5XG4gICAgICAgKiAgICBhbmQgaGF2ZSBhbGwgc3ViLXByb3BlcnRpZXMgcmUtcHJvcGFnYXRlZCBpbiBhIHN1YnNlcXVlbnQgdHVybi5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgdGVtcCBjYWNoZSBpcyBub3QgbmVjZXNzYXJpbHkgc3VmZmljaWVudCB0byBwcmV2ZW50IGludmFsaWQgYXJyYXlcbiAgICAgICAqIHBhdGhzLCBzaW5jZSBhIHNwbGljZSBjYW4gaGFwcGVuIGR1cmluZyB0aGUgc2FtZSB0dXJuICh3aXRoIHBhdGhvbG9naWNhbFxuICAgICAgICogdXNlciBjb2RlKTsgd2UgY291bGQgaW50cm9kdWNlIGEgXCJmaXh1cFwiIGZvciB0ZW1wb3JhcmlseSBjYWNoZWQgYXJyYXlcbiAgICAgICAqIHBhdGhzIGlmIG5lZWRlZDogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci9pc3N1ZXMvNDIyN1xuICAgICAgICpcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gc2hvdWxkTm90aWZ5IFRydWUgaWYgcHJvcGVydHkgc2hvdWxkIGZpcmUgbm90aWZpY2F0aW9uXG4gICAgICAgKiAgIGV2ZW50IChhcHBsaWVzIG9ubHkgZm9yIGBub3RpZnk6IHRydWVgIHByb3BlcnRpZXMpXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgICAqL1xuICAgICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIHNob3VsZE5vdGlmeSkge1xuICAgICAgICBsZXQgaXNQYXRoID0gdGhpcy5fX2RhdGFIYXNQYXRocyAmJiBQb2x5bWVyLlBhdGguaXNQYXRoKHByb3BlcnR5KTtcbiAgICAgICAgbGV0IHByZXZQcm9wcyA9IGlzUGF0aCA/IHRoaXMuX19kYXRhVGVtcCA6IHRoaXMuX19kYXRhO1xuICAgICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBwcmV2UHJvcHNbcHJvcGVydHldKSkge1xuICAgICAgICAgIGlmICghdGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG4gICAgICAgICAgaWYgKCEocHJvcGVydHkgaW4gdGhpcy5fX2RhdGFPbGQpKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YU9sZFtwcm9wZXJ0eV0gPSB0aGlzLl9fZGF0YVtwcm9wZXJ0eV07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFBhdGhzIGFyZSBzdG9yZWQgaW4gdGVtcG9yYXJ5IGNhY2hlIChjbGVhcmVkIGF0IGVuZCBvZiB0dXJuKSxcbiAgICAgICAgICAvLyB3aGljaCBpcyB1c2VkIGZvciBkaXJ0eS1jaGVja2luZywgYWxsIG90aGVycyBzdG9yZWQgaW4gX19kYXRhXG4gICAgICAgICAgaWYgKGlzUGF0aCkge1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFUZW1wW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQWxsIGNoYW5nZXMgZ28gaW50byBwZW5kaW5nIHByb3BlcnR5IGJhZywgcGFzc2VkIHRvIF9wcm9wZXJ0aWVzQ2hhbmdlZFxuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICAvLyBUcmFjayBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdGlmeSBzZXBhcmF0ZWx5XG4gICAgICAgICAgaWYgKGlzUGF0aCB8fCAodGhpc1tUWVBFUy5OT1RJRlldICYmIHRoaXNbVFlQRVMuTk9USUZZXVtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gdGhpcy5fX2RhdGFUb05vdGlmeSB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnlbcHJvcGVydHldID0gc2hvdWxkTm90aWZ5O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gZW5zdXJlIGFsbCBhY2Nlc3NvcnMgc2V0IGBzaG91bGROb3RpZnlgXG4gICAgICAgKiB0byB0cnVlLCBmb3IgcGVyLXByb3BlcnR5IG5vdGlmaWNhdGlvbiB0cmFja2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcmAncyBkZWZhdWx0IGFzeW5jIHF1ZXVpbmcgb2ZcbiAgICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgOiBpZiBgX19kYXRhUmVhZHlgIGlzIGZhbHNlIChoYXMgbm90IHlldCBiZWVuXG4gICAgICAgKiBtYW51YWxseSBmbHVzaGVkKSwgdGhlIGZ1bmN0aW9uIG5vLW9wczsgb3RoZXJ3aXNlIGZsdXNoZXNcbiAgICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIHN5bmNocm9ub3VzbHkuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfaW52YWxpZGF0ZVByb3BlcnRpZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9fZGF0YVJlYWR5KSB7XG4gICAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFbnF1ZXVlcyB0aGUgZ2l2ZW4gY2xpZW50IG9uIGEgbGlzdCBvZiBwZW5kaW5nIGNsaWVudHMsIHdob3NlXG4gICAgICAgKiBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZXMgY2FuIGxhdGVyIGJlIGZsdXNoZWQgdmlhIGEgY2FsbCB0b1xuICAgICAgICogYF9mbHVzaENsaWVudHNgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnQgUHJvcGVydHlFZmZlY3RzIGNsaWVudCB0byBlbnF1ZXVlXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfZW5xdWV1ZUNsaWVudChjbGllbnQpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgfHwgW107XG4gICAgICAgIGlmIChjbGllbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzLnB1c2goY2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBzdXBlcmNsYXNzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9mbHVzaFByb3BlcnRpZXMoKSB7XG4gICAgICAgIHRoaXMuX19kYXRhQ291bnRlcisrO1xuICAgICAgICBzdXBlci5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuX19kYXRhQ291bnRlci0tO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZsdXNoZXMgYW55IGNsaWVudHMgcHJldmlvdXNseSBlbnF1ZXVlZCB2aWEgYF9lbnF1ZXVlQ2xpZW50YCwgY2F1c2luZ1xuICAgICAgICogdGhlaXIgYF9mbHVzaFByb3BlcnRpZXNgIG1ldGhvZCB0byBydW4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2ZsdXNoQ2xpZW50cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9fZGF0YUNsaWVudHNSZWFkeSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9yZWFkeUNsaWVudHMoKTtcbiAgICAgICAgICAvLyBPdmVycmlkZSBwb2ludCB3aGVyZSBhY2Nlc3NvcnMgYXJlIHR1cm5lZCBvbjsgaW1wb3J0YW50bHksXG4gICAgICAgICAgLy8gdGhpcyBpcyBhZnRlciBjbGllbnRzIGhhdmUgZnVsbHkgcmVhZGllZCwgcHJvdmlkaW5nIGEgZ3VhcmFudGVlXG4gICAgICAgICAgLy8gdGhhdCBhbnkgcHJvcGVydHkgZWZmZWN0cyBvY2N1ciBvbmx5IGFmdGVyIGFsbCBjbGllbnRzIGFyZSByZWFkeS5cbiAgICAgICAgICB0aGlzLl9fZGF0YVJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fZW5hYmxlT3JGbHVzaENsaWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOT1RFOiBXZSBlbnN1cmUgY2xpZW50cyBlaXRoZXIgZW5hYmxlIG9yIGZsdXNoIGFzIGFwcHJvcHJpYXRlLiBUaGlzXG4gICAgICAvLyBoYW5kbGVzIHR3byBjb3JuZXIgY2FzZXM6XG4gICAgICAvLyAoMSkgY2xpZW50cyBmbHVzaCBwcm9wZXJseSB3aGVuIGNvbm5lY3RlZC9lbmFibGVkIGJlZm9yZSB0aGUgaG9zdFxuICAgICAgLy8gZW5hYmxlczsgZS5nLlxuICAgICAgLy8gICAoYSkgVGVtcGxhdGl6ZSBzdGFtcHMgd2l0aCBubyBwcm9wZXJ0aWVzIGFuZCBkb2VzIG5vdCBmbHVzaCBhbmRcbiAgICAgIC8vICAgKGIpIHRoZSBpbnN0YW5jZSBpcyBpbnNlcnRlZCBpbnRvIGRvbSBhbmRcbiAgICAgIC8vICAgKGMpIHRoZW4gdGhlIGluc3RhbmNlIGZsdXNoZXMuXG4gICAgICAvLyAoMikgY2xpZW50cyBlbmFibGUgcHJvcGVybHkgd2hlbiBub3QgY29ubmVjdGVkL2VuYWJsZWQgd2hlbiB0aGUgaG9zdFxuICAgICAgLy8gZmx1c2hlczsgZS5nLlxuICAgICAgLy8gICAoYSkgYSB0ZW1wbGF0ZSBpcyBydW50aW1lIHN0YW1wZWQgYW5kIG5vdCB5ZXQgY29ubmVjdGVkL2VuYWJsZWRcbiAgICAgIC8vICAgKGIpIGEgaG9zdCBzZXRzIGEgcHJvcGVydHksIGNhdXNpbmcgc3RhbXBlZCBkb20gdG8gZmx1c2hcbiAgICAgIC8vICAgKGMpIHRoZSBzdGFtcGVkIGRvbSBlbmFibGVzLlxuICAgICAgX19lbmFibGVPckZsdXNoQ2xpZW50cygpIHtcbiAgICAgICAgbGV0IGNsaWVudHMgPSB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzO1xuICAgICAgICBpZiAoY2xpZW50cykge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGNsaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjbGllbnQgPSBjbGllbnRzW2ldO1xuICAgICAgICAgICAgaWYgKCFjbGllbnQuX19kYXRhRW5hYmxlZCkge1xuICAgICAgICAgICAgICBjbGllbnQuX2VuYWJsZVByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xpZW50Ll9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgY2xpZW50Ll9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQZXJmb3JtIGFueSBpbml0aWFsIHNldHVwIG9uIGNsaWVudCBkb20uIENhbGxlZCBiZWZvcmUgdGhlIGZpcnN0XG4gICAgICAgKiBgX2ZsdXNoUHJvcGVydGllc2AgY2FsbCBvbiBjbGllbnQgZG9tIGFuZCBiZWZvcmUgYW55IGVsZW1lbnRcbiAgICAgICAqIG9ic2VydmVycyBhcmUgY2FsbGVkLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9yZWFkeUNsaWVudHMoKSB7XG4gICAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYSBiYWcgb2YgcHJvcGVydHkgY2hhbmdlcyB0byB0aGlzIGluc3RhbmNlLCBhbmRcbiAgICAgICAqIHN5bmNocm9ub3VzbHkgcHJvY2Vzc2VzIGFsbCBlZmZlY3RzIG9mIHRoZSBwcm9wZXJ0aWVzIGFzIGEgYmF0Y2guXG4gICAgICAgKlxuICAgICAgICogUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzaW1wbGUgcHJvcGVydGllcywgbm90IHBhdGhzLiAgQmF0Y2hlZFxuICAgICAgICogcGF0aCBwcm9wYWdhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2Ygb25lIG9yIG1vcmUga2V5LXZhbHVlIHBhaXJzIHdob3NlIGtleSBpc1xuICAgICAgICogICBhIHByb3BlcnR5IGFuZCB2YWx1ZSBpcyB0aGUgbmV3IHZhbHVlIHRvIHNldCBmb3IgdGhhdCBwcm9wZXJ0eS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNldFJlYWRPbmx5IFdoZW4gdHJ1ZSwgYW55IHByaXZhdGUgdmFsdWVzIHNldCBpblxuICAgICAgICogICBgcHJvcHNgIHdpbGwgYmUgc2V0LiBCeSBkZWZhdWx0LCBgc2V0UHJvcGVydGllc2Agd2lsbCBub3Qgc2V0XG4gICAgICAgKiAgIGByZWFkT25seTogdHJ1ZWAgcm9vdCBwcm9wZXJ0aWVzLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgc2V0UHJvcGVydGllcyhwcm9wcywgc2V0UmVhZE9ubHkpIHtcbiAgICAgICAgZm9yIChsZXQgcGF0aCBpbiBwcm9wcykge1xuICAgICAgICAgIGlmIChzZXRSZWFkT25seSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldIHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV1bcGF0aF0pIHtcbiAgICAgICAgICAgIC8vVE9ETyhrc2NoYWFmKTogZXhwbGljaXRseSBkaXNhbGxvdyBwYXRocyBpbiBzZXRQcm9wZXJ0eT9cbiAgICAgICAgICAgIC8vIHdpbGRjYXJkIG9ic2VydmVycyBjdXJyZW50bHkgb25seSBwYXNzIHRoZSBmaXJzdCBjaGFuZ2VkIHBhdGhcbiAgICAgICAgICAgIC8vIGluIHRoZSBgaW5mb2Agb2JqZWN0LCBhbmQgeW91IGNvdWxkIGRvIHNvbWUgb2RkIHRoaW5ncyBiYXRjaGluZ1xuICAgICAgICAgICAgLy8gcGF0aHMsIGUuZy4geydmb28uYmFyJzogey4uLn0sICdmb28nOiBudWxsfVxuICAgICAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHByb3BzW3BhdGhdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBzbyB0aGF0IHByb3BlcnR5IGFjY2Vzc29yXG4gICAgICAgKiBzaWRlIGVmZmVjdHMgYXJlIG5vdCBlbmFibGVkIHVudGlsIGFmdGVyIGNsaWVudCBkb20gaXMgZnVsbHkgcmVhZHkuXG4gICAgICAgKiBBbHNvIGNhbGxzIGBfZmx1c2hDbGllbnRzYCBjYWxsYmFjayB0byBlbnN1cmUgY2xpZW50IGRvbSBpcyBlbmFibGVkXG4gICAgICAgKiB0aGF0IHdhcyBub3QgZW5hYmxlZCBhcyBhIHJlc3VsdCBvZiBmbHVzaGluZyBwcm9wZXJ0aWVzLlxuICAgICAgICpcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVhZHkoKSB7XG4gICAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0aGF0IGBzdXBlci5yZWFkeSgpYCBpcyBub3QgY2FsbGVkIGhlcmUgYXMgaXRcbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgdHVybnMgb24gYWNjZXNzb3JzLiBJbnN0ZWFkLCB3ZSB3YWl0IHVudGlsIGByZWFkeUNsaWVudHNgXG4gICAgICAgIC8vIHRvIGVuYWJsZSBhY2Nlc3NvcnMgdG8gcHJvdmlkZSBhIGd1YXJhbnRlZSB0aGF0IGNsaWVudHMgYXJlIHJlYWR5XG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZXNzaW5nIGFueSBhY2Nlc3NvcnMgc2lkZSBlZmZlY3RzLlxuICAgICAgICB0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgICAgLy8gSWYgbm8gZGF0YSB3YXMgcGVuZGluZywgYF9mbHVzaFByb3BlcnRpZXNgIHdpbGwgbm90IGBmbHVzaENsaWVudHNgXG4gICAgICAgIC8vIHNvIGVuc3VyZSB0aGlzIGlzIGRvbmUuXG4gICAgICAgIGlmICghdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkpIHtcbiAgICAgICAgICB0aGlzLl9mbHVzaENsaWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCZWZvcmUgcmVhZHksIGNsaWVudCBub3RpZmljYXRpb25zIGRvIG5vdCB0cmlnZ2VyIF9mbHVzaFByb3BlcnRpZXMuXG4gICAgICAgIC8vIFRoZXJlZm9yZSBhIGZsdXNoIGlzIG5lY2Vzc2FyeSBoZXJlIGlmIGRhdGEgaGFzIGJlZW4gc2V0LlxuICAgICAgICBpZiAodGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBJbXBsZW1lbnRzIGBQcm9wZXJ0eUFjY2Vzc29yc2AncyBwcm9wZXJ0aWVzIGNoYW5nZWQgY2FsbGJhY2suXG4gICAgICAgKlxuICAgICAgICogUnVucyBlYWNoIGNsYXNzIG9mIGVmZmVjdHMgZm9yIHRoZSBiYXRjaCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgaW5cbiAgICAgICAqIGEgc3BlY2lmaWMgb3JkZXIgKGNvbXB1dGUsIHByb3BhZ2F0ZSwgcmVmbGVjdCwgb2JzZXJ2ZSwgbm90aWZ5KS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFPYmplY3R9IGN1cnJlbnRQcm9wcyBCYWcgb2YgYWxsIGN1cnJlbnQgYWNjZXNzb3IgdmFsdWVzXG4gICAgICAgKiBAcGFyYW0geyFPYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgcHJvcGVydGllcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0XG4gICAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAgICogICBpbiBgY2hhbmdlZFByb3BzYFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX3Byb3BlcnRpZXNDaGFuZ2VkKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykge1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIGxldCBjID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2hhbmdlZFByb3BzIHx8IHt9KTtcbiAgICAgICAgLy8gd2luZG93LmRlYnVnICYmIGNvbnNvbGUuZ3JvdXAodGhpcy5sb2NhbE5hbWUgKyAnIycgKyB0aGlzLmlkICsgJzogJyArIGMpO1xuICAgICAgICAvLyBpZiAod2luZG93LmRlYnVnKSB7IGRlYnVnZ2VyOyB9XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgbGV0IGhhc1BhdGhzID0gdGhpcy5fX2RhdGFIYXNQYXRocztcbiAgICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocyA9IGZhbHNlO1xuICAgICAgICAvLyBDb21wdXRlIHByb3BlcnRpZXNcbiAgICAgICAgcnVuQ29tcHV0ZWRFZmZlY3RzKHRoaXMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgICAgLy8gQ2xlYXIgbm90aWZ5IHByb3BlcnRpZXMgcHJpb3IgdG8gcG9zc2libGUgcmVlbnRyeSAocHJvcGFnYXRlLCBvYnNlcnZlKSxcbiAgICAgICAgLy8gYnV0IGFmdGVyIGNvbXB1dGluZyBlZmZlY3RzIGhhdmUgYSBjaGFuY2UgdG8gYWRkIHRvIHRoZW1cbiAgICAgICAgbGV0IG5vdGlmeVByb3BzID0gdGhpcy5fX2RhdGFUb05vdGlmeTtcbiAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICAgIC8vIFByb3BhZ2F0ZSBwcm9wZXJ0aWVzIHRvIGNsaWVudHNcbiAgICAgICAgdGhpcy5fcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzKGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgICAgLy8gRmx1c2ggY2xpZW50c1xuICAgICAgICB0aGlzLl9mbHVzaENsaWVudHMoKTtcbiAgICAgICAgLy8gUmVmbGVjdCBwcm9wZXJ0aWVzXG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5SRUZMRUNUXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgICAvLyBPYnNlcnZlIHByb3BlcnRpZXNcbiAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0aGlzW1RZUEVTLk9CU0VSVkVdLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAgIC8vIE5vdGlmeSBwcm9wZXJ0aWVzIHRvIGhvc3RcbiAgICAgICAgaWYgKG5vdGlmeVByb3BzKSB7XG4gICAgICAgICAgcnVuTm90aWZ5RWZmZWN0cyh0aGlzLCBub3RpZnlQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIHRlbXBvcmFyeSBjYWNoZSBhdCBlbmQgb2YgdHVyblxuICAgICAgICBpZiAodGhpcy5fX2RhdGFDb3VudGVyID09IDEpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIHdpbmRvdy5kZWJ1ZyAmJiBjb25zb2xlLmdyb3VwRW5kKHRoaXMubG9jYWxOYW1lICsgJyMnICsgdGhpcy5pZCArICc6ICcgKyBjKTtcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxlZCB0byBwcm9wYWdhdGUgYW55IHByb3BlcnR5IGNoYW5nZXMgdG8gc3RhbXBlZCB0ZW1wbGF0ZSBub2Rlc1xuICAgICAgICogbWFuYWdlZCBieSB0aGlzIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzKGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICAgIGlmICh0aGlzW1RZUEVTLlBST1BBR0FURV0pIHtcbiAgICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuUFJPUEFHQVRFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgICAgICB3aGlsZSAodGVtcGxhdGVJbmZvKSB7XG4gICAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLFxuICAgICAgICAgICAgaGFzUGF0aHMsIHRlbXBsYXRlSW5mby5ub2RlTGlzdCk7XG4gICAgICAgICAgdGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm87XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBbGlhc2VzIG9uZSBkYXRhIHBhdGggYXMgYW5vdGhlciwgc3VjaCB0aGF0IHBhdGggbm90aWZpY2F0aW9ucyBmcm9tIG9uZVxuICAgICAgICogYXJlIHJvdXRlZCB0byB0aGUgb3RoZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHRvIFRhcmdldCBwYXRoIHRvIGxpbmsuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gZnJvbSBTb3VyY2UgcGF0aCB0byBsaW5rLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgbGlua1BhdGhzKHRvLCBmcm9tKSB7XG4gICAgICAgIHRvID0gUG9seW1lci5QYXRoLm5vcm1hbGl6ZSh0byk7XG4gICAgICAgIGZyb20gPSBQb2x5bWVyLlBhdGgubm9ybWFsaXplKGZyb20pO1xuICAgICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0gdGhpcy5fX2RhdGFMaW5rZWRQYXRocyB8fCB7fTtcbiAgICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRoc1t0b10gPSBmcm9tO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYSBkYXRhIHBhdGggYWxpYXMgcHJldmlvdXNseSBlc3RhYmxpc2hlZCB3aXRoIGBfbGlua1BhdGhzYC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlLCB0aGUgcGF0aCB0byB1bmxpbmsgc2hvdWxkIGJlIHRoZSB0YXJnZXQgKGB0b2ApIHVzZWQgd2hlblxuICAgICAgICogbGlua2luZyB0aGUgcGF0aHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggVGFyZ2V0IHBhdGggdG8gdW5saW5rLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgdW5saW5rUGF0aHMocGF0aCkge1xuICAgICAgICBwYXRoID0gUG9seW1lci5QYXRoLm5vcm1hbGl6ZShwYXRoKTtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhTGlua2VkUGF0aHMpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fX2RhdGFMaW5rZWRQYXRoc1twYXRoXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE5vdGlmeSB0aGF0IGFuIGFycmF5IGhhcyBjaGFuZ2VkLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKlxuICAgICAgICogICAgIHRoaXMuaXRlbXMgPSBbIHtuYW1lOiAnSmltJ30sIHtuYW1lOiAnVG9kZCd9LCB7bmFtZTogJ0JpbGwnfSBdO1xuICAgICAgICogICAgIC4uLlxuICAgICAgICogICAgIHRoaXMuaXRlbXMuc3BsaWNlKDEsIDEsIHtuYW1lOiAnU2FtJ30pO1xuICAgICAgICogICAgIHRoaXMuaXRlbXMucHVzaCh7bmFtZTogJ0JvYid9KTtcbiAgICAgICAqICAgICB0aGlzLm5vdGlmeVNwbGljZXMoJ2l0ZW1zJywgW1xuICAgICAgICogICAgICAgeyBpbmRleDogMSwgcmVtb3ZlZDogW3tuYW1lOiAnVG9kZCd9XSwgYWRkZWRDb3VudDogMSwgb2JqZWN0OiB0aGlzLml0ZW1zLCB0eXBlOiAnc3BsaWNlJyB9LFxuICAgICAgICogICAgICAgeyBpbmRleDogMywgcmVtb3ZlZDogW10sIGFkZGVkQ291bnQ6IDEsIG9iamVjdDogdGhpcy5pdGVtcywgdHlwZTogJ3NwbGljZSd9XG4gICAgICAgKiAgICAgXSk7XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0aGF0IHNob3VsZCBiZSBub3RpZmllZC5cbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHNwbGljZXMgQXJyYXkgb2Ygc3BsaWNlIHJlY29yZHMgaW5kaWNhdGluZyBvcmRlcmVkXG4gICAgICAgKiAgIGNoYW5nZXMgdGhhdCBvY2N1cnJlZCB0byB0aGUgYXJyYXkuIEVhY2ggcmVjb3JkIHNob3VsZCBoYXZlIHRoZVxuICAgICAgICogICBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAgICogICAgKiBpbmRleDogaW5kZXggYXQgd2hpY2ggdGhlIGNoYW5nZSBvY2N1cnJlZFxuICAgICAgICogICAgKiByZW1vdmVkOiBhcnJheSBvZiBpdGVtcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoaXMgaW5kZXhcbiAgICAgICAqICAgICogYWRkZWRDb3VudDogbnVtYmVyIG9mIG5ldyBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gICAgICAgKiAgICAqIG9iamVjdDogYSByZWZlcmVuY2UgdG8gdGhlIGFycmF5IGluIHF1ZXN0aW9uXG4gICAgICAgKiAgICAqIHR5cGU6IHRoZSBzdHJpbmcgbGl0ZXJhbCAnc3BsaWNlJ1xuICAgICAgICpcbiAgICAgICAqICAgTm90ZSB0aGF0IHNwbGljZSByZWNvcmRzIF9tdXN0XyBiZSBub3JtYWxpemVkIHN1Y2ggdGhhdCB0aGV5IGFyZVxuICAgICAgICogICByZXBvcnRlZCBpbiBpbmRleCBvcmRlciAocmF3IHJlc3VsdHMgZnJvbSBgT2JqZWN0Lm9ic2VydmVgIGFyZSBub3RcbiAgICAgICAqICAgb3JkZXJlZCBhbmQgbXVzdCBiZSBub3JtYWxpemVkL21lcmdlZCBiZWZvcmUgbm90aWZ5aW5nKS5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHVibGljXG4gICAgICAqL1xuICAgICAgbm90aWZ5U3BsaWNlcyhwYXRoLCBzcGxpY2VzKSB7XG4gICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAgIG5vdGlmeVNwbGljZXModGhpcywgYXJyYXksIGluZm8ucGF0aCwgc3BsaWNlcyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciByZWFkaW5nIGEgdmFsdWUgZnJvbSBhIHBhdGguXG4gICAgICAgKlxuICAgICAgICogTm90ZSwgaWYgYW55IHBhcnQgaW4gdGhlIHBhdGggaXMgdW5kZWZpbmVkLCB0aGlzIG1ldGhvZCByZXR1cm5zXG4gICAgICAgKiBgdW5kZWZpbmVkYCAodGhpcyBtZXRob2QgZG9lcyBub3QgdGhyb3cgd2hlbiBkZXJlZmVyZW5jaW5nIHVuZGVmaW5lZFxuICAgICAgICogcGF0aHMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3whQXJyYXk8KHN0cmluZ3xudW1iZXIpPil9IHBhdGggUGF0aCB0byB0aGUgdmFsdWVcbiAgICAgICAqICAgdG8gcmVhZC4gIFRoZSBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcgKGUuZy4gYGZvby5iYXIuYmF6YClcbiAgICAgICAqICAgb3IgYW4gYXJyYXkgb2YgcGF0aCBwYXJ0cyAoZS5nLiBgWydmb28uYmFyJywgJ2JheiddYCkuICBOb3RlIHRoYXRcbiAgICAgICAqICAgYnJhY2tldGVkIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkOyBzdHJpbmctYmFzZWQgcGF0aCBwYXJ0c1xuICAgICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICAgKiAgIGluZGljZXMsIHRoZSBpbmRleCBtYXkgYmUgdXNlZCBhcyBhIGRvdHRlZCBwYXJ0IGRpcmVjdGx5XG4gICAgICAgKiAgIChlLmcuIGB1c2Vycy4xMi5uYW1lYCBvciBgWyd1c2VycycsIDEyLCAnbmFtZSddYCkuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSBhdCB0aGUgcGF0aCwgb3IgYHVuZGVmaW5lZGAgaWYgYW55IHBhcnQgb2YgdGhlIHBhdGhcbiAgICAgICAqICAgaXMgdW5kZWZpbmVkLlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBnZXQocGF0aCwgcm9vdCkge1xuICAgICAgICByZXR1cm4gUG9seW1lci5QYXRoLmdldChyb290IHx8IHRoaXMsIHBhdGgpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3Igc2V0dGluZyBhIHZhbHVlIHRvIGEgcGF0aCBhbmQgbm90aWZ5aW5nIGFueVxuICAgICAgICogZWxlbWVudHMgYm91bmQgdG8gdGhlIHNhbWUgcGF0aC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlLCBpZiBhbnkgcGFydCBpbiB0aGUgcGF0aCBleGNlcHQgZm9yIHRoZSBsYXN0IGlzIHVuZGVmaW5lZCxcbiAgICAgICAqIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyAodGhpcyBtZXRob2QgZG9lcyBub3QgdGhyb3cgd2hlblxuICAgICAgICogZGVyZWZlcmVuY2luZyB1bmRlZmluZWQgcGF0aHMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3whQXJyYXk8KHN0cmluZ3xudW1iZXIpPil9IHBhdGggUGF0aCB0byB0aGUgdmFsdWVcbiAgICAgICAqICAgdG8gd3JpdGUuICBUaGUgcGF0aCBtYXkgYmUgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIChlLmcuIGAnZm9vLmJhci5iYXonYClcbiAgICAgICAqICAgb3IgYW4gYXJyYXkgb2YgcGF0aCBwYXJ0cyAoZS5nLiBgWydmb28uYmFyJywgJ2JheiddYCkuICBOb3RlIHRoYXRcbiAgICAgICAqICAgYnJhY2tldGVkIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkOyBzdHJpbmctYmFzZWQgcGF0aCBwYXJ0c1xuICAgICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICAgKiAgIGluZGljZXMsIHRoZSBpbmRleCBtYXkgYmUgdXNlZCBhcyBhIGRvdHRlZCBwYXJ0IGRpcmVjdGx5XG4gICAgICAgKiAgIChlLmcuIGAndXNlcnMuMTIubmFtZSdgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0IGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcm9vdCBSb290IG9iamVjdCBmcm9tIHdoaWNoIHRoZSBwYXRoIGlzIGV2YWx1YXRlZC5cbiAgICAgICAqICAgV2hlbiBzcGVjaWZpZWQsIG5vIG5vdGlmaWNhdGlvbiB3aWxsIG9jY3VyLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICovXG4gICAgICBzZXQocGF0aCwgdmFsdWUsIHJvb3QpIHtcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICBQb2x5bWVyLlBhdGguc2V0KHJvb3QsIHBhdGgsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXNbVFlQRVMuUkVBRF9PTkxZXSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldWy8qKiBAdHlwZSB7c3RyaW5nfSAqLyhwYXRoKV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBpdGVtcyBvbnRvIHRoZSBlbmQgb2YgdGhlIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgICAqIGBBcnJheS5wcm90b3R5cGUucHVzaGAuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGl0ZW1zIEl0ZW1zIHRvIHB1c2ggb250byBhcnJheVxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSBOZXcgbGVuZ3RoIG9mIHRoZSBhcnJheS5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgcHVzaChwYXRoLCAuLi5pdGVtcykge1xuICAgICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9Ki8oUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAgIGxldCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGxldCByZXQgPSBhcnJheS5wdXNoKC4uLml0ZW1zKTtcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBsZW4sIGl0ZW1zLmxlbmd0aCwgW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhlIGVuZCBvZiBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICAgKiBgQXJyYXkucHJvdG90eXBlLnBvcGAuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICAgKiBAcmV0dXJuIHsqfSBJdGVtIHRoYXQgd2FzIHJlbW92ZWQuXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cbiAgICAgIHBvcChwYXRoKSB7XG4gICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAgIGxldCBoYWRMZW5ndGggPSBCb29sZWFuKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGxldCByZXQgPSBhcnJheS5wb3AoKTtcbiAgICAgICAgaWYgKGhhZExlbmd0aCkge1xuICAgICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBhcnJheS5sZW5ndGgsIDAsIFtyZXRdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0aW5nIGZyb20gdGhlIHN0YXJ0IGluZGV4IHNwZWNpZmllZCwgcmVtb3ZlcyAwIG9yIG1vcmUgaXRlbXNcbiAgICAgICAqIGZyb20gdGhlIGFycmF5IGFuZCBpbnNlcnRzIDAgb3IgbW9yZSBuZXcgaXRlbXMgaW4gdGhlaXIgcGxhY2UuXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICAgKiBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgSW5kZXggZnJvbSB3aGljaCB0byBzdGFydCByZW1vdmluZy9pbnNlcnRpbmcuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsZXRlQ291bnQgTnVtYmVyIG9mIGl0ZW1zIHRvIHJlbW92ZS5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gaXRlbXMgSXRlbXMgdG8gaW5zZXJ0IGludG8gYXJyYXkuXG4gICAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgcmVtb3ZlZCBpdGVtcy5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgc3BsaWNlKHBhdGgsIHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpIHtcbiAgICAgICAgbGV0IGluZm8gPSB7cGF0aCA6ICcnfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSBmYW5jeSBuYXRpdmUgc3BsaWNlIGhhbmRsaW5nIG9mIGNyYXp5IHN0YXJ0IHZhbHVlc1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgc3RhcnQgPSBhcnJheS5sZW5ndGggLSBNYXRoLmZsb29yKC1zdGFydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFycmF5LnNwbGljZSBkb2VzIGRpZmZlcmVudCB0aGluZ3MgYmFzZWQgb24gdGhlIG51bWJlciBvZiBhcmd1bWVudHNcbiAgICAgICAgLy8geW91IHBhc3MgaW4uIFRoZXJlZm9yZSwgYXJyYXkuc3BsaWNlKDApIGFuZCBhcnJheS5zcGxpY2UoMCwgdW5kZWZpbmVkKVxuICAgICAgICAvLyBkbyBkaWZmZXJlbnQgdGhpbmdzLiBJbiB0aGUgZm9ybWVyLCB0aGUgd2hvbGUgYXJyYXkgaXMgY2xlYXJlZC4gSW4gdGhlXG4gICAgICAgIC8vIGxhdHRlciwgbm8gaXRlbXMgYXJlIHJlbW92ZWQuXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIGRldGVjdCB3aGV0aGVyIDEuIG9uZSBvZiB0aGUgYXJndW1lbnRzXG4gICAgICAgIC8vIGlzIGFjdHVhbGx5IHBhc3NlZCBpbiBhbmQgdGhlbiAyLiBkZXRlcm1pbmUgaG93IG1hbnkgYXJndW1lbnRzXG4gICAgICAgIC8vIHdlIHNob3VsZCBwYXNzIG9uIHRvIHRoZSBuYXRpdmUgYXJyYXkuc3BsaWNlXG4gICAgICAgIC8vXG4gICAgICAgIGxldCByZXQ7XG4gICAgICAgIC8vIE9taXQgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGlmIHRoZXkgd2VyZSBub3QgcGFzc2VkIGluXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0KTtcbiAgICAgICAgLy8gRWl0aGVyIHN0YXJ0IHdhcyB1bmRlZmluZWQgYW5kIHRoZSBvdGhlcnMgd2VyZSBkZWZpbmVkLCBidXQgaW4gdGhpc1xuICAgICAgICAvLyBjYXNlIHdlIGNhbiBzYWZlbHkgcGFzcyBvbiBhbGwgYXJndW1lbnRzXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE5vdGU6IHRoaXMgaW5jbHVkZXMgdGhlIGNhc2Ugd2hlcmUgbm9uZSBvZiB0aGUgYXJndW1lbnRzIHdlcmUgcGFzc2VkIGluLFxuICAgICAgICAvLyBlLmcuIHRoaXMuc3BsaWNlKCdhcnJheScpLiBIb3dldmVyLCBpZiBib3RoIHN0YXJ0IGFuZCBkZWxldGVDb3VudFxuICAgICAgICAvLyBhcmUgdW5kZWZpbmVkLCBhcnJheS5zcGxpY2Ugd2lsbCBub3QgbW9kaWZ5IHRoZSBhcnJheSAoYXMgZXhwZWN0ZWQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0IHRoZSBlbmQsIGNoZWNrIHdoZXRoZXIgYW55IGl0ZW1zIHdlcmUgcGFzc2VkIGluIChlLmcuIGluc2VydGlvbnMpXG4gICAgICAgIC8vIG9yIGlmIHRoZSByZXR1cm4gYXJyYXkgY29udGFpbnMgaXRlbXMgKGUuZy4gZGVsZXRpb25zKS5cbiAgICAgICAgLy8gT25seSBub3RpZnkgaWYgaXRlbXMgd2VyZSBhZGRlZCBvciBkZWxldGVkLlxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIHx8IHJldC5sZW5ndGgpIHtcbiAgICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgc3RhcnQsIGl0ZW1zLmxlbmd0aCwgcmV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAgICogYEFycmF5LnByb3RvdHlwZS5wb3BgLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAgICogQHJldHVybiB7Kn0gSXRlbSB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAgICogQHB1YmxpY1xuICAgICAgICovXG4gICAgICBzaGlmdChwYXRoKSB7XG4gICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oUG9seW1lci5QYXRoLmdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAgIGxldCBoYWRMZW5ndGggPSBCb29sZWFuKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGxldCByZXQgPSBhcnJheS5zaGlmdCgpO1xuICAgICAgICBpZiAoaGFkTGVuZ3RoKSB7XG4gICAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIDAsIDAsIFtyZXRdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW5mbyBhcnJheVxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSBOZXcgbGVuZ3RoIG9mIHRoZSBhcnJheS5cbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgdW5zaGlmdChwYXRoLCAuLi5pdGVtcykge1xuICAgICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKFBvbHltZXIuUGF0aC5nZXQodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgICBsZXQgcmV0ID0gYXJyYXkudW5zaGlmdCguLi5pdGVtcyk7XG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgMCwgaXRlbXMubGVuZ3RoLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBOb3RpZnkgdGhhdCBhIHBhdGggaGFzIGNoYW5nZWQuXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZTpcbiAgICAgICAqXG4gICAgICAgKiAgICAgdGhpcy5pdGVtLnVzZXIubmFtZSA9ICdCb2InO1xuICAgICAgICogICAgIHRoaXMubm90aWZ5UGF0aCgnaXRlbS51c2VyLm5hbWUnKTtcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAgICogQHBhcmFtIHsqPX0gdmFsdWUgVmFsdWUgYXQgdGhlIHBhdGggKG9wdGlvbmFsKS5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHVibGljXG4gICAgICAqL1xuICAgICAgbm90aWZ5UGF0aChwYXRoLCB2YWx1ZSkge1xuICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgbGV0IHByb3BQYXRoO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgLy8gR2V0IHZhbHVlIGlmIG5vdCBzdXBwbGllZFxuICAgICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgICB2YWx1ZSA9IFBvbHltZXIuUGF0aC5nZXQodGhpcywgcGF0aCwgaW5mbyk7XG4gICAgICAgICAgcHJvcFBhdGggPSBpbmZvLnBhdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICAgIC8vIE5vcm1hbGl6ZSBwYXRoIGlmIG5lZWRlZFxuICAgICAgICAgIHByb3BQYXRoID0gUG9seW1lci5QYXRoLm5vcm1hbGl6ZShwYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wUGF0aCA9IC8qKiBAdHlwZXtzdHJpbmd9ICovKHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocHJvcFBhdGgsIHZhbHVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gcHJvdGVjdGVkU2V0dGVyIENyZWF0ZXMgYSBjdXN0b20gcHJvdGVjdGVkIHNldHRlclxuICAgICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9jcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFQURfT05MWSk7XG4gICAgICAgIGlmIChwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgICAgICB0aGlzWydfc2V0JyArIHVwcGVyKHByb3BlcnR5KV0gPSAvKiogQHRoaXMge1Byb3BlcnR5RWZmZWN0c30gKi9mdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZCB0byBjYWxsXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBkeW5hbWljRm4gV2hldGhlciB0aGUgbWV0aG9kIG5hbWUgc2hvdWxkIGJlIGluY2x1ZGVkIGFzXG4gICAgICAgKiAgIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuKSB7XG4gICAgICAgIGxldCBpbmZvID0geyBwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm46IEJvb2xlYW4oZHluYW1pY0ZuKSB9O1xuICAgICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuT0JTRVJWRSwge1xuICAgICAgICAgIGZuOiBydW5PYnNlcnZlckVmZmVjdCwgaW5mbywgdHJpZ2dlcjoge25hbWU6IHByb3BlcnR5fVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGR5bmFtaWNGbikge1xuICAgICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyhtZXRob2QpLCBUWVBFUy5PQlNFUlZFLCB7XG4gICAgICAgICAgICBmbjogcnVuT2JzZXJ2ZXJFZmZlY3QsIGluZm8sIHRyaWdnZXI6IHtuYW1lOiBtZXRob2R9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgICBsZXQgc2lnID0gcGFyc2VNZXRob2QoZXhwcmVzc2lvbik7XG4gICAgICAgIGlmICghc2lnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIG9ic2VydmVyIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVNZXRob2RFZmZlY3QodGhpcywgc2lnLCBUWVBFUy5PQlNFUlZFLCBydW5NZXRob2RFZmZlY3QsIG51bGwsIGR5bmFtaWNGbik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLk5PVElGWSwge1xuICAgICAgICAgIGZuOiBydW5Ob3RpZnlFZmZlY3QsXG4gICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgZXZlbnROYW1lOiBDYXNlTWFwLmNhbWVsVG9EYXNoQ2FzZShwcm9wZXJ0eSkgKyAnLWNoYW5nZWQnLFxuICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUmVmbGVjdGVkUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICBsZXQgYXR0ciA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgaWYgKGF0dHJbMF0gPT09ICctJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUHJvcGVydHkgJyArIHByb3BlcnR5ICsgJyBjYW5ub3QgYmUgcmVmbGVjdGVkIHRvIGF0dHJpYnV0ZSAnICtcbiAgICAgICAgICAgIGF0dHIgKyAnIGJlY2F1c2UgXCItXCIgaXMgbm90IGEgdmFsaWQgc3RhcnRpbmcgYXR0cmlidXRlIG5hbWUuIFVzZSBhIGxvd2VyY2FzZSBmaXJzdCBsZXR0ZXIgZm9yIHRoZSBwcm9wZXJ0eSBpbnN0ZWFkLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUZMRUNULCB7XG4gICAgICAgICAgICBmbjogcnVuUmVmbGVjdEVmZmVjdCxcbiAgICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgICAgYXR0ck5hbWU6IGF0dHJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVDb21wdXRlZFByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIGNvbXB1dGVkIHByb3BlcnR5IHRvIHNldFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3Q9fSBkeW5hbWljRm4gQm9vbGVhbiBvciBvYmplY3QgbWFwIGluZGljYXRpbmdcbiAgICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgICBsZXQgc2lnID0gcGFyc2VNZXRob2QoZXhwcmVzc2lvbik7XG4gICAgICAgIGlmICghc2lnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIGNvbXB1dGVkIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVNZXRob2RFZmZlY3QodGhpcywgc2lnLCBUWVBFUy5DT01QVVRFLCBydW5Db21wdXRlZEVmZmVjdCwgcHJvcGVydHksIGR5bmFtaWNGbik7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tIHN0YXRpYyBjbGFzcyBtZXRob2RzIC0tLS0tLS0tLS0tLVxuXG4gICAgICAvKipcbiAgICAgICAqIEVuc3VyZXMgYW4gYWNjZXNzb3IgZXhpc3RzIGZvciB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LCBhbmQgYWRkc1xuICAgICAgICogdG8gYSBsaXN0IG9mIFwicHJvcGVydHkgZWZmZWN0c1wiIHRoYXQgd2lsbCBydW4gd2hlbiB0aGUgYWNjZXNzb3IgZm9yXG4gICAgICAgKiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IGlzIHNldC4gIEVmZmVjdHMgYXJlIGdyb3VwZWQgYnkgXCJ0eXBlXCIsIHdoaWNoXG4gICAgICAgKiByb3VnaGx5IGNvcnJlc3BvbmRzIHRvIGEgcGhhc2UgaW4gZWZmZWN0IHByb2Nlc3NpbmcuICBUaGUgZWZmZWN0XG4gICAgICAgKiBtZXRhZGF0YSBzaG91bGQgYmUgaW4gdGhlIGZvbGxvd2luZyBmb3JtOlxuICAgICAgICpcbiAgICAgICAqICAgICB7XG4gICAgICAgKiAgICAgICBmbjogZWZmZWN0RnVuY3Rpb24sIC8vIFJlZmVyZW5jZSB0byBmdW5jdGlvbiB0byBjYWxsIHRvIHBlcmZvcm0gZWZmZWN0XG4gICAgICAgKiAgICAgICBpbmZvOiB7IC4uLiB9ICAgICAgIC8vIEVmZmVjdCBtZXRhZGF0YSBwYXNzZWQgdG8gZnVuY3Rpb25cbiAgICAgICAqICAgICAgIHRyaWdnZXI6IHsgICAgICAgICAgLy8gT3B0aW9uYWwgdHJpZ2dlcmluZyBtZXRhZGF0YTsgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgKiAgICAgICAgIG5hbWU6IHN0cmluZyAgICAgIC8vIHRoZSBwcm9wZXJ0eSBpcyB0cmVhdGVkIGFzIGEgd2lsZGNhcmRcbiAgICAgICAqICAgICAgICAgc3RydWN0dXJlZDogYm9vbGVhblxuICAgICAgICogICAgICAgICB3aWxkY2FyZDogYm9vbGVhblxuICAgICAgICogICAgICAgfVxuICAgICAgICogICAgIH1cbiAgICAgICAqXG4gICAgICAgKiBFZmZlY3RzIGFyZSBjYWxsZWQgZnJvbSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyIGJ5XG4gICAgICAgKiB0eXBlOlxuICAgICAgICpcbiAgICAgICAqIDEuIENPTVBVVEVcbiAgICAgICAqIDIuIFBST1BBR0FURVxuICAgICAgICogMy4gUkVGTEVDVFxuICAgICAgICogNC4gT0JTRVJWRVxuICAgICAgICogNS4gTk9USUZZXG4gICAgICAgKlxuICAgICAgICogRWZmZWN0IGZ1bmN0aW9ucyBhcmUgY2FsbGVkIHdpdGggdGhlIGZvbGxvd2luZyBzaWduYXR1cmU6XG4gICAgICAgKlxuICAgICAgICogICAgIGVmZmVjdEZ1bmN0aW9uKGluc3QsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaW5mbywgaGFzUGF0aHMpXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3RcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBhZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgc2luZ2xlLXByb3BlcnR5IG9ic2VydmVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZCB0byBjYWxsXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBkeW5hbWljRm4gV2hldGhlciB0aGUgbWV0aG9kIG5hbWUgc2hvdWxkIGJlIGluY2x1ZGVkIGFzXG4gICAgICAgKiAgIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIG11bHRpLXByb3BlcnR5IFwibWV0aG9kIG9ic2VydmVyXCIgYmFzZWQgb24gdGhlIHByb3ZpZGVkXG4gICAgICAgKiBleHByZXNzaW9uLCB3aGljaCBzaG91bGQgYmUgYSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdFxuICAgICAgICogZnVuY3Rpb24gc2lnbmF0dXJlOiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2AuICBFYWNoIGFyZ3VtZW50XG4gICAgICAgKiBzaG91bGQgY29ycmVzcG9uZCB0byBhIHByb3BlcnR5IG9yIHBhdGggaW4gdGhlIGNvbnRleHQgb2YgdGhpc1xuICAgICAgICogcHJvdG90eXBlIChvciBpbnN0YW5jZSksIG9yIG1heSBiZSBhIGxpdGVyYWwgc3RyaW5nIG9yIG51bWJlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgY3JlYXRlTWV0aG9kT2JzZXJ2ZXIoZXhwcmVzc2lvbiwgZHluYW1pY0ZuKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhdXNlcyB0aGUgc2V0dGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdG8gZGlzcGF0Y2ggYDxwcm9wZXJ0eT4tY2hhbmdlZGBcbiAgICAgICAqIGV2ZW50cyB0byBub3RpZnkgb2YgY2hhbmdlcyB0byB0aGUgcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSByZWFkLW9ubHkgYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBUbyBzZXQgdGhlIHByb3BlcnR5LCB1c2UgdGhlIHByb3RlY3RlZCBgX3NldFByb3BlcnR5YCBBUEkuXG4gICAgICAgKiBUbyBjcmVhdGUgYSBjdXN0b20gcHJvdGVjdGVkIHNldHRlciAoZS5nLiBgX3NldE15UHJvcCgpYCBmb3JcbiAgICAgICAqIHByb3BlcnR5IGBteVByb3BgKSwgcGFzcyBgdHJ1ZWAgZm9yIGBwcm90ZWN0ZWRTZXR0ZXJgLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUsIGlmIHRoZSBwcm9wZXJ0eSB3aWxsIGhhdmUgb3RoZXIgcHJvcGVydHkgZWZmZWN0cywgdGhpcyBtZXRob2RcbiAgICAgICAqIHNob3VsZCBiZSBjYWxsZWQgZmlyc3QsIGJlZm9yZSBhZGRpbmcgb3RoZXIgZWZmZWN0cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gcHJvdGVjdGVkU2V0dGVyIENyZWF0ZXMgYSBjdXN0b20gcHJvdGVjdGVkIHNldHRlclxuICAgICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkocHJvcGVydHksIHByb3RlY3RlZFNldHRlcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byByZWZsZWN0IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICogdG8gYSAoZGFzaC1jYXNlZCkgYXR0cmlidXRlIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBjb21wdXRlZCBwcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBzZXQgdG8gdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAqIG1ldGhvZCBkZXNjcmliZWQgYnkgdGhlIGdpdmVuIGBleHByZXNzaW9uYCBlYWNoIHRpbWUgb25lIG9yIG1vcmVcbiAgICAgICAqIGFyZ3VtZW50cyB0byB0aGUgbWV0aG9kIGNoYW5nZXMuICBUaGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgYSBzdHJpbmdcbiAgICAgICAqIGluIHRoZSBmb3JtIG9mIGEgbm9ybWFsIEphdmFTY3JpcHQgZnVuY3Rpb24gc2lnbmF0dXJlOlxuICAgICAgICogYCdtZXRob2ROYW1lKGFyZzEsIFsuLi4sIGFyZ25dKSdgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgY29tcHV0ZWQgcHJvcGVydHkgdG8gc2V0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBNZXRob2QgZXhwcmVzc2lvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gICAgICAgKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eShwcm9wZXJ0eSwgZXhwcmVzc2lvbiwgZHluYW1pY0ZuKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFBhcnNlcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdG8gZW5zdXJlIGJpbmRpbmcgZWZmZWN0cyBhcmUgY3JlYXRlZFxuICAgICAgICogZm9yIHRoZW0sIGFuZCB0aGVuIGVuc3VyZXMgcHJvcGVydHkgYWNjZXNzb3JzIGFyZSBjcmVhdGVkIGZvciBhbnlcbiAgICAgICAqIGRlcGVuZGVudCBwcm9wZXJ0aWVzIGluIHRoZSB0ZW1wbGF0ZS4gIEJpbmRpbmcgZWZmZWN0cyBmb3IgYm91bmRcbiAgICAgICAqIHRlbXBsYXRlcyBhcmUgc3RvcmVkIGluIGEgbGlua2VkIGxpc3Qgb24gdGhlIGluc3RhbmNlIHNvIHRoYXRcbiAgICAgICAqIHRlbXBsYXRlcyBjYW4gYmUgZWZmaWNpZW50bHkgc3RhbXBlZCBhbmQgdW5zdGFtcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAgICogICBiaW5kaW5nc1xuICAgICAgICogQHJldHVybiB7IVRlbXBsYXRlSW5mb30gVGVtcGxhdGUgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBiaW5kVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlLl9iaW5kVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgfVxuXG4gICAgICAvLyAtLSBiaW5kaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgLyoqXG4gICAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgYmluZFRlbXBsYXRlYCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgb24gdGhlIHByb3RvdHlwZSAoZm9yIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZVxuICAgICAgICogYmluZGluZywgdG8gYXZvaWQgY3JlYXRpbmcgYWNjZXNzb3JzIGV2ZXJ5IGluc3RhbmNlKSBvbmNlIHBlciBwcm90b3R5cGUsXG4gICAgICAgKiBhbmQgd2lsbCBiZSBjYWxsZWQgd2l0aCBgcnVudGltZUJpbmRpbmc6IHRydWVgIGJ5IGBfc3RhbXBUZW1wbGF0ZWAgdG9cbiAgICAgICAqIGNyZWF0ZSBhbmQgbGluayBhbiBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGFcbiAgICAgICAqIHBhcnRpY3VsYXIgc3RhbXBpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgY29udGFpbmluZyBiaW5kaW5nXG4gICAgICAgKiAgIGJpbmRpbmdzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbnN0YW5jZUJpbmRpbmcgV2hlbiBmYWxzZSAoZGVmYXVsdCksIHBlcmZvcm1zXG4gICAgICAgKiAgIFwicHJvdG90eXBpY2FsXCIgYmluZGluZyBvZiB0aGUgdGVtcGxhdGUgYW5kIG92ZXJ3cml0ZXMgYW55IHByZXZpb3VzbHlcbiAgICAgICAqICAgYm91bmQgdGVtcGxhdGUgZm9yIHRoZSBjbGFzcy4gV2hlbiB0cnVlIChhcyBwYXNzZWQgZnJvbVxuICAgICAgICogICBgX3N0YW1wVGVtcGxhdGVgKSwgdGhlIHRlbXBsYXRlIGluZm8gaXMgaW5zdGFuY2VkIGFuZCBsaW5rZWQgaW50b1xuICAgICAgICogICB0aGUgbGlzdCBvZiBib3VuZCB0ZW1wbGF0ZXMuXG4gICAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3Q7IGZvciBgcnVudGltZUJpbmRpbmdgLFxuICAgICAgICogICB0aGlzIGlzIGFuIGluc3RhbmNlIG9mIHRoZSBwcm90b3R5cGljYWwgdGVtcGxhdGUgaW5mb1xuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfYmluZFRlbXBsYXRlKHRlbXBsYXRlLCBpbnN0YW5jZUJpbmRpbmcpIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuY29uc3RydWN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICBsZXQgd2FzUHJlQm91bmQgPSB0aGlzLl9fdGVtcGxhdGVJbmZvID09IHRlbXBsYXRlSW5mbztcbiAgICAgICAgLy8gT3B0aW1pemF0aW9uOiBzaW5jZSB0aGlzIGlzIGNhbGxlZCB0d2ljZSBmb3IgcHJvdG8tYm91bmQgdGVtcGxhdGVzLFxuICAgICAgICAvLyBkb24ndCBhdHRlbXB0IHRvIHJlY3JlYXRlIGFjY2Vzc29ycyBpZiB0aGlzIHRlbXBsYXRlIHdhcyBwcmUtYm91bmRcbiAgICAgICAgaWYgKCF3YXNQcmVCb3VuZCkge1xuICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cykge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlQmluZGluZykge1xuICAgICAgICAgIC8vIEZvciBpbnN0YW5jZS10aW1lIGJpbmRpbmcsIGNyZWF0ZSBpbnN0YW5jZSBvZiB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAgICAgIC8vIGFuZCBsaW5rIGludG8gbGlzdCBvZiB0ZW1wbGF0ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqLyhPYmplY3QuY3JlYXRlKHRlbXBsYXRlSW5mbykpO1xuICAgICAgICAgIHRlbXBsYXRlSW5mby53YXNQcmVCb3VuZCA9IHdhc1ByZUJvdW5kO1xuICAgICAgICAgIGlmICghd2FzUHJlQm91bmQgJiYgdGhpcy5fX3RlbXBsYXRlSW5mbykge1xuICAgICAgICAgICAgbGV0IGxhc3QgPSB0aGlzLl9fdGVtcGxhdGVJbmZvTGFzdCB8fCB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgICAgICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPSBsYXN0Lm5leHRUZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgICAgICB0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm8gPSBsYXN0O1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlSW5mbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX190ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBhIHByb3BlcnR5IGVmZmVjdCB0byB0aGUgZ2l2ZW4gdGVtcGxhdGUgbWV0YWRhdGEsIHdoaWNoIGlzIHJ1blxuICAgICAgICogYXQgdGhlIFwicHJvcGFnYXRlXCIgc3RhZ2Ugb2YgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgd2hlbiB0aGUgdGVtcGxhdGVcbiAgICAgICAqIGhhcyBiZWVuIGJvdW5kIHRvIHRoZSBlbGVtZW50IHZpYSBgX2JpbmRUZW1wbGF0ZWAuXG4gICAgICAgKlxuICAgICAgICogVGhlIGBlZmZlY3RgIG9iamVjdCBzaG91bGQgbWF0Y2ggdGhlIGZvcm1hdCBpbiBgX2FkZFByb3BlcnR5RWZmZWN0YC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIHRvIGFkZCBlZmZlY3QgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBlZmZlY3QgRWZmZWN0IG1ldGFkYXRhIG9iamVjdFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgcHJvcCwgZWZmZWN0KSB7XG4gICAgICAgIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyB8fCB7fTtcbiAgICAgICAgaG9zdFByb3BzW3Byb3BdID0gdHJ1ZTtcbiAgICAgICAgbGV0IGVmZmVjdHMgPSB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzID0gdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cyB8fCB7fTtcbiAgICAgICAgbGV0IHByb3BFZmZlY3RzID0gZWZmZWN0c1twcm9wXSA9IGVmZmVjdHNbcHJvcF0gfHwgW107XG4gICAgICAgIHByb3BFZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTdGFtcHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIGFuZCBwZXJmb3JtcyBpbnN0YW5jZS10aW1lIHNldHVwIGZvclxuICAgICAgICogUG9seW1lciB0ZW1wbGF0ZSBmZWF0dXJlcywgaW5jbHVkaW5nIGRhdGEgYmluZGluZ3MsIGRlY2xhcmF0aXZlIGV2ZW50XG4gICAgICAgKiBsaXN0ZW5lcnMsIGFuZCB0aGUgYHRoaXMuJGAgbWFwIG9mIGBpZGAncyB0byBub2Rlcy4gIEEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgICAqIGlzIHJldHVybmVkIGNvbnRhaW5pbmcgdGhlIHN0YW1wZWQgRE9NLCByZWFkeSBmb3IgaW5zZXJ0aW9uIGludG8gdGhlXG4gICAgICAgKiBET00uXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZTsgaG93ZXZlciBub3RlIHRoYXQgZHVlIHRvXG4gICAgICAgKiBgc2hhZHljc3NgIHBvbHlmaWxsIGxpbWl0YXRpb25zLCBvbmx5IHN0eWxlcyBmcm9tIHRlbXBsYXRlcyBwcmVwYXJlZFxuICAgICAgICogdXNpbmcgYFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZWAgd2lsbCBiZSBjb3JyZWN0bHkgcG9seWZpbGxlZCAoc2NvcGVkXG4gICAgICAgKiB0byB0aGUgc2hhZG93IHJvb3QgYW5kIHN1cHBvcnQgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzKSwgYW5kIG5vdGUgdGhhdFxuICAgICAgICogYFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZWAgbWF5IG9ubHkgYmUgY2FsbGVkIG9uY2UgcGVyIGVsZW1lbnQuIEFzIHN1Y2gsXG4gICAgICAgKiBhbnkgc3R5bGVzIHJlcXVpcmVkIGJ5IGluIHJ1bnRpbWUtc3RhbXBlZCB0ZW1wbGF0ZXMgbXVzdCBiZSBpbmNsdWRlZFxuICAgICAgICogaW4gdGhlIG1haW4gZWxlbWVudCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAgICogQHJldHVybiB7IVN0YW1wZWRUZW1wbGF0ZX0gQ2xvbmVkIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBfc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICAvLyBFbnN1cmVzIHRoYXQgY3JlYXRlZCBkb20gaXMgYF9lbnF1ZXVlQ2xpZW50YCdkIHRvIHRoaXMgZWxlbWVudCBzb1xuICAgICAgICAvLyB0aGF0IGl0IGNhbiBiZSBmbHVzaGVkIG9uIG5leHQgY2FsbCB0byBgX2ZsdXNoUHJvcGVydGllc2BcbiAgICAgICAgaG9zdFN0YWNrLmJlZ2luSG9zdGluZyh0aGlzKTtcbiAgICAgICAgbGV0IGRvbSA9IHN1cGVyLl9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgaG9zdFN0YWNrLmVuZEhvc3RpbmcodGhpcyk7XG4gICAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSAvKiogQHR5cGUgeyFUZW1wbGF0ZUluZm99ICovKHRoaXMuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgdHJ1ZSkpO1xuICAgICAgICAvLyBBZGQgdGVtcGxhdGUtaW5zdGFuY2Utc3BlY2lmaWMgZGF0YSB0byBpbnN0YW5jZWQgdGVtcGxhdGVJbmZvXG4gICAgICAgIHRlbXBsYXRlSW5mby5ub2RlTGlzdCA9IGRvbS5ub2RlTGlzdDtcbiAgICAgICAgLy8gQ2FwdHVyZSBjaGlsZCBub2RlcyB0byBhbGxvdyB1bnN0YW1waW5nIG9mIG5vbi1wcm90b3R5cGljYWwgdGVtcGxhdGVzXG4gICAgICAgIGlmICghdGVtcGxhdGVJbmZvLndhc1ByZUJvdW5kKSB7XG4gICAgICAgICAgbGV0IG5vZGVzID0gdGVtcGxhdGVJbmZvLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBuPWRvbS5maXJzdENoaWxkOyBuOyBuPW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2gobik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvbS50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgIC8vIFNldHVwIGNvbXBvdW5kIHN0b3JhZ2UsIDItd2F5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0IGZvciBiaW5kaW5nc1xuICAgICAgICBzZXR1cEJpbmRpbmdzKHRoaXMsIHRlbXBsYXRlSW5mbyk7XG4gICAgICAgIC8vIEZsdXNoIHByb3BlcnRpZXMgaW50byB0ZW1wbGF0ZSBub2RlcyBpZiBhbHJlYWR5IGJvb3RlZFxuICAgICAgICBpZiAodGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cywgdGhpcy5fX2RhdGEsIG51bGwsXG4gICAgICAgICAgICBmYWxzZSwgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9tO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYW5kIHVuYmluZHMgdGhlIG5vZGVzIHByZXZpb3VzbHkgY29udGFpbmVkIGluIHRoZSBwcm92aWRlZFxuICAgICAgICogRG9jdW1lbnRGcmFnbWVudCByZXR1cm5lZCBmcm9tIGBfc3RhbXBUZW1wbGF0ZWAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshU3RhbXBlZFRlbXBsYXRlfSBkb20gRG9jdW1lbnRGcmFnbWVudCBwcmV2aW91c2x5IHJldHVybmVkXG4gICAgICAgKiAgIGZyb20gYF9zdGFtcFRlbXBsYXRlYCBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGVzIHRvIGJlIHJlbW92ZWRcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9yZW1vdmVCb3VuZERvbShkb20pIHtcbiAgICAgICAgLy8gVW5saW5rIHRlbXBsYXRlIGluZm9cbiAgICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IGRvbS50ZW1wbGF0ZUluZm87XG4gICAgICAgIGlmICh0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbyA9XG4gICAgICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9XG4gICAgICAgICAgICB0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID09IHRlbXBsYXRlSW5mbykge1xuICAgICAgICAgIHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID0gdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvID0gbnVsbDtcbiAgICAgICAgLy8gUmVtb3ZlIHN0YW1wZWQgbm9kZXNcbiAgICAgICAgbGV0IG5vZGVzID0gdGVtcGxhdGVJbmZvLmNoaWxkTm9kZXM7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGBUZXh0Tm9kZWAncycgYHRleHRDb250ZW50YC4gIEEgYGJpbmRpbmdzYFxuICAgICAgICogYXJyYXkgaXMgYWRkZWQgdG8gYG5vZGVJbmZvYCBhbmQgcG9wdWxhdGVkIHdpdGggYmluZGluZyBtZXRhZGF0YVxuICAgICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICAgKiB3aXRoIG9uZSBvciBtb3JlIG1ldGFkYXRhIG9iamVjdHMgY2FwdHVyaW5nIHRoZSBzb3VyY2Uocykgb2YgdGhlXG4gICAgICAgKiBiaW5kaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAgIGxldCBub3RlZCA9IHN1cGVyLl9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyhub2RlLnRleHRDb250ZW50LCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdGV4dENvbnRlbnQgd2l0aCBhbnkgbGl0ZXJhbCBwYXJ0c1xuICAgICAgICAgICAgLy8gTk9URTogZGVmYXVsdCB0byBhIHNwYWNlIGhlcmUgc28gdGhlIHRleHROb2RlIHJlbWFpbnM7IHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAgIC8vIChJRSkgb21pdCBhbiBlbXB0eSB0ZXh0Tm9kZSBmb2xsb3dpbmcgY2xvbmVOb2RlL2ltcG9ydE5vZGUuXG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykgfHwgJyAnO1xuICAgICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAndGV4dCcsICd0ZXh0Q29udGVudCcsIHBhcnRzKTtcbiAgICAgICAgICAgIG5vdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdGVkO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBkZWZhdWx0IGBUZW1wbGF0ZVN0YW1wYCBpbXBsZW1lbnRhdGlvbiB0byBhZGQgc3VwcG9ydCBmb3JcbiAgICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBhdHRyaWJ1dGVzLiAgQSBgYmluZGluZ3NgXG4gICAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICAgKiB3aXRoIGluZm9ybWF0aW9uIGNhcHR1cmluZyB0aGUgYmluZGluZyB0YXJnZXQsIGFuZCBhIGBwYXJ0c2AgYXJyYXlcbiAgICAgICAqIHdpdGggb25lIG9yIG1vcmUgbWV0YWRhdGEgb2JqZWN0cyBjYXB0dXJpbmcgdGhlIHNvdXJjZShzKSBvZiB0aGVcbiAgICAgICAqIGJpbmRpbmcuXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBsZXQgcGFydHMgPSB0aGlzLl9wYXJzZUJpbmRpbmdzKHZhbHVlLCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAvLyBBdHRyaWJ1dGUgb3IgcHJvcGVydHlcbiAgICAgICAgICBsZXQgb3JpZ05hbWUgPSBuYW1lO1xuICAgICAgICAgIGxldCBraW5kID0gJ3Byb3BlcnR5JztcbiAgICAgICAgICAvLyBUaGUgb25seSB3YXkgd2Ugc2VlIGEgY2FwaXRhbCBsZXR0ZXIgaGVyZSBpcyBpZiB0aGUgYXR0ciBoYXNcbiAgICAgICAgICAvLyBhIGNhcGl0YWwgbGV0dGVyIGluIGl0IHBlciBzcGVjLiBJbiB0aGlzIGNhc2UsIHRvIG1ha2Ugc3VyZVxuICAgICAgICAgIC8vIHRoaXMgYmluZGluZyB3b3Jrcywgd2UgZ28gYWhlYWQgYW5kIG1ha2UgdGhlIGJpbmRpbmcgdG8gdGhlIGF0dHJpYnV0ZS5cbiAgICAgICAgICBpZiAoY2FwaXRhbEF0dHJpYnV0ZVJlZ2V4LnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGtpbmQgPSAnYXR0cmlidXRlJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVbbmFtZS5sZW5ndGgtMV0gPT0gJyQnKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICBraW5kID0gJ2F0dHJpYnV0ZSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEluaXRpYWxpemUgYXR0cmlidXRlIGJpbmRpbmdzIHdpdGggYW55IGxpdGVyYWwgcGFydHNcbiAgICAgICAgICBsZXQgbGl0ZXJhbCA9IGxpdGVyYWxGcm9tUGFydHMocGFydHMpO1xuICAgICAgICAgIGlmIChsaXRlcmFsICYmIGtpbmQgPT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGxpdGVyYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDbGVhciBhdHRyaWJ1dGUgYmVmb3JlIHJlbW92aW5nLCBzaW5jZSBJRSB3b24ndCBhbGxvdyByZW1vdmluZ1xuICAgICAgICAgIC8vIGB2YWx1ZWAgYXR0cmlidXRlIGlmIGl0IHByZXZpb3VzbHkgaGFkIGEgdmFsdWUgKGNhbid0XG4gICAgICAgICAgLy8gdW5jb25kaXRpb25hbGx5IHNldCAnJyBiZWZvcmUgcmVtb3Zpbmcgc2luY2UgYXR0cmlidXRlcyB3aXRoIGAkYFxuICAgICAgICAgIC8vIGNhbid0IGJlIHNldCB1c2luZyBzZXRBdHRyaWJ1dGUpXG4gICAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnICYmIG9yaWdOYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShvcmlnTmFtZSwgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZW1vdmUgYW5ub3RhdGlvblxuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG9yaWdOYW1lKTtcbiAgICAgICAgICAvLyBDYXNlIGhhY2tlcnk6IGF0dHJpYnV0ZXMgYXJlIGxvd2VyLWNhc2UsIGJ1dCBiaW5kIHRhcmdldHNcbiAgICAgICAgICAvLyAocHJvcGVydGllcykgYXJlIGNhc2Ugc2Vuc2l0aXZlLiBHYW1iaXQgaXMgdG8gbWFwIGRhc2gtY2FzZSB0b1xuICAgICAgICAgIC8vIGNhbWVsLWNhc2U6IGBmb28tYmFyYCBiZWNvbWVzIGBmb29CYXJgLlxuICAgICAgICAgIC8vIEF0dHJpYnV0ZSBiaW5kaW5ncyBhcmUgZXhjZXB0ZWQuXG4gICAgICAgICAgaWYgKGtpbmQgPT09ICdwcm9wZXJ0eScpIHtcbiAgICAgICAgICAgIG5hbWUgPSBQb2x5bWVyLkNhc2VNYXAuZGFzaFRvQ2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRCaW5kaW5nKHRoaXMsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIGtpbmQsIG5hbWUsIHBhcnRzLCBsaXRlcmFsKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3VwZXIuX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBkZWZhdWx0IGBUZW1wbGF0ZVN0YW1wYCBpbXBsZW1lbnRhdGlvbiB0byBhZGQgc3VwcG9ydCBmb3JcbiAgICAgICAqIGJpbmRpbmcgdGhlIHByb3BlcnRpZXMgdGhhdCBhIG5lc3RlZCB0ZW1wbGF0ZSBkZXBlbmRzIG9uIHRvIHRoZSB0ZW1wbGF0ZVxuICAgICAgICogYXMgYF9ob3N0Xzxwcm9wZXJ0eT5gLlxuICAgICAgICpcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgICBsZXQgbm90ZWQgPSBzdXBlci5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgICAvLyBNZXJnZSBob3N0IHByb3BzIGludG8gb3V0ZXIgdGVtcGxhdGUgYW5kIGFkZCBiaW5kaW5nc1xuICAgICAgICBsZXQgaG9zdFByb3BzID0gbm9kZUluZm8udGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAgICAgICAgbGV0IG1vZGUgPSAneyc7XG4gICAgICAgIGZvciAobGV0IHNvdXJjZSBpbiBob3N0UHJvcHMpIHtcbiAgICAgICAgICBsZXQgcGFydHMgPSBbeyBtb2RlLCBzb3VyY2UsIGRlcGVuZGVuY2llczogW3NvdXJjZV0gfV07XG4gICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAncHJvcGVydHknLCAnX2hvc3RfJyArIHNvdXJjZSwgcGFydHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3RlZDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsZWQgdG8gcGFyc2UgdGV4dCBpbiBhIHRlbXBsYXRlIChlaXRoZXIgYXR0cmlidXRlIHZhbHVlcyBvclxuICAgICAgICogdGV4dENvbnRlbnQpIGludG8gYmluZGluZyBtZXRhZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgb3ZlcnJpZGVzIG9mIHRoaXMgbWV0aG9kIHNob3VsZCByZXR1cm4gYW4gYXJyYXkgb2YgYmluZGluZyBwYXJ0XG4gICAgICAgKiBtZXRhZGF0YSAgcmVwcmVzZW50aW5nIG9uZSBvciBtb3JlIGJpbmRpbmdzIGZvdW5kIGluIHRoZSBwcm92aWRlZCB0ZXh0XG4gICAgICAgKiBhbmQgYW55IFwibGl0ZXJhbFwiIHRleHQgaW4gYmV0d2Vlbi4gIEFueSBub24tbGl0ZXJhbCBwYXJ0cyB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogdG8gYF9ldmFsdWF0ZUJpbmRpbmdgIHdoZW4gYW55IGRlcGVuZGVuY2llcyBjaGFuZ2UuICBUaGUgb25seSByZXF1aXJlZFxuICAgICAgICogZmllbGRzIG9mIGVhY2ggXCJwYXJ0XCIgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBhcyBmb2xsb3dzOlxuICAgICAgICpcbiAgICAgICAqIC0gYGRlcGVuZGVuY2llc2AgLSBBcnJheSBjb250YWluaW5nIHRyaWdnZXIgbWV0YWRhdGEgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgICAqICAgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgYmluZGluZyB0byB1cGRhdGVcbiAgICAgICAqIC0gYGxpdGVyYWxgIC0gU3RyaW5nIGNvbnRhaW5pbmcgdGV4dCBpZiB0aGUgcGFydCByZXByZXNlbnRzIGEgbGl0ZXJhbDtcbiAgICAgICAqICAgaW4gdGhpcyBjYXNlIG5vIGBkZXBlbmRlbmNpZXNgIGFyZSBuZWVkZWRcbiAgICAgICAqXG4gICAgICAgKiBBZGRpdGlvbmFsIG1ldGFkYXRhIGZvciB1c2UgYnkgYF9ldmFsdWF0ZUJpbmRpbmdgIG1heSBiZSBwcm92aWRlZCBpblxuICAgICAgICogZWFjaCBwYXJ0IG9iamVjdCBhcyBuZWVkZWQuXG4gICAgICAgKlxuICAgICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaGFuZGxlcyB0aGUgZm9sbG93aW5nIHR5cGVzIG9mIGJpbmRpbmdzXG4gICAgICAgKiAob25lIG9yIG1vcmUgbWF5IGJlIGludGVybWl4ZWQgd2l0aCBsaXRlcmFsIHN0cmluZ3MpOlxuICAgICAgICogLSBQcm9wZXJ0eSBiaW5kaW5nOiBgW1twcm9wXV1gXG4gICAgICAgKiAtIFBhdGggYmluZGluZzogYFtbb2JqZWN0LnByb3BdXWBcbiAgICAgICAqIC0gTmVnYXRlZCBwcm9wZXJ0eSBvciBwYXRoIGJpbmRpbmdzOiBgW1shcHJvcF1dYCBvciBgW1shb2JqZWN0LnByb3BdXWBcbiAgICAgICAqIC0gVHdvLXdheSBwcm9wZXJ0eSBvciBwYXRoIGJpbmRpbmdzIChzdXBwb3J0cyBuZWdhdGlvbik6XG4gICAgICAgKiAgIGB7e3Byb3B9fWAsIGB7e29iamVjdC5wcm9wfX1gLCBge3shcHJvcH19YCBvciBge3shb2JqZWN0LnByb3B9fWBcbiAgICAgICAqIC0gSW5saW5lIGNvbXB1dGVkIG1ldGhvZCAoc3VwcG9ydHMgbmVnYXRpb24pOlxuICAgICAgICogICBgW1tjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWAsIGBbWyFjb21wdXRlKGEsICdsaXRlcmFsJywgYildXWBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0IHRvIHBhcnNlIGZyb20gYXR0cmlidXRlIG9yIHRleHRDb250ZW50XG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIEN1cnJlbnQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgICAqIEByZXR1cm4ge0FycmF5PCFCaW5kaW5nUGFydD59IEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgX3BhcnNlQmluZGluZ3ModGV4dCwgdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgICAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIC8vIEV4YW1wbGU6IFwibGl0ZXJhbDF7e3Byb3B9fWxpdGVyYWwyW1shY29tcHV0ZShmb28sYmFyKV1dZmluYWxcIlxuICAgICAgICAvLyBSZWdleCBtYXRjaGVzOlxuICAgICAgICAvLyAgICAgICAgSXRlcmF0aW9uIDE6ICBJdGVyYXRpb24gMjpcbiAgICAgICAgLy8gbVsxXTogJ3t7JyAgICAgICAgICAnW1snXG4gICAgICAgIC8vIG1bMl06ICcnICAgICAgICAgICAgJyEnXG4gICAgICAgIC8vIG1bM106ICdwcm9wJyAgICAgICAgJ2NvbXB1dGUoZm9vLGJhciknXG4gICAgICAgIHdoaWxlICgobSA9IGJpbmRpbmdSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIEFkZCBsaXRlcmFsIHBhcnRcbiAgICAgICAgICBpZiAobS5pbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7bGl0ZXJhbDogdGV4dC5zbGljZShsYXN0SW5kZXgsIG0uaW5kZXgpfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFkZCBiaW5kaW5nIHBhcnRcbiAgICAgICAgICBsZXQgbW9kZSA9IG1bMV1bMF07XG4gICAgICAgICAgbGV0IG5lZ2F0ZSA9IEJvb2xlYW4obVsyXSk7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IG1bM10udHJpbSgpO1xuICAgICAgICAgIGxldCBjdXN0b21FdmVudCA9IGZhbHNlLCBub3RpZnlFdmVudCA9ICcnLCBjb2xvbiA9IC0xO1xuICAgICAgICAgIGlmIChtb2RlID09ICd7JyAmJiAoY29sb24gPSBzb3VyY2UuaW5kZXhPZignOjonKSkgPiAwKSB7XG4gICAgICAgICAgICBub3RpZnlFdmVudCA9IHNvdXJjZS5zdWJzdHJpbmcoY29sb24gKyAyKTtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgY29sb24pO1xuICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gcGFyc2VNZXRob2Qoc291cmNlKTtcbiAgICAgICAgICBsZXQgZGVwZW5kZW5jaWVzID0gW107XG4gICAgICAgICAgaWYgKHNpZ25hdHVyZSkge1xuICAgICAgICAgICAgLy8gSW5saW5lIGNvbXB1dGVkIGZ1bmN0aW9uXG4gICAgICAgICAgICBsZXQge2FyZ3MsIG1ldGhvZE5hbWV9ID0gc2lnbmF0dXJlO1xuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICAgICAgICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChhcmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZHluYW1pY0ZucyA9IHRlbXBsYXRlSW5mby5keW5hbWljRm5zO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNGbnMgJiYgZHluYW1pY0Zuc1ttZXRob2ROYW1lXSB8fCBzaWduYXR1cmUuc3RhdGljKSB7XG4gICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgICBzaWduYXR1cmUuZHluYW1pY0ZuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUHJvcGVydHkgb3IgcGF0aFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICBzb3VyY2UsIG1vZGUsIG5lZ2F0ZSwgY3VzdG9tRXZlbnQsIHNpZ25hdHVyZSwgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgICAgZXZlbnQ6IG5vdGlmeUV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gYmluZGluZ1JlZ2V4Lmxhc3RJbmRleDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYSBmaW5hbCBsaXRlcmFsIHBhcnRcbiAgICAgICAgaWYgKGxhc3RJbmRleCAmJiBsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgIGxldCBsaXRlcmFsID0gdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4KTtcbiAgICAgICAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgIGxpdGVyYWw6IGxpdGVyYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGVkIHRvIGV2YWx1YXRlIGEgcHJldmlvdXNseSBwYXJzZWQgYmluZGluZyBwYXJ0IGJhc2VkIG9uIGEgc2V0IG9mXG4gICAgICAgKiBvbmUgb3IgbW9yZSBjaGFuZ2VkIGRlcGVuZGVuY2llcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3RoaXN9IGluc3QgRWxlbWVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIHNjb3BlIGZvclxuICAgICAgICogICBiaW5kaW5nIGRlcGVuZGVuY2llc1xuICAgICAgICogQHBhcmFtIHtCaW5kaW5nUGFydH0gcGFydCBCaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFByb3BlcnR5L3BhdGggdGhhdCB0cmlnZ2VyZWQgdGhpcyBlZmZlY3RcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSB0aGUgYmluZGluZyBwYXJ0IGV2YWx1YXRlZCB0b1xuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgX2V2YWx1YXRlQmluZGluZyhpbnN0LCBwYXJ0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgaWYgKHBhcnQuc2lnbmF0dXJlKSB7XG4gICAgICAgICAgdmFsdWUgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBwYXJ0LnNpZ25hdHVyZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF0aCAhPSBwYXJ0LnNvdXJjZSkge1xuICAgICAgICAgIHZhbHVlID0gUG9seW1lci5QYXRoLmdldChpbnN0LCBwYXJ0LnNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGhhc1BhdGhzICYmIFBvbHltZXIuUGF0aC5pc1BhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gUG9seW1lci5QYXRoLmdldChpbnN0LCBwYXRoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBpbnN0Ll9fZGF0YVtwYXRoXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnQubmVnYXRlKSB7XG4gICAgICAgICAgdmFsdWUgPSAhdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gbWFrZSBhIHR5cGluZyBmb3IgY2xvc3VyZSA6UFxuICAgIFByb3BlcnR5RWZmZWN0c1R5cGUgPSBQcm9wZXJ0eUVmZmVjdHM7XG5cbiAgICByZXR1cm4gUHJvcGVydHlFZmZlY3RzO1xuICB9KTtcblxuICAvKipcbiAgICogSGVscGVyIGFwaSBmb3IgZW5xdWV1aW5nIGNsaWVudCBkb20gY3JlYXRlZCBieSBhIGhvc3QgZWxlbWVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCBlbGVtZW50cyBhcmUgZmx1c2hlZCB2aWEgYF9mbHVzaFByb3BlcnRpZXNgIHdoZW5cbiAgICogYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBjYWxsZWQuIEVsZW1lbnRzIGF0dGFjaCB0aGVpciBjbGllbnQgZG9tIHRvXG4gICAqIHRoZW1zZWx2ZXMgYXQgYHJlYWR5YCB0aW1lIHdoaWNoIHJlc3VsdHMgZnJvbSB0aGlzIGZpcnN0IGZsdXNoLlxuICAgKiBUaGlzIHByb3ZpZGVzIGFuIG9yZGVyaW5nIGd1YXJhbnRlZSB0aGF0IHRoZSBjbGllbnQgZG9tIGFuIGVsZW1lbnRcbiAgICogY3JlYXRlcyBpcyBmbHVzaGVkIGJlZm9yZSB0aGUgZWxlbWVudCBpdHNlbGYgKGkuZS4gY2xpZW50IGByZWFkeWBcbiAgICogZmlyZXMgYmVmb3JlIGhvc3QgYHJlYWR5YCkuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGlmIGBfZmx1c2hQcm9wZXJ0aWVzYCBpcyBjYWxsZWQgKmJlZm9yZSogYW4gZWxlbWVudCBpcyBjb25uZWN0ZWQsXG4gICAqIGFzIGZvciBleGFtcGxlIGBUZW1wbGF0aXplYCBkb2VzLCB0aGlzIG9yZGVyaW5nIGd1YXJhbnRlZSBjYW5ub3QgYmVcbiAgICogc2F0aXNmaWVkIGJlY2F1c2Ugbm8gZWxlbWVudHMgYXJlIGNvbm5lY3RlZC4gKE5vdGU6IEJvdW5kIGVsZW1lbnRzIHRoYXRcbiAgICogcmVjZWl2ZSBkYXRhIGRvIGJlY29tZSBlbnF1ZXVlZCBjbGllbnRzIGFuZCBhcmUgcHJvcGVybHkgb3JkZXJlZCBidXRcbiAgICogdW5ib3VuZCBlbGVtZW50cyBhcmUgbm90LilcbiAgICpcbiAgICogVG8gbWFpbnRhaW4gdGhlIGRlc2lyZWQgXCJjbGllbnQgYmVmb3JlIGhvc3RcIiBvcmRlcmluZyBndWFyYW50ZWUgZm9yIHRoaXNcbiAgICogY2FzZSB3ZSByZWx5IG9uIHRoZSBcImhvc3Qgc3RhY2suIENsaWVudCBub2RlcyByZWdpc3RlcnMgdGhlbXNlbHZlcyB3aXRoXG4gICAqIHRoZSBjcmVhdGluZyBob3N0IGVsZW1lbnQgd2hlbiBjcmVhdGVkLiBUaGlzIGVuc3VyZXMgdGhhdCBhbGwgY2xpZW50IGRvbVxuICAgKiBpcyByZWFkaWVkIGluIHRoZSBwcm9wZXIgb3JkZXIsIG1haW50YWluaW5nIHRoZSBkZXNpcmVkIGd1YXJhbnRlZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGxldCBob3N0U3RhY2sgPSB7XG5cbiAgICBzdGFjazogW10sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gYWRkIHRvIGhvc3RTdGFja1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHRoaXMge2hvc3RTdGFja31cbiAgICAgKi9cbiAgICByZWdpc3Rlckhvc3QoaW5zdCkge1xuICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGxldCBob3N0ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aC0xXTtcbiAgICAgICAgaG9zdC5fZW5xdWV1ZUNsaWVudChpbnN0KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGJlZ2luIGhvc3RpbmdcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEB0aGlzIHtob3N0U3RhY2t9XG4gICAgICovXG4gICAgYmVnaW5Ib3N0aW5nKGluc3QpIHtcbiAgICAgIHRoaXMuc3RhY2sucHVzaChpbnN0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGVuZCBob3N0aW5nXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAdGhpcyB7aG9zdFN0YWNrfVxuICAgICAqL1xuICAgIGVuZEhvc3RpbmcoaW5zdCkge1xuICAgICAgbGV0IHN0YWNrTGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgICBpZiAoc3RhY2tMZW4gJiYgdGhpcy5zdGFja1tzdGFja0xlbi0xXSA9PSBpbnN0KSB7XG4gICAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH07XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBDaHJvbWUgdXNlcyBhbiBvbGRlciB2ZXJzaW9uIG9mIERPTSBMZXZlbCAzIEtleWJvYXJkIEV2ZW50c1xuICAgICAqXG4gICAgICogTW9zdCBrZXlzIGFyZSBsYWJlbGVkIGFzIHRleHQsIGJ1dCBzb21lIGFyZSBVbmljb2RlIGNvZGVwb2ludHMuXG4gICAgICogVmFsdWVzIHRha2VuIGZyb206IGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDcvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDcxMjIxL2tleXNldC5odG1sI0tleVNldC1TZXRcbiAgICAgKi9cbiAgICB2YXIgS0VZX0lERU5USUZJRVIgPSB7XG4gICAgICAnVSswMDA4JzogJ2JhY2tzcGFjZScsXG4gICAgICAnVSswMDA5JzogJ3RhYicsXG4gICAgICAnVSswMDFCJzogJ2VzYycsXG4gICAgICAnVSswMDIwJzogJ3NwYWNlJyxcbiAgICAgICdVKzAwN0YnOiAnZGVsJ1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIHRhYmxlIGZvciBLZXlib2FyZEV2ZW50LmtleUNvZGUuXG4gICAgICogS2V5Ym9hcmRFdmVudC5rZXlJZGVudGlmaWVyIGlzIGJldHRlciwgYW5kIEtleUJvYXJkRXZlbnQua2V5IGlzIGV2ZW4gYmV0dGVyXG4gICAgICogdGhhbiB0aGF0LlxuICAgICAqXG4gICAgICogVmFsdWVzIGZyb206IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50LmtleUNvZGUjVmFsdWVfb2Zfa2V5Q29kZVxuICAgICAqL1xuICAgIHZhciBLRVlfQ09ERSA9IHtcbiAgICAgIDg6ICdiYWNrc3BhY2UnLFxuICAgICAgOTogJ3RhYicsXG4gICAgICAxMzogJ2VudGVyJyxcbiAgICAgIDI3OiAnZXNjJyxcbiAgICAgIDMzOiAncGFnZXVwJyxcbiAgICAgIDM0OiAncGFnZWRvd24nLFxuICAgICAgMzU6ICdlbmQnLFxuICAgICAgMzY6ICdob21lJyxcbiAgICAgIDMyOiAnc3BhY2UnLFxuICAgICAgMzc6ICdsZWZ0JyxcbiAgICAgIDM4OiAndXAnLFxuICAgICAgMzk6ICdyaWdodCcsXG4gICAgICA0MDogJ2Rvd24nLFxuICAgICAgNDY6ICdkZWwnLFxuICAgICAgMTA2OiAnKidcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTU9ESUZJRVJfS0VZUyBtYXBzIHRoZSBzaG9ydCBuYW1lIGZvciBtb2RpZmllciBrZXlzIHVzZWQgaW4gYSBrZXlcbiAgICAgKiBjb21ibyBzdHJpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWUgdGhhdCByZWZlcmVuY2VzIHRob3NlIHNhbWUga2V5c1xuICAgICAqIGluIGEgS2V5Ym9hcmRFdmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB2YXIgTU9ESUZJRVJfS0VZUyA9IHtcbiAgICAgICdzaGlmdCc6ICdzaGlmdEtleScsXG4gICAgICAnY3RybCc6ICdjdHJsS2V5JyxcbiAgICAgICdhbHQnOiAnYWx0S2V5JyxcbiAgICAgICdtZXRhJzogJ21ldGFLZXknXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEtleWJvYXJkRXZlbnQua2V5IGlzIG1vc3RseSByZXByZXNlbnRlZCBieSBwcmludGFibGUgY2hhcmFjdGVyIG1hZGUgYnlcbiAgICAgKiB0aGUga2V5Ym9hcmQsIHdpdGggdW5wcmludGFibGUga2V5cyBsYWJlbGVkIG5pY2VseS5cbiAgICAgKlxuICAgICAqIEhvd2V2ZXIsIG9uIE9TIFgsIEFsdCtjaGFyIGNhbiBtYWtlIGEgVW5pY29kZSBjaGFyYWN0ZXIgdGhhdCBmb2xsb3dzIGFuXG4gICAgICogQXBwbGUtc3BlY2lmaWMgbWFwcGluZy4gSW4gdGhpcyBjYXNlLCB3ZSBmYWxsIGJhY2sgdG8gLmtleUNvZGUuXG4gICAgICovXG4gICAgdmFyIEtFWV9DSEFSID0gL1thLXowLTkqXS87XG5cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGEga2V5SWRlbnRpZmllciBzdHJpbmcuXG4gICAgICovXG4gICAgdmFyIElERU5UX0NIQVIgPSAvVVxcKy87XG5cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGFycm93IGtleXMgaW4gR2Vja28gMjcuMCtcbiAgICAgKi9cbiAgICB2YXIgQVJST1dfS0VZID0gL15hcnJvdy87XG5cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHNwYWNlIGtleXMgZXZlcnl3aGVyZSAobm90YWJseSBpbmNsdWRpbmcgSUUxMCdzIGV4Y2VwdGlvbmFsIG5hbWVcbiAgICAgKiBgc3BhY2ViYXJgKS5cbiAgICAgKi9cbiAgICB2YXIgU1BBQ0VfS0VZID0gL15zcGFjZShiYXIpPy87XG5cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIEVTQyBrZXkuXG4gICAgICpcbiAgICAgKiBWYWx1ZSBmcm9tOiBodHRwOi8vdzNjLmdpdGh1Yi5pby91aWV2ZW50cy1rZXkvI2tleS1Fc2NhcGVcbiAgICAgKi9cbiAgICB2YXIgRVNDX0tFWSA9IC9eZXNjYXBlJC87XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgS2V5Qm9hcmRFdmVudC5rZXlcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtub1NwZWNpYWxDaGFyc10gTGltaXRzIHRoZSB0cmFuc2Zvcm1hdGlvbiB0b1xuICAgICAqIGFscGhhLW51bWVyaWMgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1LZXkoa2V5LCBub1NwZWNpYWxDaGFycykge1xuICAgICAgdmFyIHZhbGlkS2V5ID0gJyc7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciBsS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChsS2V5ID09PSAnICcgfHwgU1BBQ0VfS0VZLnRlc3QobEtleSkpIHtcbiAgICAgICAgICB2YWxpZEtleSA9ICdzcGFjZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoRVNDX0tFWS50ZXN0KGxLZXkpKSB7XG4gICAgICAgICAgdmFsaWRLZXkgPSAnZXNjJztcbiAgICAgICAgfSBlbHNlIGlmIChsS2V5Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgaWYgKCFub1NwZWNpYWxDaGFycyB8fCBLRVlfQ0hBUi50ZXN0KGxLZXkpKSB7XG4gICAgICAgICAgICB2YWxpZEtleSA9IGxLZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKEFSUk9XX0tFWS50ZXN0KGxLZXkpKSB7XG4gICAgICAgICAgdmFsaWRLZXkgPSBsS2V5LnJlcGxhY2UoJ2Fycm93JywgJycpO1xuICAgICAgICB9IGVsc2UgaWYgKGxLZXkgPT0gJ211bHRpcGx5Jykge1xuICAgICAgICAgIC8vIG51bXBhZCAnKicgY2FuIG1hcCB0byBNdWx0aXBseSBvbiBJRS9XaW5kb3dzXG4gICAgICAgICAgdmFsaWRLZXkgPSAnKic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsaWRLZXkgPSBsS2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsaWRLZXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtS2V5SWRlbnRpZmllcihrZXlJZGVudCkge1xuICAgICAgdmFyIHZhbGlkS2V5ID0gJyc7XG4gICAgICBpZiAoa2V5SWRlbnQpIHtcbiAgICAgICAgaWYgKGtleUlkZW50IGluIEtFWV9JREVOVElGSUVSKSB7XG4gICAgICAgICAgdmFsaWRLZXkgPSBLRVlfSURFTlRJRklFUltrZXlJZGVudF07XG4gICAgICAgIH0gZWxzZSBpZiAoSURFTlRfQ0hBUi50ZXN0KGtleUlkZW50KSkge1xuICAgICAgICAgIGtleUlkZW50ID0gcGFyc2VJbnQoa2V5SWRlbnQucmVwbGFjZSgnVSsnLCAnMHgnKSwgMTYpO1xuICAgICAgICAgIHZhbGlkS2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXlJZGVudCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxpZEtleSA9IGtleUlkZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWxpZEtleTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1LZXlDb2RlKGtleUNvZGUpIHtcbiAgICAgIHZhciB2YWxpZEtleSA9ICcnO1xuICAgICAgaWYgKE51bWJlcihrZXlDb2RlKSkge1xuICAgICAgICBpZiAoa2V5Q29kZSA+PSA2NSAmJiBrZXlDb2RlIDw9IDkwKSB7XG4gICAgICAgICAgLy8gYXNjaWkgYS16XG4gICAgICAgICAgLy8gbG93ZXJjYXNlIGlzIDMyIG9mZnNldCBmcm9tIHVwcGVyY2FzZVxuICAgICAgICAgIHZhbGlkS2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiArIGtleUNvZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPj0gMTEyICYmIGtleUNvZGUgPD0gMTIzKSB7XG4gICAgICAgICAgLy8gZnVuY3Rpb24ga2V5cyBmMS1mMTJcbiAgICAgICAgICB2YWxpZEtleSA9ICdmJyArIChrZXlDb2RlIC0gMTEyICsgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA+PSA0OCAmJiBrZXlDb2RlIDw9IDU3KSB7XG4gICAgICAgICAgLy8gdG9wIDAtOSBrZXlzXG4gICAgICAgICAgdmFsaWRLZXkgPSBTdHJpbmcoa2V5Q29kZSAtIDQ4KTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXlDb2RlID49IDk2ICYmIGtleUNvZGUgPD0gMTA1KSB7XG4gICAgICAgICAgLy8gbnVtIHBhZCAwLTlcbiAgICAgICAgICB2YWxpZEtleSA9IFN0cmluZyhrZXlDb2RlIC0gOTYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkS2V5ID0gS0VZX0NPREVba2V5Q29kZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWxpZEtleTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICogQ2FsY3VsYXRlcyB0aGUgbm9ybWFsaXplZCBrZXkgZm9yIGEgS2V5Ym9hcmRFdmVudC5cbiAgICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBrZXlFdmVudFxuICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtub1NwZWNpYWxDaGFyc10gU2V0IHRvIHRydWUgdG8gbGltaXQga2V5RXZlbnQua2V5XG4gICAgICAqIHRyYW5zZm9ybWF0aW9uIHRvIGFscGhhLW51bWVyaWMgY2hhcnMuIFRoaXMgaXMgdXNlZnVsIHdpdGgga2V5XG4gICAgICAqIGNvbWJpbmF0aW9ucyBsaWtlIHNoaWZ0ICsgMiwgd2hpY2ggb24gRkYgZm9yIE1hY09TIHByb2R1Y2VzXG4gICAgICAqIGtleUV2ZW50LmtleSA9IEBcbiAgICAgICogVG8gZ2V0IDIgcmV0dXJuZWQsIHNldCBub1NwZWNpYWxDaGFycyA9IHRydWVcbiAgICAgICogVG8gZ2V0IEAgcmV0dXJuZWQsIHNldCBub1NwZWNpYWxDaGFycyA9IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplZEtleUZvckV2ZW50KGtleUV2ZW50LCBub1NwZWNpYWxDaGFycykge1xuICAgICAgLy8gRmFsbCBiYWNrIGZyb20gLmtleSwgdG8gLmRldGFpbC5rZXkgZm9yIGFydGlmaWNhbCBrZXlib2FyZCBldmVudHMsXG4gICAgICAvLyBhbmQgdGhlbiB0byBkZXByZWNhdGVkIC5rZXlJZGVudGlmaWVyIGFuZCAua2V5Q29kZS5cbiAgICAgIGlmIChrZXlFdmVudC5rZXkpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUtleShrZXlFdmVudC5rZXksIG5vU3BlY2lhbENoYXJzKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXlFdmVudC5kZXRhaWwgJiYga2V5RXZlbnQuZGV0YWlsLmtleSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtS2V5KGtleUV2ZW50LmRldGFpbC5rZXksIG5vU3BlY2lhbENoYXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmFuc2Zvcm1LZXlJZGVudGlmaWVyKGtleUV2ZW50LmtleUlkZW50aWZpZXIpIHx8XG4gICAgICAgIHRyYW5zZm9ybUtleUNvZGUoa2V5RXZlbnQua2V5Q29kZSkgfHwgJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5Q29tYm9NYXRjaGVzRXZlbnQoa2V5Q29tYm8sIGV2ZW50KSB7XG4gICAgICAvLyBGb3IgY29tYm9zIHdpdGggbW9kaWZpZXJzIHdlIHN1cHBvcnQgb25seSBhbHBoYS1udW1lcmljIGtleXNcbiAgICAgIHZhciBrZXlFdmVudCA9IG5vcm1hbGl6ZWRLZXlGb3JFdmVudChldmVudCwga2V5Q29tYm8uaGFzTW9kaWZpZXJzKTtcbiAgICAgIHJldHVybiBrZXlFdmVudCA9PT0ga2V5Q29tYm8ua2V5ICYmXG4gICAgICAgICgha2V5Q29tYm8uaGFzTW9kaWZpZXJzIHx8IChcbiAgICAgICAgICAhIWV2ZW50LnNoaWZ0S2V5ID09PSAhIWtleUNvbWJvLnNoaWZ0S2V5ICYmXG4gICAgICAgICAgISFldmVudC5jdHJsS2V5ID09PSAhIWtleUNvbWJvLmN0cmxLZXkgJiZcbiAgICAgICAgICAhIWV2ZW50LmFsdEtleSA9PT0gISFrZXlDb21iby5hbHRLZXkgJiZcbiAgICAgICAgICAhIWV2ZW50Lm1ldGFLZXkgPT09ICEha2V5Q29tYm8ubWV0YUtleSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUtleUNvbWJvU3RyaW5nKGtleUNvbWJvU3RyaW5nKSB7XG4gICAgICBpZiAoa2V5Q29tYm9TdHJpbmcubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tYm86IGtleUNvbWJvU3RyaW5nLFxuICAgICAgICAgIGtleToga2V5Q29tYm9TdHJpbmcsXG4gICAgICAgICAgZXZlbnQ6ICdrZXlkb3duJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleUNvbWJvU3RyaW5nLnNwbGl0KCcrJykucmVkdWNlKGZ1bmN0aW9uKHBhcnNlZEtleUNvbWJvLCBrZXlDb21ib1BhcnQpIHtcbiAgICAgICAgdmFyIGV2ZW50UGFydHMgPSBrZXlDb21ib1BhcnQuc3BsaXQoJzonKTtcbiAgICAgICAgdmFyIGtleU5hbWUgPSBldmVudFBhcnRzWzBdO1xuICAgICAgICB2YXIgZXZlbnQgPSBldmVudFBhcnRzWzFdO1xuXG4gICAgICAgIGlmIChrZXlOYW1lIGluIE1PRElGSUVSX0tFWVMpIHtcbiAgICAgICAgICBwYXJzZWRLZXlDb21ib1tNT0RJRklFUl9LRVlTW2tleU5hbWVdXSA9IHRydWU7XG4gICAgICAgICAgcGFyc2VkS2V5Q29tYm8uaGFzTW9kaWZpZXJzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWRLZXlDb21iby5rZXkgPSBrZXlOYW1lO1xuICAgICAgICAgIHBhcnNlZEtleUNvbWJvLmV2ZW50ID0gZXZlbnQgfHwgJ2tleWRvd24nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZEtleUNvbWJvO1xuICAgICAgfSwge1xuICAgICAgICBjb21ibzoga2V5Q29tYm9TdHJpbmcuc3BsaXQoJzonKS5zaGlmdCgpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUV2ZW50U3RyaW5nKGV2ZW50U3RyaW5nKSB7XG4gICAgICByZXR1cm4gZXZlbnRTdHJpbmcudHJpbSgpLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uKGtleUNvbWJvU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUtleUNvbWJvU3RyaW5nKGtleUNvbWJvU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGBQb2x5bWVyLklyb25BMTF5S2V5c0JlaGF2aW9yYCBwcm92aWRlcyBhIG5vcm1hbGl6ZWQgaW50ZXJmYWNlIGZvciBwcm9jZXNzaW5nXG4gICAgICoga2V5Ym9hcmQgY29tbWFuZHMgdGhhdCBwZXJ0YWluIHRvIFtXQUktQVJJQSBiZXN0IHByYWN0aWNlc10oaHR0cDovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNrYmRfZ2VuZXJhbF9iaW5kaW5nKS5cbiAgICAgKiBUaGUgZWxlbWVudCB0YWtlcyBjYXJlIG9mIGJyb3dzZXIgZGlmZmVyZW5jZXMgd2l0aCByZXNwZWN0IHRvIEtleWJvYXJkIGV2ZW50c1xuICAgICAqIGFuZCB1c2VzIGFuIGV4cHJlc3NpdmUgc3ludGF4IHRvIGZpbHRlciBrZXkgcHJlc3Nlcy5cbiAgICAgKlxuICAgICAqIFVzZSB0aGUgYGtleUJpbmRpbmdzYCBwcm90b3R5cGUgcHJvcGVydHkgdG8gZXhwcmVzcyB3aGF0IGNvbWJpbmF0aW9uIG9mIGtleXNcbiAgICAgKiB3aWxsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBBIGtleSBiaW5kaW5nIGhhcyB0aGUgZm9ybWF0XG4gICAgICogYFwiS0VZK01PRElGSUVSOkVWRU5UXCI6IFwiY2FsbGJhY2tcImAgKGBcIktFWVwiOiBcImNhbGxiYWNrXCJgIG9yXG4gICAgICogYFwiS0VZOkVWRU5UXCI6IFwiY2FsbGJhY2tcImAgYXJlIHZhbGlkIGFzIHdlbGwpLiBTb21lIGV4YW1wbGVzOlxuICAgICAqXG4gICAgICogICAgICBrZXlCaW5kaW5nczoge1xuICAgICAqICAgICAgICAnc3BhY2UnOiAnX29uS2V5ZG93bicsIC8vIHNhbWUgYXMgJ3NwYWNlOmtleWRvd24nXG4gICAgICogICAgICAgICdzaGlmdCt0YWInOiAnX29uS2V5ZG93bicsXG4gICAgICogICAgICAgICdlbnRlcjprZXlwcmVzcyc6ICdfb25LZXlwcmVzcycsXG4gICAgICogICAgICAgICdlc2M6a2V5dXAnOiAnX29uS2V5dXAnXG4gICAgICogICAgICB9XG4gICAgICpcbiAgICAgKiBUaGUgY2FsbGJhY2sgd2lsbCByZWNlaXZlIHdpdGggYW4gZXZlbnQgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIGluIGBldmVudC5kZXRhaWxgOlxuICAgICAqXG4gICAgICogICAgICBfb25LZXlkb3duOiBmdW5jdGlvbihldmVudCkge1xuICAgICAqICAgICAgICBjb25zb2xlLmxvZyhldmVudC5kZXRhaWwuY29tYm8pOyAvLyBLRVkrTU9ESUZJRVIsIGUuZy4gXCJzaGlmdCt0YWJcIlxuICAgICAqICAgICAgICBjb25zb2xlLmxvZyhldmVudC5kZXRhaWwua2V5KTsgLy8gS0VZIG9ubHksIGUuZy4gXCJ0YWJcIlxuICAgICAqICAgICAgICBjb25zb2xlLmxvZyhldmVudC5kZXRhaWwuZXZlbnQpOyAvLyBFVkVOVCwgZS5nLiBcImtleWRvd25cIlxuICAgICAqICAgICAgICBjb25zb2xlLmxvZyhldmVudC5kZXRhaWwua2V5Ym9hcmRFdmVudCk7IC8vIHRoZSBvcmlnaW5hbCBLZXlib2FyZEV2ZW50XG4gICAgICogICAgICB9XG4gICAgICpcbiAgICAgKiBVc2UgdGhlIGBrZXlFdmVudFRhcmdldGAgYXR0cmlidXRlIHRvIHNldCB1cCBldmVudCBoYW5kbGVycyBvbiBhIHNwZWNpZmljXG4gICAgICogbm9kZS5cbiAgICAgKlxuICAgICAqIFNlZSB0aGUgW2RlbW8gc291cmNlIGNvZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyRWxlbWVudHMvaXJvbi1hMTF5LWtleXMtYmVoYXZpb3IvYmxvYi9tYXN0ZXIvZGVtby94LWtleS1hd2FyZS5odG1sKVxuICAgICAqIGZvciBhbiBleGFtcGxlLlxuICAgICAqXG4gICAgICogQGRlbW8gZGVtby9pbmRleC5odG1sXG4gICAgICogQHBvbHltZXJCZWhhdmlvclxuICAgICAqL1xuICAgIFBvbHltZXIuSXJvbkExMXlLZXlzQmVoYXZpb3IgPSB7XG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgRXZlbnRUYXJnZXQgdGhhdCB3aWxsIGJlIGZpcmluZyByZWxldmFudCBLZXlib2FyZEV2ZW50cy4gU2V0IGl0IHRvXG4gICAgICAgICAqIGBudWxsYCB0byBkaXNhYmxlIHRoZSBsaXN0ZW5lcnMuXG4gICAgICAgICAqIEB0eXBlIHs/RXZlbnRUYXJnZXR9XG4gICAgICAgICAqL1xuICAgICAgICBrZXlFdmVudFRhcmdldDoge1xuICAgICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRydWUsIHRoaXMgcHJvcGVydHkgd2lsbCBjYXVzZSB0aGUgaW1wbGVtZW50aW5nIGVsZW1lbnQgdG9cbiAgICAgICAgICogYXV0b21hdGljYWxseSBzdG9wIHByb3BhZ2F0aW9uIG9uIGFueSBoYW5kbGVkIEtleWJvYXJkRXZlbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcEtleWJvYXJkRXZlbnRQcm9wYWdhdGlvbjoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2JvdW5kS2V5SGFuZGxlcnM6IHtcbiAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFdlIHVzZSB0aGlzIGR1ZSB0byBhIGxpbWl0YXRpb24gaW4gSUUxMCB3aGVyZSBpbnN0YW5jZXMgd2lsbCBoYXZlXG4gICAgICAgIC8vIG93biBwcm9wZXJ0aWVzIG9mIGV2ZXJ5dGhpbmcgb24gdGhlIFwicHJvdG90eXBlXCIuXG4gICAgICAgIF9pbXBlcmF0aXZlS2V5QmluZGluZ3M6IHtcbiAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgb2JzZXJ2ZXJzOiBbXG4gICAgICAgICdfcmVzZXRLZXlFdmVudExpc3RlbmVycyhrZXlFdmVudFRhcmdldCwgX2JvdW5kS2V5SGFuZGxlcnMpJ1xuICAgICAgXSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFRvIGJlIHVzZWQgdG8gZXhwcmVzcyB3aGF0IGNvbWJpbmF0aW9uIG9mIGtleXMgIHdpbGwgdHJpZ2dlciB0aGUgcmVsYXRpdmVcbiAgICAgICAqIGNhbGxiYWNrLiBlLmcuIGBrZXlCaW5kaW5nczogeyAnZXNjJzogJ19vbkVzY1ByZXNzZWQnfWBcbiAgICAgICAqIEB0eXBlIHshT2JqZWN0fVxuICAgICAgICovXG4gICAgICBrZXlCaW5kaW5nczoge30sXG5cbiAgICAgIHJlZ2lzdGVyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9wcmVwS2V5QmluZGluZ3MoKTtcbiAgICAgIH0sXG5cbiAgICAgIGF0dGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuS2V5RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH0sXG5cbiAgICAgIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdW5saXN0ZW5LZXlFdmVudExpc3RlbmVycygpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBDYW4gYmUgdXNlZCB0byBpbXBlcmF0aXZlbHkgYWRkIGEga2V5IGJpbmRpbmcgdG8gdGhlIGltcGxlbWVudGluZ1xuICAgICAgICogZWxlbWVudC4gVGhpcyBpcyB0aGUgaW1wZXJhdGl2ZSBlcXVpdmFsZW50IG9mIGRlY2xhcmluZyBhIGtleWJpbmRpbmdcbiAgICAgICAqIGluIHRoZSBga2V5QmluZGluZ3NgIHByb3RvdHlwZSBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRTdHJpbmdcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyTmFtZVxuICAgICAgICovXG4gICAgICBhZGRPd25LZXlCaW5kaW5nOiBmdW5jdGlvbihldmVudFN0cmluZywgaGFuZGxlck5hbWUpIHtcbiAgICAgICAgdGhpcy5faW1wZXJhdGl2ZUtleUJpbmRpbmdzW2V2ZW50U3RyaW5nXSA9IGhhbmRsZXJOYW1lO1xuICAgICAgICB0aGlzLl9wcmVwS2V5QmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRLZXlFdmVudExpc3RlbmVycygpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIGNhbGxlZCwgd2lsbCByZW1vdmUgYWxsIGltcGVyYXRpdmVseS1hZGRlZCBrZXkgYmluZGluZ3MuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZU93bktleUJpbmRpbmdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5faW1wZXJhdGl2ZUtleUJpbmRpbmdzID0ge307XG4gICAgICAgIHRoaXMuX3ByZXBLZXlCaW5kaW5ncygpO1xuICAgICAgICB0aGlzLl9yZXNldEtleUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGtleWJvYXJkIGV2ZW50IG1hdGNoZXMgYGV2ZW50U3RyaW5nYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRTdHJpbmdcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIGtleWJvYXJkRXZlbnRNYXRjaGVzS2V5czogZnVuY3Rpb24oZXZlbnQsIGV2ZW50U3RyaW5nKSB7XG4gICAgICAgIHZhciBrZXlDb21ib3MgPSBwYXJzZUV2ZW50U3RyaW5nKGV2ZW50U3RyaW5nKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlDb21ib3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpZiAoa2V5Q29tYm9NYXRjaGVzRXZlbnQoa2V5Q29tYm9zW2ldLCBldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICBfY29sbGVjdEtleUJpbmRpbmdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGtleUJpbmRpbmdzID0gdGhpcy5iZWhhdmlvcnMubWFwKGZ1bmN0aW9uKGJlaGF2aW9yKSB7XG4gICAgICAgICAgcmV0dXJuIGJlaGF2aW9yLmtleUJpbmRpbmdzO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoa2V5QmluZGluZ3MuaW5kZXhPZih0aGlzLmtleUJpbmRpbmdzKSA9PT0gLTEpIHtcbiAgICAgICAgICBrZXlCaW5kaW5ncy5wdXNoKHRoaXMua2V5QmluZGluZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleUJpbmRpbmdzO1xuICAgICAgfSxcblxuICAgICAgX3ByZXBLZXlCaW5kaW5nczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2tleUJpbmRpbmdzID0ge307XG5cbiAgICAgICAgdGhpcy5fY29sbGVjdEtleUJpbmRpbmdzKCkuZm9yRWFjaChmdW5jdGlvbihrZXlCaW5kaW5ncykge1xuICAgICAgICAgIGZvciAodmFyIGV2ZW50U3RyaW5nIGluIGtleUJpbmRpbmdzKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRLZXlCaW5kaW5nKGV2ZW50U3RyaW5nLCBrZXlCaW5kaW5nc1tldmVudFN0cmluZ10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgZm9yICh2YXIgZXZlbnRTdHJpbmcgaW4gdGhpcy5faW1wZXJhdGl2ZUtleUJpbmRpbmdzKSB7XG4gICAgICAgICAgdGhpcy5fYWRkS2V5QmluZGluZyhldmVudFN0cmluZywgdGhpcy5faW1wZXJhdGl2ZUtleUJpbmRpbmdzW2V2ZW50U3RyaW5nXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHaXZlIHByZWNlZGVuY2UgdG8gY29tYm9zIHdpdGggbW9kaWZpZXJzIHRvIGJlIGNoZWNrZWQgZmlyc3QuXG4gICAgICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiB0aGlzLl9rZXlCaW5kaW5ncykge1xuICAgICAgICAgIHRoaXMuX2tleUJpbmRpbmdzW2V2ZW50TmFtZV0uc29ydChmdW5jdGlvbiAoa2IxLCBrYjIpIHtcbiAgICAgICAgICAgIHZhciBiMSA9IGtiMVswXS5oYXNNb2RpZmllcnM7XG4gICAgICAgICAgICB2YXIgYjIgPSBrYjJbMF0uaGFzTW9kaWZpZXJzO1xuICAgICAgICAgICAgcmV0dXJuIChiMSA9PT0gYjIpID8gMCA6IGIxID8gLTEgOiAxO1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9hZGRLZXlCaW5kaW5nOiBmdW5jdGlvbihldmVudFN0cmluZywgaGFuZGxlck5hbWUpIHtcbiAgICAgICAgcGFyc2VFdmVudFN0cmluZyhldmVudFN0cmluZykuZm9yRWFjaChmdW5jdGlvbihrZXlDb21ibykge1xuICAgICAgICAgIHRoaXMuX2tleUJpbmRpbmdzW2tleUNvbWJvLmV2ZW50XSA9XG4gICAgICAgICAgICB0aGlzLl9rZXlCaW5kaW5nc1trZXlDb21iby5ldmVudF0gfHwgW107XG5cbiAgICAgICAgICB0aGlzLl9rZXlCaW5kaW5nc1trZXlDb21iby5ldmVudF0ucHVzaChbXG4gICAgICAgICAgICBrZXlDb21ibyxcbiAgICAgICAgICAgIGhhbmRsZXJOYW1lXG4gICAgICAgICAgXSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSxcblxuICAgICAgX3Jlc2V0S2V5RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl91bmxpc3RlbktleUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbktleUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9saXN0ZW5LZXlFdmVudExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5rZXlFdmVudFRhcmdldCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9rZXlCaW5kaW5ncykuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgICB2YXIga2V5QmluZGluZ3MgPSB0aGlzLl9rZXlCaW5kaW5nc1tldmVudE5hbWVdO1xuICAgICAgICAgIHZhciBib3VuZEtleUhhbmRsZXIgPSB0aGlzLl9vbktleUJpbmRpbmdFdmVudC5iaW5kKHRoaXMsIGtleUJpbmRpbmdzKTtcblxuICAgICAgICAgIHRoaXMuX2JvdW5kS2V5SGFuZGxlcnMucHVzaChbdGhpcy5rZXlFdmVudFRhcmdldCwgZXZlbnROYW1lLCBib3VuZEtleUhhbmRsZXJdKTtcblxuICAgICAgICAgIHRoaXMua2V5RXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGJvdW5kS2V5SGFuZGxlcik7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSxcblxuICAgICAgX3VubGlzdGVuS2V5RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIga2V5SGFuZGxlclR1cGxlO1xuICAgICAgICB2YXIga2V5RXZlbnRUYXJnZXQ7XG4gICAgICAgIHZhciBldmVudE5hbWU7XG4gICAgICAgIHZhciBib3VuZEtleUhhbmRsZXI7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMuX2JvdW5kS2V5SGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTXkga2luZ2RvbSBmb3IgYmxvY2stc2NvcGUgYmluZGluZyBhbmQgZGVzdHJ1Y3R1cmluZyBhc3NpZ25tZW50Li5cbiAgICAgICAgICBrZXlIYW5kbGVyVHVwbGUgPSB0aGlzLl9ib3VuZEtleUhhbmRsZXJzLnBvcCgpO1xuICAgICAgICAgIGtleUV2ZW50VGFyZ2V0ID0ga2V5SGFuZGxlclR1cGxlWzBdO1xuICAgICAgICAgIGV2ZW50TmFtZSA9IGtleUhhbmRsZXJUdXBsZVsxXTtcbiAgICAgICAgICBib3VuZEtleUhhbmRsZXIgPSBrZXlIYW5kbGVyVHVwbGVbMl07XG5cbiAgICAgICAgICBrZXlFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgYm91bmRLZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX29uS2V5QmluZGluZ0V2ZW50OiBmdW5jdGlvbihrZXlCaW5kaW5ncywgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcEtleWJvYXJkRXZlbnRQcm9wYWdhdGlvbikge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZXZlbnQgaGFzIGJlZW4gYWxyZWFkeSBwcmV2ZW50ZWQsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlCaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBrZXlDb21ibyA9IGtleUJpbmRpbmdzW2ldWzBdO1xuICAgICAgICAgIHZhciBoYW5kbGVyTmFtZSA9IGtleUJpbmRpbmdzW2ldWzFdO1xuICAgICAgICAgIGlmIChrZXlDb21ib01hdGNoZXNFdmVudChrZXlDb21ibywgZXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyS2V5SGFuZGxlcihrZXlDb21ibywgaGFuZGxlck5hbWUsIGV2ZW50KTtcbiAgICAgICAgICAgIC8vIGV4aXQgdGhlIGxvb3AgaWYgZXZlbnREZWZhdWx0IHdhcyBwcmV2ZW50ZWRcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF90cmlnZ2VyS2V5SGFuZGxlcjogZnVuY3Rpb24oa2V5Q29tYm8sIGhhbmRsZXJOYW1lLCBrZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBPYmplY3QuY3JlYXRlKGtleUNvbWJvKTtcbiAgICAgICAgZGV0YWlsLmtleWJvYXJkRXZlbnQgPSBrZXlib2FyZEV2ZW50O1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoa2V5Q29tYm8uZXZlbnQsIHtcbiAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzW2hhbmRsZXJOYW1lXS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9wb2x5bWVyL3BvbHltZXIuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2lyb24tYTExeS1rZXlzLWJlaGF2aW9yL2lyb24tYTExeS1rZXlzLWJlaGF2aW9yLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJpcm9uLWNvbnRyb2wtc3RhdGUuaHRtbFwiPlxuXG48c2NyaXB0PlxuXG4gIC8qKlxuICAgKiBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbiAgICogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLklyb25CdXR0b25TdGF0ZVxuICAgKi9cbiAgUG9seW1lci5Jcm9uQnV0dG9uU3RhdGVJbXBsID0ge1xuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRydWUsIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBob2xkaW5nIGRvd24gdGhlIGJ1dHRvbi5cbiAgICAgICAqL1xuICAgICAgcHJlc3NlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgIG9ic2VydmVyOiAnX3ByZXNzZWRDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0cnVlLCB0aGUgYnV0dG9uIHRvZ2dsZXMgdGhlIGFjdGl2ZSBzdGF0ZSB3aXRoIGVhY2ggdGFwIG9yIHByZXNzXG4gICAgICAgKiBvZiB0aGUgc3BhY2ViYXIuXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZXM6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiBpcyBhIHRvZ2dsZSBhbmQgaXMgY3VycmVudGx5IGluIHRoZSBhY3RpdmUgc3RhdGUuXG4gICAgICAgKi9cbiAgICAgIGFjdGl2ZToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRydWUgaWYgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IGJlaW5nIHByZXNzZWQgYnkgYSBcInBvaW50ZXIsXCIgd2hpY2hcbiAgICAgICAqIGlzIGxvb3NlbHkgZGVmaW5lZCBhcyBtb3VzZSBvciB0b3VjaCBpbnB1dCAoYnV0IHNwZWNpZmljYWxseSBleGNsdWRpbmdcbiAgICAgICAqIGtleWJvYXJkIGlucHV0KS5cbiAgICAgICAqL1xuICAgICAgcG9pbnRlckRvd246IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIGlmIHRoZSBpbnB1dCBkZXZpY2UgdGhhdCBjYXVzZWQgdGhlIGVsZW1lbnQgdG8gcmVjZWl2ZSBmb2N1c1xuICAgICAgICogd2FzIGEga2V5Ym9hcmQuXG4gICAgICAgKi9cbiAgICAgIHJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGFyaWEgYXR0cmlidXRlIHRvIGJlIHNldCBpZiB0aGUgYnV0dG9uIGlzIGEgdG9nZ2xlIGFuZCBpbiB0aGVcbiAgICAgICAqIGFjdGl2ZSBzdGF0ZS5cbiAgICAgICAqL1xuICAgICAgYXJpYUFjdGl2ZUF0dHJpYnV0ZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnYXJpYS1wcmVzc2VkJyxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfYXJpYUFjdGl2ZUF0dHJpYnV0ZUNoYW5nZWQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIGxpc3RlbmVyczoge1xuICAgICAgZG93bjogJ19kb3duSGFuZGxlcicsXG4gICAgICB1cDogJ191cEhhbmRsZXInLFxuICAgICAgdGFwOiAnX3RhcEhhbmRsZXInXG4gICAgfSxcblxuICAgIG9ic2VydmVyczogW1xuICAgICAgJ19mb2N1c0NoYW5nZWQoZm9jdXNlZCknLFxuICAgICAgJ19hY3RpdmVDaGFuZ2VkKGFjdGl2ZSwgYXJpYUFjdGl2ZUF0dHJpYnV0ZSknXG4gICAgXSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshT2JqZWN0fVxuICAgICAqL1xuICAgIGtleUJpbmRpbmdzOiB7XG4gICAgICAnZW50ZXI6a2V5ZG93bic6ICdfYXN5bmNDbGljaycsXG4gICAgICAnc3BhY2U6a2V5ZG93bic6ICdfc3BhY2VLZXlEb3duSGFuZGxlcicsXG4gICAgICAnc3BhY2U6a2V5dXAnOiAnX3NwYWNlS2V5VXBIYW5kbGVyJyxcbiAgICB9LFxuXG4gICAgX21vdXNlRXZlbnRSZTogL15tb3VzZS8sXG5cbiAgICBfdGFwSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy50b2dnbGVzKSB7XG4gICAgICAgLy8gYSB0YXAgaXMgbmVlZGVkIHRvIHRvZ2dsZSB0aGUgYWN0aXZlIHN0YXRlXG4gICAgICAgIHRoaXMuX3VzZXJBY3RpdmF0ZSghdGhpcy5hY3RpdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2ZvY3VzQ2hhbmdlZDogZnVuY3Rpb24oZm9jdXNlZCkge1xuICAgICAgdGhpcy5fZGV0ZWN0S2V5Ym9hcmRGb2N1cyhmb2N1c2VkKTtcblxuICAgICAgaWYgKCFmb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuX3NldFByZXNzZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZGV0ZWN0S2V5Ym9hcmRGb2N1czogZnVuY3Rpb24oZm9jdXNlZCkge1xuICAgICAgdGhpcy5fc2V0UmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCghdGhpcy5wb2ludGVyRG93biAmJiBmb2N1c2VkKTtcbiAgICB9LFxuXG4gICAgLy8gdG8gZW11bGF0ZSBuYXRpdmUgY2hlY2tib3gsIChkZS0pYWN0aXZhdGlvbnMgZnJvbSBhIHVzZXIgaW50ZXJhY3Rpb24gZmlyZVxuICAgIC8vICdjaGFuZ2UnIGV2ZW50c1xuICAgIF91c2VyQWN0aXZhdGU6IGZ1bmN0aW9uKGFjdGl2ZSkge1xuICAgICAgaWYgKHRoaXMuYWN0aXZlICE9PSBhY3RpdmUpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuZmlyZSgnY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9kb3duSGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHRoaXMuX3NldFBvaW50ZXJEb3duKHRydWUpO1xuICAgICAgdGhpcy5fc2V0UHJlc3NlZCh0cnVlKTtcbiAgICAgIHRoaXMuX3NldFJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQoZmFsc2UpO1xuICAgIH0sXG5cbiAgICBfdXBIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3NldFBvaW50ZXJEb3duKGZhbHNlKTtcbiAgICAgIHRoaXMuX3NldFByZXNzZWQoZmFsc2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFLZXlib2FyZEV2ZW50fSBldmVudCAuXG4gICAgICovXG4gICAgX3NwYWNlS2V5RG93bkhhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIga2V5Ym9hcmRFdmVudCA9IGV2ZW50LmRldGFpbC5rZXlib2FyZEV2ZW50O1xuICAgICAgdmFyIHRhcmdldCA9IFBvbHltZXIuZG9tKGtleWJvYXJkRXZlbnQpLmxvY2FsVGFyZ2V0O1xuXG4gICAgICAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIHRoaXMgaXMgY29taW5nIGZyb20gYSBmb2N1c2VkIGxpZ2h0IGNoaWxkLCBzaW5jZSB0aGF0XG4gICAgICAvLyBlbGVtZW50IHdpbGwgZGVhbCB3aXRoIGl0LlxuICAgICAgaWYgKHRoaXMuaXNMaWdodERlc2NlbmRhbnQoLyoqIEB0eXBlIHtOb2RlfSAqLyh0YXJnZXQpKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBrZXlib2FyZEV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5fc2V0UHJlc3NlZCh0cnVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshS2V5Ym9hcmRFdmVudH0gZXZlbnQgLlxuICAgICAqL1xuICAgIF9zcGFjZUtleVVwSGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXlib2FyZEV2ZW50ID0gZXZlbnQuZGV0YWlsLmtleWJvYXJkRXZlbnQ7XG4gICAgICB2YXIgdGFyZ2V0ID0gUG9seW1lci5kb20oa2V5Ym9hcmRFdmVudCkubG9jYWxUYXJnZXQ7XG5cbiAgICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgdGhpcyBpcyBjb21pbmcgZnJvbSBhIGZvY3VzZWQgbGlnaHQgY2hpbGQsIHNpbmNlIHRoYXRcbiAgICAgIC8vIGVsZW1lbnQgd2lsbCBkZWFsIHdpdGggaXQuXG4gICAgICBpZiAodGhpcy5pc0xpZ2h0RGVzY2VuZGFudCgvKiogQHR5cGUge05vZGV9ICovKHRhcmdldCkpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLnByZXNzZWQpIHtcbiAgICAgICAgdGhpcy5fYXN5bmNDbGljaygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0UHJlc3NlZChmYWxzZSk7XG4gICAgfSxcblxuICAgIC8vIHRyaWdnZXIgY2xpY2sgYXN5bmNocm9ub3VzbHksIHRoZSBhc3luY2hyb255IGlzIHVzZWZ1bCB0byBhbGxvdyBvbmVcbiAgICAvLyBldmVudCBoYW5kbGVyIHRvIHVud2luZCBiZWZvcmUgdHJpZ2dlcmluZyBhbm90aGVyIGV2ZW50XG4gICAgX2FzeW5jQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5hc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jbGljaygpO1xuICAgICAgfSwgMSk7XG4gICAgfSxcblxuICAgIC8vIGFueSBvZiB0aGVzZSBjaGFuZ2VzIGFyZSBjb25zaWRlcmVkIGEgY2hhbmdlIHRvIGJ1dHRvbiBzdGF0ZVxuXG4gICAgX3ByZXNzZWRDaGFuZ2VkOiBmdW5jdGlvbihwcmVzc2VkKSB7XG4gICAgICB0aGlzLl9jaGFuZ2VkQnV0dG9uU3RhdGUoKTtcbiAgICB9LFxuXG4gICAgX2FyaWFBY3RpdmVBdHRyaWJ1dGVDaGFuZ2VkOiBmdW5jdGlvbih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIGlmIChvbGRWYWx1ZSAmJiBvbGRWYWx1ZSAhPSB2YWx1ZSAmJiB0aGlzLmhhc0F0dHJpYnV0ZShvbGRWYWx1ZSkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUob2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfYWN0aXZlQ2hhbmdlZDogZnVuY3Rpb24oYWN0aXZlLCBhcmlhQWN0aXZlQXR0cmlidXRlKSB7XG4gICAgICBpZiAodGhpcy50b2dnbGVzKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKHRoaXMuYXJpYUFjdGl2ZUF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmFyaWFBY3RpdmVBdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2hhbmdlZEJ1dHRvblN0YXRlKCk7XG4gICAgfSxcblxuICAgIF9jb250cm9sU3RhdGVDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuX3NldFByZXNzZWQoZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2hhbmdlZEJ1dHRvblN0YXRlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIHByb3ZpZGUgaG9vayBmb3IgZm9sbG93LW9uIGJlaGF2aW9ycyB0byByZWFjdCB0byBidXR0b24tc3RhdGVcblxuICAgIF9jaGFuZ2VkQnV0dG9uU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2J1dHRvblN0YXRlQ2hhbmdlZCkge1xuICAgICAgICB0aGlzLl9idXR0b25TdGF0ZUNoYW5nZWQoKTsgLy8gYWJzdHJhY3RcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcblxuICAvKiogQHBvbHltZXJCZWhhdmlvciAqL1xuICBQb2x5bWVyLklyb25CdXR0b25TdGF0ZSA9IFtcbiAgICBQb2x5bWVyLklyb25BMTF5S2V5c0JlaGF2aW9yLFxuICAgIFBvbHltZXIuSXJvbkJ1dHRvblN0YXRlSW1wbFxuICBdO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG5cbjwhLS1cbmBpcm9uLW1ldGFgIGlzIGEgZ2VuZXJpYyBlbGVtZW50IHlvdSBjYW4gdXNlIGZvciBzaGFyaW5nIGluZm9ybWF0aW9uIGFjcm9zcyB0aGUgRE9NIHRyZWUuXG5JdCB1c2VzIFttb25vc3RhdGUgcGF0dGVybl0oaHR0cDovL2MyLmNvbS9jZ2kvd2lraT9Nb25vc3RhdGVQYXR0ZXJuKSBzdWNoIHRoYXQgYW55XG5pbnN0YW5jZSBvZiBpcm9uLW1ldGEgaGFzIGFjY2VzcyB0byB0aGUgc2hhcmVkXG5pbmZvcm1hdGlvbi4gWW91IGNhbiB1c2UgYGlyb24tbWV0YWAgdG8gc2hhcmUgd2hhdGV2ZXIgeW91IHdhbnQgKG9yIGNyZWF0ZSBhbiBleHRlbnNpb25cbltsaWtlIHgtbWV0YV0gZm9yIGVuaGFuY2VtZW50cykuXG5cblRoZSBgaXJvbi1tZXRhYCBpbnN0YW5jZXMgY29udGFpbmluZyB5b3VyIGFjdHVhbCBkYXRhIGNhbiBiZSBsb2FkZWQgaW4gYW4gaW1wb3J0LFxub3IgY29uc3RydWN0ZWQgaW4gYW55IHdheSB5b3Ugc2VlIGZpdC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgaXMgdGhhdCB5b3UgY3JlYXRlIHRoZW1cbmJlZm9yZSB5b3UgdHJ5IHRvIGFjY2VzcyB0aGVtLlxuXG5FeGFtcGxlczpcblxuSWYgSSBjcmVhdGUgYW4gaW5zdGFuY2UgbGlrZSB0aGlzOlxuXG4gICAgPGlyb24tbWV0YSBrZXk9XCJpbmZvXCIgdmFsdWU9XCJmb28vYmFyXCI+PC9pcm9uLW1ldGE+XG5cbk5vdGUgdGhhdCB2YWx1ZT1cImZvby9iYXJcIiBpcyB0aGUgbWV0YWRhdGEgSSd2ZSBkZWZpbmVkLiBJIGNvdWxkIGRlZmluZSBtb3JlXG5hdHRyaWJ1dGVzIG9yIHVzZSBjaGlsZCBub2RlcyB0byBkZWZpbmUgYWRkaXRpb25hbCBtZXRhZGF0YS5cblxuTm93IEkgY2FuIGFjY2VzcyB0aGF0IGVsZW1lbnQgKGFuZCBpdCdzIG1ldGFkYXRhKSBmcm9tIGFueSBpcm9uLW1ldGEgaW5zdGFuY2VcbnZpYSB0aGUgYnlLZXkgbWV0aG9kLCBlLmcuXG5cbiAgICBtZXRhLmJ5S2V5KCdpbmZvJyk7XG5cblB1cmUgaW1wZXJhdGl2ZSBmb3JtIHdvdWxkIGJlIGxpa2U6XG5cbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpcm9uLW1ldGEnKS5ieUtleSgnaW5mbycpO1xuXG5PciwgaW4gYSBQb2x5bWVyIGVsZW1lbnQsIHlvdSBjYW4gaW5jbHVkZSBhIG1ldGEgaW4geW91ciB0ZW1wbGF0ZTpcblxuICAgIDxpcm9uLW1ldGEgaWQ9XCJtZXRhXCI+PC9pcm9uLW1ldGE+XG4gICAgLi4uXG4gICAgdGhpcy4kLm1ldGEuYnlLZXkoJ2luZm8nKTtcblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBkZW1vIGRlbW8vaW5kZXguaHRtbFxuQGhlcm8gaGVyby5zdmdcbkBlbGVtZW50IGlyb24tbWV0YVxuLS0+XG5cbjxzY3JpcHQ+XG4gIChmdW5jdGlvbigpIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7e1xuICAgKiAgIHR5cGU6IChzdHJpbmd8bnVsbHx1bmRlZmluZWQpLFxuICAgKiAgIGtleTogKHN0cmluZ3xudWxsfHVuZGVmaW5lZCksXG4gICAqICAgdmFsdWU6ICosXG4gICAqIH09fSBvcHRpb25zXG4gICAqL1xuICBQb2x5bWVyLklyb25NZXRhID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIFBvbHltZXIuSXJvbk1ldGFbJyAnXShvcHRpb25zKTtcblxuICAgIHRoaXMudHlwZSA9IChvcHRpb25zICYmIG9wdGlvbnMudHlwZSkgfHwgJ2RlZmF1bHQnO1xuICAgIHRoaXMua2V5ID0gb3B0aW9ucyAmJiBvcHRpb25zLmtleTtcbiAgICBpZiAob3B0aW9ucyAmJiAndmFsdWUnIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY29udmluY2UgQ2xvc3VyZSBub3QgdG8gcmVtb3ZlIGNvbnN0cnVjdG9yIGNhbGxzXG4gIC8vIGZvciBpbnN0YW5jZXMgdGhhdCBhcmUgbm90IGhlbGQgYW55d2hlcmUuIEZvciBleGFtcGxlLCB3aGVuXG4gIC8vIGBuZXcgUG9seW1lci5Jcm9uTWV0YSh7Li4ufSlgIGlzIHVzZWQgb25seSBmb3IgdGhlIHNpZGUgZWZmZWN0IG9mIGFkZGluZ1xuICAvLyBhIHZhbHVlLlxuICBQb2x5bWVyLklyb25NZXRhWycgJ10gPSBmdW5jdGlvbigpIHt9O1xuXG4gIFBvbHltZXIuSXJvbk1ldGEudHlwZXMgPSB7fTtcblxuICBQb2x5bWVyLklyb25NZXRhLnByb3RvdHlwZSA9IHtcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmtleTtcblxuICAgICAgaWYgKHR5cGUgJiYga2V5KSB7XG4gICAgICAgIHJldHVybiBQb2x5bWVyLklyb25NZXRhLnR5cGVzW3R5cGVdICYmIFBvbHltZXIuSXJvbk1ldGEudHlwZXNbdHlwZV1ba2V5XTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgIHZhciBrZXkgPSB0aGlzLmtleTtcblxuICAgICAgaWYgKHR5cGUgJiYga2V5KSB7XG4gICAgICAgIHR5cGUgPSBQb2x5bWVyLklyb25NZXRhLnR5cGVzW3R5cGVdID0gUG9seW1lci5Jcm9uTWV0YS50eXBlc1t0eXBlXSB8fCB7fTtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdHlwZVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR5cGVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldCBsaXN0KCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFBvbHltZXIuSXJvbk1ldGEudHlwZXNbdGhpcy50eXBlXTtcbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpdGVtcykubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBtZXRhRGF0YXNbdGhpcy50eXBlXVtrZXldO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYnlLZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1ldGFEYXRhcyA9IFBvbHltZXIuSXJvbk1ldGEudHlwZXM7XG5cbiAgUG9seW1lcih7XG5cbiAgICBpczogJ2lyb24tbWV0YScsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgbWV0YS1kYXRhLiAgQWxsIG1ldGEtZGF0YSBvZiB0aGUgc2FtZSB0eXBlIGlzIHN0b3JlZFxuICAgICAgICogdG9nZXRoZXIuXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6ICdkZWZhdWx0JyxcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGtleSB1c2VkIHRvIHN0b3JlIGB2YWx1ZWAgdW5kZXIgdGhlIGB0eXBlYCBuYW1lc3BhY2UuXG4gICAgICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICAgICAqL1xuICAgICAga2V5OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1ldGEtZGF0YSB0byBzdG9yZSBvciByZXRyaWV2ZS5cbiAgICAgICAqIEB0eXBlIHsqfVxuICAgICAgICovXG4gICAgICB2YWx1ZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgdHJ1ZSwgYHZhbHVlYCBpcyBzZXQgdG8gdGhlIGlyb24tbWV0YSBpbnN0YW5jZSBpdHNlbGYuXG4gICAgICAgKi9cbiAgICAgIHNlbGY6IHt0eXBlOiBCb29sZWFuLCBvYnNlcnZlcjogJ19zZWxmQ2hhbmdlZCd9LFxuXG4gICAgICBfX21ldGE6IHt0eXBlOiBCb29sZWFuLCBjb21wdXRlZDogJ19fY29tcHV0ZU1ldGEodHlwZSwga2V5LCB2YWx1ZSknfVxuICAgIH0sXG5cbiAgICBob3N0QXR0cmlidXRlczoge2hpZGRlbjogdHJ1ZX0sXG5cbiAgICBfX2NvbXB1dGVNZXRhOiBmdW5jdGlvbih0eXBlLCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgbWV0YSA9IG5ldyBQb2x5bWVyLklyb25NZXRhKHt0eXBlOiB0eXBlLCBrZXk6IGtleX0pO1xuXG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbWV0YS52YWx1ZSkge1xuICAgICAgICBtZXRhLnZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudmFsdWUgIT09IG1ldGEudmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG1ldGEudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXRhO1xuICAgIH0sXG5cbiAgICBnZXQgbGlzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fbWV0YSAmJiB0aGlzLl9fbWV0YS5saXN0O1xuICAgIH0sXG5cbiAgICBfc2VsZkNoYW5nZWQ6IGZ1bmN0aW9uKHNlbGYpIHtcbiAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgbWV0YSBkYXRhIHZhbHVlIGJ5IGtleS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnlLZXlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGEtZGF0YSB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIGJ5S2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUG9seW1lci5Jcm9uTWV0YSh7dHlwZTogdGhpcy50eXBlLCBrZXk6IGtleX0pLnZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIH0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiaXJvbi1zZWxlY3Rpb24uaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgICogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLklyb25TZWxlY3RhYmxlQmVoYXZpb3JcbiAgICovXG4gIFBvbHltZXIuSXJvblNlbGVjdGFibGVCZWhhdmlvciA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuIGlyb24tc2VsZWN0b3IgaXMgYWN0aXZhdGVkIChzZWxlY3RlZCBvciBkZXNlbGVjdGVkKS5cbiAgICAgICAqIEl0IGlzIGZpcmVkIGJlZm9yZSB0aGUgc2VsZWN0ZWQgaXRlbXMgYXJlIGNoYW5nZWQuXG4gICAgICAgKiBDYW5jZWwgdGhlIGV2ZW50IHRvIGFib3J0IHNlbGVjdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgaXJvbi1hY3RpdmF0ZVxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZWQgd2hlbiBhbiBpdGVtIGlzIHNlbGVjdGVkXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IGlyb24tc2VsZWN0XG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuIGFuIGl0ZW0gaXMgZGVzZWxlY3RlZFxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBpcm9uLWRlc2VsZWN0XG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuIHRoZSBsaXN0IG9mIHNlbGVjdGFibGUgaXRlbXMgY2hhbmdlcyAoZS5nLiwgaXRlbXMgYXJlXG4gICAgICAgKiBhZGRlZCBvciByZW1vdmVkKS4gVGhlIGRldGFpbCBvZiB0aGUgZXZlbnQgaXMgYSBtdXRhdGlvbiByZWNvcmQgdGhhdFxuICAgICAgICogZGVzY3JpYmVzIHdoYXQgY2hhbmdlZC5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgaXJvbi1pdGVtcy1jaGFuZ2VkXG4gICAgICAgKi9cblxuICAgIHByb3BlcnRpZXM6IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byB1c2UgYW4gYXR0cmlidXRlIHZhbHVlIG9yIHByb3BlcnR5IG9mIGFuIGVsZW1lbnQgZm9yXG4gICAgICAgKiBgc2VsZWN0ZWRgIGluc3RlYWQgb2YgdGhlIGluZGV4LCBzZXQgdGhpcyB0byB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlXG4gICAgICAgKiBvciBwcm9wZXJ0eS4gSHlwaGVuYXRlZCB2YWx1ZXMgYXJlIGNvbnZlcnRlZCB0byBjYW1lbCBjYXNlIHdoZW4gdXNlZCB0b1xuICAgICAgICogbG9vayB1cCB0aGUgcHJvcGVydHkgb2YgYSBzZWxlY3RhYmxlIGVsZW1lbnQuIENhbWVsIGNhc2VkIHZhbHVlcyBhcmVcbiAgICAgICAqICpub3QqIGNvbnZlcnRlZCB0byBoeXBoZW5hdGVkIHZhbHVlcyBmb3IgYXR0cmlidXRlIGxvb2t1cC4gSXQnc1xuICAgICAgICogcmVjb21tZW5kZWQgdGhhdCB5b3UgcHJvdmlkZSB0aGUgaHlwaGVuYXRlZCBmb3JtIG9mIHRoZSBuYW1lIHNvIHRoYXRcbiAgICAgICAqIHNlbGVjdGlvbiB3b3JrcyBpbiBib3RoIGNhc2VzLiAoVXNlIGBhdHRyLW9yLXByb3BlcnR5LW5hbWVgIGluc3RlYWQgb2ZcbiAgICAgICAqIGBhdHRyT3JQcm9wZXJ0eU5hbWVgLilcbiAgICAgICAqL1xuICAgICAgYXR0ckZvclNlbGVjdGVkOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBvciBzZXRzIHRoZSBzZWxlY3RlZCBlbGVtZW50LiBUaGUgZGVmYXVsdCBpcyB0byB1c2UgdGhlIGluZGV4IG9mIHRoZSBpdGVtLlxuICAgICAgICogQHR5cGUge3N0cmluZ3xudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHs/T2JqZWN0fVxuICAgICAgICovXG4gICAgICBzZWxlY3RlZEl0ZW06IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBldmVudCB0aGF0IGZpcmVzIGZyb20gaXRlbXMgd2hlbiB0aGV5IGFyZSBzZWxlY3RlZC4gU2VsZWN0YWJsZVxuICAgICAgICogd2lsbCBsaXN0ZW4gZm9yIHRoaXMgZXZlbnQgZnJvbSBpdGVtcyBhbmQgdXBkYXRlIHRoZSBzZWxlY3Rpb24gc3RhdGUuXG4gICAgICAgKiBTZXQgdG8gZW1wdHkgc3RyaW5nIHRvIGxpc3RlbiB0byBubyBldmVudHMuXG4gICAgICAgKi9cbiAgICAgIGFjdGl2YXRlRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ3RhcCcsXG4gICAgICAgIG9ic2VydmVyOiAnX2FjdGl2YXRlRXZlbnRDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGlzIGEgQ1NTIHNlbGVjdG9yIHN0cmluZy4gIElmIHRoaXMgaXMgc2V0LCBvbmx5IGl0ZW1zIHRoYXQgbWF0Y2ggdGhlIENTUyBzZWxlY3RvclxuICAgICAgICogYXJlIHNlbGVjdGFibGUuXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdGFibGU6IFN0cmluZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY2xhc3MgdG8gc2V0IG9uIGVsZW1lbnRzIHdoZW4gc2VsZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdGVkQ2xhc3M6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogJ2lyb24tc2VsZWN0ZWQnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBhdHRyaWJ1dGUgdG8gc2V0IG9uIGVsZW1lbnRzIHdoZW4gc2VsZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdGVkQXR0cmlidXRlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRGVmYXVsdCBmYWxsYmFjayBpZiB0aGUgc2VsZWN0aW9uIGJhc2VkIG9uIHNlbGVjdGVkIHdpdGggYGF0dHJGb3JTZWxlY3RlZGBcbiAgICAgICAqIGlzIG5vdCBmb3VuZC5cbiAgICAgICAqL1xuICAgICAgZmFsbGJhY2tTZWxlY3Rpb246IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbGlzdCBvZiBpdGVtcyBmcm9tIHdoaWNoIGEgc2VsZWN0aW9uIGNhbiBiZSBtYWRlLlxuICAgICAgICovXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIG5vdGlmeTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2V0IG9mIGV4Y2x1ZGVkIGVsZW1lbnRzIHdoZXJlIHRoZSBrZXkgaXMgdGhlIGBsb2NhbE5hbWVgXG4gICAgICAgKiBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgaWdub3JlZCBmcm9tIHRoZSBpdGVtIGxpc3QuXG4gICAgICAgKlxuICAgICAgICogQGRlZmF1bHQge3RlbXBsYXRlOiAxfVxuICAgICAgICovXG4gICAgICBfZXhjbHVkZWRMb2NhbE5hbWVzOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGVtcGxhdGUnOiAxLFxuICAgICAgICAgICAgJ2RvbS1iaW5kJzogMSxcbiAgICAgICAgICAgICdkb20taWYnOiAxLFxuICAgICAgICAgICAgJ2RvbS1yZXBlYXQnOiAxLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb2JzZXJ2ZXJzOiBbXG4gICAgICAnX3VwZGF0ZUF0dHJGb3JTZWxlY3RlZChhdHRyRm9yU2VsZWN0ZWQpJyxcbiAgICAgICdfdXBkYXRlU2VsZWN0ZWQoc2VsZWN0ZWQpJyxcbiAgICAgICdfY2hlY2tGYWxsYmFjayhmYWxsYmFja1NlbGVjdGlvbiknXG4gICAgXSxcblxuICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fYmluZEZpbHRlckl0ZW0gPSB0aGlzLl9maWx0ZXJJdGVtLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9zZWxlY3Rpb24gPSBuZXcgUG9seW1lci5Jcm9uU2VsZWN0aW9uKHRoaXMuX2FwcGx5U2VsZWN0aW9uLmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBhdHRhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlciA9IHRoaXMuX29ic2VydmVJdGVtcyh0aGlzKTtcbiAgICAgIHRoaXMuX2FkZExpc3RlbmVyKHRoaXMuYWN0aXZhdGVFdmVudCk7XG4gICAgfSxcblxuICAgIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICBQb2x5bWVyLmRvbSh0aGlzKS51bm9ic2VydmVOb2Rlcyh0aGlzLl9vYnNlcnZlcik7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcih0aGlzLmFjdGl2YXRlRXZlbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gaXRlbS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgaW5kZXhPZlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGl0ZW1cbiAgICAgKi9cbiAgICBpbmRleE9mOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtcyA/IHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKSA6IC0xO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIHRoZSBnaXZlbiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VsZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2VsZWN0LlxuICAgICAqL1xuICAgIHNlbGVjdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgcHJldmlvdXMgaXRlbS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VsZWN0UHJldmlvdXNcbiAgICAgKi9cbiAgICBzZWxlY3RQcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgICB2YXIgaW5kZXggPSAoTnVtYmVyKHRoaXMuX3ZhbHVlVG9JbmRleCh0aGlzLnNlbGVjdGVkKSkgLSAxICsgbGVuZ3RoKSAlIGxlbmd0aDtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLl9pbmRleFRvVmFsdWUoaW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIHRoZSBuZXh0IGl0ZW0uXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNlbGVjdE5leHRcbiAgICAgKi9cbiAgICBzZWxlY3ROZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbmRleCA9IChOdW1iZXIodGhpcy5fdmFsdWVUb0luZGV4KHRoaXMuc2VsZWN0ZWQpKSArIDEpICUgdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5faW5kZXhUb1ZhbHVlKGluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNlbGVjdEluZGV4XG4gICAgICovXG4gICAgc2VsZWN0SW5kZXg6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICB0aGlzLnNlbGVjdCh0aGlzLl9pbmRleFRvVmFsdWUoaW5kZXgpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgYSBzeW5jaHJvbm91cyB1cGRhdGUgb2YgdGhlIGBpdGVtc2AgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBOT1RFOiBDb25zaWRlciBsaXN0ZW5pbmcgZm9yIHRoZSBgaXJvbi1pdGVtcy1jaGFuZ2VkYCBldmVudCB0byByZXNwb25kIHRvXG4gICAgICogdXBkYXRlcyB0byB0aGUgc2V0IG9mIHNlbGVjdGFibGUgaXRlbXMgYWZ0ZXIgdXBkYXRlcyB0byB0aGUgRE9NIGxpc3QgYW5kXG4gICAgICogc2VsZWN0aW9uIHN0YXRlIGhhdmUgYmVlbiBtYWRlLlxuICAgICAqXG4gICAgICogV0FSTklORzogSWYgeW91IGFyZSB1c2luZyB0aGlzIG1ldGhvZCwgeW91IHNob3VsZCBwcm9iYWJseSBjb25zaWRlciBhblxuICAgICAqIGFsdGVybmF0ZSBhcHByb2FjaC4gU3luY2hyb25vdXNseSBxdWVyeWluZyBmb3IgaXRlbXMgaXMgcG90ZW50aWFsbHlcbiAgICAgKiBzbG93IGZvciBtYW55IHVzZSBjYXNlcy4gVGhlIGBpdGVtc2AgcHJvcGVydHkgd2lsbCB1cGRhdGUgYXN5bmNocm9ub3VzbHlcbiAgICAgKiBvbiBpdHMgb3duIHRvIHJlZmxlY3Qgc2VsZWN0YWJsZSBpdGVtcyBpbiB0aGUgRE9NLlxuICAgICAqL1xuICAgIGZvcmNlU3luY2hyb25vdXNJdGVtVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9vYnNlcnZlciAmJiB0eXBlb2YgdGhpcy5fb2JzZXJ2ZXIuZmx1c2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBOT1RFKGJpY2tuZWxscik6IGBQb2x5bWVyLmRvbS5mbHVzaGAgYWJvdmUgaXMgbm8gbG9uZ2VyIHN1ZmZpY2llbnQgdG9cbiAgICAgICAgLy8gdHJpZ2dlciBgb2JzZXJ2ZU5vZGVzYCBjYWxsYmFja3MuIFBvbHltZXIgMi54IHJldHVybnMgYW4gb2JqZWN0IGZyb21cbiAgICAgICAgLy8gYG9ic2VydmVOb2Rlc2Agd2l0aCBhIGBmbHVzaGAgdGhhdCBzeW5jaHJvbm91c2x5IGdpdmVzIHRoZSBjYWxsYmFja1xuICAgICAgICAvLyBhbnkgcGVuZGluZyBNdXRhdGlvblJlY29yZHMgKHJldHJpZXZlZCB3aXRoIGB0YWtlUmVjb3Jkc2ApLiBBbnkgY2FzZVxuICAgICAgICAvLyB3aGVyZSBTaGFkeURPTSBmbHVzaGVzIHdlcmUgZXhwZWN0ZWQgdG8gc3luY2hyb25vdXNseSB0cmlnZ2VyIGl0ZW1cbiAgICAgICAgLy8gdXBkYXRlcyB3aWxsIG5vdyByZXF1aXJlIGNhbGxpbmcgYGZvcmNlU3luY2hyb25vdXNJdGVtVXBkYXRlYC5cbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIuZmx1c2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUl0ZW1zKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIFVOVVNFRCwgRk9SIEFQSSBDT01QQVRJQklMSVRZXG4gICAgZ2V0IF9zaG91bGRVcGRhdGVTZWxlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZCAhPSBudWxsO1xuICAgIH0sXG5cbiAgICBfY2hlY2tGYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl91cGRhdGVTZWxlY3RlZCgpO1xuICAgIH0sXG5cbiAgICBfYWRkTGlzdGVuZXI6IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgdGhpcy5saXN0ZW4odGhpcywgZXZlbnROYW1lLCAnX2FjdGl2YXRlSGFuZGxlcicpO1xuICAgIH0sXG5cbiAgICBfcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgdGhpcy51bmxpc3Rlbih0aGlzLCBldmVudE5hbWUsICdfYWN0aXZhdGVIYW5kbGVyJyk7XG4gICAgfSxcblxuICAgIF9hY3RpdmF0ZUV2ZW50Q2hhbmdlZDogZnVuY3Rpb24oZXZlbnROYW1lLCBvbGQpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVyKG9sZCk7XG4gICAgICB0aGlzLl9hZGRMaXN0ZW5lcihldmVudE5hbWUpO1xuICAgIH0sXG5cbiAgICBfdXBkYXRlSXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vZGVzID0gUG9seW1lci5kb20odGhpcykucXVlcnlEaXN0cmlidXRlZEVsZW1lbnRzKHRoaXMuc2VsZWN0YWJsZSB8fCAnKicpO1xuICAgICAgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwobm9kZXMsIHRoaXMuX2JpbmRGaWx0ZXJJdGVtKTtcbiAgICAgIHRoaXMuX3NldEl0ZW1zKG5vZGVzKTtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZUF0dHJGb3JTZWxlY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuX3ZhbHVlRm9ySXRlbSh0aGlzLnNlbGVjdGVkSXRlbSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF91cGRhdGVTZWxlY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9zZWxlY3RTZWxlY3RlZCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9LFxuXG4gICAgX3NlbGVjdFNlbGVjdGVkOiBmdW5jdGlvbihzZWxlY3RlZCkge1xuICAgICAgaWYgKCF0aGlzLml0ZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW0gPSB0aGlzLl92YWx1ZVRvSXRlbSh0aGlzLnNlbGVjdGVkKTtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zZWxlY3QoaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb24uY2xlYXIoKTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBpdGVtcywgc2luY2UgdGhpcyBhcnJheSBpcyBwb3B1bGF0ZWQgb25seSB3aGVuIGF0dGFjaGVkXG4gICAgICAvLyBTaW5jZSBOdW1iZXIoMCkgaXMgZmFsc3ksIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHVuZGVmaW5lZFxuICAgICAgaWYgKHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24gJiYgdGhpcy5pdGVtcy5sZW5ndGggJiYgKHRoaXMuX3NlbGVjdGlvbi5nZXQoKSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5mYWxsYmFja1NlbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2ZpbHRlckl0ZW06IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiAhdGhpcy5fZXhjbHVkZWRMb2NhbE5hbWVzW25vZGUubG9jYWxOYW1lXTtcbiAgICB9LFxuXG4gICAgX3ZhbHVlVG9JdGVtOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiB0aGlzLml0ZW1zW3RoaXMuX3ZhbHVlVG9JbmRleCh2YWx1ZSldO1xuICAgIH0sXG5cbiAgICBfdmFsdWVUb0luZGV4OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuYXR0ckZvclNlbGVjdGVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpdGVtOyBpdGVtID0gdGhpcy5pdGVtc1tpXTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlRm9ySXRlbShpdGVtKSA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luZGV4VG9WYWx1ZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLmF0dHJGb3JTZWxlY3RlZCkge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaW5kZXhdO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZUZvckl0ZW0oaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3ZhbHVlRm9ySXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmF0dHJGb3JTZWxlY3RlZCkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgcmV0dXJuIGkgPT09IC0xID8gbnVsbCA6IGk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gaXRlbVtQb2x5bWVyLkNhc2VNYXAuZGFzaFRvQ2FtZWxDYXNlKHRoaXMuYXR0ckZvclNlbGVjdGVkKV07XG4gICAgICByZXR1cm4gcHJvcFZhbHVlICE9IHVuZGVmaW5lZCA/IHByb3BWYWx1ZSA6IGl0ZW0uZ2V0QXR0cmlidXRlKHRoaXMuYXR0ckZvclNlbGVjdGVkKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5U2VsZWN0aW9uOiBmdW5jdGlvbihpdGVtLCBpc1NlbGVjdGVkKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZENsYXNzKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQ2xhc3ModGhpcy5zZWxlY3RlZENsYXNzLCBpc1NlbGVjdGVkLCBpdGVtKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkQXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKHRoaXMuc2VsZWN0ZWRBdHRyaWJ1dGUsIGlzU2VsZWN0ZWQsIGl0ZW0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlKCk7XG4gICAgICB0aGlzLmZpcmUoJ2lyb24tJyArIChpc1NlbGVjdGVkID8gJ3NlbGVjdCcgOiAnZGVzZWxlY3QnKSwge2l0ZW06IGl0ZW19KTtcbiAgICB9LFxuXG4gICAgX3NlbGVjdGlvbkNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW0odGhpcy5fc2VsZWN0aW9uLmdldCgpKTtcbiAgICB9LFxuXG4gICAgLy8gb2JzZXJ2ZSBpdGVtcyBjaGFuZ2UgdW5kZXIgdGhlIGdpdmVuIG5vZGUuXG4gICAgX29ic2VydmVJdGVtczogZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIFBvbHltZXIuZG9tKG5vZGUpLm9ic2VydmVOb2RlcyhmdW5jdGlvbihtdXRhdGlvbikge1xuICAgICAgICB0aGlzLl91cGRhdGVJdGVtcygpO1xuICAgICAgICB0aGlzLl91cGRhdGVTZWxlY3RlZCgpO1xuXG4gICAgICAgIC8vIExldCBvdGhlciBpbnRlcmVzdGVkIHBhcnRpZXMga25vdyBhYm91dCB0aGUgY2hhbmdlIHNvIHRoYXRcbiAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSB0byByZWNyZWF0ZSBtdXRhdGlvbiBvYnNlcnZlcnMgZXZlcnl3aGVyZS5cbiAgICAgICAgdGhpcy5maXJlKCdpcm9uLWl0ZW1zLWNoYW5nZWQnLCBtdXRhdGlvbiwge1xuICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9hY3RpdmF0ZUhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gZS50YXJnZXQ7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgd2hpbGUgKHQgJiYgdCAhPSB0aGlzKSB7XG4gICAgICAgIHZhciBpID0gaXRlbXMuaW5kZXhPZih0KTtcbiAgICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2luZGV4VG9WYWx1ZShpKTtcbiAgICAgICAgICB0aGlzLl9pdGVtQWN0aXZhdGUodmFsdWUsIHQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ID0gdC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaXRlbUFjdGl2YXRlOiBmdW5jdGlvbih2YWx1ZSwgaXRlbSkge1xuICAgICAgaWYgKCF0aGlzLmZpcmUoJ2lyb24tYWN0aXZhdGUnLFxuICAgICAgICAgIHtzZWxlY3RlZDogdmFsdWUsIGl0ZW06IGl0ZW19LCB7Y2FuY2VsYWJsZTogdHJ1ZX0pLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICB9O1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2FwcC1zY3JvbGwtZWZmZWN0cy1iZWhhdmlvci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIC8qKlxuICAgKiBWZXJ0aWNhbGx5IHRyYW5zbGF0ZSB0aGUgYmFja2dyb3VuZCBiYXNlZCBvbiBhIGZhY3RvciBvZiB0aGUgc2Nyb2xsIHBvc2l0aW9uLlxuICAgKi9cbiAgUG9seW1lci5BcHBMYXlvdXQucmVnaXN0ZXJFZmZlY3QoJ3BhcmFsbGF4LWJhY2tncm91bmQnLCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7c2NhbGFyOiBzdHJpbmd9fSBjb25maWdcbiAgICAgKiBAdGhpcyBQb2x5bWVyLkFwcExheW91dC5FbGVtZW50V2l0aEJhY2tncm91bmRcbiAgICAgKi9cbiAgICBzZXRVcDogZnVuY3Rpb24gc2V0VXAoY29uZmlnKSB7XG4gICAgICB2YXIgZnggPSB7fTtcbiAgICAgIHZhciBzY2FsYXIgPSBwYXJzZUZsb2F0KGNvbmZpZy5zY2FsYXIpO1xuICAgICAgZnguYmFja2dyb3VuZCA9IHRoaXMuX2dldERPTVJlZignYmFja2dyb3VuZCcpO1xuICAgICAgZnguYmFja2dyb3VuZEZyb250TGF5ZXIgPSB0aGlzLl9nZXRET01SZWYoJ2JhY2tncm91bmRGcm9udExheWVyJyk7XG4gICAgICBmeC5iYWNrZ3JvdW5kUmVhckxheWVyID0gdGhpcy5fZ2V0RE9NUmVmKCdiYWNrZ3JvdW5kUmVhckxheWVyJyk7XG4gICAgICBmeC5kZWx0YUJnID0gZnguYmFja2dyb3VuZEZyb250TGF5ZXIub2Zmc2V0SGVpZ2h0IC0gZnguYmFja2dyb3VuZC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpZiAoZnguZGVsdGFCZyA9PT0gMCkge1xuICAgICAgICBpZiAoaXNOYU4oc2NhbGFyKSkge1xuICAgICAgICAgIHNjYWxhciA9IDAuODtcbiAgICAgICAgfVxuICAgICAgICBmeC5kZWx0YUJnID0gKHRoaXMuX2RIZWlnaHQgfHwgMCkgKiBzY2FsYXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNOYU4oc2NhbGFyKSkge1xuICAgICAgICAgIHNjYWxhciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZnguZGVsdGFCZyA9IGZ4LmRlbHRhQmcgKiBzY2FsYXI7XG4gICAgICB9XG4gICAgICB0aGlzLl9meFBhcmFsbGF4QmFja2dyb3VuZCA9IGZ4O1xuICAgIH0sXG4gICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuKHAsIHkpIHtcbiAgICAgIHZhciBmeCA9IHRoaXMuX2Z4UGFyYWxsYXhCYWNrZ3JvdW5kO1xuICAgICAgdGhpcy50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDBweCwgJyArIChmeC5kZWx0YUJnICogTWF0aC5taW4oMSwgcCkpICsgJ3B4LCAwcHgpJywgZnguYmFja2dyb3VuZEZyb250TGF5ZXIpO1xuICAgICAgaWYgKGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDBweCwgJyArIChmeC5kZWx0YUJnICogTWF0aC5taW4oMSwgcCkpICsgJ3B4LCAwcHgpJywgZnguYmFja2dyb3VuZFJlYXJMYXllcik7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiogQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kICovXG4gICAgdGVhckRvd246IGZ1bmN0aW9uIHRlYXJEb3duKCkge1xuICAgICAgZGVsZXRlIHRoaXMuX2Z4UGFyYWxsYXhCYWNrZ3JvdW5kO1xuICAgIH1cbiAgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2FwcC1zY3JvbGwtZWZmZWN0cy1iZWhhdmlvci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShwcm9ncmVzcywgcG9pbnRzLCBmbiwgY3R4KSB7XG4gICAgICBmbi5hcHBseShjdHgsIHBvaW50cy5tYXAoZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50WzBdICsgKHBvaW50WzFdIC0gcG9pbnRbMF0pICogcHJvZ3Jlc3M7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIHRoZSBmb250IHNpemUgb2YgYSBkZXNpZ25hdGVkIHRpdGxlIGVsZW1lbnQgYmV0d2VlbiB0d28gdmFsdWVzIGJhc2VkIG9uIHRoZSBzY3JvbGxcbiAgICAgKiBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBQb2x5bWVyLkFwcExheW91dC5yZWdpc3RlckVmZmVjdCgncmVzaXplLXRpdGxlJywge1xuICAgICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgICAgc2V0VXA6IGZ1bmN0aW9uIHNldFVwKCkge1xuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLl9nZXRET01SZWYoJ21haW5UaXRsZScpO1xuICAgICAgICB2YXIgY29uZGVuc2VkVGl0bGUgPSB0aGlzLl9nZXRET01SZWYoJ2NvbmRlbnNlZFRpdGxlJyk7XG5cbiAgICAgICAgaWYgKCFjb25kZW5zZWRUaXRsZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignU2Nyb2xsIGVmZmVjdCBgcmVzaXplLXRpdGxlYDogdW5kZWZpbmVkIGBjb25kZW5zZWQtdGl0bGVgJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1Njcm9sbCBlZmZlY3QgYHJlc2l6ZS10aXRsZWA6IHVuZGVmaW5lZCBgbWFpbi10aXRsZWAnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25kZW5zZWRUaXRsZS5zdHlsZS53aWxsQ2hhbmdlID0gJ29wYWNpdHknO1xuICAgICAgICBjb25kZW5zZWRUaXRsZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlWigwKSc7XG4gICAgICAgIGNvbmRlbnNlZFRpdGxlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVaKDApJztcbiAgICAgICAgY29uZGVuc2VkVGl0bGUuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gJ2xlZnQgdG9wJztcbiAgICAgICAgY29uZGVuc2VkVGl0bGUuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gJ2xlZnQgdG9wJztcblxuICAgICAgICB0aXRsZS5zdHlsZS53aWxsQ2hhbmdlID0gJ29wYWNpdHknO1xuICAgICAgICB0aXRsZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSAnbGVmdCB0b3AnO1xuICAgICAgICB0aXRsZS5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnbGVmdCB0b3AnO1xuICAgICAgICB0aXRsZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlWigwKSc7XG4gICAgICAgIHRpdGxlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVaKDApJztcblxuICAgICAgICB2YXIgdGl0bGVDbGllbnRSZWN0ID0gdGl0bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBjb25kZW5zZWRUaXRsZUNsaWVudFJlY3QgPSBjb25kZW5zZWRUaXRsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGZ4ID0ge307XG5cbiAgICAgICAgZnguc2NhbGUgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb25kZW5zZWRUaXRsZSlbJ2ZvbnQtc2l6ZSddLCAxMCkgL1xuICAgICAgICAgICAgcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGl0bGUpWydmb250LXNpemUnXSwgMTApO1xuICAgICAgICBmeC50aXRsZURYID0gdGl0bGVDbGllbnRSZWN0LmxlZnQgLSBjb25kZW5zZWRUaXRsZUNsaWVudFJlY3QubGVmdDtcbiAgICAgICAgZngudGl0bGVEWSA9IHRpdGxlQ2xpZW50UmVjdC50b3AgLSBjb25kZW5zZWRUaXRsZUNsaWVudFJlY3QudG9wO1xuICAgICAgICBmeC5jb25kZW5zZWRUaXRsZSA9IGNvbmRlbnNlZFRpdGxlO1xuICAgICAgICBmeC50aXRsZSA9IHRpdGxlO1xuXG4gICAgICAgIHRoaXMuX2Z4UmVzaXplVGl0bGUgPSBmeDtcbiAgICAgIH0sXG4gICAgICAvKiogQHRoaXMgUG9seW1lckVsZW1lbnQgKi9cbiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKHAsIHkpIHtcbiAgICAgICAgdmFyIGZ4ID0gdGhpcy5fZnhSZXNpemVUaXRsZTtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmRlbnNlcykge1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwID49IDEpIHtcbiAgICAgICAgICBmeC50aXRsZS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgICBmeC5jb25kZW5zZWRUaXRsZS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmeC50aXRsZS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICBmeC5jb25kZW5zZWRUaXRsZS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcnBvbGF0ZShNYXRoLm1pbigxLCBwKSwgWyBbMSwgZnguc2NhbGVdLCBbMCwgLWZ4LnRpdGxlRFhdLCBbeSwgeS1meC50aXRsZURZXSBdLFxuICAgICAgICAgIGZ1bmN0aW9uKHNjYWxlLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSgndHJhbnNsYXRlKCcgKyB0cmFuc2xhdGVYICsgJ3B4LCAnICsgdHJhbnNsYXRlWSArICdweCkgJyArXG4gICAgICAgICAgICAgICAgJ3NjYWxlM2QoJyArIHNjYWxlICsgJywgJyArIHNjYWxlICsgJywgMSknLCBmeC50aXRsZSk7XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LFxuICAgICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgICAgdGVhckRvd246IGZ1bmN0aW9uIHRlYXJEb3duKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fZnhSZXNpemVUaXRsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vYXBwLXNjcm9sbC1lZmZlY3RzLWJlaGF2aW9yLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNoYWRvdyBwcm9wZXJ0eSBpbiBhcHAtaGVhZGVyIHdoZW4gY29udGVudCBpcyBzY3JvbGxlZCB0byBjcmVhdGUgYSBzZW5zZSBvZiBkZXB0aFxuICAgKiBiZXR3ZWVuIHRoZSBlbGVtZW50IGFuZCB0aGUgY29udGVudCB1bmRlcm5lYXRoLlxuICAgKi9cbiAgUG9seW1lci5BcHBMYXlvdXQucmVnaXN0ZXJFZmZlY3QoJ3dhdGVyZmFsbCcsIHtcbiAgICAvKipcbiAgICAgKiAgQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kXG4gICAgICovXG4gICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7XG4gICAgICB0aGlzLnNoYWRvdyA9IHRoaXMuaXNPblNjcmVlbigpICYmIHRoaXMuaXNDb250ZW50QmVsb3coKTtcbiAgICB9XG4gIH0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtc2Nyb2xsLWVmZmVjdHMtYmVoYXZpb3IuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgICogV2hpbGUgc2Nyb2xsaW5nIGRvd24sIGZhZGUgaW4gdGhlIHJlYXIgYmFja2dyb3VuZCBsYXllciBhbmQgZmFkZSBvdXQgdGhlIGZyb250IGJhY2tncm91bmRcbiAgICogbGF5ZXIgKG9wYWNpdHkgaW50ZXJwb2xhdGVkIGJhc2VkIG9uIHNjcm9sbCBwb3NpdGlvbikuXG4gICAqL1xuICBQb2x5bWVyLkFwcExheW91dC5yZWdpc3RlckVmZmVjdCgnYmxlbmQtYmFja2dyb3VuZCcsIHtcbiAgICAvKiogQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kICovXG4gICAgc2V0VXA6IGZ1bmN0aW9uIHNldFVwKCkge1xuICAgICAgdmFyIGZ4ID0ge307XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllciA9IHRoaXMuX2dldERPTVJlZignYmFja2dyb3VuZEZyb250TGF5ZXInKTtcbiAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIgPSB0aGlzLl9nZXRET01SZWYoJ2JhY2tncm91bmRSZWFyTGF5ZXInKTtcbiAgICAgIGZ4LmJhY2tncm91bmRGcm9udExheWVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnb3BhY2l0eSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWigwKSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kUmVhckxheWVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnb3BhY2l0eSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kUmVhckxheWVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVaKDApJztcbiAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICB0aGlzLl9meEJsZW5kQmFja2dyb3VuZCA9IGZ4O1xuICAgIH0sXG4gICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuKHAsIHkpIHtcbiAgICAgIHZhciBmeCA9IHRoaXMuX2Z4QmxlbmRCYWNrZ3JvdW5kO1xuICAgICAgZnguYmFja2dyb3VuZEZyb250TGF5ZXIuc3R5bGUub3BhY2l0eSA9IDEgLSBwO1xuICAgICAgZnguYmFja2dyb3VuZFJlYXJMYXllci5zdHlsZS5vcGFjaXR5ID0gcDtcbiAgICB9LFxuICAgIC8qKiBAdGhpcyBQb2x5bWVyLkFwcExheW91dC5FbGVtZW50V2l0aEJhY2tncm91bmQgKi9cbiAgICB0ZWFyRG93bjogZnVuY3Rpb24gdGVhckRvd24oKSB7XG4gICAgICBkZWxldGUgdGhpcy5fZnhCbGVuZEJhY2tncm91bmQ7XG4gICAgfVxuICB9KTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgLyoqXG4gICAqIGBJcm9uUmVzaXphYmxlQmVoYXZpb3JgIGlzIGEgYmVoYXZpb3IgdGhhdCBjYW4gYmUgdXNlZCBpbiBQb2x5bWVyIGVsZW1lbnRzIHRvXG4gICAqIGNvb3JkaW5hdGUgdGhlIGZsb3cgb2YgcmVzaXplIGV2ZW50cyBiZXR3ZWVuIFwicmVzaXplcnNcIiAoZWxlbWVudHMgdGhhdCBjb250cm9sIHRoZVxuICAgKiBzaXplIG9yIGhpZGRlbiBzdGF0ZSBvZiB0aGVpciBjaGlsZHJlbikgYW5kIFwicmVzaXphYmxlc1wiIChlbGVtZW50cyB0aGF0IG5lZWQgdG8gYmVcbiAgICogbm90aWZpZWQgd2hlbiB0aGV5IGFyZSByZXNpemVkIG9yIHVuLWhpZGRlbiBieSB0aGVpciBwYXJlbnRzIGluIG9yZGVyIHRvIHRha2VcbiAgICogYWN0aW9uIG9uIHRoZWlyIG5ldyBtZWFzdXJlbWVudHMpLlxuICAgKlxuICAgKiBFbGVtZW50cyB0aGF0IHBlcmZvcm0gbWVhc3VyZW1lbnQgc2hvdWxkIGFkZCB0aGUgYElyb25SZXNpemFibGVCZWhhdmlvcmAgYmVoYXZpb3IgdG9cbiAgICogdGhlaXIgZWxlbWVudCBkZWZpbml0aW9uIGFuZCBsaXN0ZW4gZm9yIHRoZSBgaXJvbi1yZXNpemVgIGV2ZW50IG9uIHRoZW1zZWx2ZXMuXG4gICAqIFRoaXMgZXZlbnQgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZXkgYmVjb21lIHNob3dpbmcgYWZ0ZXIgaGF2aW5nIGJlZW4gaGlkZGVuLFxuICAgKiB3aGVuIHRoZXkgYXJlIHJlc2l6ZWQgZXhwbGljaXRseSBieSBhbm90aGVyIHJlc2l6YWJsZSwgb3Igd2hlbiB0aGUgd2luZG93IGhhcyBiZWVuXG4gICAqIHJlc2l6ZWQuXG4gICAqXG4gICAqIE5vdGUsIHRoZSBgaXJvbi1yZXNpemVgIGV2ZW50IGlzIG5vbi1idWJibGluZy5cbiAgICpcbiAgICogQHBvbHltZXJCZWhhdmlvciBQb2x5bWVyLklyb25SZXNpemFibGVCZWhhdmlvclxuICAgKiBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbiAgICoqL1xuICBQb2x5bWVyLklyb25SZXNpemFibGVCZWhhdmlvciA9IHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjbG9zZXN0IGFuY2VzdG9yIGVsZW1lbnQgdGhhdCBpbXBsZW1lbnRzIGBJcm9uUmVzaXphYmxlQmVoYXZpb3JgLlxuICAgICAgICovXG4gICAgICBfcGFyZW50UmVzaXphYmxlOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgb2JzZXJ2ZXI6ICdfcGFyZW50UmVzaXphYmxlQ2hhbmdlZCdcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSBpZiB0aGlzIGVsZW1lbnQgaXMgY3VycmVudGx5IG5vdGlmeWluZyBpdHMgZGVzY2VuZGFudCBlbGVtZW50cyBvZlxuICAgICAgICogcmVzaXplLlxuICAgICAgICovXG4gICAgICBfbm90aWZ5aW5nRGVzY2VuZGFudDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGlzdGVuZXJzOiB7XG4gICAgICAnaXJvbi1yZXF1ZXN0LXJlc2l6ZS1ub3RpZmljYXRpb25zJzogJ19vbklyb25SZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucydcbiAgICB9LFxuXG4gICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBXZSBkb24ndCByZWFsbHkgbmVlZCBwcm9wZXJ0eSBlZmZlY3RzIG9uIHRoZXNlLCBhbmQgYWxzbyB3ZSB3YW50IHRoZW1cbiAgICAgIC8vIHRvIGJlIGNyZWF0ZWQgYmVmb3JlIHRoZSBgX3BhcmVudFJlc2l6YWJsZWAgb2JzZXJ2ZXIgZmlyZXM6XG4gICAgICB0aGlzLl9pbnRlcmVzdGVkUmVzaXphYmxlcyA9IFtdO1xuICAgICAgdGhpcy5fYm91bmROb3RpZnlSZXNpemUgPSB0aGlzLm5vdGlmeVJlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIH0sXG5cbiAgICBhdHRhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucygpO1xuICAgIH0sXG5cbiAgICBkZXRhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fcGFyZW50UmVzaXphYmxlKSB7XG4gICAgICAgIHRoaXMuX3BhcmVudFJlc2l6YWJsZS5zdG9wUmVzaXplTm90aWZpY2F0aW9uc0Zvcih0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9ib3VuZE5vdGlmeVJlc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BhcmVudFJlc2l6YWJsZSA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbiBiZSBjYWxsZWQgdG8gbWFudWFsbHkgbm90aWZ5IGEgcmVzaXphYmxlIGFuZCBpdHMgZGVzY2VuZGFudFxuICAgICAqIHJlc2l6YWJsZXMgb2YgYSByZXNpemUgY2hhbmdlLlxuICAgICAqL1xuICAgIG5vdGlmeVJlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ludGVyZXN0ZWRSZXNpemFibGVzLmZvckVhY2goZnVuY3Rpb24ocmVzaXphYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZXJTaG91bGROb3RpZnkocmVzaXphYmxlKSkge1xuICAgICAgICAgIHRoaXMuX25vdGlmeURlc2NlbmRhbnQocmVzaXphYmxlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIHRoaXMuX2ZpcmVSZXNpemUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBhc3NpZ24gdGhlIGNsb3Nlc3QgcmVzaXphYmxlIGFuY2VzdG9yIHRvIHRoaXMgcmVzaXphYmxlXG4gICAgICogaWYgdGhlIGFuY2VzdG9yIGRldGVjdHMgYSByZXF1ZXN0IGZvciBub3RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIGFzc2lnblBhcmVudFJlc2l6YWJsZTogZnVuY3Rpb24ocGFyZW50UmVzaXphYmxlKSB7XG4gICAgICB0aGlzLl9wYXJlbnRSZXNpemFibGUgPSBwYXJlbnRSZXNpemFibGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVtb3ZlIGEgcmVzaXphYmxlIGRlc2NlbmRhbnQgZnJvbSB0aGUgbGlzdCBvZiBkZXNjZW5kYW50c1xuICAgICAqIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkIG9mIGEgcmVzaXplIGNoYW5nZS5cbiAgICAgKi9cbiAgICBzdG9wUmVzaXplTm90aWZpY2F0aW9uc0ZvcjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9pbnRlcmVzdGVkUmVzaXphYmxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMuX2ludGVyZXN0ZWRSZXNpemFibGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMudW5saXN0ZW4odGFyZ2V0LCAnaXJvbi1yZXNpemUnLCAnX29uRGVzY2VuZGFudElyb25SZXNpemUnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRkZW4gdG8gZmlsdGVyIG5lc3RlZCBlbGVtZW50cyB0aGF0IHNob3VsZCBvclxuICAgICAqIHNob3VsZCBub3QgYmUgbm90aWZpZWQgYnkgdGhlIGN1cnJlbnQgZWxlbWVudC4gUmV0dXJuIHRydWUgaWYgYW4gZWxlbWVudFxuICAgICAqIHNob3VsZCBiZSBub3RpZmllZCwgb3IgZmFsc2UgaWYgaXQgc2hvdWxkIG5vdCBiZSBub3RpZmllZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgQSBjYW5kaWRhdGUgZGVzY2VuZGFudCBlbGVtZW50IHRoYXRcbiAgICAgKiBpbXBsZW1lbnRzIGBJcm9uUmVzaXphYmxlQmVoYXZpb3JgLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGBlbGVtZW50YCBzaG91bGQgYmUgbm90aWZpZWQgb2YgcmVzaXplLlxuICAgICAqL1xuICAgIHJlc2l6ZXJTaG91bGROb3RpZnk6IGZ1bmN0aW9uKGVsZW1lbnQpIHsgcmV0dXJuIHRydWU7IH0sXG5cbiAgICBfb25EZXNjZW5kYW50SXJvblJlc2l6ZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLl9ub3RpZnlpbmdEZXNjZW5kYW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE5PVEUoY2RhdGEpOiBJbiBTaGFkb3dET00sIGV2ZW50IHJldGFyZ2V0aW5nIG1ha2VzIGVjaG9pbmcgb2YgdGhlXG4gICAgICAvLyBvdGhlcndpc2Ugbm9uLWJ1YmJsaW5nIGV2ZW50IFwianVzdCB3b3JrLlwiIFdlIGRvIGl0IG1hbnVhbGx5IGhlcmUgZm9yXG4gICAgICAvLyB0aGUgY2FzZSB3aGVyZSBQb2x5bWVyIGlzIG5vdCB1c2luZyBzaGFkb3cgcm9vdHMgZm9yIHdoYXRldmVyIHJlYXNvbjpcbiAgICAgIGlmICghUG9seW1lci5TZXR0aW5ncy51c2VTaGFkb3cpIHtcbiAgICAgICAgdGhpcy5fZmlyZVJlc2l6ZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZmlyZVJlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZpcmUoJ2lyb24tcmVzaXplJywgbnVsbCwge1xuICAgICAgICBub2RlOiB0aGlzLFxuICAgICAgICBidWJibGVzOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9vbklyb25SZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9uczogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSAvKiogQHR5cGUgeyFFdmVudFRhcmdldH0gKi8gKFBvbHltZXIuZG9tKGV2ZW50KS5yb290VGFyZ2V0KTtcbiAgICAgIGlmICh0YXJnZXQgPT09IHRoaXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faW50ZXJlc3RlZFJlc2l6YWJsZXMuaW5kZXhPZih0YXJnZXQpID09PSAtMSkge1xuICAgICAgICB0aGlzLl9pbnRlcmVzdGVkUmVzaXphYmxlcy5wdXNoKHRhcmdldCk7XG4gICAgICAgIHRoaXMubGlzdGVuKHRhcmdldCwgJ2lyb24tcmVzaXplJywgJ19vbkRlc2NlbmRhbnRJcm9uUmVzaXplJyk7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldC5hc3NpZ25QYXJlbnRSZXNpemFibGUodGhpcyk7XG4gICAgICB0aGlzLl9ub3RpZnlEZXNjZW5kYW50KHRhcmdldCk7XG5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0sXG5cbiAgICBfcGFyZW50UmVzaXphYmxlQ2hhbmdlZDogZnVuY3Rpb24ocGFyZW50UmVzaXphYmxlKSB7XG4gICAgICBpZiAocGFyZW50UmVzaXphYmxlKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9ib3VuZE5vdGlmeVJlc2l6ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9ub3RpZnlEZXNjZW5kYW50OiBmdW5jdGlvbihkZXNjZW5kYW50KSB7XG4gICAgICAvLyBOT1RFKGNkYXRhKTogSW4gSUUxMCwgYXR0YWNoZWQgaXMgZmlyZWQgb24gY2hpbGRyZW4gZmlyc3QsIHNvIGl0J3NcbiAgICAgIC8vIGltcG9ydGFudCBub3QgdG8gbm90aWZ5IHRoZW0gaWYgdGhlIHBhcmVudCBpcyBub3QgYXR0YWNoZWQgeWV0IChvclxuICAgICAgLy8gZWxzZSB0aGV5IHdpbGwgZ2V0IHJlZHVuZGFudGx5IG5vdGlmaWVkIHdoZW4gdGhlIHBhcmVudCBhdHRhY2hlcykuXG4gICAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX25vdGlmeWluZ0Rlc2NlbmRhbnQgPSB0cnVlO1xuICAgICAgZGVzY2VuZGFudC5ub3RpZnlSZXNpemUoKTtcbiAgICAgIHRoaXMuX25vdGlmeWluZ0Rlc2NlbmRhbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIFxuICAgIF9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgXG4gICAgICAvLyBOT1RFKHZhbGRyaW4pIEluIEN1c3RvbUVsZW1lbnRzIHYxIHdpdGggbmF0aXZlIEhUTUxJbXBvcnRzLCB0aGUgb3JkZXJcbiAgICAgIC8vIG9mIGltcG9ydHMgYWZmZWN0cyB0aGUgb3JkZXIgb2YgYGF0dGFjaGVkYCBjYWxsYmFja3MgKHNlZSB3ZWJjb21wb25lbnRzL2N1c3RvbS1lbGVtZW50cyMxNSkuXG4gICAgICAvLyBUaGlzIG1pZ2h0IGNhdXNlIGEgY2hpbGQgdG8gbm90aWZ5IHBhcmVudHMgdG9vIGVhcmx5IChhcyB0aGUgcGFyZW50XG4gICAgICAvLyBzdGlsbCBoYXMgdG8gYmUgdXBncmFkZWQpLCByZXN1bHRpbmcgaW4gYSBwYXJlbnQgbm90IGFibGUgdG8ga2VlcCB0cmFja1xuICAgICAgLy8gb2YgdGhlIGBfaW50ZXJlc3RlZFJlc2l6YWJsZXNgLiBUbyBzb2x2ZSB0aGlzLCB3ZSB3YWl0IGZvciB0aGUgZG9jdW1lbnRcbiAgICAgIC8vIHRvIGJlIGRvbmUgbG9hZGluZyBiZWZvcmUgZmlyaW5nIHRoZSBldmVudC5cbiAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgdmFyIF9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucyA9IHRoaXMuX3JlcXVlc3RSZXNpemVOb3RpZmljYXRpb25zLmJpbmQodGhpcyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiByZWFkeXN0YXRlY2hhbmdlZCgpIHtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgcmVhZHlzdGF0ZWNoYW5nZWQpO1xuICAgICAgICAgIF9yZXF1ZXN0UmVzaXplTm90aWZpY2F0aW9ucygpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmlyZSgnaXJvbi1yZXF1ZXN0LXJlc2l6ZS1ub3RpZmljYXRpb25zJywgbnVsbCwge1xuICAgICAgICAgIG5vZGU6IHRoaXMsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdGhpcy5fcGFyZW50UmVzaXphYmxlKSB7XG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2JvdW5kTm90aWZ5UmVzaXplKTtcbiAgICAgICAgICB0aGlzLm5vdGlmeVJlc2l6ZSgpO1xuICAgICAgICB9IFxuICAgICAgfVxuICAgIH1cbiAgfTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvb3QuaHRtbFwiPlxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gbmV3U3BsaWNlKGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgICBhZGRlZENvdW50OiBhZGRlZENvdW50XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IEVESVRfTEVBVkUgPSAwO1xuICBjb25zdCBFRElUX1VQREFURSA9IDE7XG4gIGNvbnN0IEVESVRfQUREID0gMjtcbiAgY29uc3QgRURJVF9ERUxFVEUgPSAzO1xuXG4gIC8vIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgKmJhc2VkKiBvbiB0aGUgY29tcHV0YXRpb24gb2YgdGhlIExldmVuc2h0ZWluXG4gIC8vIFwiZWRpdFwiIGRpc3RhbmNlLiBUaGUgb25lIGNoYW5nZSBpcyB0aGF0IFwidXBkYXRlc1wiIGFyZSB0cmVhdGVkIGFzIHR3b1xuICAvLyBlZGl0cyAtIG5vdCBvbmUuIFdpdGggQXJyYXkgc3BsaWNlcywgYW4gdXBkYXRlIGlzIHJlYWxseSBhIGRlbGV0ZVxuICAvLyBmb2xsb3dlZCBieSBhbiBhZGQuIEJ5IHJldGFpbmluZyB0aGlzLCB3ZSBvcHRpbWl6ZSBmb3IgXCJrZWVwaW5nXCIgdGhlXG4gIC8vIG1heGltdW0gYXJyYXkgaXRlbXMgaW4gdGhlIG9yaWdpbmFsIGFycmF5LiBGb3IgZXhhbXBsZTpcbiAgLy9cbiAgLy8gICAneHh4eDEyMycgLT4gJzEyM3l5eXknXG4gIC8vXG4gIC8vIFdpdGggMS1lZGl0IHVwZGF0ZXMsIHRoZSBzaG9ydGVzdCBwYXRoIHdvdWxkIGJlIGp1c3QgdG8gdXBkYXRlIGFsbCBzZXZlblxuICAvLyBjaGFyYWN0ZXJzLiBXaXRoIDItZWRpdCB1cGRhdGVzLCB3ZSBkZWxldGUgNCwgbGVhdmUgMywgYW5kIGFkZCA0LiBUaGlzXG4gIC8vIGxlYXZlcyB0aGUgc3Vic3RyaW5nICcxMjMnIGludGFjdC5cbiAgZnVuY3Rpb24gY2FsY0VkaXREaXN0YW5jZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gICAgLy8gXCJEZWxldGlvblwiIGNvbHVtbnNcbiAgICBsZXQgcm93Q291bnQgPSBvbGRFbmQgLSBvbGRTdGFydCArIDE7XG4gICAgbGV0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gICAgbGV0IGRpc3RhbmNlcyA9IG5ldyBBcnJheShyb3dDb3VudCk7XG5cbiAgICAvLyBcIkFkZGl0aW9uXCIgcm93cy4gSW5pdGlhbGl6ZSBudWxsIGNvbHVtbi5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICAgIGRpc3RhbmNlc1tpXSA9IG5ldyBBcnJheShjb2x1bW5Db3VudCk7XG4gICAgICBkaXN0YW5jZXNbaV1bMF0gPSBpO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgbnVsbCByb3dcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbkNvdW50OyBqKyspXG4gICAgICBkaXN0YW5jZXNbMF1bal0gPSBqO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb3dDb3VudDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvbHVtbkNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGVxdWFscyhjdXJyZW50W2N1cnJlbnRTdGFydCArIGogLSAxXSwgb2xkW29sZFN0YXJ0ICsgaSAtIDFdKSlcbiAgICAgICAgICBkaXN0YW5jZXNbaV1bal0gPSBkaXN0YW5jZXNbaSAtIDFdW2ogLSAxXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbGV0IG5vcnRoID0gZGlzdGFuY2VzW2kgLSAxXVtqXSArIDE7XG4gICAgICAgICAgbGV0IHdlc3QgPSBkaXN0YW5jZXNbaV1baiAtIDFdICsgMTtcbiAgICAgICAgICBkaXN0YW5jZXNbaV1bal0gPSBub3J0aCA8IHdlc3QgPyBub3J0aCA6IHdlc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGlzdGFuY2VzO1xuICB9XG5cbiAgLy8gVGhpcyBzdGFydHMgYXQgdGhlIGZpbmFsIHdlaWdodCwgYW5kIHdhbGtzIFwiYmFja3dhcmRcIiBieSBmaW5kaW5nXG4gIC8vIHRoZSBtaW5pbXVtIHByZXZpb3VzIHdlaWdodCByZWN1cnNpdmVseSB1bnRpbCB0aGUgb3JpZ2luIG9mIHRoZSB3ZWlnaHRcbiAgLy8gbWF0cml4LlxuICBmdW5jdGlvbiBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoZGlzdGFuY2VzKSB7XG4gICAgbGV0IGkgPSBkaXN0YW5jZXMubGVuZ3RoIC0gMTtcbiAgICBsZXQgaiA9IGRpc3RhbmNlc1swXS5sZW5ndGggLSAxO1xuICAgIGxldCBjdXJyZW50ID0gZGlzdGFuY2VzW2ldW2pdO1xuICAgIGxldCBlZGl0cyA9IFtdO1xuICAgIHdoaWxlIChpID4gMCB8fCBqID4gMCkge1xuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgICAgai0tO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChqID09IDApIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgbm9ydGhXZXN0ID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICBsZXQgd2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1bal07XG4gICAgICBsZXQgbm9ydGggPSBkaXN0YW5jZXNbaV1baiAtIDFdO1xuXG4gICAgICBsZXQgbWluO1xuICAgICAgaWYgKHdlc3QgPCBub3J0aClcbiAgICAgICAgbWluID0gd2VzdCA8IG5vcnRoV2VzdCA/IHdlc3QgOiBub3J0aFdlc3Q7XG4gICAgICBlbHNlXG4gICAgICAgIG1pbiA9IG5vcnRoIDwgbm9ydGhXZXN0ID8gbm9ydGggOiBub3J0aFdlc3Q7XG5cbiAgICAgIGlmIChtaW4gPT0gbm9ydGhXZXN0KSB7XG4gICAgICAgIGlmIChub3J0aFdlc3QgPT0gY3VycmVudCkge1xuICAgICAgICAgIGVkaXRzLnB1c2goRURJVF9MRUFWRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWRpdHMucHVzaChFRElUX1VQREFURSk7XG4gICAgICAgICAgY3VycmVudCA9IG5vcnRoV2VzdDtcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICAgIGotLTtcbiAgICAgIH0gZWxzZSBpZiAobWluID09IHdlc3QpIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY3VycmVudCA9IHdlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgICAgai0tO1xuICAgICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRpdHMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBlZGl0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpY2UgUHJvamVjdGlvbiBmdW5jdGlvbnM6XG4gICAqXG4gICAqIEEgc3BsaWNlIG1hcCBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGhvdyBhIHByZXZpb3VzIGFycmF5IG9mIGl0ZW1zXG4gICAqIHdhcyB0cmFuc2Zvcm1lZCBpbnRvIGEgbmV3IGFycmF5IG9mIGl0ZW1zLiBDb25jZXB0dWFsbHkgaXQgaXMgYSBsaXN0IG9mXG4gICAqIHR1cGxlcyBvZlxuICAgKlxuICAgKiAgIDxpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudD5cbiAgICpcbiAgICogd2hpY2ggYXJlIGtlcHQgaW4gYXNjZW5kaW5nIGluZGV4IG9yZGVyIG9mLiBUaGUgdHVwbGUgcmVwcmVzZW50cyB0aGF0IGF0XG4gICAqIHRoZSB8aW5kZXh8LCB8cmVtb3ZlZHwgc2VxdWVuY2Ugb2YgaXRlbXMgd2VyZSByZW1vdmVkLCBhbmQgY291bnRpbmcgZm9yd2FyZFxuICAgKiBmcm9tIHxpbmRleHwsIHxhZGRlZENvdW50fCBpdGVtcyB3ZXJlIGFkZGVkLlxuICAgKi9cblxuICAvKipcbiAgICogTGFja2luZyBpbmRpdmlkdWFsIHNwbGljZSBtdXRhdGlvbiBpbmZvcm1hdGlvbiwgdGhlIG1pbmltYWwgc2V0IG9mXG4gICAqIHNwbGljZXMgY2FuIGJlIHN5bnRoZXNpemVkIGdpdmVuIHRoZSBwcmV2aW91cyBzdGF0ZSBhbmQgZmluYWwgc3RhdGUgb2YgYW5cbiAgICogYXJyYXkuIFRoZSBiYXNpYyBhcHByb2FjaCBpcyB0byBjYWxjdWxhdGUgdGhlIGVkaXQgZGlzdGFuY2UgbWF0cml4IGFuZFxuICAgKiBjaG9vc2UgdGhlIHNob3J0ZXN0IHBhdGggdGhyb3VnaCBpdC5cbiAgICpcbiAgICogQ29tcGxleGl0eTogTyhsICogcClcbiAgICogICBsOiBUaGUgbGVuZ3RoIG9mIHRoZSBjdXJyZW50IGFycmF5XG4gICAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgb2xkIGFycmF5XG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5fSBjdXJyZW50IFRoZSBjdXJyZW50IFwiY2hhbmdlZFwiIGFycmF5IGZvciB3aGljaCB0b1xuICAgKiBjYWxjdWxhdGUgc3BsaWNlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRTdGFydCBTdGFydGluZyBpbmRleCBpbiB0aGUgYGN1cnJlbnRgIGFycmF5IGZvclxuICAgKiB3aGljaCBzcGxpY2VzIGFyZSBjYWxjdWxhdGVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEVuZCBFbmRpbmcgaW5kZXggaW4gdGhlIGBjdXJyZW50YCBhcnJheSBmb3JcbiAgICogd2hpY2ggc3BsaWNlcyBhcmUgY2FsY3VsYXRlZC5cbiAgICogQHBhcmFtIHshQXJyYXl9IG9sZCBUaGUgb3JpZ2luYWwgXCJ1bmNoYW5nZWRcIiBhcnJheSB0byBjb21wYXJlIGBjdXJyZW50YFxuICAgKiBhZ2FpbnN0IHRvIGRldGVybWluZSBzcGxpY2VzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2xkU3RhcnQgU3RhcnRpbmcgaW5kZXggaW4gdGhlIGBvbGRgIGFycmF5IGZvclxuICAgKiB3aGljaCBzcGxpY2VzIGFyZSBjYWxjdWxhdGVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2xkRW5kIEVuZGluZyBpbmRleCBpbiB0aGUgYG9sZGAgYXJyYXkgZm9yXG4gICAqIHdoaWNoIHNwbGljZXMgYXJlIGNhbGN1bGF0ZWQuXG4gICAqIEByZXR1cm4geyFBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBzcGxpY2UgcmVjb3JkIG9iamVjdHMuIEVhY2ggb2YgdGhlc2VcbiAgICogY29udGFpbnM6IGBpbmRleGAgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBzcGxpY2Ugb2NjdXJyZWQ7IGByZW1vdmVkYFxuICAgKiB0aGUgYXJyYXkgb2YgcmVtb3ZlZCBpdGVtcyBmcm9tIHRoaXMgbG9jYXRpb247IGBhZGRlZENvdW50YCB0aGUgbnVtYmVyXG4gICAqIG9mIGl0ZW1zIGFkZGVkIGF0IHRoaXMgbG9jYXRpb24uXG4gICAqL1xuICBmdW5jdGlvbiBjYWxjU3BsaWNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpIHtcbiAgICBsZXQgcHJlZml4Q291bnQgPSAwO1xuICAgIGxldCBzdWZmaXhDb3VudCA9IDA7XG4gICAgbGV0IHNwbGljZTtcblxuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0LCBvbGRFbmQgLSBvbGRTdGFydCk7XG4gICAgaWYgKGN1cnJlbnRTdGFydCA9PSAwICYmIG9sZFN0YXJ0ID09IDApXG4gICAgICBwcmVmaXhDb3VudCA9IHNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCk7XG5cbiAgICBpZiAoY3VycmVudEVuZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiBvbGRFbmQgPT0gb2xkLmxlbmd0aClcbiAgICAgIHN1ZmZpeENvdW50ID0gc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoIC0gcHJlZml4Q291bnQpO1xuXG4gICAgY3VycmVudFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICAgIG9sZFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICAgIGN1cnJlbnRFbmQgLT0gc3VmZml4Q291bnQ7XG4gICAgb2xkRW5kIC09IHN1ZmZpeENvdW50O1xuXG4gICAgaWYgKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQgPT0gMCAmJiBvbGRFbmQgLSBvbGRTdGFydCA9PSAwKVxuICAgICAgcmV0dXJuIFtdO1xuXG4gICAgaWYgKGN1cnJlbnRTdGFydCA9PSBjdXJyZW50RW5kKSB7XG4gICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgMCk7XG4gICAgICB3aGlsZSAob2xkU3RhcnQgPCBvbGRFbmQpXG4gICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZFN0YXJ0KytdKTtcblxuICAgICAgcmV0dXJuIFsgc3BsaWNlIF07XG4gICAgfSBlbHNlIGlmIChvbGRTdGFydCA9PSBvbGRFbmQpXG4gICAgICByZXR1cm4gWyBuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCkgXTtcblxuICAgIGxldCBvcHMgPSBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXMoXG4gICAgICAgIGNhbGNFZGl0RGlzdGFuY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpKTtcblxuICAgIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgc3BsaWNlcyA9IFtdO1xuICAgIGxldCBpbmRleCA9IGN1cnJlbnRTdGFydDtcbiAgICBsZXQgb2xkSW5kZXggPSBvbGRTdGFydDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgc3dpdGNoKG9wc1tpXSkge1xuICAgICAgICBjYXNlIEVESVRfTEVBVkU6XG4gICAgICAgICAgaWYgKHNwbGljZSkge1xuICAgICAgICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgICAgICAgICBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVESVRfVVBEQVRFOlxuICAgICAgICAgIGlmICghc3BsaWNlKVxuICAgICAgICAgICAgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG5cbiAgICAgICAgICBzcGxpY2UuYWRkZWRDb3VudCsrO1xuICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRJbmRleF0pO1xuICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRURJVF9BREQ6XG4gICAgICAgICAgaWYgKCFzcGxpY2UpXG4gICAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcblxuICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFRElUX0RFTEVURTpcbiAgICAgICAgICBpZiAoIXNwbGljZSlcbiAgICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuXG4gICAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcGxpY2UpIHtcbiAgICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgIH1cbiAgICByZXR1cm4gc3BsaWNlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIHNlYXJjaExlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoTGVuZ3RoOyBpKyspXG4gICAgICBpZiAoIWVxdWFscyhjdXJyZW50W2ldLCBvbGRbaV0pKVxuICAgICAgICByZXR1cm4gaTtcbiAgICByZXR1cm4gc2VhcmNoTGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gICAgbGV0IGluZGV4MSA9IGN1cnJlbnQubGVuZ3RoO1xuICAgIGxldCBpbmRleDIgPSBvbGQubGVuZ3RoO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgd2hpbGUgKGNvdW50IDwgc2VhcmNoTGVuZ3RoICYmIGVxdWFscyhjdXJyZW50Wy0taW5kZXgxXSwgb2xkWy0taW5kZXgyXSkpXG4gICAgICBjb3VudCsrO1xuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FsY3VsYXRlU3BsaWNlcyhjdXJyZW50LCBwcmV2aW91cykge1xuICAgIHJldHVybiBjYWxjU3BsaWNlcyhjdXJyZW50LCAwLCBjdXJyZW50Lmxlbmd0aCwgcHJldmlvdXMsIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMubGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxdWFscyhjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgICByZXR1cm4gY3VycmVudFZhbHVlID09PSBwcmV2aW91c1ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgTW9kdWxlIHRoYXQgcHJvdmlkZXMgdXRpbGl0aWVzIGZvciBkaWZmaW5nIGFycmF5cy5cbiAgICovXG4gIFBvbHltZXIuQXJyYXlTcGxpY2UgPSB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBzcGxpY2UgcmVjb3JkcyBpbmRpY2F0aW5nIHRoZSBtaW5pbXVtIGVkaXRzIHJlcXVpcmVkXG4gICAgICogdG8gdHJhbnNmb3JtIHRoZSBgcHJldmlvdXNgIGFycmF5IGludG8gdGhlIGBjdXJyZW50YCBhcnJheS5cbiAgICAgKlxuICAgICAqIFNwbGljZSByZWNvcmRzIGFyZSBvcmRlcmVkIGJ5IGluZGV4IGFuZCBjb250YWluIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAqIC0gYGluZGV4YDogaW5kZXggd2hlcmUgZWRpdCBzdGFydGVkXG4gICAgICogLSBgcmVtb3ZlZGA6IGFycmF5IG9mIHJlbW92ZWQgaXRlbXMgZnJvbSB0aGlzIGluZGV4XG4gICAgICogLSBgYWRkZWRDb3VudGA6IG51bWJlciBvZiBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGJhc2VkIG9uIHRoZSBMZXZlbnNodGVpbiBcIm1pbmltdW0gZWRpdCBkaXN0YW5jZVwiXG4gICAgICogYWxnb3JpdGhtLiBOb3RlIHRoYXQgdXBkYXRlcyBhcmUgdHJlYXRlZCBhcyByZW1vdmFsIGZvbGxvd2VkIGJ5IGFkZGl0aW9uLlxuICAgICAqXG4gICAgICogVGhlIHdvcnN0LWNhc2UgdGltZSBjb21wbGV4aXR5IG9mIHRoaXMgYWxnb3JpdGhtIGlzIGBPKGwgKiBwKWBcbiAgICAgKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAgICAgKiAgIHA6IFRoZSBsZW5ndGggb2YgdGhlIHByZXZpb3VzIGFycmF5XG4gICAgICpcbiAgICAgKiBIb3dldmVyLCB0aGUgd29yc3QtY2FzZSBjb21wbGV4aXR5IGlzIHJlZHVjZWQgYnkgYW4gYE8obilgIG9wdGltaXphdGlvblxuICAgICAqIHRvIGRldGVjdCBhbnkgc2hhcmVkIHByZWZpeCAmIHN1ZmZpeCBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzIGFuZCBvbmx5XG4gICAgICogcGVyZm9ybSB0aGUgbW9yZSBleHBlbnNpdmUgbWluaW11bSBlZGl0IGRpc3RhbmNlIGNhbGN1bGF0aW9uIG92ZXIgdGhlXG4gICAgICogbm9uLXNoYXJlZCBwb3J0aW9ucyBvZiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuQXJyYXlTcGxpY2VcbiAgICAgKiBAcGFyYW0geyFBcnJheX0gY3VycmVudCBUaGUgXCJjaGFuZ2VkXCIgYXJyYXkgZm9yIHdoaWNoIHNwbGljZXMgd2lsbCBiZVxuICAgICAqIGNhbGN1bGF0ZWQuXG4gICAgICogQHBhcmFtIHshQXJyYXl9IHByZXZpb3VzIFRoZSBcInVuY2hhbmdlZFwiIG9yaWdpbmFsIGFycmF5IHRvIGNvbXBhcmVcbiAgICAgKiBgY3VycmVudGAgYWdhaW5zdCB0byBkZXRlcm1pbmUgdGhlIHNwbGljZXMuXG4gICAgICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHNwbGljZSByZWNvcmQgb2JqZWN0cy4gRWFjaCBvZiB0aGVzZVxuICAgICAqIGNvbnRhaW5zOiBgaW5kZXhgIHRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgc3BsaWNlIG9jY3VycmVkOyBgcmVtb3ZlZGBcbiAgICAgKiB0aGUgYXJyYXkgb2YgcmVtb3ZlZCBpdGVtcyBmcm9tIHRoaXMgbG9jYXRpb247IGBhZGRlZENvdW50YCB0aGUgbnVtYmVyXG4gICAgICogb2YgaXRlbXMgYWRkZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAgICAgKi9cbiAgICBjYWxjdWxhdGVTcGxpY2VzXG4gIH07XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9ib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9taXhpbi5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvZ2VzdHVyZXMuaHRtbFwiPlxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQGNvbnN0IHtQb2x5bWVyLkdlc3R1cmVzfVxuICAgKi9cbiAgY29uc3QgZ2VzdHVyZXMgPSBQb2x5bWVyLkdlc3R1cmVzO1xuXG4gIC8qKlxuICAgKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgQVBJIGZvciBhZGRpbmcgUG9seW1lcidzIGNyb3NzLXBsYXRmb3JtXG4gICAqIGdlc3R1cmUgZXZlbnRzIHRvIG5vZGVzLlxuICAgKlxuICAgKiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBvdmVycmlkZSBwb2ludHMgaW1wbGVtZW50ZWRcbiAgICogaW4gYFBvbHltZXIuVGVtcGxhdGVTdGFtcGAgc3VjaCB0aGF0IGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBpblxuICAgKiB0ZW1wbGF0ZXMgd2lsbCBzdXBwb3J0IGdlc3R1cmUgZXZlbnRzIHdoZW4gdGhpcyBtaXhpbiBpcyBhcHBsaWVkIGFsb25nIHdpdGhcbiAgICogYFBvbHltZXIuVGVtcGxhdGVTdGFtcGAuXG4gICAqXG4gICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBBUEkgZm9yIGFkZGluZyBQb2x5bWVyJ3MgY3Jvc3MtcGxhdGZvcm1cbiAgICogZ2VzdHVyZSBldmVudHMgdG8gbm9kZXNcbiAgICovXG4gIFBvbHltZXIuR2VzdHVyZUV2ZW50TGlzdGVuZXJzID0gUG9seW1lci5kZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0dlc3R1cmVFdmVudExpc3RlbmVyc31cbiAgICAgKi9cbiAgICBjbGFzcyBHZXN0dXJlRXZlbnRMaXN0ZW5lcnMgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgdGhlIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBub2RlIGlmIGl0IGlzIGEgZ2VzdHVyZXMgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGFkZCBldmVudCBsaXN0ZW5lciB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byBhZGRcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAoIWdlc3R1cmVzLmFkZExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikpIHtcbiAgICAgICAgICBzdXBlci5fYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBpZiBpdCBpcyBhIGdlc3R1cmVzIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXIgZnJvbVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byByZW1vdmVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmICghZ2VzdHVyZXMucmVtb3ZlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSkge1xuICAgICAgICAgIHN1cGVyLl9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIEdlc3R1cmVFdmVudExpc3RlbmVycztcblxuICB9KTtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vLi4vc2hhZHljc3MvYXBwbHktc2hpbS5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vbWl4aW5zL2VsZW1lbnQtbWl4aW4uaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL21peGlucy9nZXN0dXJlLWV2ZW50LWxpc3RlbmVycy5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vbWl4aW5zL2Rpci1taXhpbi5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvbWl4aW4uaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2ltcG9ydC1ocmVmLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9yZW5kZXItc3RhdHVzLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy91bnJlc29sdmVkLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJwb2x5bWVyLmRvbS5odG1sXCI+XG5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGxldCBzdHlsZUludGVyZmFjZSA9IHdpbmRvdy5TaGFkeUNTUztcblxuICAvKipcbiAgICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIFBvbHltZXIncyBcImxlZ2FjeVwiIEFQSSBpbnRlbmRlZCB0byBiZVxuICAgKiBiYWNrd2FyZC1jb21wYXRpYmxlIHRvIHRoZSBncmVhdGVzdCBleHRlbnQgcG9zc2libGUgd2l0aCB0aGUgQVBJXG4gICAqIGZvdW5kIG9uIHRoZSBQb2x5bWVyIDEueCBgUG9seW1lci5CYXNlYCBwcm90b3R5cGUgYXBwbGllZCB0byBhbGwgZWxlbWVudHNcbiAgICogZGVmaW5lZCB1c2luZyB0aGUgYFBvbHltZXIoey4uLn0pYCBmdW5jdGlvbi5cbiAgICpcbiAgICogQG1peGluRnVuY3Rpb25cbiAgICogQHBvbHltZXJcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLkVsZW1lbnRNaXhpblxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuR2VzdHVyZUV2ZW50TGlzdGVuZXJzXG4gICAqIEBwcm9wZXJ0eSBpc0F0dGFjaGVkIHtib29sZWFufSBTZXQgdG8gYHRydWVgIGluIHRoaXMgZWxlbWVudCdzXG4gICAqICAgYGNvbm5lY3RlZENhbGxiYWNrYCBhbmQgYGZhbHNlYCBpbiBgZGlzY29ubmVjdGVkQ2FsbGJhY2tgXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBQb2x5bWVyJ3MgXCJsZWdhY3lcIiBBUElcbiAgICovXG4gIFBvbHltZXIuTGVnYWN5RWxlbWVudE1peGluID0gUG9seW1lci5kZWR1cGluZ01peGluKChiYXNlKSA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfR2VzdHVyZUV2ZW50TGlzdGVuZXJzfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0Rpck1peGlufVxuICAgICAqL1xuICAgIGNvbnN0IGxlZ2FjeUVsZW1lbnRCYXNlID0gUG9seW1lci5EaXJNaXhpbihQb2x5bWVyLkdlc3R1cmVFdmVudExpc3RlbmVycyhQb2x5bWVyLkVsZW1lbnRNaXhpbihiYXNlKSkpO1xuXG4gICAgLyoqXG4gICAgICogTWFwIG9mIHNpbXBsZSBuYW1lcyB0byB0b3VjaCBhY3Rpb24gbmFtZXNcbiAgICAgKiBAZGljdFxuICAgICAqL1xuICAgIGNvbnN0IERJUkVDVElPTl9NQVAgPSB7XG4gICAgICAneCc6ICdwYW4teCcsXG4gICAgICAneSc6ICdwYW4teScsXG4gICAgICAnbm9uZSc6ICdub25lJyxcbiAgICAgICdhbGwnOiAnYXV0bydcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBleHRlbmRzIHtsZWdhY3lFbGVtZW50QmFzZX1cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9MZWdhY3lFbGVtZW50TWl4aW59XG4gICAgICogQHVucmVzdHJpY3RlZFxuICAgICAqL1xuICAgIGNsYXNzIExlZ2FjeUVsZW1lbnQgZXh0ZW5kcyBsZWdhY3lFbGVtZW50QmFzZSB7XG5cbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAgIHRoaXMuaXNBdHRhY2hlZDtcbiAgICAgICAgLyoqIEB0eXBlIHtXZWFrTWFwPCFFbGVtZW50LCAhT2JqZWN0PHN0cmluZywgIUZ1bmN0aW9uPj59ICovXG4gICAgICAgIHRoaXMuX19ib3VuZExpc3RlbmVycztcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBGdW5jdGlvbj59ICovXG4gICAgICAgIHRoaXMuX2RlYm91bmNlcnM7XG4gICAgICAgIC8vIEVuc3VyZSBsaXN0ZW5lcnMgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgc28gdGhhdCB0aGV5IGFyZVxuICAgICAgICAvLyBhZGRlZCBiZWZvcmUgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLiBUaGlzIGFsbG93cyBhbiBlbGVtZW50IHRvXG4gICAgICAgIC8vIGRlY29yYXRlIGl0c2VsZiB2aWEgYW4gZXZlbnQgcHJpb3IgdG8gYW55IGRlY2xhcmF0aXZlIGxpc3RlbmVyc1xuICAgICAgICAvLyBzZWVpbmcgdGhlIGV2ZW50LiBOb3RlLCB0aGlzIGVuc3VyZXMgY29tcGF0aWJpbGl0eSB3aXRoIDEueCBvcmRlcmluZy5cbiAgICAgICAgdGhpcy5fYXBwbHlMaXN0ZW5lcnMoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMZWdhY3kgY2FsbGJhY2sgY2FsbGVkIGR1cmluZyB0aGUgYGNvbnN0cnVjdG9yYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgICAqIGJ5IHRoZSB1c2VyLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZCgpIHt9XG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYGNvbm5lY3RlZENhbGxiYWNrYFxuICAgICAgICogd2hpY2ggYWRkcyBQb2x5bWVyIGxlZ2FjeSBBUEkncyBgYXR0YWNoZWRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXR0YWNoZWQoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBMZWdhY3kgY2FsbGJhY2sgY2FsbGVkIGR1cmluZyBgY29ubmVjdGVkQ2FsbGJhY2tgLCBmb3Igb3ZlcnJpZGluZ1xuICAgICAgICogYnkgdGhlIHVzZXIuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBhdHRhY2hlZCgpIHt9XG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYGRpc2Nvbm5lY3RlZENhbGxiYWNrYFxuICAgICAgICogd2hpY2ggYWRkcyBQb2x5bWVyIGxlZ2FjeSBBUEkncyBgZGV0YWNoZWRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRldGFjaGVkKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGVnYWN5IGNhbGxiYWNrIGNhbGxlZCBkdXJpbmcgYGRpc2Nvbm5lY3RlZENhbGxiYWNrYCwgZm9yIG92ZXJyaWRpbmdcbiAgICAgICAqIGJ5IHRoZSB1c2VyLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgZGV0YWNoZWQoKSB7fVxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGFuIG92ZXJyaWRlIGltcGxlbWVudGF0aW9uIG9mIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgXG4gICAgICAgKiB3aGljaCBhZGRzIHRoZSBQb2x5bWVyIGxlZ2FjeSBBUEkncyBgYXR0cmlidXRlQ2hhbmdlZGAgbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUuXG4gICAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG9sZCBPbGQgdmFsdWUgb2YgYXR0cmlidXRlLlxuICAgICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSk7XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGVDaGFuZ2VkKG5hbWUsIG9sZCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogTGVnYWN5IGNhbGxiYWNrIGNhbGxlZCBkdXJpbmcgYGF0dHJpYnV0ZUNoYW5nZWRDaGFsbGJhY2tgLCBmb3Igb3ZlcnJpZGluZ1xuICAgICAgICogYnkgdGhlIHVzZXIuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIEN1cnJlbnQgdmFsdWUgb2YgYXR0cmlidXRlLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBvbGQsIHZhbHVlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2AgaW1wbGVtZW50YXRpb24gdG9cbiAgICAgICAqIGFkZCBzdXBwb3J0IGZvciBjbGFzcyBpbml0aWFsaXphdGlvbiB2aWEgdGhlIGBfcmVnaXN0ZXJlZGAgY2FsbGJhY2suXG4gICAgICAgKiBUaGlzIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAgICAgKi9cbiAgICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgICAgICBpZiAoIXByb3RvLmhhc093blByb3BlcnR5KCdfX2hhc1JlZ2lzdGVyRmluaXNoZWQnKSkge1xuICAgICAgICAgIHByb3RvLl9faGFzUmVnaXN0ZXJGaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fcmVnaXN0ZXJlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLnJvb3QgPSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyh0aGlzKTtcbiAgICAgICAgdGhpcy5jcmVhdGVkKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiBhbiBlbGVtZW50IGlzIGluaXRpYWxpemluZy5cbiAgICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwZXJmb3JtIGNsYXNzIHJlZ2lzdHJhdGlvbiB0aW1lXG4gICAgICAgKiB3b3JrLiBUaGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIGVuc3VyZSB0aGUgd29yayBpcyBwZXJmb3JtZWRcbiAgICAgICAqIG9ubHkgb25jZSBmb3IgdGhlIGNsYXNzLlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX3JlZ2lzdGVyZWQoKSB7fVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIGltcGxlbWVudGF0aW9uIHRvXG4gICAgICAgKiBhZGQgc3VwcG9ydCBmb3IgaW5zdGFsbGluZyBgaG9zdEF0dHJpYnV0ZXNgIGFuZCBgbGlzdGVuZXJzYC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKi9cbiAgICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVBdHRyaWJ1dGVzKCk7XG4gICAgICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRW5zdXJlcyBhbiBlbGVtZW50IGhhcyByZXF1aXJlZCBhdHRyaWJ1dGVzLiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudFxuICAgICAgICogaXMgYmVpbmcgcmVhZGllZCB2aWEgYHJlYWR5YC4gVXNlcnMgc2hvdWxkIG92ZXJyaWRlIHRvIHNldCB0aGVcbiAgICAgICAqIGVsZW1lbnQncyByZXF1aXJlZCBhdHRyaWJ1dGVzLiBUaGUgaW1wbGVtZW50YXRpb24gc2hvdWxkIGJlIHN1cmVcbiAgICAgICAqIHRvIGNoZWNrIGFuZCBub3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYXR0cmlidXRlcyBhZGRlZCBieVxuICAgICAgICogdGhlIHVzZXIgb2YgdGhlIGVsZW1lbnQuIFR5cGljYWxseSwgc2V0dGluZyBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsZWZ0XG4gICAgICAgKiB0byB0aGUgZWxlbWVudCB1c2VyIGFuZCBub3QgZG9uZSBoZXJlOyByZWFzb25hYmxlIGV4Y2VwdGlvbnMgaW5jbHVkZVxuICAgICAgICogc2V0dGluZyBhcmlhIHJvbGVzIGFuZCBmb2N1c2FiaWxpdHkuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfZW5zdXJlQXR0cmlidXRlcygpIHt9XG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBlbGVtZW50IGV2ZW50IGxpc3RlbmVycy4gQ2FsbGVkIHdoZW4gdGhlIGVsZW1lbnRcbiAgICAgICAqIGlzIGJlaW5nIHJlYWRpZWQgdmlhIGByZWFkeWAuIFVzZXJzIHNob3VsZCBvdmVycmlkZSB0b1xuICAgICAgICogYWRkIGFueSByZXF1aXJlZCBlbGVtZW50IGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEluIHBlcmZvcm1hbmNlIGNyaXRpY2FsIGVsZW1lbnRzLCB0aGUgd29yayBkb25lIGhlcmUgc2hvdWxkIGJlIGtlcHRcbiAgICAgICAqIHRvIGEgbWluaW11bSBzaW5jZSBpdCBpcyBkb25lIGJlZm9yZSB0aGUgZWxlbWVudCBpcyByZW5kZXJlZC4gSW5cbiAgICAgICAqIHRoZXNlIGVsZW1lbnRzLCBjb25zaWRlciBhZGRpbmcgbGlzdGVuZXJzIGFzeW5jaHJvbm91c2x5IHNvIGFzIG5vdCB0b1xuICAgICAgICogYmxvY2sgcmVuZGVyLlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX2FwcGx5TGlzdGVuZXJzKCkge31cblxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZXJ0cyBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLiBUbyBjdXN0b21pemVcbiAgICAgICAqIGhvdyBwcm9wZXJ0aWVzIGFyZSBzZXJpYWxpemVkIHRvIGF0dHJpYnV0ZXMgZm9yIGF0dHJpYnV0ZSBiaW5kaW5ncyBhbmRcbiAgICAgICAqIGByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVgIHByb3BlcnRpZXMgYXMgd2VsbCBhcyB0aGlzIG1ldGhvZCwgb3ZlcnJpZGVcbiAgICAgICAqIHRoZSBgX3NlcmlhbGl6ZVZhbHVlYCBtZXRob2QgcHJvdmlkZWQgYnkgYFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnNgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZGVzZXJpYWxpemVcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU2VyaWFsaXplZCB2YWx1ZVxuICAgICAgICovXG4gICAgICBzZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLiAgVG8gY3VzdG9taXplXG4gICAgICAgKiBob3cgYXR0cmlidXRlcyBhcmUgZGVzZXJpYWxpemVkIHRvIHByb3BlcnRpZXMgZm9yIGluXG4gICAgICAgKiBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCwgb3ZlcnJpZGUgYF9kZXNlcmlhbGl6ZVZhbHVlYCBtZXRob2RcbiAgICAgICAqIHByb3ZpZGVkIGJ5IGBQb2x5bWVyLlByb3BlcnR5QWNjZXNzb3JzYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgU3RyaW5nIHRvIGRlc2VyaWFsaXplXG4gICAgICAgKiBAcGFyYW0geyp9IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvXG4gICAgICAgKiBAcmV0dXJuIHsqfSBSZXR1cm5zIHRoZSBkZXNlcmlhbGl6ZWQgdmFsdWUgaW4gdGhlIGB0eXBlYCBnaXZlbi5cbiAgICAgICAqL1xuICAgICAgZGVzZXJpYWxpemUodmFsdWUsIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNlcmlhbGl6ZXMgYSBwcm9wZXJ0eSB0byBpdHMgYXNzb2NpYXRlZCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lIHRvIHJlZmxlY3QuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byByZWZsZWN0LlxuICAgICAgICogQHBhcmFtIHsqPX0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gcmVmbGVjdC5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlZmxlY3RQcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYSB0eXBlZCB2YWx1ZSB0byBhbiBIVE1MIGF0dHJpYnV0ZSBvbiBhIG5vZGUuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byBzZXJpYWxpemUgdG8uXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byBzZXQgYXR0cmlidXRlIHRvLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgc2VyaWFsaXplVmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgYXR0cmlidXRlLCBub2RlKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyksIHZhbHVlLCBhdHRyaWJ1dGUpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvcGllcyBvd24gcHJvcGVydGllcyAoaW5jbHVkaW5nIGFjY2Vzc29yIGRlc2NyaXB0b3JzKSBmcm9tIGEgc291cmNlXG4gICAgICAgKiBvYmplY3QgdG8gYSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGFyZ2V0IG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gYXBpIFNvdXJjZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHByb3RvdHlwZSBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50LlxuICAgICAgICovXG4gICAgICBleHRlbmQocHJvdG90eXBlLCBhcGkpIHtcbiAgICAgICAgaWYgKCEocHJvdG90eXBlICYmIGFwaSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvdG90eXBlIHx8IGFwaTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbiQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcGkpO1xuICAgICAgICBmb3IgKGxldCBpPTAsIG47IChpPG4kLmxlbmd0aCkgJiYgKG49biRbaV0pOyBpKyspIHtcbiAgICAgICAgICBsZXQgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFwaSwgbik7XG4gICAgICAgICAgaWYgKHBkKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBuLCBwZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm90b3R5cGU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29waWVzIHByb3BzIGZyb20gYSBzb3VyY2Ugb2JqZWN0IHRvIGEgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlLCB0aGlzIG1ldGhvZCB1c2VzIGEgc2ltcGxlIGBmb3IuLi5pbmAgc3RyYXRlZ3kgZm9yIGVudW1lcmF0aW5nXG4gICAgICAgKiBwcm9wZXJ0aWVzLiAgVG8gZW5zdXJlIG9ubHkgYG93blByb3BlcnRpZXNgIGFyZSBjb3BpZWQgZnJvbSBzb3VyY2VcbiAgICAgICAqIHRvIHRhcmdldCBhbmQgdGhhdCBhY2Nlc3NvciBpbXBsZW1lbnRhdGlvbnMgYXJlIGNvcGllZCwgdXNlIGBleHRlbmRgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0IFRhcmdldCBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBzb3VyY2UgU291cmNlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgICAqIEByZXR1cm4geyFPYmplY3R9IFRhcmdldCBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50LlxuICAgICAgICovXG4gICAgICBtaXhpbih0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHNvdXJjZSkge1xuICAgICAgICAgIHRhcmdldFtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBiYWNrd2FyZC1jb21wYXRpYmxlIGxlZ2FjeSBBUElcbiAgICAgICAqIG9ubHkuICBJdCBpcyBub3QgZGlyZWN0bHkgY2FsbGVkIGJ5IGFueSBQb2x5bWVyIGZlYXR1cmVzLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IG9uIHdoaWNoIHRvIHNldCB0aGUgcHJvdG90eXBlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgcHJvdG90eXBlIHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlIGdpdmVuXG4gICAgICAgKiBgb2JqZWN0YC5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyB0aGUgZ2l2ZW4gYG9iamVjdGAgd2l0aCBpdHMgcHJvdG90eXBlIHNldFxuICAgICAgICogdG8gdGhlIGdpdmVuIGBwcm90b3R5cGVgIG9iamVjdC5cbiAgICAgICAqL1xuICAgICAgY2hhaW5PYmplY3Qob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKG9iamVjdCAmJiBwcm90b3R5cGUgJiYgb2JqZWN0ICE9PSBwcm90b3R5cGUpIHtcbiAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG5cbiAgICAgIC8qICoqKiogQmVnaW4gVGVtcGxhdGUgKioqKiAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxzIGBpbXBvcnROb2RlYCBvbiB0aGUgYGNvbnRlbnRgIG9mIHRoZSBgdGVtcGxhdGVgIHNwZWNpZmllZCBhbmRcbiAgICAgICAqIHJldHVybnMgYSBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIHRoZSBpbXBvcnRlZCBjb250ZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgSFRNTCB0ZW1wbGF0ZSBlbGVtZW50IHRvIGluc3RhbmNlLlxuICAgICAgICogQHJldHVybiB7IURvY3VtZW50RnJhZ21lbnR9IERvY3VtZW50IGZyYWdtZW50IGNvbnRhaW5pbmcgdGhlIGltcG9ydGVkXG4gICAgICAgKiAgIHRlbXBsYXRlIGNvbnRlbnQuXG4gICAgICAqL1xuICAgICAgaW5zdGFuY2VUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICBsZXQgY29udGVudCA9IHRoaXMuY29uc3RydWN0b3IuX2NvbnRlbnRGb3JUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIGxldCBkb20gPSAvKiogQHR5cGUgeyFEb2N1bWVudEZyYWdtZW50fSAqL1xuICAgICAgICAgIChkb2N1bWVudC5pbXBvcnROb2RlKGNvbnRlbnQsIHRydWUpKTtcbiAgICAgICAgcmV0dXJuIGRvbTtcbiAgICAgIH1cblxuICAgICAgLyogKioqKiBCZWdpbiBFdmVudHMgKioqKiAqL1xuXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBEaXNwYXRjaGVzIGEgY3VzdG9tIGV2ZW50IHdpdGggYW4gb3B0aW9uYWwgZGV0YWlsIHZhbHVlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE5hbWUgb2YgZXZlbnQgdHlwZS5cbiAgICAgICAqIEBwYXJhbSB7Kj19IGRldGFpbCBEZXRhaWwgdmFsdWUgY29udGFpbmluZyBldmVudC1zcGVjaWZpY1xuICAgICAgICogICBwYXlsb2FkLlxuICAgICAgICogQHBhcmFtIHt7IGJ1YmJsZXM6IChib29sZWFufHVuZGVmaW5lZCksIGNhbmNlbGFibGU6IChib29sZWFufHVuZGVmaW5lZCksIGNvbXBvc2VkOiAoYm9vbGVhbnx1bmRlZmluZWQpIH09fVxuICAgICAgICogIG9wdGlvbnMgT2JqZWN0IHNwZWNpZnlpbmcgb3B0aW9ucy4gIFRoZXNlIG1heSBpbmNsdWRlOlxuICAgICAgICogIGBidWJibGVzYCAoYm9vbGVhbiwgZGVmYXVsdHMgdG8gYHRydWVgKSxcbiAgICAgICAqICBgY2FuY2VsYWJsZWAgKGJvb2xlYW4sIGRlZmF1bHRzIHRvIGZhbHNlKSwgYW5kXG4gICAgICAgKiAgYG5vZGVgIG9uIHdoaWNoIHRvIGZpcmUgdGhlIGV2ZW50IChIVE1MRWxlbWVudCwgZGVmYXVsdHMgdG8gYHRoaXNgKS5cbiAgICAgICAqIEByZXR1cm4geyFFdmVudH0gVGhlIG5ldyBldmVudCB0aGF0IHdhcyBmaXJlZC5cbiAgICAgICAqL1xuICAgICAgZmlyZSh0eXBlLCBkZXRhaWwsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGRldGFpbCA9IChkZXRhaWwgPT09IG51bGwgfHwgZGV0YWlsID09PSB1bmRlZmluZWQpID8ge30gOiBkZXRhaWw7XG4gICAgICAgIGxldCBldmVudCA9IG5ldyBFdmVudCh0eXBlLCB7XG4gICAgICAgICAgYnViYmxlczogb3B0aW9ucy5idWJibGVzID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5idWJibGVzLFxuICAgICAgICAgIGNhbmNlbGFibGU6IEJvb2xlYW4ob3B0aW9ucy5jYW5jZWxhYmxlKSxcbiAgICAgICAgICBjb21wb3NlZDogb3B0aW9ucy5jb21wb3NlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZTogb3B0aW9ucy5jb21wb3NlZFxuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnQuZGV0YWlsID0gZGV0YWlsO1xuICAgICAgICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCB0aGlzO1xuICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGFkZCBhbiBldmVudCBsaXN0ZW5lciBvbiBhIGdpdmVuIGVsZW1lbnQsXG4gICAgICAgKiBsYXRlIGJvdW5kIHRvIGEgbmFtZWQgbWV0aG9kIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byBhZGQgZXZlbnQgbGlzdGVuZXIgdG8uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnQgdG8gbGlzdGVuIGZvci5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2YgaGFuZGxlciBtZXRob2Qgb24gYHRoaXNgIHRvIGNhbGwuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBsaXN0ZW4obm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUgeyFFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgICAgbGV0IGhibCA9IHRoaXMuX19ib3VuZExpc3RlbmVycyB8fFxuICAgICAgICAgICh0aGlzLl9fYm91bmRMaXN0ZW5lcnMgPSBuZXcgV2Vha01hcCgpKTtcbiAgICAgICAgbGV0IGJsID0gaGJsLmdldChub2RlKTtcbiAgICAgICAgaWYgKCFibCkge1xuICAgICAgICAgIGJsID0ge307XG4gICAgICAgICAgaGJsLnNldChub2RlLCBibCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGtleSA9IGV2ZW50TmFtZSArIG1ldGhvZE5hbWU7XG4gICAgICAgIGlmICghYmxba2V5XSkge1xuICAgICAgICAgIGJsW2tleV0gPSB0aGlzLl9hZGRNZXRob2RFdmVudExpc3RlbmVyVG9Ob2RlKFxuICAgICAgICAgICAgbm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byByZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSBhIGdpdmVuIGVsZW1lbnQsXG4gICAgICAgKiBsYXRlIGJvdW5kIHRvIGEgbmFtZWQgbWV0aG9kIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXIgZnJvbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudCB0byBzdG9wIGxpc3RlbmluZyB0by5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2YgaGFuZGxlciBtZXRob2Qgb24gYHRoaXNgIHRvIG5vdCBjYWxsXG4gICAgICAgYW55bW9yZS5cbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVubGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSkge1xuICAgICAgICBub2RlID0gLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKG5vZGUgfHwgdGhpcyk7XG4gICAgICAgIGxldCBibCA9IHRoaXMuX19ib3VuZExpc3RlbmVycyAmJiB0aGlzLl9fYm91bmRMaXN0ZW5lcnMuZ2V0KG5vZGUpO1xuICAgICAgICBsZXQga2V5ID0gZXZlbnROYW1lICsgbWV0aG9kTmFtZTtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBibCAmJiBibFtrZXldO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJGcm9tTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgIGJsW2tleV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgc2Nyb2xsaW5nIGJlaGF2aW9yIHRvIGFsbCBkaXJlY3Rpb24sIG9uZSBkaXJlY3Rpb24sIG9yIG5vbmUuXG4gICAgICAgKlxuICAgICAgICogVmFsaWQgc2Nyb2xsIGRpcmVjdGlvbnM6XG4gICAgICAgKiAgIC0gJ2FsbCc6IHNjcm9sbCBpbiBhbnkgZGlyZWN0aW9uXG4gICAgICAgKiAgIC0gJ3gnOiBzY3JvbGwgb25seSBpbiB0aGUgJ3gnIGRpcmVjdGlvblxuICAgICAgICogICAtICd5Jzogc2Nyb2xsIG9ubHkgaW4gdGhlICd5JyBkaXJlY3Rpb25cbiAgICAgICAqICAgLSAnbm9uZSc6IGRpc2FibGUgc2Nyb2xsaW5nIGZvciB0aGlzIG5vZGVcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGRpcmVjdGlvbiBEaXJlY3Rpb24gdG8gYWxsb3cgc2Nyb2xsaW5nXG4gICAgICAgKiBEZWZhdWx0cyB0byBgYWxsYC5cbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudD19IG5vZGUgRWxlbWVudCB0byBhcHBseSBzY3JvbGwgZGlyZWN0aW9uIHNldHRpbmcuXG4gICAgICAgKiBEZWZhdWx0cyB0byBgdGhpc2AuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBzZXRTY3JvbGxEaXJlY3Rpb24oZGlyZWN0aW9uLCBub2RlKSB7XG4gICAgICAgIFBvbHltZXIuR2VzdHVyZXMuc2V0VG91Y2hBY3Rpb24oLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKSwgRElSRUNUSU9OX01BUFtkaXJlY3Rpb25dIHx8ICdhdXRvJyk7XG4gICAgICB9XG4gICAgICAvKiAqKioqIEVuZCBFdmVudHMgKioqKiAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBydW4gYHF1ZXJ5U2VsZWN0b3JgIG9uIHRoaXMgbG9jYWwgRE9NIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gY2FsbHMgYFBvbHltZXIuZG9tKHRoaXMucm9vdCkucXVlcnlTZWxlY3RvcihzbGN0cilgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzbGN0ciBTZWxlY3RvciB0byBydW4gb24gdGhpcyBsb2NhbCBET00gc2NvcGVcbiAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IEVsZW1lbnQgZm91bmQgYnkgdGhlIHNlbGVjdG9yLCBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgICAqL1xuICAgICAgJCQoc2xjdHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHNsY3RyKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm4gdGhlIGVsZW1lbnQgd2hvc2UgbG9jYWwgZG9tIHdpdGhpbiB3aGljaCB0aGlzIGVsZW1lbnRcbiAgICAgICAqIGlzIGNvbnRhaW5lZC4gVGhpcyBpcyBhIHNob3J0aGFuZCBmb3JcbiAgICAgICAqIGB0aGlzLmdldFJvb3ROb2RlKCkuaG9zdGAuXG4gICAgICAgKiBAdGhpcyB7RWxlbWVudH1cbiAgICAgICAqL1xuICAgICAgZ2V0IGRvbUhvc3QoKSB7XG4gICAgICAgIGxldCByb290ID0gdGhpcy5nZXRSb290Tm9kZSgpO1xuICAgICAgICByZXR1cm4gKHJvb3QgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSA/IC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHJvb3QpLmhvc3QgOiByb290O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZvcmNlIHRoaXMgZWxlbWVudCB0byBkaXN0cmlidXRlIGl0cyBjaGlsZHJlbiB0byBpdHMgbG9jYWwgZG9tLlxuICAgICAgICogVGhpcyBzaG91bGQgbm90IGJlIG5lY2Vzc2FyeSBhcyBvZiBQb2x5bWVyIDIuMC4yIGFuZCBpcyBwcm92aWRlZCBvbmx5XG4gICAgICAgKiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBkaXN0cmlidXRlQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5TaGFkeURPTSAmJiB0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICBTaGFkeURPTS5mbHVzaCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgdGhhdCBhcmUgdGhlIGVmZmVjdGl2ZSBjaGlsZE5vZGVzLiBUaGUgZWZmZWN0aXZlXG4gICAgICAgKiBjaGlsZE5vZGVzIGxpc3QgaXMgdGhlIHNhbWUgYXMgdGhlIGVsZW1lbnQncyBjaGlsZE5vZGVzIGV4Y2VwdCB0aGF0XG4gICAgICAgKiBhbnkgYDxjb250ZW50PmAgZWxlbWVudHMgYXJlIHJlcGxhY2VkIHdpdGggdGhlIGxpc3Qgb2Ygbm9kZXMgZGlzdHJpYnV0ZWRcbiAgICAgICAqIHRvIHRoZSBgPGNvbnRlbnQ+YCwgdGhlIHJlc3VsdCBvZiBpdHMgYGdldERpc3RyaWJ1dGVkTm9kZXNgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59IExpc3Qgb2YgZWZmZWN0aXZlIGNoaWxkIG5vZGVzLlxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpIHtcbiAgICAgICAgY29uc3QgdGhpc0VsID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAodGhpcyk7XG4gICAgICAgIGNvbnN0IGRvbUFwaSA9IC8qKiBAdHlwZSB7UG9seW1lci5Eb21BcGl9ICovKFBvbHltZXIuZG9tKHRoaXNFbCkpO1xuICAgICAgICByZXR1cm4gZG9tQXBpLmdldEVmZmVjdGl2ZUNoaWxkTm9kZXMoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBub2RlcyBkaXN0cmlidXRlZCB3aXRoaW4gdGhpcyBlbGVtZW50IHRoYXQgbWF0Y2hcbiAgICAgICAqIGBzZWxlY3RvcmAuIFRoZXNlIGNhbiBiZSBkb20gY2hpbGRyZW4gb3IgZWxlbWVudHMgZGlzdHJpYnV0ZWQgdG9cbiAgICAgICAqIGNoaWxkcmVuIHRoYXQgYXJlIGluc2VydGlvbiBwb2ludHMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gcnVuLlxuICAgICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gTGlzdCBvZiBkaXN0cmlidXRlZCBlbGVtZW50cyB0aGF0IG1hdGNoIHNlbGVjdG9yLlxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcXVlcnlEaXN0cmlidXRlZEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHRoaXNFbCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHRoaXMpO1xuICAgICAgICBjb25zdCBkb21BcGkgPSAvKiogQHR5cGUge1BvbHltZXIuRG9tQXBpfSAqLyhQb2x5bWVyLmRvbSh0aGlzRWwpKTtcbiAgICAgICAgcmV0dXJuIGRvbUFwaS5xdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHRoZSBlZmZlY3RpdmUgY2hpbGRyZW4uIFRoZSBlZmZlY3RpdmVcbiAgICAgICAqIGNoaWxkcmVuIGxpc3QgaXMgdGhlIHNhbWUgYXMgdGhlIGVsZW1lbnQncyBjaGlsZHJlbiBleGNlcHQgdGhhdFxuICAgICAgICogYW55IGA8Y29udGVudD5gIGVsZW1lbnRzIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBsaXN0IG9mIGVsZW1lbnRzXG4gICAgICAgKiBkaXN0cmlidXRlZCB0byB0aGUgYDxjb250ZW50PmAuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gTGlzdCBvZiBlZmZlY3RpdmUgY2hpbGRyZW4uXG4gICAgICAgKi9cbiAgICAgIGdldEVmZmVjdGl2ZUNoaWxkcmVuKCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgICAgICByZXR1cm4gbGlzdC5maWx0ZXIoZnVuY3Rpb24oLyoqIEB0eXBlIHshTm9kZX0gKi8gbikge1xuICAgICAgICAgIHJldHVybiAobi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIHRleHQgY29udGVudCB0aGF0IGlzIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICAgICAgICogdGV4dCBjb250ZW50J3Mgb2YgdGhlIGVsZW1lbnQncyBlZmZlY3RpdmUgY2hpbGROb2RlcyAodGhlIGVsZW1lbnRzXG4gICAgICAgKiByZXR1cm5lZCBieSA8YSBocmVmPVwiI2dldEVmZmVjdGl2ZUNoaWxkTm9kZXM+Z2V0RWZmZWN0aXZlQ2hpbGROb2RlczwvYT4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZHJlbi5cbiAgICAgICAqL1xuICAgICAgZ2V0RWZmZWN0aXZlVGV4dENvbnRlbnQoKSB7XG4gICAgICAgIGxldCBjbiA9IHRoaXMuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgICAgICBsZXQgdGMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaT0wLCBjOyAoYyA9IGNuW2ldKTsgaSsrKSB7XG4gICAgICAgICAgaWYgKGMubm9kZVR5cGUgIT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICB0Yy5wdXNoKGMudGV4dENvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGMuam9pbignJyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgZmlyc3QgZWZmZWN0aXZlIGNoaWxkTm9kZSB3aXRoaW4gdGhpcyBlbGVtZW50IHRoYXRcbiAgICAgICAqIG1hdGNoIGBzZWxlY3RvcmAuIFRoZXNlIGNhbiBiZSBkb20gY2hpbGQgbm9kZXMgb3IgZWxlbWVudHMgZGlzdHJpYnV0ZWRcbiAgICAgICAqIHRvIGNoaWxkcmVuIHRoYXQgYXJlIGluc2VydGlvbiBwb2ludHMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gcnVuLlxuICAgICAgICogQHJldHVybiB7Tm9kZX0gRmlyc3QgZWZmZWN0aXZlIGNoaWxkIG5vZGUgdGhhdCBtYXRjaGVzIHNlbGVjdG9yLlxuICAgICAgICovXG4gICAgICBxdWVyeUVmZmVjdGl2ZUNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgICAgIGxldCBlJCA9IHRoaXMucXVlcnlEaXN0cmlidXRlZEVsZW1lbnRzKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGUkICYmIGUkWzBdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZE5vZGVzIHdpdGhpbiB0aGlzIGVsZW1lbnQgdGhhdFxuICAgICAgICogbWF0Y2ggYHNlbGVjdG9yYC4gVGhlc2UgY2FuIGJlIGRvbSBjaGlsZCBub2RlcyBvciBlbGVtZW50cyBkaXN0cmlidXRlZFxuICAgICAgICogdG8gY2hpbGRyZW4gdGhhdCBhcmUgaW5zZXJ0aW9uIHBvaW50cy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBTZWxlY3RvciB0byBydW4uXG4gICAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBMaXN0IG9mIGVmZmVjdGl2ZSBjaGlsZCBub2RlcyB0aGF0IG1hdGNoIHNlbGVjdG9yLlxuICAgICAgICovXG4gICAgICBxdWVyeUFsbEVmZmVjdGl2ZUNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5RGlzdHJpYnV0ZWRFbGVtZW50cyhzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgZGlzdHJpYnV0ZWQgdG8gdGhpcyBlbGVtZW50J3MgYDxzbG90PmAuXG4gICAgICAgKlxuICAgICAgICogSWYgdGhpcyBlbGVtZW50IGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgYDxzbG90PmAgaW4gaXRzIGxvY2FsIERPTSxcbiAgICAgICAqIGFuIG9wdGlvbmFsIHNlbGVjdG9yIG1heSBiZSBwYXNzZWQgdG8gY2hvb3NlIHRoZSBkZXNpcmVkIGNvbnRlbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBzbGN0ciBDU1Mgc2VsZWN0b3IgdG8gY2hvb3NlIHRoZSBkZXNpcmVkXG4gICAgICAgKiAgIGA8c2xvdD5gLiAgRGVmYXVsdHMgdG8gYGNvbnRlbnRgLlxuICAgICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gTGlzdCBvZiBkaXN0cmlidXRlZCBub2RlcyBmb3IgdGhlIGA8c2xvdD5gLlxuICAgICAgICovXG4gICAgICBnZXRDb250ZW50Q2hpbGROb2RlcyhzbGN0cikge1xuICAgICAgICBsZXQgY29udGVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHNsY3RyIHx8ICdzbG90Jyk7XG4gICAgICAgIHJldHVybiBjb250ZW50ID8gLyoqIEB0eXBlIHtQb2x5bWVyLkRvbUFwaX0gKi8oUG9seW1lci5kb20oY29udGVudCkpLmdldERpc3RyaWJ1dGVkTm9kZXMoKSA6IFtdO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGVsZW1lbnQgY2hpbGRyZW4gZGlzdHJpYnV0ZWQgdG8gdGhpcyBlbGVtZW50J3NcbiAgICAgICAqIGA8c2xvdD5gLlxuICAgICAgICpcbiAgICAgICAqIElmIHRoaXMgZWxlbWVudCBjb250YWlucyBtb3JlIHRoYW4gb25lIGA8c2xvdD5gIGluIGl0c1xuICAgICAgICogbG9jYWwgRE9NLCBhbiBvcHRpb25hbCBzZWxlY3RvciBtYXkgYmUgcGFzc2VkIHRvIGNob29zZSB0aGUgZGVzaXJlZFxuICAgICAgICogY29udGVudC4gIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgZ2V0Q29udGVudENoaWxkTm9kZXNgIGluIHRoYXQgb25seVxuICAgICAgICogZWxlbWVudHMgYXJlIHJldHVybmVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gc2xjdHIgQ1NTIHNlbGVjdG9yIHRvIGNob29zZSB0aGUgZGVzaXJlZFxuICAgICAgICogICBgPGNvbnRlbnQ+YC4gIERlZmF1bHRzIHRvIGBjb250ZW50YC5cbiAgICAgICAqIEByZXR1cm4geyFBcnJheTwhSFRNTEVsZW1lbnQ+fSBMaXN0IG9mIGRpc3RyaWJ1dGVkIG5vZGVzIGZvciB0aGVcbiAgICAgICAqICAgYDxzbG90PmAuXG4gICAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICAgICAqL1xuICAgICAgZ2V0Q29udGVudENoaWxkcmVuKHNsY3RyKSB7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IC8qKiBAdHlwZSB7IUFycmF5PCFIVE1MRWxlbWVudD59ICovKHRoaXMuZ2V0Q29udGVudENoaWxkTm9kZXMoc2xjdHIpLmZpbHRlcihmdW5jdGlvbihuKSB7XG4gICAgICAgICAgcmV0dXJuIChuLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgaW4gdGhpcyBlbGVtZW50J3MgbGlnaHQgRE9NIHRyZWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHs/Tm9kZX0gbm9kZSBUaGUgZWxlbWVudCB0byBiZSBjaGVja2VkLlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBub2RlIGlzIGluIHRoaXMgZWxlbWVudCdzIGxpZ2h0IERPTSB0cmVlLlxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgaXNMaWdodERlc2NlbmRhbnQobm9kZSkge1xuICAgICAgICBjb25zdCB0aGlzTm9kZSA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpc05vZGUgIT09IG5vZGUgJiYgdGhpc05vZGUuY29udGFpbnMobm9kZSkgJiZcbiAgICAgICAgICB0aGlzTm9kZS5nZXRSb290Tm9kZSgpID09PSBub2RlLmdldFJvb3ROb2RlKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBpbiB0aGlzIGVsZW1lbnQncyBsb2NhbCBET00gdHJlZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFFbGVtZW50fSBub2RlIFRoZSBlbGVtZW50IHRvIGJlIGNoZWNrZWQuXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG5vZGUgaXMgaW4gdGhpcyBlbGVtZW50J3MgbG9jYWwgRE9NIHRyZWUuXG4gICAgICAgKi9cbiAgICAgIGlzTG9jYWxEZXNjZW5kYW50KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdCA9PT0gbm9kZS5nZXRSb290Tm9kZSgpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE5vLW9wIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gVGhpcyBzaG91bGQgbm93IGJlIGhhbmRsZWQgYnlcbiAgICAgICAqIFNoYWR5Q3NzIGxpYnJhcnkuXG4gICAgICAgKiBAcGFyYW0gIHsqfSBjb250YWluZXIgVW51c2VkXG4gICAgICAgKiBAcGFyYW0gIHsqfSBzaG91bGRPYnNlcnZlIFVudXNlZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgc2NvcGVTdWJ0cmVlKGNvbnRhaW5lciwgc2hvdWxkT2JzZXJ2ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgY29tcHV0ZWQgc3R5bGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBUaGUgY3NzIHByb3BlcnR5IG5hbWUuXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbXB1dGVkIGNzcyBwcm9wZXJ0eSB2YWx1ZSBmb3IgdGhlIGdpdmVuXG4gICAgICAgKiBgcHJvcGVydHlgLlxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IExlZ2FjeUVsZW1lbnRNaXhpbiBtdXN0IGJlIGFwcGxpZWQgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlKHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBzdHlsZUludGVyZmFjZS5nZXRDb21wdXRlZFN0eWxlVmFsdWUoLyoqIEB0eXBlIHshRWxlbWVudH0gKi8odGhpcyksIHByb3BlcnR5KTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVib3VuY2VcblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsIGBkZWJvdW5jZWAgdG8gY29sbGFwc2UgbXVsdGlwbGUgcmVxdWVzdHMgZm9yIGEgbmFtZWQgdGFzayBpbnRvXG4gICAgICAgKiBvbmUgaW52b2NhdGlvbiB3aGljaCBpcyBtYWRlIGFmdGVyIHRoZSB3YWl0IHRpbWUgaGFzIGVsYXBzZWQgd2l0aFxuICAgICAgICogbm8gbmV3IHJlcXVlc3QuICBJZiBubyB3YWl0IHRpbWUgaXMgZ2l2ZW4sIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZFxuICAgICAgICogYXQgbWljcm90YXNrIHRpbWluZyAoZ3VhcmFudGVlZCBiZWZvcmUgcGFpbnQpLlxuICAgICAgICpcbiAgICAgICAqICAgICBkZWJvdW5jZWRDbGlja0FjdGlvbihlKSB7XG4gICAgICAgKiAgICAgICAvLyB3aWxsIG5vdCBjYWxsIGBwcm9jZXNzQ2xpY2tgIG1vcmUgdGhhbiBvbmNlIHBlciAxMDBtc1xuICAgICAgICogICAgICAgdGhpcy5kZWJvdW5jZSgnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgICAgICB0aGlzLnByb2Nlc3NDbGljaygpO1xuICAgICAgICogICAgICAgfSAxMDApO1xuICAgICAgICogICAgIH1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gam9iTmFtZSBTdHJpbmcgdG8gaWRlbnRpZnkgdGhlIGRlYm91bmNlIGpvYi5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTp2b2lkfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCAod2l0aCBgdGhpc2BcbiAgICAgICAqICAgY29udGV4dCkgd2hlbiB0aGUgd2FpdCB0aW1lIGVsYXBzZXMuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBPcHRpb25hbCB3YWl0IHRpbWUgaW4gbWlsbGlzZWNvbmRzIChtcykgYWZ0ZXIgdGhlXG4gICAgICAgKiAgIGxhc3Qgc2lnbmFsIHRoYXQgbXVzdCBlbGFwc2UgYmVmb3JlIGludm9raW5nIGBjYWxsYmFja2BcbiAgICAgICAqIEByZXR1cm4geyFPYmplY3R9IFJldHVybnMgYSBkZWJvdW5jZXIgb2JqZWN0IG9uIHdoaWNoIGV4aXN0cyB0aGVcbiAgICAgICAqIGZvbGxvd2luZyBtZXRob2RzOiBgaXNBY3RpdmUoKWAgcmV0dXJucyB0cnVlIGlmIHRoZSBkZWJvdW5jZXIgaXNcbiAgICAgICAqIGFjdGl2ZTsgYGNhbmNlbCgpYCBjYW5jZWxzIHRoZSBkZWJvdW5jZXIgaWYgaXQgaXMgYWN0aXZlO1xuICAgICAgICogYGZsdXNoKClgIGltbWVkaWF0ZWx5IGludm9rZXMgdGhlIGRlYm91bmNlZCBjYWxsYmFjayBpZiB0aGUgZGVib3VuY2VyXG4gICAgICAgKiBpcyBhY3RpdmUuXG4gICAgICAgKi9cbiAgICAgIGRlYm91bmNlKGpvYk5hbWUsIGNhbGxiYWNrLCB3YWl0KSB7XG4gICAgICAgIHRoaXMuX2RlYm91bmNlcnMgPSB0aGlzLl9kZWJvdW5jZXJzIHx8IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVib3VuY2Vyc1tqb2JOYW1lXSA9IFBvbHltZXIuRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgICAgICB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdXG4gICAgICAgICAgICAsIHdhaXQgPiAwID8gUG9seW1lci5Bc3luYy50aW1lT3V0LmFmdGVyKHdhaXQpIDogUG9seW1lci5Bc3luYy5taWNyb1Rhc2tcbiAgICAgICAgICAgICwgY2FsbGJhY2suYmluZCh0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB3aGV0aGVyIGEgbmFtZWQgZGVib3VuY2VyIGlzIGFjdGl2ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gam9iTmFtZSBUaGUgbmFtZSBvZiB0aGUgZGVib3VuY2VyIHN0YXJ0ZWQgd2l0aCBgZGVib3VuY2VgXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBkZWJvdW5jZXIgaXMgYWN0aXZlIChoYXMgbm90IHlldCBmaXJlZCkuXG4gICAgICAgKi9cbiAgICAgIGlzRGVib3VuY2VyQWN0aXZlKGpvYk5hbWUpIHtcbiAgICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgICByZXR1cm4gISEoZGVib3VuY2VyICYmIGRlYm91bmNlci5pc0FjdGl2ZSgpKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBJbW1lZGlhdGVseSBjYWxscyB0aGUgZGVib3VuY2VyIGBjYWxsYmFja2AgYW5kIGluYWN0aXZhdGVzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBqb2JOYW1lIFRoZSBuYW1lIG9mIHRoZSBkZWJvdW5jZXIgc3RhcnRlZCB3aXRoIGBkZWJvdW5jZWBcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGZsdXNoRGVib3VuY2VyKGpvYk5hbWUpIHtcbiAgICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgICBpZiAoZGVib3VuY2VyKSB7XG4gICAgICAgICAgZGVib3VuY2VyLmZsdXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYW5jZWxzIGFuIGFjdGl2ZSBkZWJvdW5jZXIuICBUaGUgYGNhbGxiYWNrYCB3aWxsIG5vdCBiZSBjYWxsZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGpvYk5hbWUgVGhlIG5hbWUgb2YgdGhlIGRlYm91bmNlciBzdGFydGVkIHdpdGggYGRlYm91bmNlYFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgY2FuY2VsRGVib3VuY2VyKGpvYk5hbWUpIHtcbiAgICAgICAgdGhpcy5fZGVib3VuY2VycyA9IHRoaXMuX2RlYm91bmNlcnMgfHwge307XG4gICAgICAgIGxldCBkZWJvdW5jZXIgPSB0aGlzLl9kZWJvdW5jZXJzW2pvYk5hbWVdO1xuICAgICAgICBpZiAoZGVib3VuY2VyKSB7XG4gICAgICAgICAgZGVib3VuY2VyLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGFzeW5jaHJvbm91c2x5LlxuICAgICAgICpcbiAgICAgICAqIEJ5IGRlZmF1bHQgKGlmIG5vIHdhaXRUaW1lIGlzIHNwZWNpZmllZCksIGFzeW5jIGNhbGxiYWNrcyBhcmUgcnVuIGF0XG4gICAgICAgKiBtaWNyb3Rhc2sgdGltaW5nLCB3aGljaCB3aWxsIG9jY3VyIGJlZm9yZSBwYWludC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJ1biwgYm91bmQgdG8gYHRoaXNgLlxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSB3YWl0VGltZSBUaW1lIHRvIHdhaXQgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICAgKiAgIGBjYWxsYmFja2AuICBJZiB1bnNwZWNpZmllZCBvciAwLCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBydW4gYXQgbWljcm90YXNrXG4gICAgICAgKiAgIHRpbWluZyAoYmVmb3JlIHBhaW50KS5cbiAgICAgICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBhc3luYyBqb2IuXG4gICAgICAgKi9cbiAgICAgIGFzeW5jKGNhbGxiYWNrLCB3YWl0VGltZSkge1xuICAgICAgICByZXR1cm4gd2FpdFRpbWUgPiAwID8gUG9seW1lci5Bc3luYy50aW1lT3V0LnJ1bihjYWxsYmFjay5iaW5kKHRoaXMpLCB3YWl0VGltZSkgOlxuICAgICAgICAgICAgflBvbHltZXIuQXN5bmMubWljcm9UYXNrLnJ1bihjYWxsYmFjay5iaW5kKHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYW5jZWxzIGFuIGFzeW5jIG9wZXJhdGlvbiBzdGFydGVkIHdpdGggYGFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIG9yaWdpbmFsIGBhc3luY2AgY2FsbCB0b1xuICAgICAgICogICBjYW5jZWwuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBjYW5jZWxBc3luYyhoYW5kbGUpIHtcbiAgICAgICAgaGFuZGxlIDwgMCA/IFBvbHltZXIuQXN5bmMubWljcm9UYXNrLmNhbmNlbCh+aGFuZGxlKSA6XG4gICAgICAgICAgICBQb2x5bWVyLkFzeW5jLnRpbWVPdXQuY2FuY2VsKGhhbmRsZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIG90aGVyXG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBlbGVtZW50IGFuZCBjb25maWd1cmluZyBpdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIEhUTUwgZWxlbWVudCB0YWcgdG8gY3JlYXRlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wcyBPYmplY3Qgb2YgcHJvcGVydGllcyB0byBjb25maWd1cmUgb24gdGhlXG4gICAgICAgKiAgICBpbnN0YW5jZS5cbiAgICAgICAqIEByZXR1cm4geyFFbGVtZW50fSBOZXdseSBjcmVhdGVkIGFuZCBjb25maWd1cmVkIGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZSh0YWcsIHByb3BzKSB7XG4gICAgICAgIGxldCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGlmIChlbHQuc2V0UHJvcGVydGllcykge1xuICAgICAgICAgICAgZWx0LnNldFByb3BlcnRpZXMocHJvcHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBuIGluIHByb3BzKSB7XG4gICAgICAgICAgICAgIGVsdFtuXSA9IHByb3BzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWx0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgaW1wb3J0aW5nIGFuIEhUTUwgZG9jdW1lbnQgaW1wZXJhdGl2ZWx5LlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBuZXcgYDxsaW5rIHJlbD1cImltcG9ydFwiPmAgZWxlbWVudCB3aXRoXG4gICAgICAgKiB0aGUgcHJvdmlkZWQgVVJMIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBkb2N1bWVudCB0byBzdGFydCBsb2FkaW5nLlxuICAgICAgICogSW4gdGhlIGBvbmxvYWRgIGNhbGxiYWNrLCB0aGUgYGltcG9ydGAgcHJvcGVydHkgb2YgdGhlIGBsaW5rYFxuICAgICAgICogZWxlbWVudCB3aWxsIGNvbnRhaW4gdGhlIGltcG9ydGVkIGRvY3VtZW50IGNvbnRlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBocmVmIFVSTCB0byBkb2N1bWVudCB0byBsb2FkLlxuICAgICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oIUV2ZW50KTp2b2lkPX0gb25sb2FkIENhbGxiYWNrIHRvIG5vdGlmeSB3aGVuIGFuIGltcG9ydCBzdWNjZXNzZnVsbHlcbiAgICAgICAqICAgbG9hZGVkLlxuICAgICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oIUVycm9yRXZlbnQpOnZvaWQ9fSBvbmVycm9yIENhbGxiYWNrIHRvIG5vdGlmeSB3aGVuIGFuIGltcG9ydFxuICAgICAgICogICB1bnN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRBc3luYyBUcnVlIGlmIHRoZSBpbXBvcnQgc2hvdWxkIGJlIGxvYWRlZCBgYXN5bmNgLlxuICAgICAgICogICBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgICAgICogQHJldHVybiB7IUhUTUxMaW5rRWxlbWVudH0gVGhlIGxpbmsgZWxlbWVudCBmb3IgdGhlIFVSTCB0byBiZSBsb2FkZWQuXG4gICAgICAgKi9cbiAgICAgIGltcG9ydEhyZWYoaHJlZiwgb25sb2FkLCBvbmVycm9yLCBvcHRBc3luYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIGxldCBsb2FkRm4gPSBvbmxvYWQgPyBvbmxvYWQuYmluZCh0aGlzKSA6IG51bGw7XG4gICAgICAgIGxldCBlcnJvckZuID0gb25lcnJvciA/IG9uZXJyb3IuYmluZCh0aGlzKSA6IG51bGw7XG4gICAgICAgIHJldHVybiBQb2x5bWVyLmltcG9ydEhyZWYoaHJlZiwgbG9hZEZuLCBlcnJvckZuLCBvcHRBc3luYyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUG9seWZpbGwgZm9yIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMsIHdoaWNoIGlzIHNvbWV0aW1lcyBzdGlsbFxuICAgICAgICogcHJlZml4ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIHRlc3QuXG4gICAgICAgKiBAcGFyYW0geyFFbGVtZW50PX0gbm9kZSBFbGVtZW50IHRvIHRlc3QgdGhlIHNlbGVjdG9yIGFnYWluc3QuXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IG1hdGNoZXMgdGhlIHNlbGVjdG9yLlxuICAgICAgICovXG4gICAgICBlbGVtZW50TWF0Y2hlcyhzZWxlY3Rvciwgbm9kZSkge1xuICAgICAgICByZXR1cm4gUG9seW1lci5kb20ubWF0Y2hlc1NlbGVjdG9yKC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpLCBzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyBhbiBIVE1MIGF0dHJpYnV0ZSBvbiBvciBvZmYuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgSFRNTCBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gYm9vbCBCb29sZWFuIHRvIGZvcmNlIHRoZSBhdHRyaWJ1dGUgb24gb3Igb2ZmLlxuICAgICAgICogICAgV2hlbiB1bnNwZWNpZmllZCwgdGhlIHN0YXRlIG9mIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZXZlcnNlZC5cbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudD19IG5vZGUgTm9kZSB0byB0YXJnZXQuICBEZWZhdWx0cyB0byBgdGhpc2AuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICB0b2dnbGVBdHRyaWJ1dGUobmFtZSwgYm9vbCwgbm9kZSkge1xuICAgICAgICBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIGJvb2wgPSAhbm9kZS5oYXNBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgYSBDU1MgY2xhc3Mgb24gb3Igb2ZmLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBjbGFzcyBuYW1lXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBib29sIEJvb2xlYW4gdG8gZm9yY2UgdGhlIGNsYXNzIG9uIG9yIG9mZi5cbiAgICAgICAqICAgIFdoZW4gdW5zcGVjaWZpZWQsIHRoZSBzdGF0ZSBvZiB0aGUgY2xhc3Mgd2lsbCBiZSByZXZlcnNlZC5cbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudD19IG5vZGUgTm9kZSB0byB0YXJnZXQuICBEZWZhdWx0cyB0byBgdGhpc2AuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICB0b2dnbGVDbGFzcyhuYW1lLCBib29sLCBub2RlKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgYm9vbCA9ICFub2RlLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDcm9zcy1wbGF0Zm9ybSBoZWxwZXIgZm9yIHNldHRpbmcgYW4gZWxlbWVudCdzIENTUyBgdHJhbnNmb3JtYCBwcm9wZXJ0eS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNmb3JtVGV4dCBUcmFuc2Zvcm0gc2V0dGluZy5cbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudD19IG5vZGUgRWxlbWVudCB0byBhcHBseSB0aGUgdHJhbnNmb3JtIHRvLlxuICAgICAgICogRGVmYXVsdHMgdG8gYHRoaXNgXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtVGV4dCwgbm9kZSkge1xuICAgICAgICBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZSB8fCB0aGlzKTtcbiAgICAgICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZXh0O1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVRleHQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3Jvc3MtcGxhdGZvcm0gaGVscGVyIGZvciBzZXR0aW5nIGFuIGVsZW1lbnQncyBDU1MgYHRyYW5zbGF0ZTNkYFxuICAgICAgICogcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHggWCBvZmZzZXQuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geSBZIG9mZnNldC5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB6IFogb2Zmc2V0LlxuICAgICAgICogQHBhcmFtIHtFbGVtZW50PX0gbm9kZSBFbGVtZW50IHRvIGFwcGx5IHRoZSB0cmFuc2Zvcm0gdG8uXG4gICAgICAgKiBEZWZhdWx0cyB0byBgdGhpc2AuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICB0cmFuc2xhdGUzZCh4LCB5LCB6LCBub2RlKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChub2RlIHx8IHRoaXMpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoJyArIHggKyAnLCcgKyB5ICsgJywnICsgeiArICcpJywgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXksIGlmIGl0IGV4aXN0cy5cbiAgICAgICAqXG4gICAgICAgKiBJZiB0aGUgYXJyYXkgaXMgc3BlY2lmaWVkIGJ5IHBhdGgsIGEgY2hhbmdlIG5vdGlmaWNhdGlvbiBpc1xuICAgICAgICogZ2VuZXJhdGVkLCBzbyB0aGF0IG9ic2VydmVycywgZGF0YSBiaW5kaW5ncyBhbmQgY29tcHV0ZWRcbiAgICAgICAqIHByb3BlcnRpZXMgd2F0Y2hpbmcgdGhhdCBwYXRoIGNhbiB1cGRhdGUuXG4gICAgICAgKlxuICAgICAgICogSWYgdGhlIGFycmF5IGlzIHBhc3NlZCBkaXJlY3RseSwgKipubyBjaGFuZ2VcbiAgICAgICAqIG5vdGlmaWNhdGlvbiBpcyBnZW5lcmF0ZWQqKi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxudW1iZXJ8c3RyaW5nPn0gYXJyYXlPclBhdGggUGF0aCB0byBhcnJheSBmcm9tIHdoaWNoIHRvIHJlbW92ZSB0aGUgaXRlbVxuICAgICAgICogICAob3IgdGhlIGFycmF5IGl0c2VsZikuXG4gICAgICAgKiBAcGFyYW0geyp9IGl0ZW0gSXRlbSB0byByZW1vdmUuXG4gICAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgY29udGFpbmluZyBpdGVtIHJlbW92ZWQuXG4gICAgICAgKi9cbiAgICAgIGFycmF5RGVsZXRlKGFycmF5T3JQYXRoLCBpdGVtKSB7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlPclBhdGgpKSB7XG4gICAgICAgICAgaW5kZXggPSBhcnJheU9yUGF0aC5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlPclBhdGguc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGFyciA9IFBvbHltZXIuUGF0aC5nZXQodGhpcywgYXJyYXlPclBhdGgpO1xuICAgICAgICAgIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShhcnJheU9yUGF0aCwgaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gbG9nZ2luZ1xuXG4gICAgICAvKipcbiAgICAgICAqIEZhY2FkZXMgYGNvbnNvbGUubG9nYC9gd2FybmAvYGVycm9yYCBhcyBvdmVycmlkZSBwb2ludC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgT25lIG9mICdsb2cnLCAnd2FybicsICdlcnJvcidcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgQXJyYXkgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHRvIGxvZ1xuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX2xvZ2dlcihsZXZlbCwgYXJncykge1xuICAgICAgICAvLyBhY2NlcHQgWydmb28nLCAnYmFyJ10gYW5kIFtbJ2ZvbycsICdiYXInXV1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICAgIGFyZ3MgPSBhcmdzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaChsZXZlbCkge1xuICAgICAgICAgIGNhc2UgJ2xvZyc6XG4gICAgICAgICAgY2FzZSAnd2Fybic6XG4gICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgY29uc29sZVtsZXZlbF0oLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGYWNhZGVzIGBjb25zb2xlLmxvZ2AgYXMgYW4gb3ZlcnJpZGUgcG9pbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9sb2coLi4uYXJncykge1xuICAgICAgICB0aGlzLl9sb2dnZXIoJ2xvZycsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZhY2FkZXMgYGNvbnNvbGUud2FybmAgYXMgYW4gb3ZlcnJpZGUgcG9pbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF93YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyKCd3YXJuJywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRmFjYWRlcyBgY29uc29sZS5lcnJvcmAgYXMgYW4gb3ZlcnJpZGUgcG9pbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9lcnJvciguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlcignZXJyb3InLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGb3JtYXRzIGEgbWVzc2FnZSB1c2luZyB0aGUgZWxlbWVudCB0eXBlIGFuIGEgbWV0aG9kIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTWV0aG9kIG5hbWUgdG8gYXNzb2NpYXRlIHdpdGggbWVzc2FnZVxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFycmF5IG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB0byBsb2dcbiAgICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSB3aXRoIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24gZm9yIGBjb25zb2xlYFxuICAgICAgICogICBsb2dnaW5nLlxuICAgICAgICovXG4gICAgICBfbG9nZihtZXRob2ROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBbJ1slczo6JXNdJywgdGhpcy5pcywgbWV0aG9kTmFtZSwgLi4uYXJnc107XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBMZWdhY3lFbGVtZW50LnByb3RvdHlwZS5pcyA9ICcnO1xuXG4gICAgcmV0dXJuIExlZ2FjeUVsZW1lbnQ7XG5cbiAgfSk7XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib290Lmh0bWxcIj5cbjxzY3JpcHQ+XG4gIChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzdGF0aWMgc3RyaW5nIHZhbHVlIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZpbHRlclxuICAgICAqIHN0cmluZ3MgYnkgYXNzZXRpbmcgdGhhdCB0aGV5IGhhdmUgYmVlbiBjcmVhdGVkIHZpYSB0aGlzIGNsYXNzLiBUaGVcbiAgICAgKiBgdmFsdWVgIHByb3BlcnR5IHJldHVybnMgdGhlIHN0cmluZyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGNsYXNzIExpdGVyYWxTdHJpbmcge1xuICAgICAgY29uc3RydWN0b3Ioc3RyaW5nKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICB0aGlzLnZhbHVlID0gc3RyaW5nLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gTGl0ZXJhbFN0cmluZyBzdHJpbmcgdmFsdWVcbiAgICAgICAqL1xuICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgT2JqZWN0IHRvIHN0cmluZ2lmeSBpbnRvIEhUTUxcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEhUTUwgc3RyaW5naWZpZWQgZm9ybSBvZiBgb2JqYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpdGVyYWxWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGl0ZXJhbFN0cmluZykge1xuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHshTGl0ZXJhbFN0cmluZ30gKi8odmFsdWUpLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub24tbGl0ZXJhbCB2YWx1ZSBwYXNzZWQgdG8gUG9seW1lci5odG1sTGl0ZXJhbDogJHt2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIE9iamVjdCB0byBzdHJpbmdpZnkgaW50byBIVE1MXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBIVE1MIHN0cmluZ2lmaWVkIGZvcm0gb2YgYG9iamBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBodG1sVmFsdWUodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnQgfSAqLyh2YWx1ZSkuaW5uZXJIVE1MO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExpdGVyYWxTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGxpdGVyYWxWYWx1ZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vbi10ZW1wbGF0ZSB2YWx1ZSBwYXNzZWQgdG8gUG9seW1lci5odG1sOiAke3ZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgdGhhdCBjcmVhdGVzIGFuIEhUTUwgPHRlbXBsYXRlPiBlbGVtZW50IGZyb20gdGhlXG4gICAgICogY29udGVudHMgb2YgdGhlIHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgYWxsb3dzIHlvdSB0byB3cml0ZSBhIFBvbHltZXIgVGVtcGxhdGUgaW4gSmF2YVNjcmlwdC5cbiAgICAgKlxuICAgICAqIFRlbXBsYXRlcyBjYW4gYmUgY29tcG9zZWQgYnkgaW50ZXJwb2xhdGluZyBgSFRNTFRlbXBsYXRlRWxlbWVudGBzIGluXG4gICAgICogZXhwcmVzc2lvbnMgaW4gdGhlIEphdmFTY3JpcHQgdGVtcGxhdGUgbGl0ZXJhbC4gVGhlIG5lc3RlZCB0ZW1wbGF0ZSdzXG4gICAgICogYGlubmVySFRNTGAgaXMgaW5jbHVkZWQgaW4gdGhlIGNvbnRhaW5pbmcgdGVtcGxhdGUuICBUaGUgb25seSBvdGhlclxuICAgICAqIHZhbHVlcyBhbGxvd2VkIGluIGV4cHJlc3Npb25zIGFyZSB0aG9zZSByZXR1cm5lZCBmcm9tIGBQb2x5bWVyLmh0bWxMaXRlcmFsYFxuICAgICAqIHdoaWNoIGVuc3VyZXMgb25seSBsaXRlcmFsIHZhbHVlcyBmcm9tIEpTIHNvdXJjZSBldmVyIHJlYWNoIHRoZSBIVE1MLCB0b1xuICAgICAqIGd1YXJkIGFnYWluc3QgWFNTIHJpc2tzLlxuICAgICAqXG4gICAgICogQWxsIG90aGVyIHZhbHVlcyBhcmUgZGlzYWxsb3dlZCBpbiBleHByZXNzaW9ucyB0byBoZWxwIHByZXZlbnQgWFNTXG4gICAgICogYXR0YWNrczsgaG93ZXZlciwgYFBvbHltZXIuaHRtbExpdGVyYWxgIGNhbiBiZSB1c2VkIHRvIGNvbXBvc2Ugc3RhdGljXG4gICAgICogc3RyaW5nIHZhbHVlcyBpbnRvIHRlbXBsYXRlcy4gVGhpcyBpcyB1c2VmdWwgdG8gY29tcG9zZSBzdHJpbmdzIGludG9cbiAgICAgKiBwbGFjZXMgdGhhdCBkbyBub3QgYWNjZXB0IGh0bWwsIGxpa2UgdGhlIGNzcyB0ZXh0IG9mIGEgYHN0eWxlYFxuICAgICAqIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICogICAgICAgcmV0dXJuIFBvbHltZXIuaHRtbGBcbiAgICAgKiAgICAgICAgIDxzdHlsZT46aG9zdHsgY29udGVudDpcIi4uLlwiIH08L3N0eWxlPlxuICAgICAqICAgICAgICAgPGRpdiBjbGFzcz1cInNoYWRvd2VkXCI+JHt0aGlzLnBhcnRpYWxUZW1wbGF0ZX08L2Rpdj5cbiAgICAgKiAgICAgICAgICR7c3VwZXIudGVtcGxhdGV9XG4gICAgICogICAgICAgYDtcbiAgICAgKiAgICAgfVxuICAgICAqICAgICBzdGF0aWMgZ2V0IHBhcnRpYWxUZW1wbGF0ZSgpIHsgcmV0dXJuIFBvbHltZXIuaHRtbGA8c3Bhbj5QYXJ0aWFsITwvc3Bhbj5gOyB9XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgICAqIEBwYXJhbSB7IUlUZW1wbGF0ZUFycmF5fSBzdHJpbmdzIENvbnN0YW50IHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gICAgICogQHBhcmFtIHsuLi4qfSB2YWx1ZXMgVmFyaWFibGUgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAgICAgKiBAcmV0dXJuIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gQ29uc3RydWN0ZWQgSFRNTFRlbXBsYXRlRWxlbWVudFxuICAgICAqL1xuICAgIFBvbHltZXIuaHRtbCA9IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJykpO1xuICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsdWVzLnJlZHVjZSgoYWNjLCB2LCBpZHgpID0+XG4gICAgICAgICAgYWNjICsgaHRtbFZhbHVlKHYpICsgc3RyaW5nc1tpZHggKyAxXSwgc3RyaW5nc1swXSk7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFuIGh0bWwgbGl0ZXJhbCB0YWcgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGBQb2x5bWVyLmh0bWxgIHRvIGNvbXBvc2UuXG4gICAgICogYSBsaXRlcmFsIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICAgKiAgICAgICByZXR1cm4gUG9seW1lci5odG1sYFxuICAgICAqICAgICAgICAgPHN0eWxlPlxuICAgICAqICAgICAgICAgICA6aG9zdCB7IGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICogICAgICAgICAgICR7c3R5bGVUZW1wbGF0ZX1cbiAgICAgKiAgICAgICAgIDwvc3R5bGU+XG4gICAgICogICAgICAgICA8ZGl2IGNsYXNzPVwic2hhZG93ZWRcIj4ke3N0YXRpY1ZhbHVlfTwvZGl2PlxuICAgICAqICAgICAgICAgJHtzdXBlci50ZW1wbGF0ZX1cbiAgICAgKiAgICAgICBgO1xuICAgICAqICAgICB9XG4gICAgICogICAgIHN0YXRpYyBnZXQgc3R5bGVUZW1wbGF0ZSgpIHsgcmV0dXJuIFBvbHltZXIuaHRtbExpdGVyYWxgLnNoYWRvd2VkIHsgYmFja2dyb3VuZDogZ3JheTsgfWA7IH1cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAgICogQHBhcmFtIHshSVRlbXBsYXRlQXJyYXl9IHN0cmluZ3MgQ29uc3RhbnQgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAgICAgKiBAcGFyYW0gey4uLip9IHZhbHVlcyBWYXJpYWJsZSBwYXJ0cyBvZiB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFxuICAgICAqIEByZXR1cm4geyFMaXRlcmFsU3RyaW5nfSBDb25zdHJ1Y3RlZCBsaXRlcmFsIHN0cmluZ1xuICAgICAqL1xuICAgIFBvbHltZXIuaHRtbExpdGVyYWwgPSBmdW5jdGlvbihzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbFN0cmluZyh2YWx1ZXMucmVkdWNlKChhY2MsIHYsIGlkeCkgPT5cbiAgICAgICAgICBhY2MgKyBsaXRlcmFsVmFsdWUodikgKyBzdHJpbmdzW2lkeCArIDFdLCBzdHJpbmdzWzBdKSk7XG4gICAgfTtcbiAgfSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvYm9vdC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvbWl4aW4uaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2FzeW5jLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKiBAY29uc3QgeyFBc3luY0ludGVyZmFjZX0gKi9cbiAgICBjb25zdCBtaWNyb3Rhc2sgPSBQb2x5bWVyLkFzeW5jLm1pY3JvVGFzaztcblxuICAgIC8qKlxuICAgICAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAgICAgKiBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycyAoZ2V0dGVyL3NldHRlciBwYWlyKSB0aGF0IGVucXVldWUgYW4gYXN5bmNcbiAgICAgKiAoYmF0Y2hlZCkgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBGb3IgYmFzaWMgdXNhZ2Ugb2YgdGhpcyBtaXhpbiwgY2FsbCBgTXlDbGFzcy5jcmVhdGVQcm9wZXJ0aWVzKHByb3BzKWBcbiAgICAgKiBvbmNlIGF0IGNsYXNzIGRlZmluaXRpb24gdGltZSB0byBjcmVhdGUgcHJvcGVydHkgYWNjZXNzb3JzIGZvciBwcm9wZXJ0aWVzXG4gICAgICogbmFtZWQgaW4gcHJvcHMsIGltcGxlbWVudCBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB0byByZWFjdCBhcyBkZXNpcmVkIHRvXG4gICAgICogcHJvcGVydHkgY2hhbmdlcywgYW5kIGltcGxlbWVudCBgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKWAgYW5kXG4gICAgICogaW5jbHVkZSBsb3dlcmNhc2UgdmVyc2lvbnMgb2YgYW55IHByb3BlcnR5IG5hbWVzIHRoYXQgc2hvdWxkIGJlIHNldCBmcm9tXG4gICAgICogYXR0cmlidXRlcy4gTGFzdCwgY2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzXG4gICAgICogYGNvbm5lY3RlZENhbGxiYWNrYCB0byBlbmFibGUgdGhlIGFjY2Vzc29ycy5cbiAgICAgKlxuICAgICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgICAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gZm9yIHJlYWN0aW5nIHRvIHByb3BlcnR5IGNoYW5nZXMgZnJvbVxuICAgICAqICAgZ2VuZXJhdGVkIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAgICAgKi9cbiAgICBQb2x5bWVyLlByb3BlcnRpZXNDaGFuZ2VkID0gUG9seW1lci5kZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBwb2x5bWVyXG4gICAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAgICogQGV4dGVuZHMge3N1cGVyQ2xhc3N9XG4gICAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICAgICAqIEB1bnJlc3RyaWN0ZWRcbiAgICAgICAqL1xuICAgICAgY2xhc3MgUHJvcGVydGllc0NoYW5nZWQgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyBPYmplY3Qgd2hvc2Uga2V5cyBhcmUgbmFtZXMgb2YgYWNjZXNzb3JzLlxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgICAgIGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG4gICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgICAgLy8gZG9uJ3Qgc3RvbXAgYW4gZXhpc3RpbmcgYWNjZXNzb3JcbiAgICAgICAgICAgIGlmICghKHByb3AgaW4gcHJvdG8pKSB7XG4gICAgICAgICAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBuYW1lIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAgICAgKiBUaGUgYXR0cmlidXRlIG5hbWUgaXMgdGhlIGxvd2VyY2FzZWQgcHJvcGVydHkgbmFtZS4gT3ZlcnJpZGUgdG9cbiAgICAgICAgICogY3VzdG9taXplIHRoaXMgbWFwcGluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGUgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE92ZXJyaWRlIHBvaW50IHRvIHByb3ZpZGUgYSB0eXBlIHRvIHdoaWNoIHRvIGRlc2VyaWFsaXplIGEgdmFsdWUgdG9cbiAgICAgICAgICogYSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgdHlwZUZvclByb3BlcnR5KG5hbWUpIHsgfSAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHNldHRlci9nZXR0ZXIgcGFpciBmb3IgdGhlIG5hbWVkIHByb3BlcnR5IHdpdGggaXRzIG93blxuICAgICAgICAgKiBsb2NhbCBzdG9yYWdlLiAgVGhlIGdldHRlciByZXR1cm5zIHRoZSB2YWx1ZSBpbiB0aGUgbG9jYWwgc3RvcmFnZSxcbiAgICAgICAgICogYW5kIHRoZSBzZXR0ZXIgY2FsbHMgYF9zZXRQcm9wZXJ0eWAsIHdoaWNoIHVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICogZm9yIHRoZSBwcm9wZXJ0eSBhbmQgZW5xdWV1ZXMgYSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiBhIHByb3RvdHlwZSBvciBhbiBpbnN0YW5jZS4gIENhbGxpbmdcbiAgICAgICAgICogdGhpcyBtZXRob2QgbWF5IG92ZXJ3cml0ZSBhIHByb3BlcnR5IHZhbHVlIHRoYXQgYWxyZWFkeSBleGlzdHMgb25cbiAgICAgICAgICogdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBieSBjcmVhdGluZyB0aGUgYWNjZXNzb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZWFkT25seSBXaGVuIHRydWUsIG5vIHNldHRlciBpcyBjcmVhdGVkOyB0aGVcbiAgICAgICAgICogICBwcm90ZWN0ZWQgYF9zZXRQcm9wZXJ0eWAgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHRvIHNldCB0aGUgcHJvcGVydHlcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KSB7XG4gICAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlUb0F0dHJpYnV0ZU1hcChwcm9wZXJ0eSk7XG4gICAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdfX2RhdGFIYXNBY2Nlc3NvcicpKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2RlZmluZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyB0aGUgZ2l2ZW4gYHByb3BlcnR5YCB0byBhIG1hcCBtYXRjaGluZyBhdHRyaWJ1dGUgbmFtZXNcbiAgICAgICAgICogdG8gcHJvcGVydHkgbmFtZXMsIHVzaW5nIGBhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHlgLiBUaGlzIG1hcCBpc1xuICAgICAgICAgKiB1c2VkIHdoZW4gZGVzZXJpYWxpemluZyBhdHRyaWJ1dGUgdmFsdWVzIHRvIHByb3BlcnRpZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgKi9cbiAgICAgICAgX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ19fZGF0YUF0dHJpYnV0ZXMnKSkge1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0aGlzLl9fZGF0YUF0dHJpYnV0ZXNbcHJvcGVydHldKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5jb25zdHJ1Y3Rvci5hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzW2F0dHJdID0gcHJvcGVydHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgYSBwcm9wZXJ0eSBhY2Nlc3NvciBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZFxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eSwge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgICAgICAgICAgIC8qKiBAdGhpcyB7UHJvcGVydGllc0NoYW5nZWR9ICovXG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqIEB0aGlzIHtQcm9wZXJ0aWVzQ2hhbmdlZH0gKi9cbiAgICAgICAgICAgIHNldDogcmVhZE9ubHkgPyBmdW5jdGlvbiAoKSB7fSA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLl9fZGF0YVJlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fX2RhdGEgPSB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX19zZXJpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTGlmZWN5Y2xlIGNhbGxiYWNrIGNhbGxlZCB3aGVuIHByb3BlcnRpZXMgYXJlIGVuYWJsZWQgdmlhXG4gICAgICAgICAqIGBfZW5hYmxlUHJvcGVydGllc2AuXG4gICAgICAgICAqXG4gICAgICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGltcGxlbWVudCBiZWhhdmlvciB0aGF0IGlzXG4gICAgICAgICAqIGRlcGVuZGVudCBvbiB0aGUgZWxlbWVudCBoYXZpbmcgaXRzIHByb3BlcnR5IGRhdGEgaW5pdGlhbGl6ZWQsIGUuZy5cbiAgICAgICAgICogZnJvbSBkZWZhdWx0cyAoaW5pdGlhbGl6ZWQgZnJvbSBgY29uc3RydWN0b3JgLCBgX2luaXRpYWxpemVQcm9wZXJ0aWVzYCksXG4gICAgICAgICAqIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLCBvciB2YWx1ZXMgcHJvcGFnYXRlZCBmcm9tIGhvc3QgZS5nLiB2aWFcbiAgICAgICAgICogYmluZGluZ3MuICBgc3VwZXIucmVhZHkoKWAgbXVzdCBiZSBjYWxsZWQgdG8gZW5zdXJlIHRoZSBkYXRhIHN5c3RlbVxuICAgICAgICAgKiBiZWNvbWVzIGVuYWJsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHJlYWR5KCkge1xuICAgICAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlIHBvaW50IGZvciBwZXJmb3JtaW5nIGFueSBzZXR1cCB3b3JrIHByaW9yXG4gICAgICAgICAqIHRvIGluaXRpYWxpemluZyB0aGUgcHJvcGVydHkgYWNjZXNzb3Igc3lzdGVtLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgLy8gQ2FwdHVyZSBpbnN0YW5jZSBwcm9wZXJ0aWVzOyB0aGVzZSB3aWxsIGJlIHNldCBpbnRvIGFjY2Vzc29yc1xuICAgICAgICAgIC8vIGR1cmluZyBmaXJzdCBmbHVzaC4gRG9uJ3Qgc2V0IHRoZW0gaGVyZSwgc2luY2Ugd2Ugd2FudFxuICAgICAgICAgIC8vIHRoZXNlIHRvIG92ZXJ3cml0ZSBkZWZhdWx0cy9jb25zdHJ1Y3RvciBhc3NpZ25tZW50c1xuICAgICAgICAgIGZvciAobGV0IHAgaW4gdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzID0gdGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzIHx8IHt9O1xuICAgICAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHNbcF0gPSB0aGlzW3BdO1xuICAgICAgICAgICAgICBkZWxldGUgdGhpc1twXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIGF0IHJlYWR5IHRpbWUgd2l0aCBiYWcgb2YgaW5zdGFuY2UgcHJvcGVydGllcyB0aGF0IG92ZXJ3cm90ZVxuICAgICAgICAgKiBhY2Nlc3NvcnMgd2hlbiB0aGUgZWxlbWVudCB1cGdyYWRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgICAgICogc2V0dGVyIGF0IHJlYWR5IHRpbWUuICBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBhbiBvdmVycmlkZVxuICAgICAgICAgKiBwb2ludCBmb3IgY3VzdG9taXppbmcgb3IgcHJvdmlkaW5nIG1vcmUgZWZmaWNpZW50IGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIHByb3BlcnR5IHZhbHVlcyB0aGF0IHdlcmUgb3ZlcndyaXR0ZW5cbiAgICAgICAgICogICB3aGVuIGNyZWF0aW5nIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBhIHByb3BlcnR5ICh2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgKVxuICAgICAgICAgKiBhbmQgZW5xdWV1ZXMgYSBgX3Byb2VwcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gICAgICAgICAqIEByZXR1cm4geyp9IFZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHlcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX2dldFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBhIHByb3BlcnR5LCByZWNvcmRzIHRoZSBwcmV2aW91cyB2YWx1ZSxcbiAgICAgICAgICogYW5kIGFkZHMgaXQgdG8gdGhlIHNldCBvZiBcInBlbmRpbmcgY2hhbmdlc1wiIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLiAgVGhpcyBtZXRob2QgZG9lcyBub3QgZW5xdWV1ZSB0aGVcbiAgICAgICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBleHQgTm90IHVzZWQgaGVyZTsgYWZmb3JkYW5jZSBmb3IgY2xvc3VyZVxuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIGV4dCkge1xuICAgICAgICAgIGxldCBvbGQgPSB0aGlzLl9fZGF0YVtwcm9wZXJ0eV07XG4gICAgICAgICAgbGV0IGNoYW5nZWQgPSB0aGlzLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCk7XG4gICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHt9O1xuICAgICAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgICAgIGlmICh0aGlzLl9fZGF0YU9sZCAmJiAhKHByb3BlcnR5IGluIHRoaXMuX19kYXRhT2xkKSkge1xuICAgICAgICAgICAgICB0aGlzLl9fZGF0YU9sZFtwcm9wZXJ0eV0gPSBvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXJrcyB0aGUgcHJvcGVydGllcyBhcyBpbnZhbGlkLCBhbmQgZW5xdWV1ZXMgYW4gYXN5bmNcbiAgICAgICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF9pbnZhbGlkYXRlUHJvcGVydGllcygpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX19kYXRhSW52YWxpZCAmJiB0aGlzLl9fZGF0YVJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgbWljcm90YXNrLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9fZGF0YUludmFsaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGwgdG8gZW5hYmxlIHByb3BlcnR5IGFjY2Vzc29yIHByb2Nlc3NpbmcuIEJlZm9yZSB0aGlzIG1ldGhvZCBpc1xuICAgICAgICAgKiBjYWxsZWQgYWNjZXNzb3IgdmFsdWVzIHdpbGwgYmUgc2V0IGJ1dCBzaWRlIGVmZmVjdHMgYXJlXG4gICAgICAgICAqIHF1ZXVlZC4gV2hlbiBjYWxsZWQsIGFueSBwZW5kaW5nIHNpZGUgZWZmZWN0cyBvY2N1ciBpbW1lZGlhdGVseS5cbiAgICAgICAgICogRm9yIGVsZW1lbnRzLCBnZW5lcmFsbHkgYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBhIG5vcm1hbCBzcG90IHRvIGRvIHNvLlxuICAgICAgICAgKiBJdCBpcyBzYWZlIHRvIGNhbGwgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgYXMgaXQgb25seSB0dXJucyBvblxuICAgICAgICAgKiBwcm9wZXJ0eSBhY2Nlc3NvcnMgb25jZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX2VuYWJsZVByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXModGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzKTtcbiAgICAgICAgICAgICAgdGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVhZHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbHMgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrIHdpdGggdGhlIGN1cnJlbnQgc2V0IG9mXG4gICAgICAgICAqIHBlbmRpbmcgY2hhbmdlcyAoYW5kIG9sZCB2YWx1ZXMgcmVjb3JkZWQgd2hlbiBwZW5kaW5nIGNoYW5nZXMgd2VyZVxuICAgICAgICAgKiBzZXQpLCBhbmQgcmVzZXRzIHRoZSBwZW5kaW5nIHNldCBvZiBjaGFuZ2VzLiBHZW5lcmFsbHksIHRoaXMgbWV0aG9kXG4gICAgICAgICAqIHNob3VsZCBub3QgYmUgY2FsbGVkIGluIHVzZXIgY29kZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX2ZsdXNoUHJvcGVydGllcygpIHtcbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX19kYXRhO1xuICAgICAgICAgIGNvbnN0IGNoYW5nZWRQcm9wcyA9IHRoaXMuX19kYXRhUGVuZGluZztcbiAgICAgICAgICBjb25zdCBvbGQgPSB0aGlzLl9fZGF0YU9sZDtcbiAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydGllc0NoYW5nZShwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcHJvcGVydGllc0NoYW5nZWQocHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIGluIGBfZmx1c2hQcm9wZXJ0aWVzYCB0byBkZXRlcm1pbmUgaWYgYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgICAgICogc2hvdWxkIGJlIGNhbGxlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyB0cnVlIGlmXG4gICAgICAgICAqIHByb3BlcnRpZXMgYXJlIHBlbmRpbmcuIE92ZXJyaWRlIHRvIGN1c3RvbWl6ZSB3aGVuXG4gICAgICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGlzIGNhbGxlZC5cbiAgICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAgICAgKiBAcGFyYW0geyFPYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgcHJvcGVydGllcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0XG4gICAgICAgICAqICAgY2FsbCB0byBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAgICAgKiBAcGFyYW0geyFPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgICAgICogICBpbiBgY2hhbmdlZFByb3BzYFxuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGNoYW5nZWRQcm9wcyBpcyB0cnV0aHlcbiAgICAgICAgICovXG4gICAgICAgIF9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgICAgcmV0dXJuIEJvb2xlYW4oY2hhbmdlZFByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiBhbnkgcHJvcGVydGllcyB3aXRoIGFjY2Vzc29ycyBjcmVhdGVkIHZpYVxuICAgICAgICAgKiBgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3JgIGhhdmUgYmVlbiBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7IU9iamVjdH0gY3VycmVudFByb3BzIEJhZyBvZiBhbGwgY3VycmVudCBhY2Nlc3NvciB2YWx1ZXNcbiAgICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgICAgICogQHBhcmFtIHshT2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBlYWNoIHByb3BlcnR5XG4gICAgICAgICAqICAgaW4gYGNoYW5nZWRQcm9wc2BcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3Byb3BlcnRpZXNDaGFuZ2VkKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWV0aG9kIGNhbGxlZCB0byBkZXRlcm1pbmUgd2hldGhlciBhIHByb3BlcnR5IHZhbHVlIHNob3VsZCBiZVxuICAgICAgICAgKiBjb25zaWRlcmVkIGFzIGEgY2hhbmdlIGFuZCBjYXVzZSB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2tcbiAgICAgICAgICogdG8gYmUgZW5xdWV1ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHJldHVybnMgYHRydWVgIGlmIGEgc3RyaWN0IGVxdWFsaXR5XG4gICAgICAgICAqIGNoZWNrIGZhaWxzLiBUaGUgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGZhbHNlIGZvciBgTmFOYC5cbiAgICAgICAgICpcbiAgICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gZS5nLiBwcm92aWRlIHN0cmljdGVyIGNoZWNraW5nIGZvclxuICAgICAgICAgKiBPYmplY3RzL0FycmF5cyB3aGVuIHVzaW5nIGltbXV0YWJsZSBwYXR0ZXJucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBjaGFuZ2VcbiAgICAgICAgICogICBhbmQgZW5xdWV1ZSBhIGBfcHJvZXBydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAvLyBTdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICAgICAgICAgIChvbGQgIT09IHZhbHVlICYmXG4gICAgICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyAob2xkPT1OYU4sIHZhbHVlPT1OYU4pIGFsd2F5cyByZXR1cm5zIGZhbHNlXG4gICAgICAgICAgICAgIChvbGQgPT09IG9sZCB8fCB2YWx1ZSA9PT0gdmFsdWUpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50cyBuYXRpdmUgQ3VzdG9tIEVsZW1lbnRzIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvXG4gICAgICAgICAqIHNldCBhbiBhdHRyaWJ1dGUgdmFsdWUgdG8gYSBwcm9wZXJ0eSB2aWEgYF9hdHRyaWJ1dGVUb1Byb3BlcnR5YC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUgdGhhdCBjaGFuZ2VkXG4gICAgICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBOZXcgYXR0cmlidXRlIHZhbHVlXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IFN1cGVyIG1heSBvciBtYXkgbm90IGltcGxlbWVudCB0aGUgY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICBzdXBlci5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2VyaWFsaXplcyBhbiBhdHRyaWJ1dGUgdG8gaXRzIGFzc29jaWF0ZWQgcHJvcGVydHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGNhbGxzIHRoZSBgX2Rlc2VyaWFsaXplVmFsdWVgIG1ldGhvZCB0byBjb252ZXJ0IHRoZSBzdHJpbmcgdG9cbiAgICAgICAgICogYSB0eXBlZCB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBOYW1lIG9mIGF0dHJpYnV0ZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAgICAgKiBAcGFyYW0geyo9fSB0eXBlIHR5cGUgdG8gZGVzZXJpYWxpemUgdG8sIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZVxuICAgICAgICAgKiByZXR1cm5lZCBmcm9tIGB0eXBlRm9yUHJvcGVydHlgXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBfYXR0cmlidXRlVG9Qcm9wZXJ0eShhdHRyaWJ1dGUsIHZhbHVlLCB0eXBlKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9fc2VyaWFsaXppbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX19kYXRhQXR0cmlidXRlcztcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gbWFwICYmIG1hcFthdHRyaWJ1dGVdIHx8IGF0dHJpYnV0ZTtcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSB8fFxuICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnR5cGVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXJpYWxpemVzIGEgcHJvcGVydHkgdG8gaXRzIGFzc29jaWF0ZWQgYXR0cmlidXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gQ2xvc3VyZSBjYW4ndCBmaWd1cmUgb3V0IGB0aGlzYCBpcyBhbiBlbGVtZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZSB0byByZWZsZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byByZWZsZWN0IHRvLlxuICAgICAgICAgKiBAcGFyYW0geyo9fSB2YWx1ZSBQcm9wZXJ0eSB2YWx1ZSB0byByZWZlY3QuXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBfcHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuX19zZXJpYWxpemluZyA9IHRydWU7XG4gICAgICAgICAgdmFsdWUgPSAoYXJndW1lbnRzLmxlbmd0aCA8IDMpID8gdGhpc1twcm9wZXJ0eV0gOiB2YWx1ZTtcbiAgICAgICAgICB0aGlzLl92YWx1ZVRvTm9kZUF0dHJpYnV0ZSgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyksIHZhbHVlLFxuICAgICAgICAgICAgYXR0cmlidXRlIHx8IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICAgICAgdGhpcy5fX3NlcmlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyBhIHR5cGVkIHZhbHVlIHRvIGFuIEhUTUwgYXR0cmlidXRlIG9uIGEgbm9kZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2QgY2FsbHMgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCB0byBjb252ZXJ0IHRoZSB0eXBlZFxuICAgICAgICAgKiB2YWx1ZSB0byBhIHN0cmluZy4gIElmIHRoZSBgX3NlcmlhbGl6ZVZhbHVlYCBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgICAgICogdGhlIGF0dHJpYnV0ZSB3aWxsIGJlIHJlbW92ZWQgKHRoaXMgaXMgdGhlIGRlZmF1bHQgZm9yIGJvb2xlYW5cbiAgICAgICAgICogdHlwZSBgZmFsc2VgKS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gc2V0IGF0dHJpYnV0ZSB0by5cbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgQXR0cmlidXRlIG5hbWUgdG8gc2VyaWFsaXplIHRvLlxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKG5vZGUsIHZhbHVlLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICBjb25zdCBzdHIgPSB0aGlzLl9zZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHN0cik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIGEgdHlwZWQgSmF2YVNjcmlwdCB2YWx1ZSB0byBhIHN0cmluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gc2V0dGluZyBKUyBwcm9wZXJ0eSB2YWx1ZXMgdG9cbiAgICAgICAgICogSFRNTCBhdHRyaWJ1dGVzLiAgVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHByb3ZpZGVcbiAgICAgICAgICogc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIHR5cGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFByb3BlcnR5IHZhbHVlIHRvIHNlcmlhbGl6ZS5cbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBTdHJpbmcgc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZFxuICAgICAgICAgKiBwcm9wZXJ0eSAgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBfc2VyaWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/ICcnIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHJlYWRpbmcgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzIHRvXG4gICAgICAgICAqIEpTIHByb3BlcnRpZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAgICAgKiBkZXNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSBgdHlwZWBzLiBUeXBlcyBmb3IgYEJvb2xlYW5gLCBgU3RyaW5nYCxcbiAgICAgICAgICogYW5kIGBOdW1iZXJgIGNvbnZlcnQgYXR0cmlidXRlcyB0byB0aGUgZXhwZWN0ZWQgdHlwZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gZGVzZXJpYWxpemUuXG4gICAgICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvLlxuICAgICAgICAgKiBAcmV0dXJuIHsqfSBUeXBlZCB2YWx1ZSBkZXNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWQgc3RyaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAhPT0gbnVsbCk7XG4gICAgICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb3BlcnRpZXNDaGFuZ2VkO1xuICAgIH0pO1xuXG5cbiAgfSkoKTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9ib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9taXhpbi5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvY2FzZS1tYXAuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cInByb3BlcnRpZXMtY2hhbmdlZC5odG1sXCI+XG5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGxldCBjYXNlTWFwID0gUG9seW1lci5DYXNlTWFwO1xuXG4gIC8vIFNhdmUgbWFwIG9mIG5hdGl2ZSBwcm9wZXJ0aWVzOyB0aGlzIGZvcm1zIGEgYmxhY2tsaXN0IG9yIHByb3BlcnRpZXNcbiAgLy8gdGhhdCB3b24ndCBoYXZlIHRoZWlyIHZhbHVlcyBcInNhdmVkXCIgYnkgYHNhdmVBY2Nlc3NvclZhbHVlYCwgc2luY2VcbiAgLy8gcmVhZGluZyBmcm9tIGFuIEhUTUxFbGVtZW50IGFjY2Vzc29yIGZyb20gdGhlIGNvbnRleHQgb2YgYSBwcm90b3R5cGUgdGhyb3dzXG4gIGNvbnN0IG5hdGl2ZVByb3BlcnRpZXMgPSB7fTtcbiAgbGV0IHByb3RvID0gSFRNTEVsZW1lbnQucHJvdG90eXBlO1xuICB3aGlsZSAocHJvdG8pIHtcbiAgICBsZXQgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90byk7XG4gICAgZm9yIChsZXQgaT0wOyBpPHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuYXRpdmVQcm9wZXJ0aWVzW3Byb3BzW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHNhdmUgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgdGhhdCB3aWxsIGJlIG92ZXJyaWRkZW4gd2l0aFxuICAgKiBhbiBhY2Nlc3Nvci4gSWYgdGhlIGBtb2RlbGAgaXMgYSBwcm90b3R5cGUsIHRoZSB2YWx1ZXMgd2lsbCBiZSBzYXZlZFxuICAgKiBpbiBgX19kYXRhUHJvdG9gLCBhbmQgaXQncyB1cCB0byB0aGUgdXNlciAob3IgZG93bnN0cmVhbSBtaXhpbikgdG9cbiAgICogZGVjaWRlIGhvdy93aGVuIHRvIHNldCB0aGVzZSB2YWx1ZXMgYmFjayBpbnRvIHRoZSBhY2Nlc3NvcnMuXG4gICAqIElmIGBtb2RlbGAgaXMgYWxyZWFkeSBhbiBpbnN0YW5jZSAoaXQgaGFzIGEgYF9fZGF0YWAgcHJvcGVydHkpLCB0aGVuXG4gICAqIHRoZSB2YWx1ZSB3aWxsIGJlIHNldCBhcyBhIHBlbmRpbmcgcHJvcGVydHksIG1lYW5pbmcgdGhlIHVzZXIgc2hvdWxkXG4gICAqIGNhbGwgYF9pbnZhbGlkYXRlUHJvcGVydGllc2Agb3IgYF9mbHVzaFByb3BlcnRpZXNgIHRvIHRha2UgZWZmZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHNhdmVBY2Nlc3NvclZhbHVlKG1vZGVsLCBwcm9wZXJ0eSkge1xuICAgIC8vIERvbid0IHJlYWQvc3RvcmUgdmFsdWUgZm9yIGFueSBuYXRpdmUgcHJvcGVydGllcyBzaW5jZSB0aGV5IGNvdWxkIHRocm93XG4gICAgaWYgKCFuYXRpdmVQcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgICAgbGV0IHZhbHVlID0gbW9kZWxbcHJvcGVydHldO1xuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG1vZGVsLl9fZGF0YSkge1xuICAgICAgICAgIC8vIEFkZGluZyBhY2Nlc3NvciB0byBpbnN0YW5jZTsgdXBkYXRlIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgIC8vIEl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gY2FsbCBfZmx1c2hQcm9wZXJ0aWVzXG4gICAgICAgICAgbW9kZWwuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFkZGluZyBhY2Nlc3NvciB0byBwcm90bzsgc2F2ZSBwcm90bydzIHZhbHVlIGZvciBpbnN0YW5jZS10aW1lIHVzZVxuICAgICAgICAgIGlmICghbW9kZWwuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgICAgIG1vZGVsLl9fZGF0YVByb3RvID0ge307XG4gICAgICAgICAgfSBlbHNlIGlmICghbW9kZWwuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19kYXRhUHJvdG8nLCBtb2RlbCkpKSB7XG4gICAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90byA9IE9iamVjdC5jcmVhdGUobW9kZWwuX19kYXRhUHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90b1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgbWV0YS1wcm9ncmFtbWluZyBmb3IgY3JlYXRpbmcgb25lXG4gICAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICAgKiAoYmF0Y2hlZCkgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAqXG4gICAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluOlxuICAgKiBcbiAgICogLSAgIERlY2xhcmUgYXR0cmlidXRlcyB0byBvYnNlcnZlIHZpYSB0aGUgc3RhbmRhcmQgYHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKClgLiBVc2VcbiAgICogICAgIGBkYXNoLWNhc2VgIGF0dHJpYnV0ZSBuYW1lcyB0byByZXByZXNlbnQgYGNhbWVsQ2FzZWAgcHJvcGVydHkgbmFtZXMuIFxuICAgKiAtICAgSW1wbGVtZW50IHRoZSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjayBvbiB0aGUgY2xhc3MuXG4gICAqIC0gICBDYWxsIGBNeUNsYXNzLmNyZWF0ZVByb3BlcnRpZXNGb3JBdHRyaWJ1dGVzKClgICoqb25jZSoqIG9uIHRoZSBjbGFzcyB0byBnZW5lcmF0ZSBcbiAgICogICAgIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgZWFjaCBvYnNlcnZlZCBhdHRyaWJ1dGUuIFRoaXMgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBmaXJzdCBcbiAgICogICAgIGluc3RhbmNlIGlzIGNyZWF0ZWQsIGZvciBleGFtcGxlLCBieSBjYWxsaW5nIGl0IGJlZm9yZSBjYWxsaW5nIGBjdXN0b21FbGVtZW50cy5kZWZpbmVgLlxuICAgKiAgICAgSXQgY2FuIGFsc28gYmUgY2FsbGVkIGxhemlseSBmcm9tIHRoZSBlbGVtZW50J3MgYGNvbnN0cnVjdG9yYCwgYXMgbG9uZyBhcyBpdCdzIGd1YXJkZWQgc29cbiAgICogICAgIHRoYXQgdGhlIGNhbGwgaXMgb25seSBtYWRlIG9uY2UsIHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIGlzIGNyZWF0ZWQuXG4gICAqIC0gICBDYWxsIGB0aGlzLl9lbmFibGVQcm9wZXJ0aWVzKClgIGluIHRoZSBlbGVtZW50J3MgYGNvbm5lY3RlZENhbGxiYWNrYCB0byBlbmFibGUgXG4gICAqICAgICB0aGUgYWNjZXNzb3JzLlxuICAgKlxuICAgKiBBbnkgYG9ic2VydmVkQXR0cmlidXRlc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGJlXG4gICAqIGRlc2VyaWFsaXplZCB2aWEgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgYW5kIHNldCB0byB0aGUgYXNzb2NpYXRlZFxuICAgKiBwcm9wZXJ0eSB1c2luZyBgZGFzaC1jYXNlYC10by1gY2FtZWxDYXNlYCBjb252ZW50aW9uLlxuICAgKlxuICAgKiBAbWl4aW5GdW5jdGlvblxuICAgKiBAcG9seW1lclxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuUHJvcGVydGllc0NoYW5nZWRcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiBmb3IgcmVhY3RpbmcgdG8gcHJvcGVydHkgY2hhbmdlcyBmcm9tXG4gICAqICAgZ2VuZXJhdGVkIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAgICovXG4gIFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnMgPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyB7c3VwZXJDbGFzc31cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICAgKiBAdW5yZXN0cmljdGVkXG4gICAgICovXG4gICAgIGNvbnN0IGJhc2UgPSBQb2x5bWVyLlByb3BlcnRpZXNDaGFuZ2VkKHN1cGVyQ2xhc3MpO1xuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5QWNjZXNzb3JzfVxuICAgICAqIEBleHRlbmRzIHtiYXNlfVxuICAgICAqIEB1bnJlc3RyaWN0ZWRcbiAgICAgKi9cbiAgICBjbGFzcyBQcm9wZXJ0eUFjY2Vzc29ycyBleHRlbmRzIGJhc2Uge1xuXG4gICAgICAvKipcbiAgICAgICAqIEdlbmVyYXRlcyBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIGFsbCBhdHRyaWJ1dGVzIGluIHRoZSBzdGFuZGFyZFxuICAgICAgICogc3RhdGljIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqIEF0dHJpYnV0ZSBuYW1lcyBhcmUgbWFwcGVkIHRvIHByb3BlcnR5IG5hbWVzIHVzaW5nIHRoZSBgZGFzaC1jYXNlYCB0b1xuICAgICAgICogYGNhbWVsQ2FzZWAgY29udmVudGlvblxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzRm9yQXR0cmlidXRlcygpIHtcbiAgICAgICAgbGV0IGEkID0gdGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXM7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGEkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IoY2FzZU1hcC5kYXNoVG9DYW1lbENhc2UoYSRbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gYXR0cmlidXRlIG5hbWUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKiBCeSBkZWZhdWx0LCBjb252ZXJ0cyBjYW1lbCB0byBkYXNoIGNhc2UsIGUuZy4gYGZvb0JhcmAgdG8gYGZvby1iYXJgLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gQXR0cmlidXRlIG5hbWUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICAgKlxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBjYXNlTWFwLmNhbWVsVG9EYXNoQ2FzZShwcm9wZXJ0eSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIFByb3BlcnRpZXNDaGFuZ2VkIGltcGxlbWVudGF0aW9uIHRvIGluaXRpYWxpemUgdmFsdWVzIGZvclxuICAgICAgICogYWNjZXNzb3JzIGNyZWF0ZWQgZm9yIHZhbHVlcyB0aGF0IGFscmVhZHkgZXhpc3RlZCBvbiB0aGUgZWxlbWVudFxuICAgICAgICogcHJvdG90eXBlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgICB0aGlzLl9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHRoaXMuX19kYXRhUHJvdG8pO1xuICAgICAgICAgIHRoaXMuX19kYXRhUHJvdG8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxlZCBhdCBpbnN0YW5jZSB0aW1lIHdpdGggYmFnIG9mIHByb3BlcnRpZXMgdGhhdCB3ZXJlIG92ZXJ3cml0dGVuXG4gICAgICAgKiBieSBhY2Nlc3NvcnMgb24gdGhlIHByb3RvdHlwZSB3aGVuIGFjY2Vzc29ycyB3ZXJlIGNyZWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgICAqIHNldHRlciBhdCBpbnN0YW5jZSB0aW1lLiAgVGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgYXMgYW4gb3ZlcnJpZGVcbiAgICAgICAqIHBvaW50IGZvciBjdXN0b21pemluZyBvciBwcm92aWRpbmcgbW9yZSBlZmZpY2llbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBwcm9wZXJ0eSB2YWx1ZXMgdGhhdCB3ZXJlIG92ZXJ3cml0dGVuXG4gICAgICAgKiAgIHdoZW4gY3JlYXRpbmcgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHAsIHByb3BzW3BdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEVuc3VyZXMgdGhlIGVsZW1lbnQgaGFzIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIElmIGl0IGRvZXMgbm90LFxuICAgICAgICogYXNzaWducyB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhlIGF0dHJpYnV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gQ2xvc3VyZSBjYW4ndCBmaWd1cmUgb3V0IGB0aGlzYCBpcyBpbmZhY3QgYW4gZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZW5zdXJlIGlzIHNldC5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX2Vuc3VyZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVsID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpO1xuICAgICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoZWwsIHZhbHVlLCBhdHRyaWJ1dGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIFByb3BlcnRpZXNDaGFuZ2VkIGltcGxlbWVudGlvbiB0byBzZXJpYWxpemUgb2JqZWN0cyBhcyBKU09OLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBTdHJpbmcgc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgICAqL1xuICAgICAgX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLl9zZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IFBvbHltZXIgd2hlbiByZWFkaW5nIEhUTUwgYXR0cmlidXRlIHZhbHVlcyB0b1xuICAgICAgICogSlMgcHJvcGVydGllcy4gIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCBvbiBQb2x5bWVyIGVsZW1lbnRcbiAgICAgICAqIHByb3RvdHlwZXMgdG8gcHJvdmlkZSBkZXNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSBgdHlwZWBzLiAgTm90ZSxcbiAgICAgICAqIHRoZSBgdHlwZWAgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBgdHlwZWAgZmllbGQgcHJvdmlkZWQgaW4gdGhlXG4gICAgICAgKiBgcHJvcGVydGllc2AgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIGFuZCBpc1xuICAgICAgICogYnkgY29udmVudGlvbiB0aGUgY29uc3RydWN0b3IgZm9yIHRoZSB0eXBlIHRvIGRlc2VyaWFsaXplLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvLlxuICAgICAgICogQHJldHVybiB7Kn0gVHlwZWQgdmFsdWUgZGVzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgICAqL1xuICAgICAgX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IG91dFZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG91dFZhbHVlID0gSlNPTi5wYXJzZSgvKiogQHR5cGUge3N0cmluZ30gKi8odmFsdWUpKTtcbiAgICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgICAvLyBhbGxvdyBub24tSlNPTiBsaXRlcmFscyBsaWtlIFN0cmluZ3MgYW5kIE51bWJlcnNcbiAgICAgICAgICAgICAgb3V0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBvdXRWYWx1ZSA9IEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbHVlKSk7XG4gICAgICAgICAgICB9IGNhdGNoKHgpIHtcbiAgICAgICAgICAgICAgb3V0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFBvbHltZXI6OkF0dHJpYnV0ZXM6IGNvdWxkbid0IGRlY29kZSBBcnJheSBhcyBKU09OOiAke3ZhbHVlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBEYXRlOlxuICAgICAgICAgICAgb3V0VmFsdWUgPSBpc05hTih2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG91dFZhbHVlID0gbmV3IERhdGUob3V0VmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG91dFZhbHVlID0gc3VwZXIuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dFZhbHVlO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRhdGlvbiB0byBzYXZlIGV4aXN0aW5nIHByb3RvdHlwZVxuICAgICAgICogcHJvcGVydHkgdmFsdWUgc28gdGhhdCBpdCBjYW4gYmUgcmVzZXQuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYWRPbmx5IFdoZW4gdHJ1ZSwgbm8gc2V0dGVyIGlzIGNyZWF0ZWRcbiAgICAgICAqXG4gICAgICAgKiBXaGVuIGNhbGxpbmcgb24gYSBwcm90b3R5cGUsIGFueSBvdmVyd3JpdHRlbiB2YWx1ZXMgYXJlIHNhdmVkIGluXG4gICAgICAgKiBgX19kYXRhUHJvdG9gLCBhbmQgaXQgaXMgdXAgdG8gdGhlIHN1YmNsYXNzZXIgdG8gZGVjaWRlIGhvdy93aGVuXG4gICAgICAgKiB0byBzZXQgdGhvc2UgcHJvcGVydGllcyBiYWNrIGludG8gdGhlIGFjY2Vzc29yLiAgV2hlbiBjYWxsaW5nIG9uIGFuXG4gICAgICAgKiBpbnN0YW5jZSwgdGhlIG92ZXJ3cml0dGVuIHZhbHVlIGlzIHNldCB2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgLFxuICAgICAgICogYW5kIHRoZSB1c2VyIHNob3VsZCBjYWxsIGBfaW52YWxpZGF0ZVByb3BlcnRpZXNgIG9yIGBfZmx1c2hQcm9wZXJ0aWVzYFxuICAgICAgICogZm9yIHRoZSB2YWx1ZXMgdG8gdGFrZSBlZmZlY3QuXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgICAgc2F2ZUFjY2Vzc29yVmFsdWUodGhpcywgcHJvcGVydHkpO1xuICAgICAgICBzdXBlci5fZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGxpYnJhcnkgY3JlYXRlZCBhbiBhY2Nlc3NvciBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGFjY2Vzc29yIHdhcyBjcmVhdGVkXG4gICAgICAgKi9cbiAgICAgIF9oYXNBY2Nlc3Nvcihwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFIYXNBY2Nlc3NvciAmJiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yW3Byb3BlcnR5XTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBoYXMgYSBwZW5kaW5nIGNoYW5nZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHByb3BlcnR5IGhhcyBhIHBlbmRpbmcgY2hhbmdlXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIF9pc1Byb3BlcnR5UGVuZGluZyhwcm9wKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuX19kYXRhUGVuZGluZyAmJiAocHJvcCBpbiB0aGlzLl9fZGF0YVBlbmRpbmcpKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBQcm9wZXJ0eUFjY2Vzc29ycztcblxuICB9KTtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvb3QuaHRtbFwiPlxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IGNhc2VNYXAgPSB7fTtcbiAgY29uc3QgREFTSF9UT19DQU1FTCA9IC8tW2Etel0vZztcbiAgY29uc3QgQ0FNRUxfVE9fREFTSCA9IC8oW0EtWl0pL2c7XG5cbiAgLyoqXG4gICAqIE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgY29udmVydGluZyBiZXR3ZWVuIFwiZGFzaC1jYXNlXCIgYW5kIFwiY2FtZWxDYXNlXCJcbiAgICogaWRlbnRpZmllcnMuXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgTW9kdWxlIHRoYXQgcHJvdmlkZXMgdXRpbGl0aWVzIGZvciBjb252ZXJ0aW5nIGJldHdlZW4gXCJkYXNoLWNhc2VcIlxuICAgKiAgIGFuZCBcImNhbWVsQ2FzZVwiLlxuICAgKi9cbiAgY29uc3QgQ2FzZU1hcCA9IHtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIFwiZGFzaC1jYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vLWJhci1iYXpgKSB0byBcImNhbWVsQ2FzZVwiXG4gICAgICogKGUuZy4gYGZvb0JhckJhemApLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuQ2FzZU1hcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXNoIERhc2gtY2FzZSBpZGVudGlmaWVyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBDYW1lbC1jYXNlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgZGFzaFRvQ2FtZWxDYXNlKGRhc2gpIHtcbiAgICAgIHJldHVybiBjYXNlTWFwW2Rhc2hdIHx8IChcbiAgICAgICAgY2FzZU1hcFtkYXNoXSA9IGRhc2guaW5kZXhPZignLScpIDwgMCA/IGRhc2ggOiBkYXNoLnJlcGxhY2UoREFTSF9UT19DQU1FTCxcbiAgICAgICAgICAobSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIFwiY2FtZWxDYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vQmFyQmF6YCkgdG8gXCJkYXNoLWNhc2VcIlxuICAgICAqIChlLmcuIGBmb28tYmFyLWJhemApLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuQ2FzZU1hcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYW1lbCBDYW1lbC1jYXNlIGlkZW50aWZpZXJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IERhc2gtY2FzZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaWRlbnRpZmllclxuICAgICAqL1xuICAgIGNhbWVsVG9EYXNoQ2FzZShjYW1lbCkge1xuICAgICAgcmV0dXJuIGNhc2VNYXBbY2FtZWxdIHx8IChcbiAgICAgICAgY2FzZU1hcFtjYW1lbF0gPSBjYW1lbC5yZXBsYWNlKENBTUVMX1RPX0RBU0gsICctJDEnKS50b0xvd2VyQ2FzZSgpXG4gICAgICApO1xuICAgIH1cblxuICB9O1xuXG4gIFBvbHltZXIuQ2FzZU1hcCA9IENhc2VNYXA7XG59KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwicmVzb2x2ZS11cmwuaHRtbFwiPlxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IE1PRFVMRV9TVFlMRV9MSU5LX1NFTEVDVE9SID0gJ2xpbmtbcmVsPWltcG9ydF1bdHlwZX49Y3NzXSc7XG4gIGNvbnN0IElOQ0xVREVfQVRUUiA9ICdpbmNsdWRlJztcbiAgY29uc3QgU0hBRFlfVU5TQ09QRURfQVRUUiA9ICdzaGFkeS11bnNjb3BlZCc7XG5cbiAgZnVuY3Rpb24gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKSB7XG4gICAgY29uc3QgLyoqIFBvbHltZXIuRG9tTW9kdWxlICovIFBvbHltZXJEb21Nb2R1bGUgPSBjdXN0b21FbGVtZW50cy5nZXQoJ2RvbS1tb2R1bGUnKTtcbiAgICBpZiAoIVBvbHltZXJEb21Nb2R1bGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gUG9seW1lckRvbU1vZHVsZS5pbXBvcnQobW9kdWxlSWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVGb3JJbXBvcnQoaW1wb3J0RG9jKSB7XG4gICAgLy8gTk9URTogcG9seWZpbGwgYWZmb3JkYW5jZS5cbiAgICAvLyB1bmRlciB0aGUgSFRNTEltcG9ydHMgcG9seWZpbGwsIHRoZXJlIHdpbGwgYmUgbm8gJ2JvZHknLFxuICAgIC8vIGJ1dCB0aGUgaW1wb3J0IHBzZXVkby1kb2MgY2FuIGJlIHVzZWQgZGlyZWN0bHkuXG4gICAgbGV0IGNvbnRhaW5lciA9IGltcG9ydERvYy5ib2R5ID8gaW1wb3J0RG9jLmJvZHkgOiBpbXBvcnREb2M7XG4gICAgY29uc3QgaW1wb3J0Q3NzID0gUG9seW1lci5SZXNvbHZlVXJsLnJlc29sdmVDc3MoY29udGFpbmVyLnRleHRDb250ZW50LFxuICAgICAgaW1wb3J0RG9jLmJhc2VVUkkpO1xuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IGltcG9ydENzcztcbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICAvKiogQHR5cGVkZWYge3thc3NldHBhdGg6IHN0cmluZ319ICovXG4gIGxldCB0ZW1wbGF0ZVdpdGhBc3NldFBhdGg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAvKipcbiAgICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBjb2xsZWN0aW9uIENTUyB0ZXh0IGZyb20gYDx0ZW1wbGF0ZXM+YCwgZXh0ZXJuYWxcbiAgICogc3R5bGVzaGVldHMsIGFuZCBgZG9tLW1vZHVsZWBzLlxuICAgKlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgY29sbGVjdGlvbiBDU1MgdGV4dCBmcm9tIHZhcmlvdXMgc291cmNlcy5cbiAgICovXG4gIGNvbnN0IFN0eWxlR2F0aGVyID0ge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyBpbiBhIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mIGBkb20tbW9kdWxlYHMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZHMgTGlzdCBvZiBkb20tbW9kdWxlIGlkJ3Mgd2l0aGluIHdoaWNoIHRvXG4gICAgICogc2VhcmNoIGZvciBjc3MuXG4gICAgICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIDxzdHlsZT4gZWxlbWVudHNcbiAgICAgKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gICAgICovXG4gICAgIHN0eWxlc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuICAgICAgY29uc3QgbW9kdWxlcyA9IG1vZHVsZUlkcy50cmltKCkuc3BsaXQoL1xccysvKTtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdHlsZXMucHVzaCguLi50aGlzLnN0eWxlc0Zyb21Nb2R1bGUobW9kdWxlc1tpXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC5cbiAgICAgKiBTdHlsZXMgaW4gYSBgZG9tLW1vZHVsZWAgY2FuIGNvbWUgZWl0aGVyIGZyb20gYDxzdHlsZT5gcyB3aXRoaW4gdGhlXG4gICAgICogZmlyc3QgYDx0ZW1wbGF0ZT5gLCBvciBlbHNlIGZyb20gb25lIG9yIG1vcmVcbiAgICAgKiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGUgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBkb20tbW9kdWxlIGlkIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICAgICAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIGNvbnRhaW5lZCBzdHlsZXMuXG4gICAgICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICAgICAqL1xuICAgIHN0eWxlc0Zyb21Nb2R1bGUobW9kdWxlSWQpIHtcbiAgICAgIGNvbnN0IG0gPSBpbXBvcnRNb2R1bGUobW9kdWxlSWQpO1xuXG4gICAgICBpZiAoIW0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBzdHlsZSBkYXRhIGluIG1vZHVsZSBuYW1lZCcsIG1vZHVsZUlkKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAobS5fc3R5bGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVzID0gW107XG4gICAgICAgIC8vIG1vZHVsZSBpbXBvcnRzOiA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+XG4gICAgICAgIHN0eWxlcy5wdXNoKC4uLnRoaXMuX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pKTtcbiAgICAgICAgLy8gaW5jbHVkZSBjc3MgZnJvbSB0aGUgZmlyc3QgdGVtcGxhdGUgaW4gdGhlIG1vZHVsZVxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IG0ucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcbiAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgc3R5bGVzLnB1c2goLi4udGhpcy5zdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsXG4gICAgICAgICAgICAvKiogQHR5cGUge3RlbXBsYXRlV2l0aEFzc2V0UGF0aH0gKi8obSkuYXNzZXRwYXRoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtLl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtLl9zdHlsZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGA8c3R5bGU+YCBlbGVtZW50cyB3aXRoaW4gYSBnaXZlbiB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlN0eWxlR2F0aGVyXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgYmFzZVVSSSBmb3Igc3R5bGUgY29udGVudFxuICAgICAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIHN0eWxlc1xuICAgICAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAgICAgKi9cbiAgICBzdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIGJhc2VVUkkpIHtcbiAgICAgIGlmICghdGVtcGxhdGUuX3N0eWxlcykge1xuICAgICAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICAgICAgLy8gaWYgZWxlbWVudCBpcyBhIHRlbXBsYXRlLCBnZXQgY29udGVudCBmcm9tIGl0cyAuY29udGVudFxuICAgICAgICBjb25zdCBlJCA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgZSQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgZSA9IGUkW2ldO1xuICAgICAgICAgIC8vIHN1cHBvcnQgc3R5bGUgc2hhcmluZyBieSBhbGxvd2luZyBzdHlsZXMgdG8gXCJpbmNsdWRlXCJcbiAgICAgICAgICAvLyBvdGhlciBkb20tbW9kdWxlcyB0aGF0IGNvbnRhaW4gc3R5bGluZ1xuICAgICAgICAgIGxldCBpbmNsdWRlID0gZS5nZXRBdHRyaWJ1dGUoSU5DTFVERV9BVFRSKTtcbiAgICAgICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICAgICAgc3R5bGVzLnB1c2goLi4udGhpcy5zdHlsZXNGcm9tTW9kdWxlcyhpbmNsdWRlKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXg7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChiYXNlVVJJKSB7XG4gICAgICAgICAgICBlLnRleHRDb250ZW50ID0gUG9seW1lci5SZXNvbHZlVXJsLnJlc29sdmVDc3MoZS50ZXh0Q29udGVudCwgYmFzZVVSSSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0eWxlcy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlLl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcGxhdGUuX3N0eWxlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyAgZnJvbSBzdHlsZXNoZWV0cyBsb2FkZWQgdmlhIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YCBsaW5rcyB3aXRoaW4gdGhlIHNwZWNpZmllZCBgZG9tLW1vZHVsZWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBJZCBvZiBgZG9tLW1vZHVsZWAgdG8gZ2F0aGVyIENTUyBmcm9tXG4gICAgICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIHN0eWxlcy5cbiAgICAgKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gICAgICovXG4gICAgIHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG1vZHVsZUlkKSB7XG4gICAgICBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gICAgICByZXR1cm4gbSA/IHRoaXMuX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pIDogW107XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlN0eWxlR2F0aGVyXG4gICAgICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBtb2R1bGUgZG9tLW1vZHVsZSBlbGVtZW50IHRoYXQgY291bGQgY29udGFpbiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgc3R5bGVzXG4gICAgICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIHN0eWxlc1xuICAgICAqL1xuICAgIF9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpIHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgICAgY29uc3QgcCQgPSBtb2R1bGUucXVlcnlTZWxlY3RvckFsbChNT0RVTEVfU1RZTEVfTElOS19TRUxFQ1RPUik7XG4gICAgICBmb3IgKGxldCBpPTA7IGkgPCBwJC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcCA9IHAkW2ldO1xuICAgICAgICBpZiAocC5pbXBvcnQpIHtcbiAgICAgICAgICBjb25zdCBpbXBvcnREb2MgPSBwLmltcG9ydDtcbiAgICAgICAgICBjb25zdCB1bnNjb3BlZCA9IHAuaGFzQXR0cmlidXRlKFNIQURZX1VOU0NPUEVEX0FUVFIpO1xuICAgICAgICAgIGlmICh1bnNjb3BlZCAmJiAhaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYyk7XG4gICAgICAgICAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoU0hBRFlfVU5TQ09QRURfQVRUUiwgJycpO1xuICAgICAgICAgICAgaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgfSBlbHNlIGlmICghaW1wb3J0RG9jLl9zdHlsZSkge1xuICAgICAgICAgICAgaW1wb3J0RG9jLl9zdHlsZSA9IHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0eWxlcy5wdXNoKHVuc2NvcGVkID8gaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlIDogaW1wb3J0RG9jLl9zdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUmV0dXJucyBDU1MgdGV4dCBvZiBzdHlsZXMgaW4gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBgZG9tLW1vZHVsZWBzLlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVzRnJvbU1vZHVsZXNgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlN0eWxlR2F0aGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkcyBMaXN0IG9mIGRvbS1tb2R1bGUgaWQncyB3aXRoaW4gd2hpY2ggdG9cbiAgICAgKiBzZWFyY2ggZm9yIGNzcy5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIHNwZWNpZmllZCBgZG9tLW1vZHVsZWBzXG4gICAgICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICAgICAqL1xuICAgICBjc3NGcm9tTW9kdWxlcyhtb2R1bGVJZHMpIHtcbiAgICAgIGxldCBtb2R1bGVzID0gbW9kdWxlSWRzLnRyaW0oKS5zcGxpdCgvXFxzKy8pO1xuICAgICAgbGV0IGNzc1RleHQgPSAnJztcbiAgICAgIGZvciAobGV0IGk9MDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3NzVGV4dCArPSB0aGlzLmNzc0Zyb21Nb2R1bGUobW9kdWxlc1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBDU1MgdGV4dCBvZiBzdHlsZXMgaW4gYSBnaXZlbiBgZG9tLW1vZHVsZWAuICBDU1MgaW4gYSBgZG9tLW1vZHVsZWBcbiAgICAgKiBjYW4gY29tZSBlaXRoZXIgZnJvbSBgPHN0eWxlPmBzIHdpdGhpbiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gLCBvciBlbHNlXG4gICAgICogZnJvbSBvbmUgb3IgbW9yZSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGVcbiAgICAgKiB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEFueSBgPHN0eWxlcz5gIHByb2Nlc3NlZCBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uLlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVGcm9tTW9kdWxlYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBkb20tbW9kdWxlIGlkIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIGBkb20tbW9kdWxlYFxuICAgICAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAgICAgKi9cbiAgICBjc3NGcm9tTW9kdWxlKG1vZHVsZUlkKSB7XG4gICAgICBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gICAgICBpZiAobSAmJiBtLl9jc3NUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gbW9kdWxlIGltcG9ydHM6IDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5cbiAgICAgICAgbGV0IGNzc1RleHQgPSB0aGlzLl9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtKTtcbiAgICAgICAgLy8gaW5jbHVkZSBjc3MgZnJvbSB0aGUgZmlyc3QgdGVtcGxhdGUgaW4gdGhlIG1vZHVsZVxuICAgICAgICBsZXQgdCA9IG0ucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcbiAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICBjc3NUZXh0ICs9IHRoaXMuY3NzRnJvbVRlbXBsYXRlKHQsXG4gICAgICAgICAgICAvKiogQHR5cGUge3RlbXBsYXRlV2l0aEFzc2V0UGF0aH0gKi8obSkuYXNzZXRwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBtLl9jc3NUZXh0ID0gY3NzVGV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFtKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGZpbmQgc3R5bGUgZGF0YSBpbiBtb2R1bGUgbmFtZWQnLCBtb2R1bGVJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbSAmJiBtLl9jc3NUZXh0IHx8ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIENTUyB0ZXh0IG9mIGA8c3R5bGVzPmAgd2l0aGluIGEgZ2l2ZW4gdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBBbnkgYDxzdHlsZXM+YCBwcm9jZXNzZWQgYXJlIHJlbW92ZWQgZnJvbSB0aGVpciBvcmlnaW5hbCBsb2NhdGlvbi5cbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlRnJvbVRlbXBsYXRlYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlc29sdmUgdGhlIFVSTCBhZ2FpbnN0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgdGVtcGxhdGVcbiAgICAgKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gICAgICovXG4gICAgY3NzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBiYXNlVVJJKSB7XG4gICAgICBsZXQgY3NzVGV4dCA9ICcnO1xuICAgICAgY29uc3QgZSQgPSB0aGlzLnN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSk7XG4gICAgICAvLyBpZiBlbGVtZW50IGlzIGEgdGVtcGxhdGUsIGdldCBjb250ZW50IGZyb20gaXRzIC5jb250ZW50XG4gICAgICBmb3IgKGxldCBpPTA7IGkgPCBlJC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZSA9IGUkW2ldO1xuICAgICAgICBpZiAoZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO1xuICAgICAgICB9XG4gICAgICAgIGNzc1RleHQgKz0gZS50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjc3NUZXh0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIENTUyB0ZXh0IGZyb20gc3R5bGVzaGVldHMgbG9hZGVkIHZpYSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmBcbiAgICAgKiBsaW5rcyB3aXRoaW4gdGhlIHNwZWNpZmllZCBgZG9tLW1vZHVsZWAuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlN0eWxlR2F0aGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIElkIG9mIGBkb20tbW9kdWxlYCB0byBnYXRoZXIgQ1NTIGZyb21cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIGxpbmtzIGluIHNwZWNpZmllZCBgZG9tLW1vZHVsZWBcbiAgICAgKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gICAgICovXG4gICAgY3NzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlSWQpIHtcbiAgICAgIGxldCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcbiAgICAgIHJldHVybiBtID8gdGhpcy5fY3NzRnJvbU1vZHVsZUltcG9ydHMobSkgOiAnJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5TdHlsZUdhdGhlclxuICAgICAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbW9kdWxlIGRvbS1tb2R1bGUgZWxlbWVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIHN0eWxlc1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gbGlua3MgaW4gdGhlIGRvbS1tb2R1bGVcbiAgICAgKi9cbiAgICAgX2Nzc0Zyb21Nb2R1bGVJbXBvcnRzKG1vZHVsZSkge1xuICAgICAgbGV0IGNzc1RleHQgPSAnJztcbiAgICAgIGxldCBzdHlsZXMgPSB0aGlzLl9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtb2R1bGUpO1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNzc1RleHQgKz0gc3R5bGVzW2ldLnRleHRDb250ZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNzc1RleHQ7XG4gICAgfVxuICB9O1xuXG4gIFBvbHltZXIuU3R5bGVHYXRoZXIgPSBTdHlsZUdhdGhlcjtcbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2Jvb3QuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL3Jlc29sdmUtdXJsLmh0bWxcIj5cblxuPHNjcmlwdD5cbi8qKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9ICovXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2xvYmFsLCBsZWdhY3kgc2V0dGluZ3MuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICovXG4gIFBvbHltZXIuU2V0dGluZ3MgPSBQb2x5bWVyLlNldHRpbmdzIHx8IHt9O1xuXG4gIFBvbHltZXIuU2V0dGluZ3MudXNlU2hhZG93ID0gISh3aW5kb3cuU2hhZHlET00pO1xuICBQb2x5bWVyLlNldHRpbmdzLnVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMgPVxuICAgIEJvb2xlYW4oIXdpbmRvdy5TaGFkeUNTUyB8fCB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzKTtcbiAgUG9seW1lci5TZXR0aW5ncy51c2VOYXRpdmVDdXN0b21FbGVtZW50cyA9XG4gICAgISh3aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayk7XG5cblxuICAvKipcbiAgICogR2xvYmFsbHkgc2V0dGFibGUgcHJvcGVydHkgdGhhdCBpcyBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvXG4gICAqIGBQb2x5bWVyLkVsZW1lbnRNaXhpbmAgaW5zdGFuY2VzLCB1c2VmdWwgZm9yIGJpbmRpbmcgaW4gdGVtcGxhdGVzIHRvXG4gICAqIG1ha2UgVVJMJ3MgcmVsYXRpdmUgdG8gYW4gYXBwbGljYXRpb24ncyByb290LiAgRGVmYXVsdHMgdG8gdGhlIG1haW5cbiAgICogZG9jdW1lbnQgVVJMLCBidXQgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlcnMuICBJdCBtYXkgYmUgdXNlZnVsIHRvIHNldFxuICAgKiBgUG9seW1lci5yb290UGF0aGAgdG8gcHJvdmlkZSBhIHN0YWJsZSBhcHBsaWNhdGlvbiBtb3VudCBwYXRoIHdoZW5cbiAgICogdXNpbmcgY2xpZW50IHNpZGUgcm91dGluZy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICovXG4gIGxldCByb290UGF0aCA9IFBvbHltZXIucm9vdFBhdGggfHxcbiAgICBQb2x5bWVyLlJlc29sdmVVcmwucGF0aEZyb21VcmwoZG9jdW1lbnQuYmFzZVVSSSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgUG9seW1lci5yb290UGF0aCA9IHJvb3RQYXRoO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnbG9iYWwgcm9vdFBhdGggcHJvcGVydHkgdXNlZCBieSBgUG9seW1lci5FbGVtZW50TWl4aW5gIGFuZFxuICAgKiBhdmFpbGFibGUgdmlhIGBQb2x5bWVyLnJvb3RQYXRoYC5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIG5ldyByb290IHBhdGhcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIFBvbHltZXIuc2V0Um9vdFBhdGggPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgUG9seW1lci5yb290UGF0aCA9IHBhdGg7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgZ2xvYmFsIGNhbGxiYWNrIHVzZWQgdG8gc2FuaXRpemUgYW55IHZhbHVlIGJlZm9yZSBpbnNlcnRpbmcgaXQgaW50byB0aGUgRE9NLiBUaGUgY2FsbGJhY2sgc2lnbmF0dXJlIGlzOlxuICAgKlxuICAgKiAgICAgUG9seW1lciA9IHtcbiAgICogICAgICAgc2FuaXRpemVET01WYWx1ZTogZnVuY3Rpb24odmFsdWUsIG5hbWUsIHR5cGUsIG5vZGUpIHsgLi4uIH1cbiAgICogICAgIH1cbiAgICpcbiAgICogV2hlcmU6XG4gICAqXG4gICAqIGB2YWx1ZWAgaXMgdGhlIHZhbHVlIHRvIHNhbml0aXplLlxuICAgKiBgbmFtZWAgaXMgdGhlIG5hbWUgb2YgYW4gYXR0cmlidXRlIG9yIHByb3BlcnR5IChmb3IgZXhhbXBsZSwgaHJlZikuXG4gICAqIGB0eXBlYCBpbmRpY2F0ZXMgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkOiBvbmUgb2YgcHJvcGVydHksIGF0dHJpYnV0ZSwgb3IgdGV4dC5cbiAgICogYG5vZGVgIGlzIHRoZSBub2RlIHdoZXJlIHRoZSB2YWx1ZSBpcyBiZWluZyBpbnNlcnRlZC5cbiAgICpcbiAgICogQHR5cGUgeyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfVxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKi9cbiAgbGV0IHNhbml0aXplRE9NVmFsdWUgPSBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWU7XG5cbiAgLy8gVGhpcyBpcyBuZWVkZWQgZm9yIHRvb2xpbmdcbiAgUG9seW1lci5zYW5pdGl6ZURPTVZhbHVlID0gc2FuaXRpemVET01WYWx1ZTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2xvYmFsIHNhbml0aXplRE9NVmFsdWUgYXZhaWxhYmxlIHZpYSBgUG9seW1lci5zYW5pdGl6ZURPTVZhbHVlYC5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHBhcmFtIHsoZnVuY3Rpb24oKixzdHJpbmcsc3RyaW5nLE5vZGUpOiopfHVuZGVmaW5lZH0gbmV3U2FuaXRpemVET01WYWx1ZSB0aGUgZ2xvYmFsIHNhbml0aXplRE9NVmFsdWUgY2FsbGJhY2tcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIFBvbHltZXIuc2V0U2FuaXRpemVET01WYWx1ZSA9IGZ1bmN0aW9uKG5ld1Nhbml0aXplRE9NVmFsdWUpIHtcbiAgICBQb2x5bWVyLnNhbml0aXplRE9NVmFsdWUgPSBuZXdTYW5pdGl6ZURPTVZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHbG9iYWxseSBzZXR0YWJsZSBwcm9wZXJ0eSB0byBtYWtlIFBvbHltZXIgR2VzdHVyZXMgdXNlIHBhc3NpdmUgVG91Y2hFdmVudCBsaXN0ZW5lcnMgd2hlbiByZWNvZ25pemluZyBnZXN0dXJlcy5cbiAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBnZXN0dXJlcyBtYWRlIGZyb20gdG91Y2ggd2lsbCBub3QgYmUgYWJsZSB0byBwcmV2ZW50IHNjcm9sbGluZywgYWxsb3dpbmcgZm9yIHNtb290aGVyXG4gICAqIHNjcm9sbGluZyBwZXJmb3JtYW5jZS5cbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqL1xuICBsZXQgcGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmYWxzZTtcblxuICBQb2x5bWVyLnBhc3NpdmVUb3VjaEdlc3R1cmVzID0gcGFzc2l2ZVRvdWNoR2VzdHVyZXM7XG5cbiAgLyoqXG4gICAqIFNldHMgYHBhc3NpdmVUb3VjaEdlc3R1cmVzYCBnbG9iYWxseSBmb3IgYWxsIGVsZW1lbnRzIHVzaW5nIFBvbHltZXIgR2VzdHVyZXMuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUGFzc2l2ZSBlbmFibGUgb3IgZGlzYWJsZSBwYXNzaXZlIHRvdWNoIGdlc3R1cmVzIGdsb2JhbGx5XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBQb2x5bWVyLnNldFBhc3NpdmVUb3VjaEdlc3R1cmVzID0gZnVuY3Rpb24odXNlUGFzc2l2ZSkge1xuICAgIFBvbHltZXIucGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSB1c2VQYXNzaXZlO1xuICB9O1xufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvYm9vdC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvc2V0dGluZ3MuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL21peGluLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9zdHlsZS1nYXRoZXIuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL3Jlc29sdmUtdXJsLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9lbGVtZW50cy9kb20tbW9kdWxlLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJwcm9wZXJ0eS1lZmZlY3RzLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJwcm9wZXJ0aWVzLW1peGluLmh0bWxcIj5cblxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3MgbWV0YS1wcm9ncmFtbWluZ1xuICAgKiBmZWF0dXJlcyBpbmNsdWRpbmcgdGVtcGxhdGUgc3RhbXBpbmcsIGRhdGEtYmluZGluZywgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbixcbiAgICogYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvbi5cbiAgICpcbiAgICogU3ViY2xhc3NlcnMgbWF5IHByb3ZpZGUgdGhlIGZvbGxvd2luZyBzdGF0aWMgZ2V0dGVycyB0byByZXR1cm4gbWV0YWRhdGFcbiAgICogdXNlZCB0byBjb25maWd1cmUgUG9seW1lcidzIGZlYXR1cmVzIGZvciB0aGUgY2xhc3M6XG4gICAqXG4gICAqIC0gYHN0YXRpYyBnZXQgaXMoKWA6IFdoZW4gdGhlIHRlbXBsYXRlIGlzIHByb3ZpZGVkIHZpYSBhIGBkb20tbW9kdWxlYCxcbiAgICogICB1c2VycyBzaG91bGQgcmV0dXJuIHRoZSBgZG9tLW1vZHVsZWAgaWQgZnJvbSBhIHN0YXRpYyBgaXNgIGdldHRlci4gIElmXG4gICAqICAgbm8gdGVtcGxhdGUgaXMgbmVlZGVkIG9yIHRoZSB0ZW1wbGF0ZSBpcyBwcm92aWRlZCBkaXJlY3RseSB2aWEgdGhlXG4gICAqICAgYHRlbXBsYXRlYCBnZXR0ZXIsIHRoZXJlIGlzIG5vIG5lZWQgdG8gZGVmaW5lIGBpc2AgZm9yIHRoZSBlbGVtZW50LlxuICAgKlxuICAgKiAtIGBzdGF0aWMgZ2V0IHRlbXBsYXRlKClgOiBVc2VycyBtYXkgcHJvdmlkZSB0aGUgdGVtcGxhdGUgZGlyZWN0bHkgKGFzXG4gICAqICAgb3Bwb3NlZCB0byB2aWEgYGRvbS1tb2R1bGVgKSBieSBpbXBsZW1lbnRpbmcgYSBzdGF0aWMgYHRlbXBsYXRlYCBnZXR0ZXIuXG4gICAqICAgVGhlIGdldHRlciBtYXkgcmV0dXJuIGFuIGBIVE1MVGVtcGxhdGVFbGVtZW50YCBvciBhIHN0cmluZywgd2hpY2ggd2lsbFxuICAgKiAgIGF1dG9tYXRpY2FsbHkgYmUgcGFyc2VkIGludG8gYSB0ZW1wbGF0ZS5cbiAgICpcbiAgICogLSBgc3RhdGljIGdldCBwcm9wZXJ0aWVzKClgOiBTaG91bGQgcmV0dXJuIGFuIG9iamVjdCBkZXNjcmliaW5nXG4gICAqICAgcHJvcGVydHktcmVsYXRlZCBtZXRhZGF0YSB1c2VkIGJ5IFBvbHltZXIgZmVhdHVyZXMgKGtleTogcHJvcGVydHkgbmFtZVxuICAgKiAgIHZhbHVlOiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0eSBtZXRhZGF0YSkuIFZhbGlkIGtleXMgaW4gcGVyLXByb3BlcnR5XG4gICAqICAgbWV0YWRhdGEgaW5jbHVkZTpcbiAgICogICAtIGB0eXBlYCAoU3RyaW5nfE51bWJlcnxPYmplY3R8QXJyYXl8Li4uKTogVXNlZCBieVxuICAgKiAgICAgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgdG8gZGV0ZXJtaW5lIGhvdyBzdHJpbmctYmFzZWQgYXR0cmlidXRlc1xuICAgKiAgICAgYXJlIGRlc2VyaWFsaXplZCB0byBKYXZhU2NyaXB0IHByb3BlcnR5IHZhbHVlcy5cbiAgICogICAtIGBub3RpZnlgIChib29sZWFuKTogQ2F1c2VzIGEgY2hhbmdlIGluIHRoZSBwcm9wZXJ0eSB0byBmaXJlIGFcbiAgICogICAgIG5vbi1idWJibGluZyBldmVudCBjYWxsZWQgYDxwcm9wZXJ0eT4tY2hhbmdlZGAuIEVsZW1lbnRzIHRoYXQgaGF2ZVxuICAgKiAgICAgZW5hYmxlZCB0d28td2F5IGJpbmRpbmcgdG8gdGhlIHByb3BlcnR5IHVzZSB0aGlzIGV2ZW50IHRvIG9ic2VydmUgY2hhbmdlcy5cbiAgICogICAtIGByZWFkT25seWAgKGJvb2xlYW4pOiBDcmVhdGVzIGEgZ2V0dGVyIGZvciB0aGUgcHJvcGVydHksIGJ1dCBubyBzZXR0ZXIuXG4gICAqICAgICBUbyBzZXQgYSByZWFkLW9ubHkgcHJvcGVydHksIHVzZSB0aGUgcHJpdmF0ZSBzZXR0ZXIgbWV0aG9kXG4gICAqICAgICBgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSlgLlxuICAgKiAgIC0gYG9ic2VydmVyYCAoc3RyaW5nKTogT2JzZXJ2ZXIgbWV0aG9kIG5hbWUgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gICAqICAgICB0aGUgcHJvcGVydHkgY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZVxuICAgKiAgICAgYCh2YWx1ZSwgcHJldmlvdXNWYWx1ZSlgLlxuICAgKiAgIC0gYGNvbXB1dGVkYCAoc3RyaW5nKTogU3RyaW5nIGRlc2NyaWJpbmcgbWV0aG9kIGFuZCBkZXBlbmRlbnQgcHJvcGVydGllc1xuICAgKiAgICAgZm9yIGNvbXB1dGluZyB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSAoZS5nLiBgJ2NvbXB1dGVGb28oYmFyLCB6b3QpJ2ApLlxuICAgKiAgICAgQ29tcHV0ZWQgcHJvcGVydGllcyBhcmUgcmVhZC1vbmx5IGJ5IGRlZmF1bHQgYW5kIGNhbiBvbmx5IGJlIGNoYW5nZWRcbiAgICogICAgIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjb21wdXRpbmcgbWV0aG9kLlxuICAgKlxuICAgKiAtIGBzdGF0aWMgZ2V0IG9ic2VydmVycygpYDogQXJyYXkgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIG11bHRpLXByb3BlcnR5XG4gICAqICAgb2JzZXJ2ZXIgbWV0aG9kcyBhbmQgdGhlaXIgZGVwZW5kZW50IHByb3BlcnRpZXMgKGUuZy5cbiAgICogICBgJ29ic2VydmVBQkMoYSwgYiwgYyknYCkuXG4gICAqXG4gICAqIFRoZSBiYXNlIGNsYXNzIHByb3ZpZGVzIGRlZmF1bHQgaW1wbGVtZW50YXRpb25zIGZvciB0aGUgZm9sbG93aW5nIHN0YW5kYXJkXG4gICAqIGN1c3RvbSBlbGVtZW50IGxpZmVjeWNsZSBjYWxsYmFja3M7IHVzZXJzIG1heSBvdmVycmlkZSB0aGVzZSwgYnV0IHNob3VsZFxuICAgKiBjYWxsIHRoZSBzdXBlciBtZXRob2QgdG8gZW5zdXJlXG4gICAqIC0gYGNvbnN0cnVjdG9yYDogUnVuIHdoZW4gdGhlIGVsZW1lbnQgaXMgY3JlYXRlZCBvciB1cGdyYWRlZFxuICAgKiAtIGBjb25uZWN0ZWRDYWxsYmFja2A6IFJ1biBlYWNoIHRpbWUgdGhlIGVsZW1lbnQgaXMgY29ubmVjdGVkIHRvIHRoZVxuICAgKiAgIGRvY3VtZW50XG4gICAqIC0gYGRpc2Nvbm5lY3RlZENhbGxiYWNrYDogUnVuIGVhY2ggdGltZSB0aGUgZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbVxuICAgKiAgIHRoZSBkb2N1bWVudFxuICAgKiAtIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgOiBSdW4gZWFjaCB0aW1lIGFuIGF0dHJpYnV0ZSBpblxuICAgKiAgIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGlzIHNldCBvciByZW1vdmVkIChub3RlOiB0aGlzIGVsZW1lbnQncyBkZWZhdWx0XG4gICAqICAgYG9ic2VydmVkQXR0cmlidXRlc2AgaW1wbGVtZW50YXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJldHVybiBhbiBhcnJheVxuICAgKiAgIG9mIGRhc2gtY2FzZWQgYXR0cmlidXRlcyBiYXNlZCBvbiBgcHJvcGVydGllc2ApXG4gICAqXG4gICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAqIEBwb2x5bWVyXG4gICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNcbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLlByb3BlcnRpZXNNaXhpblxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAcHJvcGVydHkgcm9vdFBhdGgge3N0cmluZ30gU2V0IHRvIHRoZSB2YWx1ZSBvZiBgUG9seW1lci5yb290UGF0aGAsXG4gICAqICAgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIG1haW4gZG9jdW1lbnQgcGF0aFxuICAgKiBAcHJvcGVydHkgaW1wb3J0UGF0aCB7c3RyaW5nfSBTZXQgdG8gdGhlIHZhbHVlIG9mIHRoZSBjbGFzcydzIHN0YXRpY1xuICAgKiAgIGBpbXBvcnRQYXRoYCBwcm9wZXJ0eSwgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIHBhdGggb2YgdGhpcyBlbGVtZW50J3NcbiAgICogICBgZG9tLW1vZHVsZWAgKHdoZW4gYGlzYCBpcyB1c2VkKSwgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGZvciBvdGhlclxuICAgKiAgIGltcG9ydCBzdHJhdGVnaWVzLlxuICAgKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3NcbiAgICogbWV0YS1wcm9ncmFtbWluZyBmZWF0dXJlcy5cbiAgICovXG4gIFBvbHltZXIuRWxlbWVudE1peGluID0gUG9seW1lci5kZWR1cGluZ01peGluKGJhc2UgPT4ge1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGV4dGVuZHMge2Jhc2V9XG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNNaXhpbn1cbiAgICAgKi9cbiAgICBjb25zdCBwb2x5bWVyRWxlbWVudEJhc2UgPSBQb2x5bWVyLlByb3BlcnRpZXNNaXhpbihQb2x5bWVyLlByb3BlcnR5RWZmZWN0cyhiYXNlKSk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAgICogVGhpcyBsaXN0IGlzIGNyZWF0ZWQgYXMgYW4gb3B0aW1pemF0aW9uIHNpbmNlIGl0IGlzIGEgc3Vic2V0IG9mXG4gICAgICogdGhlIGxpc3QgcmV0dXJuZWQgZnJvbSBgX3Byb3BlcnRpZXNgLlxuICAgICAqIFRoaXMgbGlzdCBpcyB1c2VkIGluIGBfaW5pdGlhbGl6ZVByb3BlcnRpZXNgIHRvIHNldCBwcm9wZXJ0eSBkZWZhdWx0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgRWxlbWVudCBjbGFzc1xuICAgICAqIEByZXR1cm4ge1BvbHltZXJFbGVtZW50UHJvcGVydGllc30gRmxhdHRlbmVkIHByb3BlcnRpZXMgZm9yIHRoaXMgY2xhc3NcbiAgICAgKiAgIHRoYXQgaGF2ZSBkZWZhdWx0IHZhbHVlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlEZWZhdWx0cyhjb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19wcm9wZXJ0eURlZmF1bHRzJywgY29uc3RydWN0b3IpKSkge1xuICAgICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgPSBudWxsO1xuICAgICAgICBsZXQgcHJvcHMgPSBjb25zdHJ1Y3Rvci5fcHJvcGVydGllcztcbiAgICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICAgIGxldCBpbmZvID0gcHJvcHNbcF07XG4gICAgICAgICAgaWYgKCd2YWx1ZScgaW4gaW5mbykge1xuICAgICAgICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzID0gY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzIHx8IHt9O1xuICAgICAgICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzW3BdID0gaW5mbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIHRoZSBgb2JzZXJ2ZXJzYCBhcnJheS5cbiAgICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIEVsZW1lbnQgY2xhc3NcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgY29udGFpbmluZyBvd24gb2JzZXJ2ZXJzIGZvciB0aGUgZ2l2ZW4gY2xhc3NcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3duT2JzZXJ2ZXJzKGNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoIWNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KFxuICAgICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX293bk9ic2VydmVycycsIGNvbnN0cnVjdG9yKSkpIHtcbiAgICAgICAgICBjb25zdHJ1Y3Rvci5fX293bk9ic2VydmVycyA9XG4gICAgICAgICAgY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnb2JzZXJ2ZXJzJywgY29uc3RydWN0b3IpKSA/XG4gICAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAoY29uc3RydWN0b3IpLm9ic2VydmVycyA6IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IuX19vd25PYnNlcnZlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBlZmZlY3RzIGZvciBhIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogTm90ZSwgb25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHNldCB0b1xuICAgICAqIGByZWFkT25seWAsIGBjb21wdXRlZGAsIGByZWZsZWN0VG9BdHRyaWJ1dGVgLCBvciBgbm90aWZ5YFxuICAgICAqIHRoZXNlIHZhbHVlcyBtYXkgbm90IGJlIGNoYW5nZWQuIEZvciBleGFtcGxlLCBhIHN1YmNsYXNzIGNhbm5vdFxuICAgICAqIGFsdGVyIHRoZXNlIHNldHRpbmdzLiBIb3dldmVyLCBhZGRpdGlvbmFsIGBvYnNlcnZlcnNgIG1heSBiZSBhZGRlZFxuICAgICAqIGJ5IHN1YmNsYXNzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgaW5mbyBvYmplY3Qgc2hvdWxkIG1heSBjb250YWluIHByb3BlcnR5IG1ldGFkYXRhIGFzIGZvbGxvd3M6XG4gICAgICpcbiAgICAgKiAqIGB0eXBlYDoge2Z1bmN0aW9ufSB0eXBlIHRvIHdoaWNoIGFuIGF0dHJpYnV0ZSBtYXRjaGluZyB0aGUgcHJvcGVydHlcbiAgICAgKiBpcyBkZXNlcmlhbGl6ZWQuIE5vdGUgdGhlIHByb3BlcnR5IGlzIGNhbWVsLWNhc2VkIGZyb20gYSBkYXNoLWNhc2VkXG4gICAgICogYXR0cmlidXRlLiBGb3IgZXhhbXBsZSwgJ2Zvby1iYXInIGF0dHJpYnV0ZSBpcyBkZXNlcmlhbGl6ZWQgdG8gYVxuICAgICAqIHByb3BlcnR5IG5hbWVkICdmb29CYXInLlxuICAgICAqXG4gICAgICogKiBgcmVhZE9ubHlgOiB7Ym9vbGVhbn0gY3JlYXRlcyBhIHJlYWRPbmx5IHByb3BlcnR5IGFuZFxuICAgICAqIG1ha2VzIGEgcHJpdmF0ZSBzZXR0ZXIgZm9yIHRoZSBwcml2YXRlIG9mIHRoZSBmb3JtICdfc2V0Rm9vJyBmb3IgYVxuICAgICAqIHByb3BlcnR5ICdmb28nLFxuICAgICAqXG4gICAgICogKiBgY29tcHV0ZWRgOiB7c3RyaW5nfSBjcmVhdGVzIGEgY29tcHV0ZWQgcHJvcGVydHkuIEEgY29tcHV0ZWQgcHJvcGVydHlcbiAgICAgKiBhbHNvIGF1dG9tYXRpY2FsbHkgaXMgc2V0IHRvIGByZWFkT25seTogdHJ1ZWAuIFRoZSB2YWx1ZSBpcyBjYWxjdWxhdGVkXG4gICAgICogYnkgcnVubmluZyBhIG1ldGhvZCBhbmQgYXJndW1lbnRzIHBhcnNlZCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcuIEZvclxuICAgICAqIGV4YW1wbGUgJ2NvbXB1dGUoZm9vKScgd2lsbCBjb21wdXRlIGEgZ2l2ZW4gcHJvcGVydHkgd2hlbiB0aGVcbiAgICAgKiAnZm9vJyBwcm9wZXJ0eSBjaGFuZ2VzIGJ5IGV4ZWN1dGluZyB0aGUgJ2NvbXB1dGUnIG1ldGhvZC4gVGhpcyBtZXRob2RcbiAgICAgKiBtdXN0IHJldHVybiB0aGUgY29tcHV0ZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiAqIGByZWZsZWN0VG9BdHRyaWJ1dGVgOiB7Ym9vbGVhbn0gSWYgdHJ1ZSwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHJlZmxlY3RlZFxuICAgICAqIHRvIGFuIGF0dHJpYnV0ZSBvZiB0aGUgc2FtZSBuYW1lLiBOb3RlLCB0aGUgYXR0cmlidXRlIGlzIGRhc2gtY2FzZWRcbiAgICAgKiBzbyBhIHByb3BlcnR5IG5hbWVkICdmb29CYXInIGlzIHJlZmxlY3RlZCBhcyAnZm9vLWJhcicuXG4gICAgICpcbiAgICAgKiAqIGBub3RpZnlgOiB7Ym9vbGVhbn0gc2VuZHMgYSBub24tYnViYmxpbmcgbm90aWZpY2F0aW9uIGV2ZW50IHdoZW5cbiAgICAgKiB0aGUgcHJvcGVydHkgY2hhbmdlcy4gRm9yIGV4YW1wbGUsIGEgcHJvcGVydHkgbmFtZWQgJ2Zvbycgc2VuZHMgYW5cbiAgICAgKiBldmVudCBuYW1lZCAnZm9vLWNoYW5nZWQnIHdpdGggYGV2ZW50LmRldGFpbGAgc2V0IHRvIHRoZSB2YWx1ZSBvZlxuICAgICAqIHRoZSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqICogb2JzZXJ2ZXI6IHtzdHJpbmd9IG5hbWUgb2YgYSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIHByb3BlcnR5XG4gICAgICogY2hhbmdlcy4gVGhlIGFyZ3VtZW50cyBvZiB0aGUgbWV0aG9kIGFyZSAodmFsdWUsIHByZXZpb3VzVmFsdWUpLlxuICAgICAqXG4gICAgICogTm90ZTogVXNlcnMgbWF5IHdhbnQgY29udHJvbCBvdmVyIG1vZGlmeWluZyBwcm9wZXJ0eVxuICAgICAqIGVmZmVjdHMgdmlhIHN1YmNsYXNzaW5nLiBGb3IgZXhhbXBsZSwgYSB1c2VyIG1pZ2h0IHdhbnQgdG8gbWFrZSBhXG4gICAgICogcmVmbGVjdFRvQXR0cmlidXRlIHByb3BlcnR5IG5vdCBkbyBzbyBpbiBhIHN1YmNsYXNzLiBXZSd2ZSBjaG9zZW4gdG9cbiAgICAgKiBkaXNhYmxlIHRoaXMgYmVjYXVzZSBpdCBsZWFkcyB0byBhZGRpdGlvbmFsIGNvbXBsaWNhdGlvbi5cbiAgICAgKiBGb3IgZXhhbXBsZSwgYSByZWFkT25seSBlZmZlY3QgZ2VuZXJhdGVzIGEgc3BlY2lhbCBzZXR0ZXIuIElmIGEgc3ViY2xhc3NcbiAgICAgKiBkaXNhYmxlcyB0aGUgZWZmZWN0LCB0aGUgc2V0dGVyIHdvdWxkIGZhaWwgdW5leHBlY3RlZGx5LlxuICAgICAqIEJhc2VkIG9uIGZlZWRiYWNrLCB3ZSBtYXkgd2FudCB0byB0cnkgdG8gbWFrZSBlZmZlY3RzIG1vcmUgbWFsbGVhYmxlXG4gICAgICogYW5kL29yIHByb3ZpZGUgYW4gYWR2YW5jZWQgYXBpIGZvciBtYW5pcHVsYXRpbmcgdGhlbS5cbiAgICAgKiBBbHNvIGNvbnNpZGVyIGFkZGluZyB3YXJuaW5ncyB3aGVuIGFuIGVmZmVjdCBjYW5ub3QgYmUgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJFbGVtZW50fSBwcm90byBFbGVtZW50IGNsYXNzIHByb3RvdHlwZSB0byBhZGQgYWNjZXNzb3JzXG4gICAgICogICBhbmQgZWZmZWN0cyB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIEluZm8gb2JqZWN0IGZyb20gd2hpY2ggdG8gY3JlYXRlIHByb3BlcnR5IGVmZmVjdHMuXG4gICAgICogU3VwcG9ydGVkIGtleXM6XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFsbFByb3BzIEZsYXR0ZW5lZCBtYXAgb2YgYWxsIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGlzXG4gICAgICogICBlbGVtZW50IChpbmNsdWRpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMpXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyhwcm90bywgbmFtZSwgaW5mbywgYWxsUHJvcHMpIHtcbiAgICAgIC8vIGNvbXB1dGVkIGZvcmNlcyByZWFkT25seS4uLlxuICAgICAgaWYgKGluZm8uY29tcHV0ZWQpIHtcbiAgICAgICAgaW5mby5yZWFkT25seSA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBOb3RlLCBzaW5jZSBhbGwgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgcmVhZE9ubHksIHRoaXMgcHJldmVudHNcbiAgICAgIC8vIGFkZGluZyBhZGRpdGlvbmFsIGNvbXB1dGVkIHByb3BlcnR5IGVmZmVjdHMgKHdoaWNoIGxlYWRzIHRvIGEgY29uZnVzaW5nXG4gICAgICAvLyBzZXR1cCB3aGVyZSBtdWx0aXBsZSB0cmlnZ2VycyBmb3Igc2V0dGluZyBhIHByb3BlcnR5KVxuICAgICAgLy8gV2hpbGUgd2UgZG8gaGF2ZSBgaGFzQ29tcHV0ZWRFZmZlY3RgIHRoaXMgaXMgc2V0IG9uIHRoZSBwcm9wZXJ0eSdzXG4gICAgICAvLyBkZXBlbmRlbmNpZXMgcmF0aGVyIHRoYW4gaXRzZWxmLlxuICAgICAgaWYgKGluZm8uY29tcHV0ZWQgJiYgIXByb3RvLl9oYXNSZWFkT25seUVmZmVjdChuYW1lKSkge1xuICAgICAgICBwcm90by5fY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eShuYW1lLCBpbmZvLmNvbXB1dGVkLCBhbGxQcm9wcyk7XG4gICAgICB9XG4gICAgICBpZiAoaW5mby5yZWFkT25seSAmJiAhcHJvdG8uX2hhc1JlYWRPbmx5RWZmZWN0KG5hbWUpKSB7XG4gICAgICAgIHByb3RvLl9jcmVhdGVSZWFkT25seVByb3BlcnR5KG5hbWUsICFpbmZvLmNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmZvLnJlZmxlY3RUb0F0dHJpYnV0ZSAmJiAhcHJvdG8uX2hhc1JlZmxlY3RFZmZlY3QobmFtZSkpIHtcbiAgICAgICAgcHJvdG8uX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGluZm8ubm90aWZ5ICYmICFwcm90by5faGFzTm90aWZ5RWZmZWN0KG5hbWUpKSB7XG4gICAgICAgIHByb3RvLl9jcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICAgIC8vIGFsd2F5cyBhZGQgb2JzZXJ2ZXJcbiAgICAgIGlmIChpbmZvLm9ic2VydmVyKSB7XG4gICAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eU9ic2VydmVyKG5hbWUsIGluZm8ub2JzZXJ2ZXIsIGFsbFByb3BzW2luZm8ub2JzZXJ2ZXJdKTtcbiAgICAgIH1cbiAgICAgIC8vIGFsd2F5cyBjcmVhdGUgdGhlIG1hcHBpbmcgZnJvbSBhdHRyaWJ1dGUgYmFjayB0byBwcm9wZXJ0eSBmb3IgZGVzZXJpYWxpemF0aW9uLlxuICAgICAgcHJvdG8uX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhbGwgc3R5bGUgZWxlbWVudHMgaW4gdGhlIGVsZW1lbnQgdGVtcGxhdGUuIFN0eWxlcyB3aXRoIHRoZVxuICAgICAqIGBpbmNsdWRlYCBhdHRyaWJ1dGUgYXJlIHByb2Nlc3NlZCBzdWNoIHRoYXQgYW55IHN0eWxlcyBpblxuICAgICAqIHRoZSBhc3NvY2lhdGVkIFwic3R5bGUgbW9kdWxlc1wiIGFyZSBpbmNsdWRlZCBpbiB0aGUgZWxlbWVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGtsYXNzIEVsZW1lbnQgY2xhc3NcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBwcm9jZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlzIE5hbWUgb2YgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIGZvciBlbGVtZW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9jZXNzRWxlbWVudFN0eWxlcyhrbGFzcywgdGVtcGxhdGUsIGlzLCBiYXNlVVJJKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVN0eWxlcyA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICAgIGNvbnN0IHN0eWxlc1dpdGhJbXBvcnRzID0gUG9seW1lci5TdHlsZUdhdGhlci5zdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgLy8gaW5zZXJ0IHN0eWxlcyBmcm9tIDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj4gYXQgdGhlIHRvcCBvZiB0aGUgdGVtcGxhdGVcbiAgICAgIGNvbnN0IGxpbmtlZFN0eWxlcyA9IFBvbHltZXIuU3R5bGVHYXRoZXIuc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMoaXMpO1xuICAgICAgY29uc3QgZmlyc3RUZW1wbGF0ZUNoaWxkID0gdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxpbmtlZFN0eWxlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGxldCBzID0gbGlua2VkU3R5bGVzW2lkeF07XG4gICAgICAgIHMudGV4dENvbnRlbnQgPSBrbGFzcy5fcHJvY2Vzc1N0eWxlVGV4dChzLnRleHRDb250ZW50LCBiYXNlVVJJKTtcbiAgICAgICAgdGVtcGxhdGUuY29udGVudC5pbnNlcnRCZWZvcmUocywgZmlyc3RUZW1wbGF0ZUNoaWxkKTtcbiAgICAgIH1cbiAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgXCJjb25jcmV0ZVwiIHN0eWxlIGluIHRoZSB0ZW1wbGF0ZSB3ZSBoYXZlIGVuY291bnRlcmVkXG4gICAgICBsZXQgdGVtcGxhdGVTdHlsZUluZGV4ID0gMDtcbiAgICAgIC8vIGVuc3VyZSBhbGwgZ2F0aGVyZWQgc3R5bGVzIGFyZSBhY3R1YWxseSBpbiB0aGlzIHRlbXBsYXRlLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXNXaXRoSW1wb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcyA9IHN0eWxlc1dpdGhJbXBvcnRzW2ldO1xuICAgICAgICBsZXQgdGVtcGxhdGVTdHlsZSA9IHRlbXBsYXRlU3R5bGVzW3RlbXBsYXRlU3R5bGVJbmRleF07XG4gICAgICAgIC8vIGlmIHRoZSBzdHlsZSBpcyBub3QgaW4gdGhpcyB0ZW1wbGF0ZSwgaXQncyBiZWVuIFwiaW5jbHVkZWRcIiBhbmRcbiAgICAgICAgLy8gd2UgcHV0IGEgY2xvbmUgb2YgaXQgaW4gdGhlIHRlbXBsYXRlIGJlZm9yZSB0aGUgc3R5bGUgdGhhdCBpbmNsdWRlZCBpdFxuICAgICAgICBpZiAodGVtcGxhdGVTdHlsZSAhPT0gcykge1xuICAgICAgICAgIHMgPSBzLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICB0ZW1wbGF0ZVN0eWxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHRlbXBsYXRlU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbXBsYXRlU3R5bGVJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHMudGV4dENvbnRlbnQgPSBrbGFzcy5fcHJvY2Vzc1N0eWxlVGV4dChzLnRleHRDb250ZW50LCBiYXNlVVJJKTtcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MpIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0ZW1wbGF0ZSwgaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwb2x5bWVyXG4gICAgICogQG1peGluQ2xhc3NcbiAgICAgKiBAdW5yZXN0cmljdGVkXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfRWxlbWVudE1peGlufVxuICAgICAqL1xuICAgIGNsYXNzIFBvbHltZXJFbGVtZW50IGV4dGVuZHMgcG9seW1lckVsZW1lbnRCYXNlIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvZiBQcm9wZXJ0aWVzTWl4aW4gX2ZpbmFsaXplQ2xhc3MgdG8gY3JlYXRlIG9ic2VydmVycyBhbmRcbiAgICAgICAqIGZpbmQgdGhlIHRlbXBsYXRlLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICAgKi9cbiAgICAgc3RhdGljIF9maW5hbGl6ZUNsYXNzKCkge1xuICAgICAgICBzdXBlci5fZmluYWxpemVDbGFzcygpO1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdpcycsIHRoaXMpKSAmJiAgdGhpcy5pcykge1xuICAgICAgICAgIFBvbHltZXIudGVsZW1ldHJ5LnJlZ2lzdGVyKHRoaXMucHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYnNlcnZlcnMgPSBvd25PYnNlcnZlcnModGhpcyk7XG4gICAgICAgIGlmIChvYnNlcnZlcnMpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZU9ic2VydmVycyhvYnNlcnZlcnMsIHRoaXMuX3Byb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vdGU6IGNyZWF0ZSBcIndvcmtpbmdcIiB0ZW1wbGF0ZSB0aGF0IGlzIGZpbmFsaXplZCBhdCBpbnN0YW5jZSB0aW1lXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gKi8gKHRoaXMpLnRlbXBsYXRlO1xuICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgICAgICAgICAgdC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX3RlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgb2YgUHJvcGVydGllc0NoYW5nZWQgY3JlYXRlUHJvcGVydGllcyB0byBjcmVhdGUgYWNjZXNzb3JzXG4gICAgICAgKiBhbmQgcHJvcGVydHkgZWZmZWN0cyBmb3IgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICovXG4gICAgICAgc3RhdGljIGNyZWF0ZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgICAgZm9yIChsZXQgcCBpbiBwcm9wcykge1xuICAgICAgICAgIGNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyh0aGlzLnByb3RvdHlwZSwgcCwgcHJvcHNbcF0sIHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgb2JzZXJ2ZXJzIGZvciB0aGUgZ2l2ZW4gYG9ic2VydmVyc2AgYXJyYXkuXG4gICAgICAgKiBMZXZlcmFnZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gY3JlYXRlIG9ic2VydmVycy5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlcnMgQXJyYXkgb2Ygb2JzZXJ2ZXIgZGVzY3JpcHRvcnMgZm9yXG4gICAgICAgKiAgIHRoaXMgY2xhc3NcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkeW5hbWljRm5zIE9iamVjdCBjb250YWluaW5nIGtleXMgZm9yIGFueSBwcm9wZXJ0aWVzXG4gICAgICAgKiAgIHRoYXQgYXJlIGZ1bmN0aW9ucyBhbmQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdCB3aGVuIHRoZSBmdW5jdGlvblxuICAgICAgICogICByZWZlcmVuY2UgaXMgY2hhbmdlZFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGNyZWF0ZU9ic2VydmVycyhvYnNlcnZlcnMsIGR5bmFtaWNGbnMpIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgb2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcHJvdG8uX2NyZWF0ZU1ldGhvZE9ic2VydmVyKG9ic2VydmVyc1tpXSwgZHluYW1pY0Zucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSB0aGF0IHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoaXMgZWxlbWVudCdzIHNoYWRvdyByb290LlxuICAgICAgICpcbiAgICAgICAqIElmIGEgYHN0YXRpYyBnZXQgaXMoKWAgZ2V0dGVyIGlzIGRlZmluZWQsIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXG4gICAgICAgKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gIGluIGEgYGRvbS1tb2R1bGVgIHdob3NlIGBpZGBcbiAgICAgICAqIG1hdGNoZXMgdGhpcyBlbGVtZW50J3MgYGlzYC5cbiAgICAgICAqXG4gICAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBnZXR0ZXIgdG8gcmV0dXJuIGFuIGFyYml0cmFyeSB0ZW1wbGF0ZVxuICAgICAgICogKGluIHdoaWNoIGNhc2UgdGhlIGBpc2AgZ2V0dGVyIGlzIHVubmVjZXNzYXJ5KS4gVGhlIHRlbXBsYXRlIHJldHVybmVkXG4gICAgICAgKiBtYXkgYmUgZWl0aGVyIGFuIGBIVE1MVGVtcGxhdGVFbGVtZW50YCBvciBhIHN0cmluZyB0aGF0IHdpbGwgYmVcbiAgICAgICAqIGF1dG9tYXRpY2FsbHkgcGFyc2VkIGludG8gYSB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQgd2hlbiBzdWJjbGFzc2luZywgaWYgdGhlIHN1cGVyIGNsYXNzIG92ZXJyb2RlIHRoZSBkZWZhdWx0XG4gICAgICAgKiBpbXBsZW1lbnRhdGlvbiBhbmQgdGhlIHN1YmNsYXNzIHdvdWxkIGxpa2UgdG8gcHJvdmlkZSBhbiBhbHRlcm5hdGVcbiAgICAgICAqIHRlbXBsYXRlIHZpYSBhIGBkb20tbW9kdWxlYCwgaXQgc2hvdWxkIG92ZXJyaWRlIHRoaXMgZ2V0dGVyIGFuZFxuICAgICAgICogcmV0dXJuIGBQb2x5bWVyLkRvbU1vZHVsZS5pbXBvcnQodGhpcy5pcywgJ3RlbXBsYXRlJylgLlxuICAgICAgICpcbiAgICAgICAqIElmIGEgc3ViY2xhc3Mgd291bGQgbGlrZSB0byBtb2RpZnkgdGhlIHN1cGVyIGNsYXNzIHRlbXBsYXRlLCBpdCBzaG91bGRcbiAgICAgICAqIGNsb25lIGl0IHJhdGhlciB0aGFuIG1vZGlmeSBpdCBpbiBwbGFjZS4gIElmIHRoZSBnZXR0ZXIgZG9lcyBleHBlbnNpdmVcbiAgICAgICAqIHdvcmsgc3VjaCBhcyBjbG9uaW5nL21vZGlmeWluZyBhIHRlbXBsYXRlLCBpdCBzaG91bGQgbWVtb2l6ZSB0aGVcbiAgICAgICAqIHRlbXBsYXRlIGZvciBtYXhpbXVtIHBlcmZvcm1hbmNlOlxuICAgICAgICpcbiAgICAgICAqICAgbGV0IG1lbW9pemVkVGVtcGxhdGU7XG4gICAgICAgKiAgIGNsYXNzIE15U3ViQ2xhc3MgZXh0ZW5kcyBNeVN1cGVyQ2xhc3Mge1xuICAgICAgICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICAgKiAgICAgICBpZiAoIW1lbW9pemVkVGVtcGxhdGUpIHtcbiAgICAgICAqICAgICAgICAgbWVtb2l6ZWRUZW1wbGF0ZSA9IHN1cGVyLnRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAqICAgICAgICAgbGV0IHN1YkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAqICAgICAgICAgc3ViQ29udGVudC50ZXh0Q29udGVudCA9ICdUaGlzIGNhbWUgZnJvbSBNeVN1YkNsYXNzJztcbiAgICAgICAqICAgICAgICAgbWVtb2l6ZWRUZW1wbGF0ZS5jb250ZW50LmFwcGVuZENoaWxkKHN1YkNvbnRlbnQpO1xuICAgICAgICogICAgICAgfVxuICAgICAgICogICAgICAgcmV0dXJuIG1lbW9pemVkVGVtcGxhdGU7XG4gICAgICAgKiAgICAgfVxuICAgICAgICogICB9XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7SFRNTFRlbXBsYXRlRWxlbWVudHxzdHJpbmd9IFRlbXBsYXRlIHRvIGJlIHN0YW1wZWRcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ190ZW1wbGF0ZScsIHRoaXMpKSkge1xuICAgICAgICAgIHRoaXMuX3RlbXBsYXRlID0gUG9seW1lci5Eb21Nb2R1bGUgJiYgUG9seW1lci5Eb21Nb2R1bGUuaW1wb3J0KFxuICAgICAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5pcywgJ3RlbXBsYXRlJykgfHxcbiAgICAgICAgICAgIC8vIG5vdGU6IGltcGxlbWVudGVkIHNvIGEgc3ViY2xhc3MgY2FuIHJldHJpZXZlIHRoZSBzdXBlclxuICAgICAgICAgICAgLy8gdGVtcGxhdGU7IGNhbGwgdGhlIHN1cGVyIGltcGwgdGhpcyB3YXkgc28gdGhhdCBgdGhpc2AgcG9pbnRzXG4gICAgICAgICAgICAvLyB0byB0aGUgc3VwZXJjbGFzcy5cbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZigvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9Ki8gKHRoaXMpLnByb3RvdHlwZSkuY29uc3RydWN0b3IudGVtcGxhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFBhdGggbWF0Y2hpbmcgdGhlIHVybCBmcm9tIHdoaWNoIHRoZSBlbGVtZW50IHdhcyBpbXBvcnRlZC5cbiAgICAgICAqIFRoaXMgcGF0aCBpcyB1c2VkIHRvIHJlc29sdmUgdXJsJ3MgaW4gdGVtcGxhdGUgc3R5bGUgY3NzVGV4dC5cbiAgICAgICAqIFRoZSBgaW1wb3J0UGF0aGAgcHJvcGVydHkgaXMgYWxzbyBzZXQgb24gZWxlbWVudCBpbnN0YW5jZXMgYW5kIGNhbiBiZVxuICAgICAgICogdXNlZCB0byBjcmVhdGUgYmluZGluZ3MgcmVsYXRpdmUgdG8gdGhlIGltcG9ydCBwYXRoLlxuICAgICAgICogRGVmYXVsdHMgdG8gdGhlIHBhdGggbWF0Y2hpbmcgdGhlIHVybCBjb250YWluaW5nIGEgYGRvbS1tb2R1bGVgIGVsZW1lbnRcbiAgICAgICAqIG1hdGNoaW5nIHRoaXMgZWxlbWVudCdzIHN0YXRpYyBgaXNgIHByb3BlcnR5LlxuICAgICAgICogTm90ZSwgdGhpcyBwYXRoIHNob3VsZCBjb250YWluIGEgdHJhaWxpbmcgYC9gLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGltcG9ydCBwYXRoIGZvciB0aGlzIGVsZW1lbnQgY2xhc3NcbiAgICAgICAqL1xuICAgICAgc3RhdGljIGdldCBpbXBvcnRQYXRoKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX2ltcG9ydFBhdGgnLCB0aGlzKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IFBvbHltZXIuRG9tTW9kdWxlICYmIFBvbHltZXIuRG9tTW9kdWxlLmltcG9ydCgvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovICh0aGlzKS5pcyk7XG4gICAgICAgICAgICB0aGlzLl9pbXBvcnRQYXRoID0gbW9kdWxlID8gbW9kdWxlLmFzc2V0cGF0aCA6ICcnIHx8XG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltcG9ydFBhdGg7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlO1xuICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgdGhpcy5faW1wb3J0UGF0aDtcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICAgIHRoaXMucm9vdFBhdGg7XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAgIC8qKiBAdHlwZSB7U3RhbXBlZFRlbXBsYXRlIHwgSFRNTEVsZW1lbnQgfCBTaGFkb3dSb290fSAqL1xuICAgICAgICB0aGlzLnJvb3Q7XG4gICAgICAgIC8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFFbGVtZW50Pn0gKi9cbiAgICAgICAgdGhpcy4kO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29yc2AgdG8gZW5zdXJlIGNsYXNzXG4gICAgICAgKiBtZXRhcHJvZ3JhbW1pbmcgcmVsYXRlZCB0byBwcm9wZXJ0eSBhY2Nlc3NvcnMgYW5kIGVmZmVjdHMgaGFzXG4gICAgICAgKiBjb21wbGV0ZWQgKGNhbGxzIGBmaW5hbGl6ZWApLlxuICAgICAgICpcbiAgICAgICAqIEl0IGFsc28gaW5pdGlhbGl6ZXMgYW55IHByb3BlcnR5IGRlZmF1bHRzIHByb3ZpZGVkIHZpYSBgdmFsdWVgIGluXG4gICAgICAgKiBgcHJvcGVydGllc2AgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gICAgICAgKi9cbiAgICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgICAgUG9seW1lci50ZWxlbWV0cnkuaW5zdGFuY2VDb3VudCsrO1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmZpbmFsaXplKCk7XG4gICAgICAgIGNvbnN0IGltcG9ydFBhdGggPSB0aGlzLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAgIC8vIG5vdGU6IGZpbmFsaXplIHRlbXBsYXRlIHdoZW4gd2UgaGF2ZSBhY2Nlc3MgdG8gYGxvY2FsTmFtZWAgdG9cbiAgICAgICAgLy8gYXZvaWQgZGVwZW5kZW5jZSBvbiBgaXNgIGZvciBwb2x5ZmlsbGluZyBzdHlsaW5nLlxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9maW5hbGl6ZVRlbXBsYXRlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKS5sb2NhbE5hbWUpO1xuICAgICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgLy8gc2V0IHBhdGggZGVmYXVsdHNcbiAgICAgICAgdGhpcy5yb290UGF0aCA9IFBvbHltZXIucm9vdFBhdGg7XG4gICAgICAgIHRoaXMuaW1wb3J0UGF0aCA9IGltcG9ydFBhdGg7XG4gICAgICAgIC8vIGFwcGx5IHByb3BlcnR5IGRlZmF1bHRzLi4uXG4gICAgICAgIGxldCBwJCA9IHByb3BlcnR5RGVmYXVsdHModGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmICghcCQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgcCBpbiBwJCkge1xuICAgICAgICAgIGxldCBpbmZvID0gcCRbcF07XG4gICAgICAgICAgLy8gRG9uJ3Qgc2V0IGRlZmF1bHQgdmFsdWUgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBvd24gcHJvcGVydHksIHdoaWNoXG4gICAgICAgICAgLy8gaGFwcGVucyB3aGVuIGEgYHByb3BlcnRpZXNgIHByb3BlcnR5IHdpdGggZGVmYXVsdCBidXQgbm8gZWZmZWN0cyBoYWRcbiAgICAgICAgICAvLyBhIHByb3BlcnR5IHNldCAoZS5nLiBib3VuZCkgYnkgaXRzIGhvc3QgYmVmb3JlIHVwZ3JhZGVcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVvZiBpbmZvLnZhbHVlID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICBpbmZvLnZhbHVlLmNhbGwodGhpcykgOlxuICAgICAgICAgICAgICBpbmZvLnZhbHVlO1xuICAgICAgICAgICAgLy8gU2V0IHZpYSBgX3NldFByb3BlcnR5YCBpZiB0aGVyZSBpcyBhbiBhY2Nlc3NvciwgdG8gZW5hYmxlXG4gICAgICAgICAgICAvLyBpbml0aWFsaXppbmcgcmVhZE9ubHkgcHJvcGVydHkgZGVmYXVsdHNcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNBY2Nlc3NvcihwKSkge1xuICAgICAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocCwgdmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpc1twXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdhdGhlciBzdHlsZSB0ZXh0IGZvciBhIHN0eWxlIGVsZW1lbnQgaW4gdGhlIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0IFRleHQgY29udGFpbmluZyBzdHlsaW5nIHRvIHByb2Nlc3NcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlYmFzZSBDU1MgcGF0aHMgYWdhaW5zdFxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIENTUyB0ZXh0XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfcHJvY2Vzc1N0eWxlVGV4dChjc3NUZXh0LCBiYXNlVVJJKSB7XG4gICAgICAgIHJldHVybiBQb2x5bWVyLlJlc29sdmVVcmwucmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIENvbmZpZ3VyZXMgYW4gZWxlbWVudCBgcHJvdG9gIHRvIGZ1bmN0aW9uIHdpdGggYSBnaXZlbiBgdGVtcGxhdGVgLlxuICAgICAgKiBUaGUgZWxlbWVudCBuYW1lIGBpc2AgYW5kIGV4dGVuZHMgYGV4dGAgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIFNoYWR5Q1NTXG4gICAgICAqIHN0eWxlIHNjb3BpbmcuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBUYWcgbmFtZSAob3IgdHlwZSBleHRlbnNpb24gbmFtZSkgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAqL1xuICAgICAgc3RhdGljIF9maW5hbGl6ZVRlbXBsYXRlKGlzKSB7XG4gICAgICAgIC8qKiBAY29uc3Qge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5wcm90b3R5cGUuX3RlbXBsYXRlO1xuICAgICAgICBpZiAodGVtcGxhdGUgJiYgIXRlbXBsYXRlLl9fcG9seW1lckZpbmFsaXplZCkge1xuICAgICAgICAgIHRlbXBsYXRlLl9fcG9seW1lckZpbmFsaXplZCA9IHRydWU7XG4gICAgICAgICAgY29uc3QgaW1wb3J0UGF0aCA9IHRoaXMuaW1wb3J0UGF0aDtcbiAgICAgICAgICBjb25zdCBiYXNlVVJJID0gaW1wb3J0UGF0aCA/IFBvbHltZXIuUmVzb2x2ZVVybC5yZXNvbHZlVXJsKGltcG9ydFBhdGgpIDogJyc7XG4gICAgICAgICAgLy8gZS5nLiBzdXBwb3J0IGBpbmNsdWRlPVwibW9kdWxlLW5hbWVcImAsIGFuZCBTaGFkeUNTU1xuICAgICAgICAgIHByb2Nlc3NFbGVtZW50U3R5bGVzKHRoaXMsIHRlbXBsYXRlLCBpcywgYmFzZVVSSSk7XG4gICAgICAgICAgdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIHN0YW5kYXJkIEN1c3RvbSBFbGVtZW50c1xuICAgICAgICogYGNvbm5lY3RlZENhbGxiYWNrYC5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBlbmFibGVzIHRoZSBwcm9wZXJ0eSBlZmZlY3RzIHN5c3RlbSBhbmRcbiAgICAgICAqIGZsdXNoZXMgYW55IHBlbmRpbmcgcHJvcGVydGllcywgYW5kIHVwZGF0ZXMgc2hpbW1lZCBDU1MgcHJvcGVydGllc1xuICAgICAgICogd2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZy9jdXN0b20gcHJvcGVydGllcyBwb2x5ZmlsbC5cbiAgICAgICAqXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzLCBpbnZhbGlkQ2FzdHN9IFN1cGVyIG1heSBvciBtYXkgbm90IGltcGxlbWVudCB0aGUgY2FsbGJhY2tcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBpZiAod2luZG93LlNoYWR5Q1NTICYmIHRoaXMuX3RlbXBsYXRlKSB7XG4gICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhbXBzIHRoZSBlbGVtZW50IHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgcmVhZHkoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX3N0YW1wVGVtcGxhdGUodGhpcy5fdGVtcGxhdGUpO1xuICAgICAgICAgIHRoaXMuJCA9IHRoaXMucm9vdC4kO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSW1wbGVtZW50cyBgUHJvcGVydHlFZmZlY3RzYCdzIGBfcmVhZHlDbGllbnRzYCBjYWxsLiBBdHRhY2hlc1xuICAgICAgICogZWxlbWVudCBkb20gYnkgY2FsbGluZyBgX2F0dGFjaERvbWAgd2l0aCB0aGUgZG9tIHN0YW1wZWQgZnJvbSB0aGVcbiAgICAgICAqIGVsZW1lbnQncyB0ZW1wbGF0ZSB2aWEgYF9zdGFtcFRlbXBsYXRlYC4gTm90ZSB0aGF0IHRoaXMgYWxsb3dzXG4gICAgICAgKiBjbGllbnQgZG9tIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IHByaW9yIHRvIGFueSBvYnNlcnZlcnNcbiAgICAgICAqIHJ1bm5pbmcuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBvdmVycmlkZVxuICAgICAgICovXG4gICAgICBfcmVhZHlDbGllbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5fdGVtcGxhdGUpIHtcbiAgICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9hdHRhY2hEb20oLyoqIEB0eXBlIHtTdGFtcGVkVGVtcGxhdGV9ICovKHRoaXMucm9vdCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBzdXBlci5fcmVhZHlDbGllbnRzIGhlcmUgc2V0cyB0aGUgY2xpZW50cyBpbml0aWFsaXplZCBmbGFnLlxuICAgICAgICAvLyBXZSBtdXN0IHdhaXQgdG8gZG8gdGhpcyB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGNyZWF0ZWQvYXR0YWNoZWRcbiAgICAgICAgLy8gc28gdGhhdCB0aGlzIGZsYWcgY2FuIGJlIGNoZWNrZWQgdG8gcHJldmVudCBub3RpZmljYXRpb25zIGZpcmVkXG4gICAgICAgIC8vIGR1cmluZyB0aGlzIHByb2Nlc3MgZnJvbSBiZWluZyBoYW5kbGVkIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgICAgICAgc3VwZXIuX3JlYWR5Q2xpZW50cygpO1xuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQXR0YWNoZXMgYW4gZWxlbWVudCdzIHN0YW1wZWQgZG9tIHRvIGl0c2VsZi4gQnkgZGVmYXVsdCxcbiAgICAgICAqIHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBgc2hhZG93Um9vdGAgYW5kIGFkZHMgdGhlIGRvbSB0byBpdC5cbiAgICAgICAqIEhvd2V2ZXIsIHRoaXMgbWV0aG9kIG1heSBiZSBvdmVycmlkZGVuIHRvIGFsbG93IGFuIGVsZW1lbnRcbiAgICAgICAqIHRvIHB1dCBpdHMgZG9tIGluIGFub3RoZXIgbG9jYXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHRocm93cyB7RXJyb3J9XG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdSZXR1cm59XG4gICAgICAgKiBAcGFyYW0ge1N0YW1wZWRUZW1wbGF0ZX0gZG9tIHRvIGF0dGFjaCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1NoYWRvd1Jvb3R9IG5vZGUgdG8gd2hpY2ggdGhlIGRvbSBoYXMgYmVlbiBhdHRhY2hlZC5cbiAgICAgICAqL1xuICAgICAgX2F0dGFjaERvbShkb20pIHtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoU2hhZG93KSB7XG4gICAgICAgICAgaWYgKGRvbSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKGRvbSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFkb3dSb290O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWRvd0RPTSBub3QgYXZhaWxhYmxlLiAnICtcbiAgICAgICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IG1vdmUgdG8gY29tcGlsZS10aW1lIGNvbmRpdGlvbmFsIHdoZW4gc3VwcG9ydGVkXG4gICAgICAgICAgJ1BvbHltZXIuRWxlbWVudCBjYW4gY3JlYXRlIGRvbSBhcyBjaGlsZHJlbiBpbnN0ZWFkIG9mIGluICcgK1xuICAgICAgICAgICdTaGFkb3dET00gYnkgc2V0dGluZyBgdGhpcy5yb290ID0gdGhpcztcXGAgYmVmb3JlIFxcYHJlYWR5XFxgLicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZyBhbmQgY3VzdG9tIHByb3BlcnR5IHNoaW0sIGNhdXNlcyBhbGxcbiAgICAgICAqIHNoaW1tZWQgc3R5bGVzIGluIHRoaXMgZWxlbWVudCAoYW5kIGl0cyBzdWJ0cmVlKSB0byBiZSB1cGRhdGVkXG4gICAgICAgKiBiYXNlZCBvbiBjdXJyZW50IGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICAgKlxuICAgICAgICogVGhlIG9wdGlvbmFsIHBhcmFtZXRlciBvdmVycmlkZXMgaW5saW5lIGN1c3RvbSBwcm9wZXJ0eSBzdHlsZXMgd2l0aCBhblxuICAgICAgICogb2JqZWN0IG9mIHByb3BlcnRpZXMgd2hlcmUgdGhlIGtleXMgYXJlIENTUyBwcm9wZXJ0aWVzLCBhbmQgdGhlIHZhbHVlc1xuICAgICAgICogYXJlIHN0cmluZ3MuXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZTogYHRoaXMudXBkYXRlU3R5bGVzKHsnLS1jb2xvcic6ICdibHVlJ30pYFxuICAgICAgICpcbiAgICAgICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkIHVubGVzcyBhIHZhbHVlIG9mIGBudWxsYCBpcyBzZXQuXG4gICAgICAgKlxuICAgICAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IHVwZGF0aW5nIENTUyBtaXhpbnMuXG4gICAgICAgKiBZb3UgY2FuIG5vdCBkeW5hbWljYWxseSBjaGFuZ2UgdGhlIHZhbHVlIG9mIGFuIGBAYXBwbHlgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBCYWcgb2YgY3VzdG9tIHByb3BlcnR5IGtleS92YWx1ZXMgdG9cbiAgICAgICAqICAgYXBwbHkgdG8gdGhpcyBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgICAgICovXG4gICAgICB1cGRhdGVTdHlsZXMocHJvcGVydGllcykge1xuICAgICAgICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlU3VidHJlZSgvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyksIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV3cml0ZXMgYSBnaXZlbiBVUkwgcmVsYXRpdmUgdG8gYSBiYXNlIFVSTC4gVGhlIGJhc2UgVVJMIGRlZmF1bHRzIHRvXG4gICAgICAgKiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gb2YgdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgdGhlIGBkb20tbW9kdWxlYCBmb3JcbiAgICAgICAqIHRoaXMgZWxlbWVudC4gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHNhbWUgVVJMIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICAgICAqIGJ1bmRsaW5nLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1zIG5vIHJlc29sdXRpb24gZm9yIFVSTHMgdGhhdCBzdGFydFxuICAgICAgICogd2l0aCBgL2AgKGFic29sdXRlIFVSTHMpIG9yIGAjYCAoaGFzaCBpZGVudGlmaWVycykuICBGb3IgZ2VuZXJhbCBwdXJwb3NlXG4gICAgICAgKiBVUkwgcmVzb2x1dGlvbiwgdXNlIGB3aW5kb3cuVVJMYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byByZXNvbHZlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBiYXNlIE9wdGlvbmFsIGJhc2UgVVJMIHRvIHJlc29sdmUgYWdhaW5zdCwgZGVmYXVsdHNcbiAgICAgICAqIHRvIHRoZSBlbGVtZW50J3MgYGltcG9ydFBhdGhgXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJld3JpdHRlbiBVUkwgcmVsYXRpdmUgdG8gYmFzZVxuICAgICAgICovXG4gICAgICByZXNvbHZlVXJsKHVybCwgYmFzZSkge1xuICAgICAgICBpZiAoIWJhc2UgJiYgdGhpcy5pbXBvcnRQYXRoKSB7XG4gICAgICAgICAgYmFzZSA9IFBvbHltZXIuUmVzb2x2ZVVybC5yZXNvbHZlVXJsKHRoaXMuaW1wb3J0UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBvbHltZXIuUmVzb2x2ZVVybC5yZXNvbHZlVXJsKHVybCwgYmFzZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yc2AgdG8gYWRkIG1hcCBvZiBkeW5hbWljIGZ1bmN0aW9ucyBvblxuICAgICAgICogdGVtcGxhdGUgaW5mbywgZm9yIGNvbnN1bXB0aW9uIGJ5IGBQcm9wZXJ0eUVmZmVjdHNgIHRlbXBsYXRlIGJpbmRpbmdcbiAgICAgICAqIGNvZGUuIFRoaXMgbWFwIGRldGVybWluZXMgd2hpY2ggbWV0aG9kIHRlbXBsYXRlcyBzaG91bGQgaGF2ZSBhY2Nlc3NvcnNcbiAgICAgICAqIGNyZWF0ZWQgZm9yIHRoZW0uXG4gICAgICAgKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgICB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucyA9IHRlbXBsYXRlSW5mby5keW5hbWljRm5zIHx8IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAgIHJldHVybiBzdXBlci5fcGFyc2VUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIFBvbHltZXJFbGVtZW50O1xuICB9KTtcblxuICAvKipcbiAgICogUHJvdmlkZXMgYmFzaWMgdHJhY2tpbmcgb2YgZWxlbWVudCBkZWZpbml0aW9ucyAocmVnaXN0cmF0aW9ucykgYW5kXG4gICAqIGluc3RhbmNlIGNvdW50cy5cbiAgICpcbiAgICogQG5hbWVzcGFjZVxuICAgKiBAc3VtbWFyeSBQcm92aWRlcyBiYXNpYyB0cmFja2luZyBvZiBlbGVtZW50IGRlZmluaXRpb25zIChyZWdpc3RyYXRpb25zKSBhbmRcbiAgICogaW5zdGFuY2UgY291bnRzLlxuICAgKi9cbiAgUG9seW1lci50ZWxlbWV0cnkgPSB7XG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIFBvbHltZXIgZWxlbWVudCBpbnN0YW5jZXMgY3JlYXRlZC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGluc3RhbmNlQ291bnQ6IDAsXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgUG9seW1lciBlbGVtZW50IGNsYXNzZXMgdGhhdCBoYXZlIGJlZW4gZmluYWxpemVkLlxuICAgICAqIEB0eXBlIHtBcnJheTxQb2x5bWVyLkVsZW1lbnQ+fVxuICAgICAqL1xuICAgIHJlZ2lzdHJhdGlvbnM6IFtdLFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IHByb3RvdHlwZSBFbGVtZW50IHByb3RvdHlwZSB0byBsb2dcbiAgICAgKiBAdGhpcyB7dGhpc31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZWdMb2c6IGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgICAgY29uc29sZS5sb2coJ1snICsgcHJvdG90eXBlLmlzICsgJ106IHJlZ2lzdGVyZWQnKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGNsYXNzIHByb3RvdHlwZSBmb3IgdGVsZW1ldHJ5IHB1cnBvc2VzLlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHByb3RvdHlwZSBFbGVtZW50IHByb3RvdHlwZSB0byByZWdpc3RlclxuICAgICAqIEB0aGlzIHt0aGlzfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZWdpc3RlcjogZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJhdGlvbnMucHVzaChwcm90b3R5cGUpO1xuICAgICAgUG9seW1lci5sb2cgJiYgdGhpcy5fcmVnTG9nKHByb3RvdHlwZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBMb2dzIGFsbCBlbGVtZW50cyByZWdpc3RlcmVkIHdpdGggYW4gYGlzYCB0byB0aGUgY29uc29sZS5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge3RoaXN9XG4gICAgICovXG4gICAgZHVtcFJlZ2lzdHJhdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZWdpc3RyYXRpb25zLmZvckVhY2godGhpcy5fcmVnTG9nKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZW4gdXNpbmcgdGhlIFNoYWR5Q1NTIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0eSBzaGltLCBjYXVzZXMgYWxsXG4gICAqIHNoaW1tZWQgYHN0eWxlc2AgKHZpYSBgY3VzdG9tLXN0eWxlYCkgaW4gdGhlIGRvY3VtZW50IChhbmQgaXRzIHN1YnRyZWUpXG4gICAqIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gY3VycmVudCBjdXN0b20gcHJvcGVydHkgdmFsdWVzLlxuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgcGFyYW1ldGVyIG92ZXJyaWRlcyBpbmxpbmUgY3VzdG9tIHByb3BlcnR5IHN0eWxlcyB3aXRoIGFuXG4gICAqIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHdoZXJlIHRoZSBrZXlzIGFyZSBDU1MgcHJvcGVydGllcywgYW5kIHRoZSB2YWx1ZXNcbiAgICogYXJlIHN0cmluZ3MuXG4gICAqXG4gICAqIEV4YW1wbGU6IGBQb2x5bWVyLnVwZGF0ZVN0eWxlcyh7Jy0tY29sb3InOiAnYmx1ZSd9KWBcbiAgICpcbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmV0YWluZWQgdW5sZXNzIGEgdmFsdWUgb2YgYG51bGxgIGlzIHNldC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wcyBCYWcgb2YgY3VzdG9tIHByb3BlcnR5IGtleS92YWx1ZXMgdG9cbiAgICogICBhcHBseSB0byB0aGUgZG9jdW1lbnQuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBQb2x5bWVyLnVwZGF0ZVN0eWxlcyA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRG9jdW1lbnQocHJvcHMpO1xuICAgIH1cbiAgfTtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9pcm9uLW1ldGEvaXJvbi1tZXRhLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgLyoqXG4gICAqIFRoZSBgaXJvbi1pY29uc2V0LXN2Z2AgZWxlbWVudCBhbGxvd3MgdXNlcnMgdG8gZGVmaW5lIHRoZWlyIG93biBpY29uIHNldHNcbiAgICogdGhhdCBjb250YWluIHN2ZyBpY29ucy4gVGhlIHN2ZyBpY29uIGVsZW1lbnRzIHNob3VsZCBiZSBjaGlsZHJlbiBvZiB0aGVcbiAgICogYGlyb24taWNvbnNldC1zdmdgIGVsZW1lbnQuIE11bHRpcGxlIGljb25zIHNob3VsZCBiZSBnaXZlbiBkaXN0aW5jdCBpZCdzLlxuICAgKlxuICAgKiBVc2luZyBzdmcgZWxlbWVudHMgdG8gY3JlYXRlIGljb25zIGhhcyBhIGZldyBhZHZhbnRhZ2VzIG92ZXIgdHJhZGl0aW9uYWxcbiAgICogYml0bWFwIGdyYXBoaWNzIGxpa2UganBnIG9yIHBuZy4gSWNvbnMgdGhhdCB1c2Ugc3ZnIGFyZSB2ZWN0b3IgYmFzZWQgc29cbiAgICogdGhleSBhcmUgcmVzb2x1dGlvbiBpbmRlcGVuZGVudCBhbmQgc2hvdWxkIGxvb2sgZ29vZCBvbiBhbnkgZGV2aWNlLiBUaGV5XG4gICAqIGFyZSBzdHlsYWJsZSB2aWEgY3NzLiBJY29ucyBjYW4gYmUgdGhlbWVkLCBjb2xvcml6ZWQsIGFuZCBldmVuIGFuaW1hdGVkLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgICAgPGlyb24taWNvbnNldC1zdmcgbmFtZT1cIm15LXN2Zy1pY29uc1wiIHNpemU9XCIyNFwiPlxuICAgKiAgICAgICA8c3ZnPlxuICAgKiAgICAgICAgIDxkZWZzPlxuICAgKiAgICAgICAgICAgPGcgaWQ9XCJzaGFwZVwiPlxuICAgKiAgICAgICAgICAgICA8cmVjdCB4PVwiMTJcIiB5PVwiMFwiIHdpZHRoPVwiMTJcIiBoZWlnaHQ9XCIyNFwiIC8+XG4gICAqICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTJcIiAvPlxuICAgKiAgICAgICAgICAgPC9nPlxuICAgKiAgICAgICAgIDwvZGVmcz5cbiAgICogICAgICAgPC9zdmc+XG4gICAqICAgICA8L2lyb24taWNvbnNldC1zdmc+XG4gICAqXG4gICAqIFRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5IHJlZ2lzdGVyIHRoZSBpY29uIHNldCBcIm15LXN2Zy1pY29uc1wiIHRvIHRoZSBpY29uc2V0XG4gICAqIGRhdGFiYXNlLiAgVG8gdXNlIHRoZXNlIGljb25zIGZyb20gd2l0aGluIGFub3RoZXIgZWxlbWVudCwgbWFrZSBhXG4gICAqIGBpcm9uLWljb25zZXRgIGVsZW1lbnQgYW5kIGNhbGwgdGhlIGBieUlkYCBtZXRob2RcbiAgICogdG8gcmV0cmlldmUgYSBnaXZlbiBpY29uc2V0LiBUbyBhcHBseSBhIHBhcnRpY3VsYXIgaWNvbiBpbnNpZGUgYW5cbiAgICogZWxlbWVudCB1c2UgdGhlIGBhcHBseUljb25gIG1ldGhvZC4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICAgICBpY29uc2V0LmFwcGx5SWNvbihpY29uTm9kZSwgJ2NhcicpO1xuICAgKlxuICAgKiBAZWxlbWVudCBpcm9uLWljb25zZXQtc3ZnXG4gICAqIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lci5JY29uc2V0fVxuICAgKi9cbiAgUG9seW1lcih7XG4gICAgaXM6ICdpcm9uLWljb25zZXQtc3ZnJyxcblxuICAgIHByb3BlcnRpZXM6IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbnNldC5cbiAgICAgICAqL1xuICAgICAgbmFtZToge3R5cGU6IFN0cmluZywgb2JzZXJ2ZXI6ICdfbmFtZUNoYW5nZWQnfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2l6ZSBvZiBhbiBpbmRpdmlkdWFsIGljb24uIE5vdGUgdGhhdCBpY29ucyBtdXN0IGJlIHNxdWFyZS5cbiAgICAgICAqL1xuICAgICAgc2l6ZToge3R5cGU6IE51bWJlciwgdmFsdWU6IDI0fSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgbWlycm9yaW5nIG9mIGljb25zIHdoZXJlIHNwZWNpZmllZCB3aGVuIHRoZXkgYXJlXG4gICAgICAgKiBzdGFtcGVkLiBJY29ucyB0aGF0IHNob3VsZCBiZSBtaXJyb3JlZCBzaG91bGQgYmUgZGVjb3JhdGVkIHdpdGggYVxuICAgICAgICogYG1pcnJvci1pbi1ydGxgIGF0dHJpYnV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBOT1RFOiBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgZGlyZWN0aW9uIHdpbGwgYmUgcmVzb2x2ZWQgb25jZSBwZXJcbiAgICAgICAqIGRvY3VtZW50IHBlciBpY29uc2V0LCBzbyBtb3ZpbmcgaWNvbnMgaW4gYW5kIG91dCBvZiBSVEwgc3VidHJlZXMgd2lsbFxuICAgICAgICogbm90IGNhdXNlIHRoZWlyIG1pcnJvcmVkIHN0YXRlIHRvIGNoYW5nZS5cbiAgICAgICAqL1xuICAgICAgcnRsTWlycm9yaW5nOiB7dHlwZTogQm9vbGVhbiwgdmFsdWU6IGZhbHNlfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgdG8gdHJ1ZSB0byBtZWFzdXJlIFJUTCBiYXNlZCBvbiB0aGUgZGlyIGF0dHJpYnV0ZSBvbiB0aGUgYm9keSBvclxuICAgICAgICogaHRtbCBlbGVtZW50cyAobWVhc3VyZWQgb24gZG9jdW1lbnQuYm9keSBvciBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgYXNcbiAgICAgICAqIGF2YWlsYWJsZSkuXG4gICAgICAgKi9cbiAgICAgIHVzZUdsb2JhbFJ0bEF0dHJpYnV0ZToge3R5cGU6IEJvb2xlYW4sIHZhbHVlOiBmYWxzZX1cbiAgICB9LFxuXG4gICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9tZXRhID1cbiAgICAgICAgICBuZXcgUG9seW1lci5Jcm9uTWV0YSh7dHlwZTogJ2ljb25zZXQnLCBrZXk6IG51bGwsIHZhbHVlOiBudWxsfSk7XG4gICAgfSxcblxuICAgIGF0dGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGFuIGFycmF5IG9mIGFsbCBpY29uIG5hbWVzIGluIHRoaXMgaWNvbnNldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyFBcnJheX0gQXJyYXkgb2YgaWNvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBnZXRJY29uTmFtZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5faWNvbnMgPSB0aGlzLl9jcmVhdGVJY29uTWFwKCk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faWNvbnMpLm1hcChmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOicgKyBuO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYW4gaWNvbiB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEFuIHN2ZyBpY29uIGlzIHByZXBlbmRlZCB0byB0aGUgZWxlbWVudCdzIHNoYWRvd1Jvb3QgaWYgaXQgZXhpc3RzLFxuICAgICAqIG90aGVyd2lzZSB0byB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBSVEwgbWlycm9yaW5nIGlzIGVuYWJsZWQsIGFuZCB0aGUgaWNvbiBpcyBtYXJrZWQgdG8gYmUgbWlycm9yZWQgaW5cbiAgICAgKiBSVEwsIHRoZSBlbGVtZW50IHdpbGwgYmUgdGVzdGVkIChvbmNlIGFuZCBvbmx5IG9uY2UgZXZlciBmb3IgZWFjaFxuICAgICAqIGljb25zZXQpIHRvIGRldGVybWluZSB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzdWJ0cmVlIHRoZSBlbGVtZW50IGlzIGluLlxuICAgICAqIFRoaXMgZGlyZWN0aW9uIHdpbGwgYXBwbHkgdG8gYWxsIGZ1dHVyZSBpY29uIGFwcGxpY2F0aW9ucywgYWx0aG91Z2ggb25seVxuICAgICAqIGljb25zIG1hcmtlZCB0byBiZSBtaXJyb3JlZCB3aWxsIGJlIGFmZmVjdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBhcHBseUljb25cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byB3aGljaCB0aGUgaWNvbiBpcyBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uTmFtZSBOYW1lIG9mIHRoZSBpY29uIHRvIGFwcGx5LlxuICAgICAqIEByZXR1cm4gez9FbGVtZW50fSBUaGUgc3ZnIGVsZW1lbnQgd2hpY2ggcmVuZGVycyB0aGUgaWNvbi5cbiAgICAgKi9cbiAgICBhcHBseUljb246IGZ1bmN0aW9uKGVsZW1lbnQsIGljb25OYW1lKSB7XG4gICAgICAvLyBSZW1vdmUgb2xkIHN2ZyBlbGVtZW50XG4gICAgICB0aGlzLnJlbW92ZUljb24oZWxlbWVudCk7XG4gICAgICAvLyBpbnN0YWxsIG5ldyBzdmcgZWxlbWVudFxuICAgICAgdmFyIHN2ZyA9IHRoaXMuX2Nsb25lSWNvbihcbiAgICAgICAgICBpY29uTmFtZSwgdGhpcy5ydGxNaXJyb3JpbmcgJiYgdGhpcy5fdGFyZ2V0SXNSVEwoZWxlbWVudCkpO1xuICAgICAgaWYgKHN2Zykge1xuICAgICAgICAvLyBpbnNlcnQgc3ZnIGVsZW1lbnQgaW50byBzaGFkb3cgcm9vdCwgaWYgaXQgZXhpc3RzXG4gICAgICAgIHZhciBwZGUgPSBQb2x5bWVyLmRvbShlbGVtZW50LnJvb3QgfHwgZWxlbWVudCk7XG4gICAgICAgIHBkZS5pbnNlcnRCZWZvcmUoc3ZnLCBwZGUuY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50Ll9zdmdJY29uID0gc3ZnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBpY29uIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQgYnkgdW5kb2luZyB0aGUgY2hhbmdlcyBlZmZlY3RlZFxuICAgICAqIGJ5IGBhcHBseUljb25gLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdGhlIGljb24gaXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICByZW1vdmVJY29uOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAvLyBSZW1vdmUgb2xkIHN2ZyBlbGVtZW50XG4gICAgICBpZiAoZWxlbWVudC5fc3ZnSWNvbikge1xuICAgICAgICBQb2x5bWVyLmRvbShlbGVtZW50LnJvb3QgfHwgZWxlbWVudCkucmVtb3ZlQ2hpbGQoZWxlbWVudC5fc3ZnSWNvbik7XG4gICAgICAgIGVsZW1lbnQuX3N2Z0ljb24gPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZWFzdXJlcyBhbmQgbWVtb2l6ZXMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZWxlbWVudC4gTm90ZSB0aGF0IHRoaXNcbiAgICAgKiBtZWFzdXJlbWVudCBpcyBvbmx5IGRvbmUgb25jZSBhbmQgdGhlIHJlc3VsdCBpcyBtZW1vaXplZCBmb3IgZnV0dXJlXG4gICAgICogaW52b2NhdGlvbnMuXG4gICAgICovXG4gICAgX3RhcmdldElzUlRMOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIGlmICh0aGlzLl9fdGFyZ2V0SXNSVEwgPT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy51c2VHbG9iYWxSdGxBdHRyaWJ1dGUpIHtcbiAgICAgICAgICB2YXIgZ2xvYmFsRWxlbWVudCA9XG4gICAgICAgICAgICAgIChkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKCdkaXInKSkgP1xuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5IDpcbiAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgICAgdGhpcy5fX3RhcmdldElzUlRMID0gZ2xvYmFsRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpID09PSAncnRsJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5ob3N0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX190YXJnZXRJc1JUTCA9XG4gICAgICAgICAgICAgIHRhcmdldCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpWydkaXJlY3Rpb24nXSA9PT0gJ3J0bCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX190YXJnZXRJc1JUTDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBXaGVuIG5hbWUgaXMgY2hhbmdlZCwgcmVnaXN0ZXIgaWNvbnNldCBtZXRhZGF0YVxuICAgICAqXG4gICAgICovXG4gICAgX25hbWVDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX21ldGEudmFsdWUgPSBudWxsO1xuICAgICAgdGhpcy5fbWV0YS5rZXkgPSB0aGlzLm5hbWU7XG4gICAgICB0aGlzLl9tZXRhLnZhbHVlID0gdGhpcztcblxuICAgICAgdGhpcy5hc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5maXJlKCdpcm9uLWljb25zZXQtYWRkZWQnLCB0aGlzLCB7bm9kZTogd2luZG93fSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWFwIG9mIGNoaWxkIFNWRyBlbGVtZW50cyBieSBpZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyFPYmplY3R9IE1hcCBvZiBpZCdzIHRvIFNWRyBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBfY3JlYXRlSWNvbk1hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBPYmplY3RzIGNoYWluZWQgdG8gT2JqZWN0LnByb3RvdHlwZSAoYHt9YCkgaGF2ZSBtZW1iZXJzLiBTcGVjaWZpY2FsbHksXG4gICAgICAvLyBvbiBGRiB0aGVyZSBpcyBhIGB3YXRjaGAgbWV0aG9kIHRoYXQgY29uZnVzZXMgdGhlIGljb24gbWFwLCBzbyB3ZVxuICAgICAgLy8gbmVlZCB0byB1c2UgYSBudWxsLWJhc2VkIG9iamVjdCBoZXJlLlxuICAgICAgdmFyIGljb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIFBvbHltZXIuZG9tKHRoaXMpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpZF0nKS5mb3JFYWNoKGZ1bmN0aW9uKGljb24pIHtcbiAgICAgICAgaWNvbnNbaWNvbi5pZF0gPSBpY29uO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaWNvbnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2UgaW5zdGFsbGFibGUgY2xvbmUgb2YgdGhlIFNWRyBlbGVtZW50IG1hdGNoaW5nIGBpZGAgaW4gdGhpc1xuICAgICAqIGljb25zZXQsIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSBSZXR1cm5zIGFuIGluc3RhbGxhYmxlIGNsb25lIG9mIHRoZSBTVkcgZWxlbWVudFxuICAgICAqIG1hdGNoaW5nIGBpZGAuXG4gICAgICovXG4gICAgX2Nsb25lSWNvbjogZnVuY3Rpb24oaWQsIG1pcnJvckFsbG93ZWQpIHtcbiAgICAgIC8vIGNyZWF0ZSB0aGUgaWNvbiBtYXAgb24tZGVtYW5kLCBzaW5jZSB0aGUgaWNvbnNldCBpdHNlbGYgaGFzIG5vIGRpc2NyZXRlXG4gICAgICAvLyBzaWduYWwgdG8ga25vdyB3aGVuIGl0J3MgY2hpbGRyZW4gYXJlIGZ1bGx5IHBhcnNlZFxuICAgICAgdGhpcy5faWNvbnMgPSB0aGlzLl9pY29ucyB8fCB0aGlzLl9jcmVhdGVJY29uTWFwKCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZVN2Z0Nsb25lKHRoaXMuX2ljb25zW2lkXSwgdGhpcy5zaXplLCBtaXJyb3JBbGxvd2VkKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBzb3VyY2VTdmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbWlycm9yQWxsb3dlZFxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAgICovXG4gICAgX3ByZXBhcmVTdmdDbG9uZTogZnVuY3Rpb24oc291cmNlU3ZnLCBzaXplLCBtaXJyb3JBbGxvd2VkKSB7XG4gICAgICBpZiAoc291cmNlU3ZnKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gc291cmNlU3ZnLmNsb25lTm9kZSh0cnVlKSxcbiAgICAgICAgICAgIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyksXG4gICAgICAgICAgICB2aWV3Qm94ID1cbiAgICAgICAgICAgICAgICBjb250ZW50LmdldEF0dHJpYnV0ZSgndmlld0JveCcpIHx8ICcwIDAgJyArIHNpemUgKyAnICcgKyBzaXplLFxuICAgICAgICAgICAgY3NzVGV4dCA9XG4gICAgICAgICAgICAgICAgJ3BvaW50ZXItZXZlbnRzOiBub25lOyBkaXNwbGF5OiBibG9jazsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsnO1xuXG4gICAgICAgIGlmIChtaXJyb3JBbGxvd2VkICYmIGNvbnRlbnQuaGFzQXR0cmlidXRlKCdtaXJyb3ItaW4tcnRsJykpIHtcbiAgICAgICAgICBjc3NUZXh0ICs9XG4gICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgtMSwxKTt0cmFuc2Zvcm06c2NhbGUoLTEsMSk7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXI7JztcbiAgICAgICAgfVxuXG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCB2aWV3Qm94KTtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCBtZWV0Jyk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuICAgICAgICAvLyBUT0RPKGRmcmVlZG0pOiBgcG9pbnRlci1ldmVudHM6IG5vbmVgIHdvcmtzIGFyb3VuZFxuICAgICAgICAvLyBodHRwczovL2NyYnVnLmNvbS8zNzAxMzZcbiAgICAgICAgLy8gVE9ETyhzam1pbGVzKTogaW5saW5lIHN0eWxlIG1heSBub3QgYmUgaWRlYWwsIGJ1dCBhdm9pZHMgcmVxdWlyaW5nIGFcbiAgICAgICAgLy8gc2hhZG93LXJvb3RcbiAgICAgICAgc3ZnLnN0eWxlLmNzc1RleHQgPSBjc3NUZXh0O1xuICAgICAgICBzdmcuYXBwZW5kQ2hpbGQoY29udGVudCkucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgICByZXR1cm4gc3ZnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gIH0pO1xuPC9zY3JpcHQ+XG4iLCJcbnJlcXVpcmUoJy4uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1pY29uc2V0LXN2Zy9pcm9uLWljb25zZXQtc3ZnLmh0bWwnKTtcblxuY29uc3QgUmVnaXN0ZXJIdG1sVGVtcGxhdGUgPSByZXF1aXJlKCdwb2x5bWVyLXdlYnBhY2stbG9hZGVyL3JlZ2lzdGVyLWh0bWwtdGVtcGxhdGUnKTtcblxuUmVnaXN0ZXJIdG1sVGVtcGxhdGUudG9Cb2R5KFwiPGlyb24taWNvbnNldC1zdmcgbmFtZT1vcHRpbm9taWMtaWNvbnMgc2l6ZT0yND4gPHN2Zz4gPGRlZnM+IDxnIGlkPWFycm93LWJhY2s+IDxwYXRoIGQ9XFxcIk0yMCAxMUg3LjgzbDUuNTktNS41OUwxMiA0bC04IDggOCA4IDEuNDEtMS40MUw3LjgzIDEzSDIwdi0yelxcXCI+PC9wYXRoPiA8L2c+IDxnIGlkPW1lbnU+IDxwYXRoIGQ9XFxcIk0zIDE4aDE4di0ySDN2MnptMC01aDE4di0ySDN2MnptMC03djJoMThWNkgzelxcXCI+PC9wYXRoPiA8L2c+IDxnIGlkPWNoZXZyb24tcmlnaHQ+IDxwYXRoIGQ9XFxcIk0xMCA2TDguNTkgNy40MSAxMy4xNyAxMmwtNC41OCA0LjU5TDEwIDE4bDYtNnpcXFwiPjwvcGF0aD4gPC9nPiA8ZyBpZD1jbG9zZT4gPHBhdGggZD1cXFwiTTE5IDYuNDFMMTcuNTkgNSAxMiAxMC41OSA2LjQxIDUgNSA2LjQxIDEwLjU5IDEyIDUgMTcuNTkgNi40MSAxOSAxMiAxMy40MSAxNy41OSAxOSAxOSAxNy41OSAxMy40MSAxMnpcXFwiPjwvcGF0aD4gPC9nPiA8L2RlZnM+IDwvc3ZnPiA8L2lyb24taWNvbnNldC1zdmc+XCIpO1xuIiwiXG5yZXF1aXJlKCcuLi9wb2x5bWVyL3BvbHltZXIuaHRtbCcpO1xuXG5jb25zdCBSZWdpc3Rlckh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJ3BvbHltZXItd2VicGFjay1sb2FkZXIvcmVnaXN0ZXItaHRtbC10ZW1wbGF0ZScpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS50b0JvZHkoXCI8Y3VzdG9tLXN0eWxlPiA8c3R5bGUgaXM9Y3VzdG9tLXN0eWxlPmh0bWx7LS1nb29nbGUtcmVkLTEwMDojZjRjN2MzOy0tZ29vZ2xlLXJlZC0zMDA6I2U2N2M3MzstLWdvb2dsZS1yZWQtNTAwOiNkYjQ0Mzc7LS1nb29nbGUtcmVkLTcwMDojYzUzOTI5Oy0tZ29vZ2xlLWJsdWUtMTAwOiNjNmRhZmM7LS1nb29nbGUtYmx1ZS0zMDA6IzdiYWFmNzstLWdvb2dsZS1ibHVlLTUwMDojNDI4NWY0Oy0tZ29vZ2xlLWJsdWUtNzAwOiMzMzY3ZDY7LS1nb29nbGUtZ3JlZW4tMTAwOiNiN2UxY2Q7LS1nb29nbGUtZ3JlZW4tMzAwOiM1N2JiOGE7LS1nb29nbGUtZ3JlZW4tNTAwOiMwZjlkNTg7LS1nb29nbGUtZ3JlZW4tNzAwOiMwYjgwNDM7LS1nb29nbGUteWVsbG93LTEwMDojZmNlOGIyOy0tZ29vZ2xlLXllbGxvdy0zMDA6I2Y3Y2I0ZDstLWdvb2dsZS15ZWxsb3ctNTAwOiNmNGI0MDA7LS1nb29nbGUteWVsbG93LTcwMDojZjA5MzAwOy0tZ29vZ2xlLWdyZXktMTAwOiNmNWY1ZjU7LS1nb29nbGUtZ3JleS0zMDA6I2UwZTBlMDstLWdvb2dsZS1ncmV5LTUwMDojOWU5ZTllOy0tZ29vZ2xlLWdyZXktNzAwOiM2MTYxNjE7LS1wYXBlci1yZWQtNTA6I2ZmZWJlZTstLXBhcGVyLXJlZC0xMDA6I2ZmY2RkMjstLXBhcGVyLXJlZC0yMDA6I2VmOWE5YTstLXBhcGVyLXJlZC0zMDA6I2U1NzM3MzstLXBhcGVyLXJlZC00MDA6I2VmNTM1MDstLXBhcGVyLXJlZC01MDA6I2Y0NDMzNjstLXBhcGVyLXJlZC02MDA6I2U1MzkzNTstLXBhcGVyLXJlZC03MDA6I2QzMmYyZjstLXBhcGVyLXJlZC04MDA6I2M2MjgyODstLXBhcGVyLXJlZC05MDA6I2I3MWMxYzstLXBhcGVyLXJlZC1hMTAwOiNmZjhhODA7LS1wYXBlci1yZWQtYTIwMDojZmY1MjUyOy0tcGFwZXItcmVkLWE0MDA6I2ZmMTc0NDstLXBhcGVyLXJlZC1hNzAwOiNkNTAwMDA7LS1wYXBlci1waW5rLTUwOiNmY2U0ZWM7LS1wYXBlci1waW5rLTEwMDojZjhiYmQwOy0tcGFwZXItcGluay0yMDA6I2Y0OGZiMTstLXBhcGVyLXBpbmstMzAwOiNmMDYyOTI7LS1wYXBlci1waW5rLTQwMDojZWM0MDdhOy0tcGFwZXItcGluay01MDA6I2U5MWU2MzstLXBhcGVyLXBpbmstNjAwOiNkODFiNjA7LS1wYXBlci1waW5rLTcwMDojYzIxODViOy0tcGFwZXItcGluay04MDA6I2FkMTQ1NzstLXBhcGVyLXBpbmstOTAwOiM4ODBlNGY7LS1wYXBlci1waW5rLWExMDA6I2ZmODBhYjstLXBhcGVyLXBpbmstYTIwMDojZmY0MDgxOy0tcGFwZXItcGluay1hNDAwOiNmNTAwNTc7LS1wYXBlci1waW5rLWE3MDA6I2M1MTE2MjstLXBhcGVyLXB1cnBsZS01MDojZjNlNWY1Oy0tcGFwZXItcHVycGxlLTEwMDojZTFiZWU3Oy0tcGFwZXItcHVycGxlLTIwMDojY2U5M2Q4Oy0tcGFwZXItcHVycGxlLTMwMDojYmE2OGM4Oy0tcGFwZXItcHVycGxlLTQwMDojYWI0N2JjOy0tcGFwZXItcHVycGxlLTUwMDojOWMyN2IwOy0tcGFwZXItcHVycGxlLTYwMDojOGUyNGFhOy0tcGFwZXItcHVycGxlLTcwMDojN2IxZmEyOy0tcGFwZXItcHVycGxlLTgwMDojNmExYjlhOy0tcGFwZXItcHVycGxlLTkwMDojNGExNDhjOy0tcGFwZXItcHVycGxlLWExMDA6I2VhODBmYzstLXBhcGVyLXB1cnBsZS1hMjAwOiNlMDQwZmI7LS1wYXBlci1wdXJwbGUtYTQwMDojZDUwMGY5Oy0tcGFwZXItcHVycGxlLWE3MDA6I2FhMDBmZjstLXBhcGVyLWRlZXAtcHVycGxlLTUwOiNlZGU3ZjY7LS1wYXBlci1kZWVwLXB1cnBsZS0xMDA6I2QxYzRlOTstLXBhcGVyLWRlZXAtcHVycGxlLTIwMDojYjM5ZGRiOy0tcGFwZXItZGVlcC1wdXJwbGUtMzAwOiM5NTc1Y2Q7LS1wYXBlci1kZWVwLXB1cnBsZS00MDA6IzdlNTdjMjstLXBhcGVyLWRlZXAtcHVycGxlLTUwMDojNjczYWI3Oy0tcGFwZXItZGVlcC1wdXJwbGUtNjAwOiM1ZTM1YjE7LS1wYXBlci1kZWVwLXB1cnBsZS03MDA6IzUxMmRhODstLXBhcGVyLWRlZXAtcHVycGxlLTgwMDojNDUyN2EwOy0tcGFwZXItZGVlcC1wdXJwbGUtOTAwOiMzMTFiOTI7LS1wYXBlci1kZWVwLXB1cnBsZS1hMTAwOiNiMzg4ZmY7LS1wYXBlci1kZWVwLXB1cnBsZS1hMjAwOiM3YzRkZmY7LS1wYXBlci1kZWVwLXB1cnBsZS1hNDAwOiM2NTFmZmY7LS1wYXBlci1kZWVwLXB1cnBsZS1hNzAwOiM2MjAwZWE7LS1wYXBlci1pbmRpZ28tNTA6I2U4ZWFmNjstLXBhcGVyLWluZGlnby0xMDA6I2M1Y2FlOTstLXBhcGVyLWluZGlnby0yMDA6IzlmYThkYTstLXBhcGVyLWluZGlnby0zMDA6Izc5ODZjYjstLXBhcGVyLWluZGlnby00MDA6IzVjNmJjMDstLXBhcGVyLWluZGlnby01MDA6IzNmNTFiNTstLXBhcGVyLWluZGlnby02MDA6IzM5NDlhYjstLXBhcGVyLWluZGlnby03MDA6IzMwM2Y5ZjstLXBhcGVyLWluZGlnby04MDA6IzI4MzU5MzstLXBhcGVyLWluZGlnby05MDA6IzFhMjM3ZTstLXBhcGVyLWluZGlnby1hMTAwOiM4YzllZmY7LS1wYXBlci1pbmRpZ28tYTIwMDojNTM2ZGZlOy0tcGFwZXItaW5kaWdvLWE0MDA6IzNkNWFmZTstLXBhcGVyLWluZGlnby1hNzAwOiMzMDRmZmU7LS1wYXBlci1ibHVlLTUwOiNlM2YyZmQ7LS1wYXBlci1ibHVlLTEwMDojYmJkZWZiOy0tcGFwZXItYmx1ZS0yMDA6IzkwY2FmOTstLXBhcGVyLWJsdWUtMzAwOiM2NGI1ZjY7LS1wYXBlci1ibHVlLTQwMDojNDJhNWY1Oy0tcGFwZXItYmx1ZS01MDA6IzIxOTZmMzstLXBhcGVyLWJsdWUtNjAwOiMxZTg4ZTU7LS1wYXBlci1ibHVlLTcwMDojMTk3NmQyOy0tcGFwZXItYmx1ZS04MDA6IzE1NjVjMDstLXBhcGVyLWJsdWUtOTAwOiMwZDQ3YTE7LS1wYXBlci1ibHVlLWExMDA6IzgyYjFmZjstLXBhcGVyLWJsdWUtYTIwMDojNDQ4YWZmOy0tcGFwZXItYmx1ZS1hNDAwOiMyOTc5ZmY7LS1wYXBlci1ibHVlLWE3MDA6IzI5NjJmZjstLXBhcGVyLWxpZ2h0LWJsdWUtNTA6I2UxZjVmZTstLXBhcGVyLWxpZ2h0LWJsdWUtMTAwOiNiM2U1ZmM7LS1wYXBlci1saWdodC1ibHVlLTIwMDojODFkNGZhOy0tcGFwZXItbGlnaHQtYmx1ZS0zMDA6IzRmYzNmNzstLXBhcGVyLWxpZ2h0LWJsdWUtNDAwOiMyOWI2ZjY7LS1wYXBlci1saWdodC1ibHVlLTUwMDojMDNhOWY0Oy0tcGFwZXItbGlnaHQtYmx1ZS02MDA6IzAzOWJlNTstLXBhcGVyLWxpZ2h0LWJsdWUtNzAwOiMwMjg4ZDE7LS1wYXBlci1saWdodC1ibHVlLTgwMDojMDI3N2JkOy0tcGFwZXItbGlnaHQtYmx1ZS05MDA6IzAxNTc5YjstLXBhcGVyLWxpZ2h0LWJsdWUtYTEwMDojODBkOGZmOy0tcGFwZXItbGlnaHQtYmx1ZS1hMjAwOiM0MGM0ZmY7LS1wYXBlci1saWdodC1ibHVlLWE0MDA6IzAwYjBmZjstLXBhcGVyLWxpZ2h0LWJsdWUtYTcwMDojMDA5MWVhOy0tcGFwZXItY3lhbi01MDojZTBmN2ZhOy0tcGFwZXItY3lhbi0xMDA6I2IyZWJmMjstLXBhcGVyLWN5YW4tMjAwOiM4MGRlZWE7LS1wYXBlci1jeWFuLTMwMDojNGRkMGUxOy0tcGFwZXItY3lhbi00MDA6IzI2YzZkYTstLXBhcGVyLWN5YW4tNTAwOiMwMGJjZDQ7LS1wYXBlci1jeWFuLTYwMDojMDBhY2MxOy0tcGFwZXItY3lhbi03MDA6IzAwOTdhNzstLXBhcGVyLWN5YW4tODAwOiMwMDgzOGY7LS1wYXBlci1jeWFuLTkwMDojMDA2MDY0Oy0tcGFwZXItY3lhbi1hMTAwOiM4NGZmZmY7LS1wYXBlci1jeWFuLWEyMDA6IzE4ZmZmZjstLXBhcGVyLWN5YW4tYTQwMDojMDBlNWZmOy0tcGFwZXItY3lhbi1hNzAwOiMwMGI4ZDQ7LS1wYXBlci10ZWFsLTUwOiNlMGYyZjE7LS1wYXBlci10ZWFsLTEwMDojYjJkZmRiOy0tcGFwZXItdGVhbC0yMDA6IzgwY2JjNDstLXBhcGVyLXRlYWwtMzAwOiM0ZGI2YWM7LS1wYXBlci10ZWFsLTQwMDojMjZhNjlhOy0tcGFwZXItdGVhbC01MDA6IzAwOTY4ODstLXBhcGVyLXRlYWwtNjAwOiMwMDg5N2I7LS1wYXBlci10ZWFsLTcwMDojMDA3OTZiOy0tcGFwZXItdGVhbC04MDA6IzAwNjk1YzstLXBhcGVyLXRlYWwtOTAwOiMwMDRkNDA7LS1wYXBlci10ZWFsLWExMDA6I2E3ZmZlYjstLXBhcGVyLXRlYWwtYTIwMDojNjRmZmRhOy0tcGFwZXItdGVhbC1hNDAwOiMxZGU5YjY7LS1wYXBlci10ZWFsLWE3MDA6IzAwYmZhNTstLXBhcGVyLWdyZWVuLTUwOiNlOGY1ZTk7LS1wYXBlci1ncmVlbi0xMDA6I2M4ZTZjOTstLXBhcGVyLWdyZWVuLTIwMDojYTVkNmE3Oy0tcGFwZXItZ3JlZW4tMzAwOiM4MWM3ODQ7LS1wYXBlci1ncmVlbi00MDA6IzY2YmI2YTstLXBhcGVyLWdyZWVuLTUwMDojNGNhZjUwOy0tcGFwZXItZ3JlZW4tNjAwOiM0M2EwNDc7LS1wYXBlci1ncmVlbi03MDA6IzM4OGUzYzstLXBhcGVyLWdyZWVuLTgwMDojMmU3ZDMyOy0tcGFwZXItZ3JlZW4tOTAwOiMxYjVlMjA7LS1wYXBlci1ncmVlbi1hMTAwOiNiOWY2Y2E7LS1wYXBlci1ncmVlbi1hMjAwOiM2OWYwYWU7LS1wYXBlci1ncmVlbi1hNDAwOiMwMGU2NzY7LS1wYXBlci1ncmVlbi1hNzAwOiMwMGM4NTM7LS1wYXBlci1saWdodC1ncmVlbi01MDojZjFmOGU5Oy0tcGFwZXItbGlnaHQtZ3JlZW4tMTAwOiNkY2VkYzg7LS1wYXBlci1saWdodC1ncmVlbi0yMDA6I2M1ZTFhNTstLXBhcGVyLWxpZ2h0LWdyZWVuLTMwMDojYWVkNTgxOy0tcGFwZXItbGlnaHQtZ3JlZW4tNDAwOiM5Y2NjNjU7LS1wYXBlci1saWdodC1ncmVlbi01MDA6IzhiYzM0YTstLXBhcGVyLWxpZ2h0LWdyZWVuLTYwMDojN2NiMzQyOy0tcGFwZXItbGlnaHQtZ3JlZW4tNzAwOiM2ODlmMzg7LS1wYXBlci1saWdodC1ncmVlbi04MDA6IzU1OGIyZjstLXBhcGVyLWxpZ2h0LWdyZWVuLTkwMDojMzM2OTFlOy0tcGFwZXItbGlnaHQtZ3JlZW4tYTEwMDojY2NmZjkwOy0tcGFwZXItbGlnaHQtZ3JlZW4tYTIwMDojYjJmZjU5Oy0tcGFwZXItbGlnaHQtZ3JlZW4tYTQwMDojNzZmZjAzOy0tcGFwZXItbGlnaHQtZ3JlZW4tYTcwMDojNjRkZDE3Oy0tcGFwZXItbGltZS01MDojZjlmYmU3Oy0tcGFwZXItbGltZS0xMDA6I2YwZjRjMzstLXBhcGVyLWxpbWUtMjAwOiNlNmVlOWM7LS1wYXBlci1saW1lLTMwMDojZGNlNzc1Oy0tcGFwZXItbGltZS00MDA6I2Q0ZTE1NzstLXBhcGVyLWxpbWUtNTAwOiNjZGRjMzk7LS1wYXBlci1saW1lLTYwMDojYzBjYTMzOy0tcGFwZXItbGltZS03MDA6I2FmYjQyYjstLXBhcGVyLWxpbWUtODAwOiM5ZTlkMjQ7LS1wYXBlci1saW1lLTkwMDojODI3NzE3Oy0tcGFwZXItbGltZS1hMTAwOiNmNGZmODE7LS1wYXBlci1saW1lLWEyMDA6I2VlZmY0MTstLXBhcGVyLWxpbWUtYTQwMDojYzZmZjAwOy0tcGFwZXItbGltZS1hNzAwOiNhZWVhMDA7LS1wYXBlci15ZWxsb3ctNTA6I2ZmZmRlNzstLXBhcGVyLXllbGxvdy0xMDA6I2ZmZjljNDstLXBhcGVyLXllbGxvdy0yMDA6I2ZmZjU5ZDstLXBhcGVyLXllbGxvdy0zMDA6I2ZmZjE3NjstLXBhcGVyLXllbGxvdy00MDA6I2ZmZWU1ODstLXBhcGVyLXllbGxvdy01MDA6I2ZmZWIzYjstLXBhcGVyLXllbGxvdy02MDA6I2ZkZDgzNTstLXBhcGVyLXllbGxvdy03MDA6I2ZiYzAyZDstLXBhcGVyLXllbGxvdy04MDA6I2Y5YTgyNTstLXBhcGVyLXllbGxvdy05MDA6I2Y1N2YxNzstLXBhcGVyLXllbGxvdy1hMTAwOiNmZmZmOGQ7LS1wYXBlci15ZWxsb3ctYTIwMDojZmZmZjAwOy0tcGFwZXIteWVsbG93LWE0MDA6I2ZmZWEwMDstLXBhcGVyLXllbGxvdy1hNzAwOiNmZmQ2MDA7LS1wYXBlci1hbWJlci01MDojZmZmOGUxOy0tcGFwZXItYW1iZXItMTAwOiNmZmVjYjM7LS1wYXBlci1hbWJlci0yMDA6I2ZmZTA4MjstLXBhcGVyLWFtYmVyLTMwMDojZmZkNTRmOy0tcGFwZXItYW1iZXItNDAwOiNmZmNhMjg7LS1wYXBlci1hbWJlci01MDA6I2ZmYzEwNzstLXBhcGVyLWFtYmVyLTYwMDojZmZiMzAwOy0tcGFwZXItYW1iZXItNzAwOiNmZmEwMDA7LS1wYXBlci1hbWJlci04MDA6I2ZmOGYwMDstLXBhcGVyLWFtYmVyLTkwMDojZmY2ZjAwOy0tcGFwZXItYW1iZXItYTEwMDojZmZlNTdmOy0tcGFwZXItYW1iZXItYTIwMDojZmZkNzQwOy0tcGFwZXItYW1iZXItYTQwMDojZmZjNDAwOy0tcGFwZXItYW1iZXItYTcwMDojZmZhYjAwOy0tcGFwZXItb3JhbmdlLTUwOiNmZmYzZTA7LS1wYXBlci1vcmFuZ2UtMTAwOiNmZmUwYjI7LS1wYXBlci1vcmFuZ2UtMjAwOiNmZmNjODA7LS1wYXBlci1vcmFuZ2UtMzAwOiNmZmI3NGQ7LS1wYXBlci1vcmFuZ2UtNDAwOiNmZmE3MjY7LS1wYXBlci1vcmFuZ2UtNTAwOiNmZjk4MDA7LS1wYXBlci1vcmFuZ2UtNjAwOiNmYjhjMDA7LS1wYXBlci1vcmFuZ2UtNzAwOiNmNTdjMDA7LS1wYXBlci1vcmFuZ2UtODAwOiNlZjZjMDA7LS1wYXBlci1vcmFuZ2UtOTAwOiNlNjUxMDA7LS1wYXBlci1vcmFuZ2UtYTEwMDojZmZkMTgwOy0tcGFwZXItb3JhbmdlLWEyMDA6I2ZmYWI0MDstLXBhcGVyLW9yYW5nZS1hNDAwOiNmZjkxMDA7LS1wYXBlci1vcmFuZ2UtYTcwMDojZmY2NTAwOy0tcGFwZXItZGVlcC1vcmFuZ2UtNTA6I2ZiZTllNzstLXBhcGVyLWRlZXAtb3JhbmdlLTEwMDojZmZjY2JjOy0tcGFwZXItZGVlcC1vcmFuZ2UtMjAwOiNmZmFiOTE7LS1wYXBlci1kZWVwLW9yYW5nZS0zMDA6I2ZmOGE2NTstLXBhcGVyLWRlZXAtb3JhbmdlLTQwMDojZmY3MDQzOy0tcGFwZXItZGVlcC1vcmFuZ2UtNTAwOiNmZjU3MjI7LS1wYXBlci1kZWVwLW9yYW5nZS02MDA6I2Y0NTExZTstLXBhcGVyLWRlZXAtb3JhbmdlLTcwMDojZTY0YTE5Oy0tcGFwZXItZGVlcC1vcmFuZ2UtODAwOiNkODQzMTU7LS1wYXBlci1kZWVwLW9yYW5nZS05MDA6I2JmMzYwYzstLXBhcGVyLWRlZXAtb3JhbmdlLWExMDA6I2ZmOWU4MDstLXBhcGVyLWRlZXAtb3JhbmdlLWEyMDA6I2ZmNmU0MDstLXBhcGVyLWRlZXAtb3JhbmdlLWE0MDA6I2ZmM2QwMDstLXBhcGVyLWRlZXAtb3JhbmdlLWE3MDA6I2RkMmMwMDstLXBhcGVyLWJyb3duLTUwOiNlZmViZTk7LS1wYXBlci1icm93bi0xMDA6I2Q3Y2NjODstLXBhcGVyLWJyb3duLTIwMDojYmNhYWE0Oy0tcGFwZXItYnJvd24tMzAwOiNhMTg4N2Y7LS1wYXBlci1icm93bi00MDA6IzhkNmU2MzstLXBhcGVyLWJyb3duLTUwMDojNzk1NTQ4Oy0tcGFwZXItYnJvd24tNjAwOiM2ZDRjNDE7LS1wYXBlci1icm93bi03MDA6IzVkNDAzNzstLXBhcGVyLWJyb3duLTgwMDojNGUzNDJlOy0tcGFwZXItYnJvd24tOTAwOiMzZTI3MjM7LS1wYXBlci1ncmV5LTUwOiNmYWZhZmE7LS1wYXBlci1ncmV5LTEwMDojZjVmNWY1Oy0tcGFwZXItZ3JleS0yMDA6I2VlZWVlZTstLXBhcGVyLWdyZXktMzAwOiNlMGUwZTA7LS1wYXBlci1ncmV5LTQwMDojYmRiZGJkOy0tcGFwZXItZ3JleS01MDA6IzllOWU5ZTstLXBhcGVyLWdyZXktNjAwOiM3NTc1NzU7LS1wYXBlci1ncmV5LTcwMDojNjE2MTYxOy0tcGFwZXItZ3JleS04MDA6IzQyNDI0MjstLXBhcGVyLWdyZXktOTAwOiMyMTIxMjE7LS1wYXBlci1ibHVlLWdyZXktNTA6I2VjZWZmMTstLXBhcGVyLWJsdWUtZ3JleS0xMDA6I2NmZDhkYzstLXBhcGVyLWJsdWUtZ3JleS0yMDA6I2IwYmVjNTstLXBhcGVyLWJsdWUtZ3JleS0zMDA6IzkwYTRhZTstLXBhcGVyLWJsdWUtZ3JleS00MDA6Izc4OTA5YzstLXBhcGVyLWJsdWUtZ3JleS01MDA6IzYwN2Q4YjstLXBhcGVyLWJsdWUtZ3JleS02MDA6IzU0NmU3YTstLXBhcGVyLWJsdWUtZ3JleS03MDA6IzQ1NWE2NDstLXBhcGVyLWJsdWUtZ3JleS04MDA6IzM3NDc0ZjstLXBhcGVyLWJsdWUtZ3JleS05MDA6IzI2MzIzODstLWRhcmstZGl2aWRlci1vcGFjaXR5OjAuMTI7LS1kYXJrLWRpc2FibGVkLW9wYWNpdHk6MC4zODstLWRhcmstc2Vjb25kYXJ5LW9wYWNpdHk6MC41NDstLWRhcmstcHJpbWFyeS1vcGFjaXR5OjAuODc7LS1saWdodC1kaXZpZGVyLW9wYWNpdHk6MC4xMjstLWxpZ2h0LWRpc2FibGVkLW9wYWNpdHk6MC4zOy0tbGlnaHQtc2Vjb25kYXJ5LW9wYWNpdHk6MC43Oy0tbGlnaHQtcHJpbWFyeS1vcGFjaXR5OjEuMH08L3N0eWxlPiA8L2N1c3RvbS1zdHlsZT5cIik7XG4iLCJcbnJlcXVpcmUoJy4uL3BvbHltZXIvcG9seW1lci5odG1sJyk7XG5cbnJlcXVpcmUoJy4vY29sb3IuaHRtbCcpO1xuXG5jb25zdCBSZWdpc3Rlckh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJ3BvbHltZXItd2VicGFjay1sb2FkZXIvcmVnaXN0ZXItaHRtbC10ZW1wbGF0ZScpO1xuXG5SZWdpc3Rlckh0bWxUZW1wbGF0ZS50b0JvZHkoXCI8Y3VzdG9tLXN0eWxlPiA8c3R5bGUgaXM9Y3VzdG9tLXN0eWxlPmh0bWx7LS1wcmltYXJ5LXRleHQtY29sb3I6dmFyKC0tbGlnaHQtdGhlbWUtdGV4dC1jb2xvcik7LS1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6dmFyKC0tbGlnaHQtdGhlbWUtYmFja2dyb3VuZC1jb2xvcik7LS1zZWNvbmRhcnktdGV4dC1jb2xvcjp2YXIoLS1saWdodC10aGVtZS1zZWNvbmRhcnktY29sb3IpOy0tZGlzYWJsZWQtdGV4dC1jb2xvcjp2YXIoLS1saWdodC10aGVtZS1kaXNhYmxlZC1jb2xvcik7LS1kaXZpZGVyLWNvbG9yOnZhcigtLWxpZ2h0LXRoZW1lLWRpdmlkZXItY29sb3IpOy0tZXJyb3ItY29sb3I6dmFyKC0tcGFwZXItZGVlcC1vcmFuZ2UtYTcwMCk7LS1wcmltYXJ5LWNvbG9yOnZhcigtLXBhcGVyLWluZGlnby01MDApOy0tbGlnaHQtcHJpbWFyeS1jb2xvcjp2YXIoLS1wYXBlci1pbmRpZ28tMTAwKTstLWRhcmstcHJpbWFyeS1jb2xvcjp2YXIoLS1wYXBlci1pbmRpZ28tNzAwKTstLWFjY2VudC1jb2xvcjp2YXIoLS1wYXBlci1waW5rLWEyMDApOy0tbGlnaHQtYWNjZW50LWNvbG9yOnZhcigtLXBhcGVyLXBpbmstYTEwMCk7LS1kYXJrLWFjY2VudC1jb2xvcjp2YXIoLS1wYXBlci1waW5rLWE0MDApOy0tbGlnaHQtdGhlbWUtYmFja2dyb3VuZC1jb2xvcjojZmZmZmZmOy0tbGlnaHQtdGhlbWUtYmFzZS1jb2xvcjojMDAwMDAwOy0tbGlnaHQtdGhlbWUtdGV4dC1jb2xvcjp2YXIoLS1wYXBlci1ncmV5LTkwMCk7LS1saWdodC10aGVtZS1zZWNvbmRhcnktY29sb3I6IzczNzM3MzstLWxpZ2h0LXRoZW1lLWRpc2FibGVkLWNvbG9yOiM5YjliOWI7LS1saWdodC10aGVtZS1kaXZpZGVyLWNvbG9yOiNkYmRiZGI7LS1kYXJrLXRoZW1lLWJhY2tncm91bmQtY29sb3I6dmFyKC0tcGFwZXItZ3JleS05MDApOy0tZGFyay10aGVtZS1iYXNlLWNvbG9yOiNmZmZmZmY7LS1kYXJrLXRoZW1lLXRleHQtY29sb3I6I2ZmZmZmZjstLWRhcmstdGhlbWUtc2Vjb25kYXJ5LWNvbG9yOiNiY2JjYmM7LS1kYXJrLXRoZW1lLWRpc2FibGVkLWNvbG9yOiM2NDY0NjQ7LS1kYXJrLXRoZW1lLWRpdmlkZXItY29sb3I6IzNjM2MzYzstLXRleHQtcHJpbWFyeS1jb2xvcjp2YXIoLS1kYXJrLXRoZW1lLXRleHQtY29sb3IpOy0tZGVmYXVsdC1wcmltYXJ5LWNvbG9yOnZhcigtLXByaW1hcnktY29sb3IpfTwvc3R5bGU+IDwvY3VzdG9tLXN0eWxlPlwiKTtcbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTQgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1hMTF5LWtleXMtYmVoYXZpb3IvaXJvbi1hMTF5LWtleXMtYmVoYXZpb3IuaHRtbFwiPlxuXG48IS0tXG5NYXRlcmlhbCBkZXNpZ246IFtTdXJmYWNlIHJlYWN0aW9uXShodHRwczovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9zcGVjL2FuaW1hdGlvbi9yZXNwb25zaXZlLWludGVyYWN0aW9uLmh0bWwjcmVzcG9uc2l2ZS1pbnRlcmFjdGlvbi1zdXJmYWNlLXJlYWN0aW9uKVxuXG5gcGFwZXItcmlwcGxlYCBwcm92aWRlcyBhIHZpc3VhbCBlZmZlY3QgdGhhdCBvdGhlciBwYXBlciBlbGVtZW50cyBjYW5cbnVzZSB0byBzaW11bGF0ZSBhIHJpcHBsaW5nIGVmZmVjdCBlbWFuYXRpbmcgZnJvbSB0aGUgcG9pbnQgb2YgY29udGFjdC4gIFRoZVxuZWZmZWN0IGNhbiBiZSB2aXN1YWxpemVkIGFzIGEgY29uY2VudHJpYyBjaXJjbGUgd2l0aCBtb3Rpb24uXG5cbkV4YW1wbGU6XG5cbiAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cbiAgICAgIDxwYXBlci1yaXBwbGU+PC9wYXBlci1yaXBwbGU+XG4gICAgPC9kaXY+XG5cbk5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgdGhlIHBhcmVudCBjb250YWluZXIgb2YgdGhlIHJpcHBsZSBiZSByZWxhdGl2ZSBwb3NpdGlvbiwgb3RoZXJ3aXNlXG50aGUgcmlwcGxlIHdpbGwgZW1hbmF0ZSBvdXRzaWRlIG9mIHRoZSBkZXNpcmVkIGNvbnRhaW5lci5cblxuYHBhcGVyLXJpcHBsZWAgbGlzdGVucyB0byBcIm1vdXNlZG93blwiIGFuZCBcIm1vdXNldXBcIiBldmVudHMgc28gaXQgd291bGQgZGlzcGxheSByaXBwbGVcbmVmZmVjdCB3aGVuIHRvdWNoZXMgb24gaXQuICBZb3UgY2FuIGFsc28gZGVmZWF0IHRoZSBkZWZhdWx0IGJlaGF2aW9yIGFuZFxubWFudWFsbHkgcm91dGUgdGhlIGRvd24gYW5kIHVwIGFjdGlvbnMgdG8gdGhlIHJpcHBsZSBlbGVtZW50LiAgTm90ZSB0aGF0IGl0IGlzXG5pbXBvcnRhbnQgaWYgeW91IGNhbGwgYGRvd25BY3Rpb24oKWAgeW91IHdpbGwgaGF2ZSB0byBtYWtlIHN1cmUgdG8gY2FsbFxuYHVwQWN0aW9uKClgIHNvIHRoYXQgYHBhcGVyLXJpcHBsZWAgd291bGQgZW5kIHRoZSBhbmltYXRpb24gbG9vcC5cblxuRXhhbXBsZTpcblxuICAgIDxwYXBlci1yaXBwbGUgaWQ9XCJyaXBwbGVcIiBzdHlsZT1cInBvaW50ZXItZXZlbnRzOiBub25lO1wiPjwvcGFwZXItcmlwcGxlPlxuICAgIC4uLlxuICAgIGRvd25BY3Rpb246IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuJC5yaXBwbGUuZG93bkFjdGlvbihlLmRldGFpbCk7XG4gICAgfSxcbiAgICB1cEFjdGlvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy4kLnJpcHBsZS51cEFjdGlvbigpO1xuICAgIH1cblxuU3R5bGluZyByaXBwbGUgZWZmZWN0OlxuXG4gIFVzZSBDU1MgY29sb3IgcHJvcGVydHkgdG8gc3R5bGUgdGhlIHJpcHBsZTpcblxuICAgIHBhcGVyLXJpcHBsZSB7XG4gICAgICBjb2xvcjogIzQyODVmNDtcbiAgICB9XG5cbiAgTm90ZSB0aGF0IENTUyBjb2xvciBwcm9wZXJ0eSBpcyBpbmhlcml0ZWQgc28gaXQgaXMgbm90IHJlcXVpcmVkIHRvIHNldCBpdCBvblxuICB0aGUgYHBhcGVyLXJpcHBsZWAgZWxlbWVudCBkaXJlY3RseS5cblxuQnkgZGVmYXVsdCwgdGhlIHJpcHBsZSBpcyBjZW50ZXJlZCBvbiB0aGUgcG9pbnQgb2YgY29udGFjdC4gIEFwcGx5IHRoZSBgcmVjZW50ZXJzYFxuYXR0cmlidXRlIHRvIGhhdmUgdGhlIHJpcHBsZSBncm93IHRvd2FyZCB0aGUgY2VudGVyIG9mIGl0cyBjb250YWluZXIuXG5cbiAgICA8cGFwZXItcmlwcGxlIHJlY2VudGVycz48L3BhcGVyLXJpcHBsZT5cblxuWW91IGNhbiBhbHNvICBjZW50ZXIgdGhlIHJpcHBsZSBpbnNpZGUgaXRzIGNvbnRhaW5lciBmcm9tIHRoZSBzdGFydC5cblxuICAgIDxwYXBlci1yaXBwbGUgY2VudGVyPjwvcGFwZXItcmlwcGxlPlxuXG5BcHBseSBgY2lyY2xlYCBjbGFzcyB0byBtYWtlIHRoZSByaXBwbGluZyBlZmZlY3Qgd2l0aGluIGEgY2lyY2xlLlxuXG4gICAgPHBhcGVyLXJpcHBsZSBjbGFzcz1cImNpcmNsZVwiPjwvcGFwZXItcmlwcGxlPlxuXG5AZ3JvdXAgUGFwZXIgRWxlbWVudHNcbkBlbGVtZW50IHBhcGVyLXJpcHBsZVxuQGhlcm8gaGVyby5zdmdcbkBkZW1vIGRlbW8vaW5kZXguaHRtbFxuLS0+XG5cbjxkb20tbW9kdWxlIGlkPVwicGFwZXItcmlwcGxlXCI+XG5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuXG4gICAgICAgIC8qIFNlZSBQb2x5bWVyRWxlbWVudHMvcGFwZXItYmVoYXZpb3JzL2lzc3Vlcy8zNC4gT24gbm9uLUNocm9tZSBicm93c2VycyxcbiAgICAgICAgICogY3JlYXRpbmcgYSBub2RlICh3aXRoIGEgcG9zaXRpb246YWJzb2x1dGUpIGluIHRoZSBtaWRkbGUgb2YgYW4gZXZlbnRcbiAgICAgICAgICogaGFuZGxlciBcImludGVycnVwdHNcIiB0aGF0IGV2ZW50IGhhbmRsZXIgKHdoaWNoIGhhcHBlbnMgd2hlbiB0aGVcbiAgICAgICAgICogcmlwcGxlIGlzIGNyZWF0ZWQgb24gZGVtYW5kKSAqL1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2FuaW1hdGluZ10pIHtcbiAgICAgICAgLyogVGhpcyByZXNvbHZlcyBhIHJlbmRlcmluZyBpc3N1ZSBpbiBDaHJvbWUgKGFzIG9mIDQwKSB3aGVyZSB0aGVcbiAgICAgICAgICAgcmlwcGxlIGlzIG5vdCBwcm9wZXJseSBjbGlwcGVkIGJ5IGl0cyBwYXJlbnQgKHdoaWNoIG1heSBoYXZlXG4gICAgICAgICAgIHJvdW5kZWQgY29ybmVycykuIFNlZTogaHR0cDovL2pzYmluLmNvbS90ZW1leGEvNFxuXG4gICAgICAgICAgIE5vdGU6IFdlIG9ubHkgYXBwbHkgdGhpcyBzdHlsZSBjb25kaXRpb25hbGx5LiBPdGhlcndpc2UsIHRoZSBicm93c2VyXG4gICAgICAgICAgIHdpbGwgY3JlYXRlIGEgbmV3IGNvbXBvc2l0aW5nIGxheWVyIGZvciBldmVyeSByaXBwbGUgZWxlbWVudCBvbiB0aGVcbiAgICAgICAgICAgcGFnZSwgYW5kIHRoYXQgd291bGQgYmUgYmFkLiAqL1xuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDApO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICAjYmFja2dyb3VuZCxcbiAgICAgICN3YXZlcyxcbiAgICAgIC53YXZlLWNvbnRhaW5lcixcbiAgICAgIC53YXZlIHtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgfVxuXG4gICAgICAjYmFja2dyb3VuZCxcbiAgICAgIC53YXZlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgI3dhdmVzLFxuICAgICAgLndhdmUge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAud2F2ZS1jb250YWluZXIsXG4gICAgICAud2F2ZSB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoLmNpcmNsZSkgI2JhY2tncm91bmQsXG4gICAgICA6aG9zdCguY2lyY2xlKSAjd2F2ZXMge1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KC5jaXJjbGUpIC53YXZlLWNvbnRhaW5lciB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB9XG4gICAgPC9zdHlsZT5cblxuICAgIDxkaXYgaWQ9XCJiYWNrZ3JvdW5kXCI+PC9kaXY+XG4gICAgPGRpdiBpZD1cIndhdmVzXCI+PC9kaXY+XG4gIDwvdGVtcGxhdGU+XG48L2RvbS1tb2R1bGU+XG48c2NyaXB0PlxuICAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFV0aWxpdHkgPSB7XG4gICAgICBkaXN0YW5jZTogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgdmFyIHhEZWx0YSA9ICh4MSAtIHgyKTtcbiAgICAgICAgdmFyIHlEZWx0YSA9ICh5MSAtIHkyKTtcblxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHhEZWx0YSAqIHhEZWx0YSArIHlEZWx0YSAqIHlEZWx0YSk7XG4gICAgICB9LFxuXG4gICAgICBub3c6IHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID9cbiAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2Uubm93LmJpbmQod2luZG93LnBlcmZvcm1hbmNlKSA6IERhdGUubm93XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBFbGVtZW50TWV0cmljcyhlbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRpbmdSZWN0LndpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kaW5nUmVjdC5oZWlnaHQ7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IE1hdGgubWF4KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBFbGVtZW50TWV0cmljcy5wcm90b3R5cGUgPSB7XG4gICAgICBnZXQgYm91bmRpbmdSZWN0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH0sXG5cbiAgICAgIGZ1cnRoZXN0Q29ybmVyRGlzdGFuY2VGcm9tOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciB0b3BMZWZ0ID0gVXRpbGl0eS5kaXN0YW5jZSh4LCB5LCAwLCAwKTtcbiAgICAgICAgdmFyIHRvcFJpZ2h0ID0gVXRpbGl0eS5kaXN0YW5jZSh4LCB5LCB0aGlzLndpZHRoLCAwKTtcbiAgICAgICAgdmFyIGJvdHRvbUxlZnQgPSBVdGlsaXR5LmRpc3RhbmNlKHgsIHksIDAsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdmFyIGJvdHRvbVJpZ2h0ID0gVXRpbGl0eS5kaXN0YW5jZSh4LCB5LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSaXBwbGUoZWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuY29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5jb2xvcjtcblxuICAgICAgdGhpcy53YXZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLndhdmVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMud2F2ZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNvbG9yO1xuICAgICAgdGhpcy53YXZlLmNsYXNzTGlzdC5hZGQoJ3dhdmUnKTtcbiAgICAgIHRoaXMud2F2ZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd3YXZlLWNvbnRhaW5lcicpO1xuICAgICAgUG9seW1lci5kb20odGhpcy53YXZlQ29udGFpbmVyKS5hcHBlbmRDaGlsZCh0aGlzLndhdmUpO1xuXG4gICAgICB0aGlzLnJlc2V0SW50ZXJhY3Rpb25TdGF0ZSgpO1xuICAgIH1cblxuICAgIFJpcHBsZS5NQVhfUkFESVVTID0gMzAwO1xuXG4gICAgUmlwcGxlLnByb3RvdHlwZSA9IHtcbiAgICAgIGdldCByZWNlbnRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQucmVjZW50ZXJzO1xuICAgICAgfSxcblxuICAgICAgZ2V0IGNlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jZW50ZXI7XG4gICAgICB9LFxuXG4gICAgICBnZXQgbW91c2VEb3duRWxhcHNlZCgpIHtcbiAgICAgICAgdmFyIGVsYXBzZWQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlRG93blN0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBlbGFwc2VkID0gVXRpbGl0eS5ub3coKSAtIHRoaXMubW91c2VEb3duU3RhcnQ7XG5cbiAgICAgICAgaWYgKHRoaXMubW91c2VVcFN0YXJ0KSB7XG4gICAgICAgICAgZWxhcHNlZCAtPSB0aGlzLm1vdXNlVXBFbGFwc2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsYXBzZWQ7XG4gICAgICB9LFxuXG4gICAgICBnZXQgbW91c2VVcEVsYXBzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlVXBTdGFydCA/XG4gICAgICAgICAgVXRpbGl0eS5ub3cgKCkgLSB0aGlzLm1vdXNlVXBTdGFydCA6IDA7XG4gICAgICB9LFxuXG4gICAgICBnZXQgbW91c2VEb3duRWxhcHNlZFNlY29uZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlRG93bkVsYXBzZWQgLyAxMDAwO1xuICAgICAgfSxcblxuICAgICAgZ2V0IG1vdXNlVXBFbGFwc2VkU2Vjb25kcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW91c2VVcEVsYXBzZWQgLyAxMDAwO1xuICAgICAgfSxcblxuICAgICAgZ2V0IG1vdXNlSW50ZXJhY3Rpb25TZWNvbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3VzZURvd25FbGFwc2VkU2Vjb25kcyArIHRoaXMubW91c2VVcEVsYXBzZWRTZWNvbmRzO1xuICAgICAgfSxcblxuICAgICAgZ2V0IGluaXRpYWxPcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmluaXRpYWxPcGFjaXR5O1xuICAgICAgfSxcblxuICAgICAgZ2V0IG9wYWNpdHlEZWNheVZlbG9jaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm9wYWNpdHlEZWNheVZlbG9jaXR5O1xuICAgICAgfSxcblxuICAgICAgZ2V0IHJhZGl1cygpIHtcbiAgICAgICAgdmFyIHdpZHRoMiA9IHRoaXMuY29udGFpbmVyTWV0cmljcy53aWR0aCAqIHRoaXMuY29udGFpbmVyTWV0cmljcy53aWR0aDtcbiAgICAgICAgdmFyIGhlaWdodDIgPSB0aGlzLmNvbnRhaW5lck1ldHJpY3MuaGVpZ2h0ICogdGhpcy5jb250YWluZXJNZXRyaWNzLmhlaWdodDtcbiAgICAgICAgdmFyIHdhdmVSYWRpdXMgPSBNYXRoLm1pbihcbiAgICAgICAgICBNYXRoLnNxcnQod2lkdGgyICsgaGVpZ2h0MiksXG4gICAgICAgICAgUmlwcGxlLk1BWF9SQURJVVNcbiAgICAgICAgKSAqIDEuMSArIDU7XG5cbiAgICAgICAgdmFyIGR1cmF0aW9uID0gMS4xIC0gMC4yICogKHdhdmVSYWRpdXMgLyBSaXBwbGUuTUFYX1JBRElVUyk7XG4gICAgICAgIHZhciB0aW1lTm93ID0gdGhpcy5tb3VzZUludGVyYWN0aW9uU2Vjb25kcyAvIGR1cmF0aW9uO1xuICAgICAgICB2YXIgc2l6ZSA9IHdhdmVSYWRpdXMgKiAoMSAtIE1hdGgucG93KDgwLCAtdGltZU5vdykpO1xuXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhzaXplKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldCBvcGFjaXR5KCkge1xuICAgICAgICBpZiAoIXRoaXMubW91c2VVcFN0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbE9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLmluaXRpYWxPcGFjaXR5IC0gdGhpcy5tb3VzZVVwRWxhcHNlZFNlY29uZHMgKiB0aGlzLm9wYWNpdHlEZWNheVZlbG9jaXR5XG4gICAgICAgICk7XG4gICAgICB9LFxuXG4gICAgICBnZXQgb3V0ZXJPcGFjaXR5KCkge1xuICAgICAgICAvLyBMaW5lYXIgaW5jcmVhc2UgaW4gYmFja2dyb3VuZCBvcGFjaXR5LCBjYXBwZWQgYXQgdGhlIG9wYWNpdHlcbiAgICAgICAgLy8gb2YgdGhlIHdhdmVmcm9udCAod2F2ZU9wYWNpdHkpLlxuICAgICAgICB2YXIgb3V0ZXJPcGFjaXR5ID0gdGhpcy5tb3VzZVVwRWxhcHNlZFNlY29uZHMgKiAwLjM7XG4gICAgICAgIHZhciB3YXZlT3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcblxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbihvdXRlck9wYWNpdHksIHdhdmVPcGFjaXR5KVxuICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgZ2V0IGlzT3BhY2l0eUZ1bGx5RGVjYXllZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BhY2l0eSA8IDAuMDEgJiZcbiAgICAgICAgICB0aGlzLnJhZGl1cyA+PSBNYXRoLm1pbih0aGlzLm1heFJhZGl1cywgUmlwcGxlLk1BWF9SQURJVVMpO1xuICAgICAgfSxcblxuICAgICAgZ2V0IGlzUmVzdGluZ0F0TWF4UmFkaXVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcGFjaXR5ID49IHRoaXMuaW5pdGlhbE9wYWNpdHkgJiZcbiAgICAgICAgICB0aGlzLnJhZGl1cyA+PSBNYXRoLm1pbih0aGlzLm1heFJhZGl1cywgUmlwcGxlLk1BWF9SQURJVVMpO1xuICAgICAgfSxcblxuICAgICAgZ2V0IGlzQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlVXBTdGFydCA/XG4gICAgICAgICAgdGhpcy5pc09wYWNpdHlGdWxseURlY2F5ZWQgOiB0aGlzLmlzUmVzdGluZ0F0TWF4UmFkaXVzO1xuICAgICAgfSxcblxuICAgICAgZ2V0IHRyYW5zbGF0aW9uRnJhY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihcbiAgICAgICAgICAxLFxuICAgICAgICAgIHRoaXMucmFkaXVzIC8gdGhpcy5jb250YWluZXJNZXRyaWNzLnNpemUgKiAyIC8gTWF0aC5zcXJ0KDIpXG4gICAgICAgICk7XG4gICAgICB9LFxuXG4gICAgICBnZXQgeE5vdygpIHtcbiAgICAgICAgaWYgKHRoaXMueEVuZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnhTdGFydCArIHRoaXMudHJhbnNsYXRpb25GcmFjdGlvbiAqICh0aGlzLnhFbmQgLSB0aGlzLnhTdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy54U3RhcnQ7XG4gICAgICB9LFxuXG4gICAgICBnZXQgeU5vdygpIHtcbiAgICAgICAgaWYgKHRoaXMueUVuZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnlTdGFydCArIHRoaXMudHJhbnNsYXRpb25GcmFjdGlvbiAqICh0aGlzLnlFbmQgLSB0aGlzLnlTdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy55U3RhcnQ7XG4gICAgICB9LFxuXG4gICAgICBnZXQgaXNNb3VzZURvd24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlRG93blN0YXJ0ICYmICF0aGlzLm1vdXNlVXBTdGFydDtcbiAgICAgIH0sXG5cbiAgICAgIHJlc2V0SW50ZXJhY3Rpb25TdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubWF4UmFkaXVzID0gMDtcbiAgICAgICAgdGhpcy5tb3VzZURvd25TdGFydCA9IDA7XG4gICAgICAgIHRoaXMubW91c2VVcFN0YXJ0ID0gMDtcblxuICAgICAgICB0aGlzLnhTdGFydCA9IDA7XG4gICAgICAgIHRoaXMueVN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy54RW5kID0gMDtcbiAgICAgICAgdGhpcy55RW5kID0gMDtcbiAgICAgICAgdGhpcy5zbGlkZURpc3RhbmNlID0gMDtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lck1ldHJpY3MgPSBuZXcgRWxlbWVudE1ldHJpY3ModGhpcy5lbGVtZW50KTtcbiAgICAgIH0sXG5cbiAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2NhbGU7XG4gICAgICAgIHZhciB0cmFuc2xhdGVTdHJpbmc7XG4gICAgICAgIHZhciBkeDtcbiAgICAgICAgdmFyIGR5O1xuXG4gICAgICAgIHRoaXMud2F2ZS5zdHlsZS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuXG4gICAgICAgIHNjYWxlID0gdGhpcy5yYWRpdXMgLyAodGhpcy5jb250YWluZXJNZXRyaWNzLnNpemUgLyAyKTtcbiAgICAgICAgZHggPSB0aGlzLnhOb3cgLSAodGhpcy5jb250YWluZXJNZXRyaWNzLndpZHRoIC8gMik7XG4gICAgICAgIGR5ID0gdGhpcy55Tm93IC0gKHRoaXMuY29udGFpbmVyTWV0cmljcy5oZWlnaHQgLyAyKTtcblxuXG4gICAgICAgIC8vIDJkIHRyYW5zZm9ybSBmb3Igc2FmYXJpIGJlY2F1c2Ugb2YgYm9yZGVyLXJhZGl1cyBhbmQgb3ZlcmZsb3c6aGlkZGVuIGNsaXBwaW5nIGJ1Zy5cbiAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTk4NTM4XG4gICAgICAgIHRoaXMud2F2ZUNvbnRhaW5lci5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyBkeCArICdweCwgJyArIGR5ICsgJ3B4KSc7XG4gICAgICAgIHRoaXMud2F2ZUNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIGR4ICsgJ3B4LCAnICsgZHkgKyAncHgsIDApJztcbiAgICAgICAgdGhpcy53YXZlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdzY2FsZSgnICsgc2NhbGUgKyAnLCcgKyBzY2FsZSArICcpJztcbiAgICAgICAgdGhpcy53YXZlLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZTNkKCcgKyBzY2FsZSArICcsJyArIHNjYWxlICsgJywxKSc7XG4gICAgICB9LFxuXG4gICAgICAvKiogQHBhcmFtIHtFdmVudD19IGV2ZW50ICovXG4gICAgICBkb3duQWN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgeENlbnRlciA9IHRoaXMuY29udGFpbmVyTWV0cmljcy53aWR0aCAvIDI7XG4gICAgICAgIHZhciB5Q2VudGVyID0gdGhpcy5jb250YWluZXJNZXRyaWNzLmhlaWdodCAvIDI7XG5cbiAgICAgICAgdGhpcy5yZXNldEludGVyYWN0aW9uU3RhdGUoKTtcbiAgICAgICAgdGhpcy5tb3VzZURvd25TdGFydCA9IFV0aWxpdHkubm93KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2VudGVyKSB7XG4gICAgICAgICAgdGhpcy54U3RhcnQgPSB4Q2VudGVyO1xuICAgICAgICAgIHRoaXMueVN0YXJ0ID0geUNlbnRlcjtcbiAgICAgICAgICB0aGlzLnNsaWRlRGlzdGFuY2UgPSBVdGlsaXR5LmRpc3RhbmNlKFxuICAgICAgICAgICAgdGhpcy54U3RhcnQsIHRoaXMueVN0YXJ0LCB0aGlzLnhFbmQsIHRoaXMueUVuZFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy54U3RhcnQgPSBldmVudCA/XG4gICAgICAgICAgICAgIGV2ZW50LmRldGFpbC54IC0gdGhpcy5jb250YWluZXJNZXRyaWNzLmJvdW5kaW5nUmVjdC5sZWZ0IDpcbiAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJNZXRyaWNzLndpZHRoIC8gMjtcbiAgICAgICAgICB0aGlzLnlTdGFydCA9IGV2ZW50ID9cbiAgICAgICAgICAgICAgZXZlbnQuZGV0YWlsLnkgLSB0aGlzLmNvbnRhaW5lck1ldHJpY3MuYm91bmRpbmdSZWN0LnRvcCA6XG4gICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyTWV0cmljcy5oZWlnaHQgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVjZW50ZXJzKSB7XG4gICAgICAgICAgdGhpcy54RW5kID0geENlbnRlcjtcbiAgICAgICAgICB0aGlzLnlFbmQgPSB5Q2VudGVyO1xuICAgICAgICAgIHRoaXMuc2xpZGVEaXN0YW5jZSA9IFV0aWxpdHkuZGlzdGFuY2UoXG4gICAgICAgICAgICB0aGlzLnhTdGFydCwgdGhpcy55U3RhcnQsIHRoaXMueEVuZCwgdGhpcy55RW5kXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWF4UmFkaXVzID0gdGhpcy5jb250YWluZXJNZXRyaWNzLmZ1cnRoZXN0Q29ybmVyRGlzdGFuY2VGcm9tKFxuICAgICAgICAgIHRoaXMueFN0YXJ0LFxuICAgICAgICAgIHRoaXMueVN0YXJ0XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy53YXZlQ29udGFpbmVyLnN0eWxlLnRvcCA9XG4gICAgICAgICAgKHRoaXMuY29udGFpbmVyTWV0cmljcy5oZWlnaHQgLSB0aGlzLmNvbnRhaW5lck1ldHJpY3Muc2l6ZSkgLyAyICsgJ3B4JztcbiAgICAgICAgdGhpcy53YXZlQ29udGFpbmVyLnN0eWxlLmxlZnQgPVxuICAgICAgICAgICh0aGlzLmNvbnRhaW5lck1ldHJpY3Mud2lkdGggLSB0aGlzLmNvbnRhaW5lck1ldHJpY3Muc2l6ZSkgLyAyICsgJ3B4JztcblxuICAgICAgICB0aGlzLndhdmVDb250YWluZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lck1ldHJpY3Muc2l6ZSArICdweCc7XG4gICAgICAgIHRoaXMud2F2ZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lck1ldHJpY3Muc2l6ZSArICdweCc7XG4gICAgICB9LFxuXG4gICAgICAvKiogQHBhcmFtIHtFdmVudD19IGV2ZW50ICovXG4gICAgICB1cEFjdGlvbjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTW91c2VEb3duKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb3VzZVVwU3RhcnQgPSBVdGlsaXR5Lm5vdygpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgUG9seW1lci5kb20odGhpcy53YXZlQ29udGFpbmVyLnBhcmVudE5vZGUpLnJlbW92ZUNoaWxkKFxuICAgICAgICAgIHRoaXMud2F2ZUNvbnRhaW5lclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQb2x5bWVyKHtcbiAgICAgIGlzOiAncGFwZXItcmlwcGxlJyxcblxuICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgIFBvbHltZXIuSXJvbkExMXlLZXlzQmVoYXZpb3JcbiAgICAgIF0sXG5cbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbml0aWFsIG9wYWNpdHkgc2V0IG9uIHRoZSB3YXZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAYXR0cmlidXRlIGluaXRpYWxPcGFjaXR5XG4gICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAgKiBAZGVmYXVsdCAwLjI1XG4gICAgICAgICAqL1xuICAgICAgICBpbml0aWFsT3BhY2l0eToge1xuICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICB2YWx1ZTogMC4yNVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3cgZmFzdCAob3BhY2l0eSBwZXIgc2Vjb25kKSB0aGUgd2F2ZSBmYWRlcyBvdXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBhdHRyaWJ1dGUgb3BhY2l0eURlY2F5VmVsb2NpdHlcbiAgICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICAqIEBkZWZhdWx0IDAuOFxuICAgICAgICAgKi9cbiAgICAgICAgb3BhY2l0eURlY2F5VmVsb2NpdHk6IHtcbiAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgdmFsdWU6IDAuOFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0cnVlLCByaXBwbGVzIHdpbGwgZXhoaWJpdCBhIGdyYXZpdGF0aW9uYWwgcHVsbCB0b3dhcmRzXG4gICAgICAgICAqIHRoZSBjZW50ZXIgb2YgdGhlaXIgY29udGFpbmVyIGFzIHRoZXkgZmFkZSBhd2F5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAYXR0cmlidXRlIHJlY2VudGVyc1xuICAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICByZWNlbnRlcnM6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0cnVlLCByaXBwbGVzIHdpbGwgY2VudGVyIGluc2lkZSBpdHMgY29udGFpbmVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEBhdHRyaWJ1dGUgcmVjZW50ZXJzXG4gICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiB0aGUgdmlzdWFsIHJpcHBsZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBhdHRyaWJ1dGUgcmlwcGxlc1xuICAgICAgICAgKiBAdHlwZSBBcnJheVxuICAgICAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAgICAgKi9cbiAgICAgICAgcmlwcGxlczoge1xuICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgd2hlbiB0aGVyZSBhcmUgdmlzaWJsZSByaXBwbGVzIGFuaW1hdGluZyB3aXRoaW4gdGhlXG4gICAgICAgICAqIGVsZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRpbmc6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdHJ1ZSwgdGhlIHJpcHBsZSB3aWxsIHJlbWFpbiBpbiB0aGUgXCJkb3duXCIgc3RhdGUgdW50aWwgYGhvbGREb3duYFxuICAgICAgICAgKiBpcyBzZXQgdG8gZmFsc2UgYWdhaW4uXG4gICAgICAgICAqL1xuICAgICAgICBob2xkRG93bjoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgIG9ic2VydmVyOiAnX2hvbGREb3duQ2hhbmdlZCdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdHJ1ZSwgdGhlIHJpcHBsZSB3aWxsIG5vdCBnZW5lcmF0ZSBhIHJpcHBsZSBlZmZlY3RcbiAgICAgICAgICogdmlhIHBvaW50ZXIgaW50ZXJhY3Rpb24uXG4gICAgICAgICAqIENhbGxpbmcgcmlwcGxlJ3MgaW1wZXJhdGl2ZSBhcGkgbGlrZSBgc2ltdWxhdGVkUmlwcGxlYCB3aWxsXG4gICAgICAgICAqIHN0aWxsIGdlbmVyYXRlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgbm9pbms6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9hbmltYXRpbmc6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2JvdW5kQW5pbWF0ZToge1xuICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUuYmluZCh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGdldCB0YXJnZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlFdmVudFRhcmdldDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUgeyFPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGtleUJpbmRpbmdzOiB7XG4gICAgICAgICdlbnRlcjprZXlkb3duJzogJ19vbkVudGVyS2V5ZG93bicsXG4gICAgICAgICdzcGFjZTprZXlkb3duJzogJ19vblNwYWNlS2V5ZG93bicsXG4gICAgICAgICdzcGFjZTprZXl1cCc6ICdfb25TcGFjZUtleXVwJ1xuICAgICAgfSxcblxuICAgICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBTZXQgdXAgYTExeUtleXNCZWhhdmlvciB0byBsaXN0ZW4gdG8ga2V5IGV2ZW50cyBvbiB0aGUgdGFyZ2V0LFxuICAgICAgICAvLyBzbyB0aGF0IHNwYWNlIGFuZCBlbnRlciBhY3RpdmF0ZSB0aGUgcmlwcGxlIGV2ZW4gaWYgdGhlIHRhcmdldCBkb2Vzbid0XG4gICAgICAgIC8vIGhhbmRsZSBrZXkgZXZlbnRzLiBUaGUga2V5IGhhbmRsZXJzIGRlYWwgd2l0aCBgbm9pbmtgIHRoZW1zZWx2ZXMuXG4gICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUubm9kZVR5cGUgPT0gMTEpIHsgLy8gRE9DVU1FTlRfRlJBR01FTlRfTk9ERVxuICAgICAgICAgIHRoaXMua2V5RXZlbnRUYXJnZXQgPSBQb2x5bWVyLmRvbSh0aGlzKS5nZXRPd25lclJvb3QoKS5ob3N0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMua2V5RXZlbnRUYXJnZXQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleUV2ZW50VGFyZ2V0ID0gLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovICh0aGlzLmtleUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgdGhpcy5saXN0ZW4oa2V5RXZlbnRUYXJnZXQsICd1cCcsICd1aVVwQWN0aW9uJyk7XG4gICAgICAgIHRoaXMubGlzdGVuKGtleUV2ZW50VGFyZ2V0LCAnZG93bicsICd1aURvd25BY3Rpb24nKTtcbiAgICAgIH0sXG5cbiAgICAgIGRldGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy51bmxpc3Rlbih0aGlzLmtleUV2ZW50VGFyZ2V0LCAndXAnLCAndWlVcEFjdGlvbicpO1xuICAgICAgICB0aGlzLnVubGlzdGVuKHRoaXMua2V5RXZlbnRUYXJnZXQsICdkb3duJywgJ3VpRG93bkFjdGlvbicpO1xuICAgICAgICB0aGlzLmtleUV2ZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgIH0sXG5cbiAgICAgIGdldCBzaG91bGRLZWVwQW5pbWF0aW5nICgpIHtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMucmlwcGxlcy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMucmlwcGxlc1tpbmRleF0uaXNBbmltYXRpb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcblxuICAgICAgc2ltdWxhdGVkUmlwcGxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kb3duQWN0aW9uKG51bGwpO1xuXG4gICAgICAgIC8vIFBsZWFzZSBzZWUgcG9seW1lci9wb2x5bWVyIzEzMDVcbiAgICAgICAgdGhpcy5hc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnVwQWN0aW9uKCk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92b2tlcyBhIHJpcHBsZSBkb3duIGVmZmVjdCB2aWEgYSBVSSBldmVudCxcbiAgICAgICAqIHJlc3BlY3RpbmcgdGhlIGBub2lua2AgcHJvcGVydHkuXG4gICAgICAgKiBAcGFyYW0ge0V2ZW50PX0gZXZlbnRcbiAgICAgICAqL1xuICAgICAgdWlEb3duQWN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubm9pbmspIHtcbiAgICAgICAgICB0aGlzLmRvd25BY3Rpb24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3Zva2VzIGEgcmlwcGxlIGRvd24gZWZmZWN0IHZpYSBhIFVJIGV2ZW50LFxuICAgICAgICogKm5vdCogcmVzcGVjdGluZyB0aGUgYG5vaW5rYCBwcm9wZXJ0eS5cbiAgICAgICAqIEBwYXJhbSB7RXZlbnQ9fSBldmVudFxuICAgICAgICovXG4gICAgICBkb3duQWN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAodGhpcy5ob2xkRG93biAmJiB0aGlzLnJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByaXBwbGUgPSB0aGlzLmFkZFJpcHBsZSgpO1xuXG4gICAgICAgIHJpcHBsZS5kb3duQWN0aW9uKGV2ZW50KTtcblxuICAgICAgICBpZiAoIXRoaXMuX2FuaW1hdGluZykge1xuICAgICAgICAgIHRoaXMuX2FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdm9rZXMgYSByaXBwbGUgdXAgZWZmZWN0IHZpYSBhIFVJIGV2ZW50LFxuICAgICAgICogcmVzcGVjdGluZyB0aGUgYG5vaW5rYCBwcm9wZXJ0eS5cbiAgICAgICAqIEBwYXJhbSB7RXZlbnQ9fSBldmVudFxuICAgICAgICovXG4gICAgICB1aVVwQWN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubm9pbmspIHtcbiAgICAgICAgICB0aGlzLnVwQWN0aW9uKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92b2tlcyBhIHJpcHBsZSB1cCBlZmZlY3QgdmlhIGEgVUkgZXZlbnQsXG4gICAgICAgKiAqbm90KiByZXNwZWN0aW5nIHRoZSBgbm9pbmtgIHByb3BlcnR5LlxuICAgICAgICogQHBhcmFtIHtFdmVudD19IGV2ZW50XG4gICAgICAgKi9cbiAgICAgIHVwQWN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiAodGhpcy5ob2xkRG93bikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmlwcGxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJpcHBsZSkge1xuICAgICAgICAgIHJpcHBsZS51cEFjdGlvbihldmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgICAgfSxcblxuICAgICAgb25BbmltYXRpb25Db21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2FuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiQuYmFja2dyb3VuZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmZpcmUoJ3RyYW5zaXRpb25lbmQnKTtcbiAgICAgIH0sXG5cbiAgICAgIGFkZFJpcHBsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByaXBwbGUgPSBuZXcgUmlwcGxlKHRoaXMpO1xuXG4gICAgICAgIFBvbHltZXIuZG9tKHRoaXMuJC53YXZlcykuYXBwZW5kQ2hpbGQocmlwcGxlLndhdmVDb250YWluZXIpO1xuICAgICAgICB0aGlzLiQuYmFja2dyb3VuZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSByaXBwbGUuY29sb3I7XG4gICAgICAgIHRoaXMucmlwcGxlcy5wdXNoKHJpcHBsZSk7XG5cbiAgICAgICAgdGhpcy5fc2V0QW5pbWF0aW5nKHRydWUpO1xuXG4gICAgICAgIHJldHVybiByaXBwbGU7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmVSaXBwbGU6IGZ1bmN0aW9uKHJpcHBsZSkge1xuICAgICAgICB2YXIgcmlwcGxlSW5kZXggPSB0aGlzLnJpcHBsZXMuaW5kZXhPZihyaXBwbGUpO1xuXG4gICAgICAgIGlmIChyaXBwbGVJbmRleCA8IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJpcHBsZXMuc3BsaWNlKHJpcHBsZUluZGV4LCAxKTtcblxuICAgICAgICByaXBwbGUucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnJpcHBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fc2V0QW5pbWF0aW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGNvbmZsaWN0cyB3aXRoIEVsZW1lbnQjYW50aW1hdGUoKS5cbiAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2FuaW1hdGVcbiAgICAgICAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc31cbiAgICAgICAqL1xuICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fYW5pbWF0aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIHJpcHBsZTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnJpcHBsZXMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgcmlwcGxlID0gdGhpcy5yaXBwbGVzW2luZGV4XTtcblxuICAgICAgICAgIHJpcHBsZS5kcmF3KCk7XG5cbiAgICAgICAgICB0aGlzLiQuYmFja2dyb3VuZC5zdHlsZS5vcGFjaXR5ID0gcmlwcGxlLm91dGVyT3BhY2l0eTtcblxuICAgICAgICAgIGlmIChyaXBwbGUuaXNPcGFjaXR5RnVsbHlEZWNheWVkICYmICFyaXBwbGUuaXNSZXN0aW5nQXRNYXhSYWRpdXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlUmlwcGxlKHJpcHBsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEtlZXBBbmltYXRpbmcgJiYgdGhpcy5yaXBwbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMub25BbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fYm91bmRBbmltYXRlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX29uRW50ZXJLZXlkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy51aURvd25BY3Rpb24oKTtcbiAgICAgICAgdGhpcy5hc3luYyh0aGlzLnVpVXBBY3Rpb24sIDEpO1xuICAgICAgfSxcblxuICAgICAgX29uU3BhY2VLZXlkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy51aURvd25BY3Rpb24oKTtcbiAgICAgIH0sXG5cbiAgICAgIF9vblNwYWNlS2V5dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnVpVXBBY3Rpb24oKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIG5vdGU6IGhvbGREb3duIGRvZXMgbm90IHJlc3BlY3Qgbm9pbmsgc2luY2UgaXQgY2FuIGJlIGEgZm9jdXMgYmFzZWRcbiAgICAgIC8vIGVmZmVjdC5cbiAgICAgIF9ob2xkRG93bkNoYW5nZWQ6IGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgIGlmIChvbGRWYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VmFsKSB7XG4gICAgICAgICAgdGhpcy5kb3duQWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cEFjdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgRmlyZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzLlxuICAgICAgVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgdGhlIHJpcHBsZSBhbmltYXRpb24gZmluaXNoZXMgdG8gcGVyZm9ybSBzb21lIGFjdGlvbi5cblxuICAgICAgQGV2ZW50IHRyYW5zaXRpb25lbmRcbiAgICAgIEBwYXJhbSB7e25vZGU6IE9iamVjdH19IGRldGFpbCBDb250YWlucyB0aGUgYW5pbWF0ZWQgbm9kZS5cbiAgICAgICovXG4gICAgfSk7XG4gIH0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1iZWhhdmlvcnMvaXJvbi1idXR0b24tc3RhdGUuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BhcGVyLXJpcHBsZS9wYXBlci1yaXBwbGUuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgICogYFBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvcmAgZHluYW1pY2FsbHkgaW1wbGVtZW50cyBhIHJpcHBsZVxuICAgKiB3aGVuIHRoZSBlbGVtZW50IGhhcyBmb2N1cyB2aWEgcG9pbnRlciBvciBrZXlib2FyZC5cbiAgICpcbiAgICogTk9URTogVGhpcyBiZWhhdmlvciBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYW5kIGFmdGVyXG4gICAqIGBQb2x5bWVyLklyb25CdXR0b25TdGF0ZWAgYW5kIGBQb2x5bWVyLklyb25Db250cm9sU3RhdGVgLlxuICAgKlxuICAgKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvclxuICAgKi9cbiAgUG9seW1lci5QYXBlclJpcHBsZUJlaGF2aW9yID0ge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIC8qKlxuICAgICAgICogSWYgdHJ1ZSwgdGhlIGVsZW1lbnQgd2lsbCBub3QgcHJvZHVjZSBhIHJpcHBsZSBlZmZlY3Qgd2hlbiBpbnRlcmFjdGVkXG4gICAgICAgKiB3aXRoIHZpYSB0aGUgcG9pbnRlci5cbiAgICAgICAqL1xuICAgICAgbm9pbms6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgb2JzZXJ2ZXI6ICdfbm9pbmtDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7RWxlbWVudHx1bmRlZmluZWR9XG4gICAgICAgKi9cbiAgICAgIF9yaXBwbGVDb250YWluZXI6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIGEgYDxwYXBlci1yaXBwbGU+YCBlbGVtZW50IGlzIGF2YWlsYWJsZSB3aGVuIHRoZSBlbGVtZW50IGlzXG4gICAgICogZm9jdXNlZC5cbiAgICAgKi9cbiAgICBfYnV0dG9uU3RhdGVDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW4gYWRkaXRpb24gdG8gdGhlIGZ1bmN0aW9uYWxpdHkgcHJvdmlkZWQgaW4gYElyb25CdXR0b25TdGF0ZWAsIGVuc3VyZXNcbiAgICAgKiBhIHJpcHBsZSBlZmZlY3QgaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGluIGEgYHByZXNzZWRgIHN0YXRlLlxuICAgICAqL1xuICAgIF9kb3duSGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIFBvbHltZXIuSXJvbkJ1dHRvblN0YXRlSW1wbC5fZG93bkhhbmRsZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICBpZiAodGhpcy5wcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmlwcGxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW5zdXJlcyB0aGlzIGVsZW1lbnQgY29udGFpbnMgYSByaXBwbGUgZWZmZWN0LiBGb3Igc3RhcnR1cCBlZmZpY2llbmN5XG4gICAgICogdGhlIHJpcHBsZSBlZmZlY3QgaXMgZHluYW1pY2FsbHkgb24gZGVtYW5kIHdoZW4gbmVlZGVkLlxuICAgICAqIEBwYXJhbSB7IUV2ZW50PX0gb3B0VHJpZ2dlcmluZ0V2ZW50IChvcHRpb25hbCkgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlXG4gICAgICogcmlwcGxlLlxuICAgICAqL1xuICAgIGVuc3VyZVJpcHBsZTogZnVuY3Rpb24ob3B0VHJpZ2dlcmluZ0V2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzUmlwcGxlKCkpIHtcbiAgICAgICAgdGhpcy5fcmlwcGxlID0gdGhpcy5fY3JlYXRlUmlwcGxlKCk7XG4gICAgICAgIHRoaXMuX3JpcHBsZS5ub2luayA9IHRoaXMubm9pbms7XG4gICAgICAgIHZhciByaXBwbGVDb250YWluZXIgPSB0aGlzLl9yaXBwbGVDb250YWluZXIgfHwgdGhpcy5yb290O1xuICAgICAgICBpZiAocmlwcGxlQ29udGFpbmVyKSB7XG4gICAgICAgICAgUG9seW1lci5kb20ocmlwcGxlQ29udGFpbmVyKS5hcHBlbmRDaGlsZCh0aGlzLl9yaXBwbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRUcmlnZ2VyaW5nRXZlbnQpIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaGFwcGVuZWQgaW5zaWRlIG9mIHRoZSByaXBwbGUgY29udGFpbmVyXG4gICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIGhvc3QgaW5zdGVhZCBvZiB0aGUgcm9vdCBiZWNhdXNlIGRpc3RyaWJ1dGVkIHRleHRcbiAgICAgICAgICAvLyBub2RlcyBhcmUgbm90IHZhbGlkIGV2ZW50IHRhcmdldHNcbiAgICAgICAgICB2YXIgZG9tQ29udGFpbmVyID0gUG9seW1lci5kb20odGhpcy5fcmlwcGxlQ29udGFpbmVyIHx8IHRoaXMpO1xuICAgICAgICAgIHZhciB0YXJnZXQgPSBQb2x5bWVyLmRvbShvcHRUcmlnZ2VyaW5nRXZlbnQpLnJvb3RUYXJnZXQ7XG4gICAgICAgICAgaWYgKGRvbUNvbnRhaW5lci5kZWVwQ29udGFpbnMoIC8qKiBAdHlwZSB7Tm9kZX0gKi8odGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JpcHBsZS51aURvd25BY3Rpb24ob3B0VHJpZ2dlcmluZ0V2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYDxwYXBlci1yaXBwbGU+YCBlbGVtZW50IHVzZWQgYnkgdGhpcyBlbGVtZW50IHRvIGNyZWF0ZVxuICAgICAqIHJpcHBsZSBlZmZlY3RzLiBUaGUgZWxlbWVudCdzIHJpcHBsZSBpcyBjcmVhdGVkIG9uIGRlbWFuZCwgd2hlblxuICAgICAqIG5lY2Vzc2FyeSwgYW5kIGNhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBmb3JjZSB0aGVcbiAgICAgKiByaXBwbGUgdG8gYmUgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBnZXRSaXBwbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoKTtcbiAgICAgIHJldHVybiB0aGlzLl9yaXBwbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGVsZW1lbnQgY3VycmVudGx5IGNvbnRhaW5zIGEgcmlwcGxlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc1JpcHBsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9yaXBwbGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGVsZW1lbnQncyByaXBwbGUgZWZmZWN0IHZpYSBjcmVhdGluZyBhIGA8cGFwZXItcmlwcGxlPmAuXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY3VzdG9taXplIHRoZSByaXBwbGUgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHshUGFwZXJSaXBwbGVFbGVtZW50fSBSZXR1cm5zIGEgYDxwYXBlci1yaXBwbGU+YCBlbGVtZW50LlxuICAgICAqL1xuICAgIF9jcmVhdGVSaXBwbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSAvKiogQHR5cGUgeyFQYXBlclJpcHBsZUVsZW1lbnR9ICovIChcbiAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwYXBlci1yaXBwbGUnKSk7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9LFxuXG4gICAgX25vaW5rQ2hhbmdlZDogZnVuY3Rpb24obm9pbmspIHtcbiAgICAgIGlmICh0aGlzLmhhc1JpcHBsZSgpKSB7XG4gICAgICAgIHRoaXMuX3JpcHBsZS5ub2luayA9IG5vaW5rO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cblxuPHNjcmlwdD5cblxuICAvKipcbiAgICogQGRlbW8gZGVtby9pbmRleC5odG1sXG4gICAqIEBwb2x5bWVyQmVoYXZpb3JcbiAgICovXG4gIFBvbHltZXIuSXJvbkNvbnRyb2xTdGF0ZSA9IHtcblxuICAgIHByb3BlcnRpZXM6IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCBjdXJyZW50bHkgaGFzIGZvY3VzLlxuICAgICAgICovXG4gICAgICBmb2N1c2VkOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRydWUsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoaXMgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICBub3RpZnk6IHRydWUsXG4gICAgICAgIG9ic2VydmVyOiAnX2Rpc2FibGVkQ2hhbmdlZCcsXG4gICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBWYWx1ZSBvZiB0aGUgYHRhYmluZGV4YCBhdHRyaWJ1dGUgYmVmb3JlIGBkaXNhYmxlZGAgd2FzIGFjdGl2YXRlZC5cbiAgICAgICAqIGBudWxsYCBtZWFucyB0aGUgYXR0cmlidXRlIHdhcyBub3QgcHJlc2VudC5cbiAgICAgICAqIEB0eXBlIHs/c3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgICAqL1xuICAgICAgX29sZFRhYkluZGV4OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgfSxcblxuICAgICAgX2JvdW5kRm9jdXNCbHVySGFuZGxlcjoge1xuICAgICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9mb2N1c0JsdXJIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9faGFuZGxlRXZlbnRSZXRhcmdldGluZzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICF0aGlzLnNoYWRvd1Jvb3QgJiYgIVBvbHltZXIuRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvYnNlcnZlcnM6IFtcbiAgICAgICdfY2hhbmdlZENvbnRyb2xTdGF0ZShmb2N1c2VkLCBkaXNhYmxlZCknXG4gICAgXSxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX2JvdW5kRm9jdXNCbHVySGFuZGxlciwgdHJ1ZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9ib3VuZEZvY3VzQmx1ckhhbmRsZXIsIHRydWUpO1xuICAgIH0sXG5cbiAgICBfZm9jdXNCbHVySGFuZGxlcjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIEluIFBvbHltZXIgMi4wLCB0aGUgbGlicmFyeSB0YWtlcyBjYXJlIG9mIHJldGFyZ2V0aW5nIGV2ZW50cy5cbiAgICAgIGlmIChQb2x5bWVyLkVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fc2V0Rm9jdXNlZChldmVudC50eXBlID09PSAnZm9jdXMnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBOT1RFKGNkYXRhKTogIGlmIHdlIGFyZSBpbiBTaGFkb3dET00gbGFuZCwgYGV2ZW50LnRhcmdldGAgd2lsbFxuICAgICAgLy8gZXZlbnR1YWxseSBiZWNvbWUgYHRoaXNgIGR1ZSB0byByZXRhcmdldGluZzsgaWYgd2UgYXJlIG5vdCBpblxuICAgICAgLy8gU2hhZG93RE9NIGxhbmQsIGBldmVudC50YXJnZXRgIHdpbGwgZXZlbnR1YWxseSBiZWNvbWUgYHRoaXNgIGR1ZVxuICAgICAgLy8gdG8gdGhlIHNlY29uZCBjb25kaXRpb25hbCB3aGljaCBmaXJlcyBhIHN5bnRoZXRpYyBldmVudCAodGhhdCBpcyBhbHNvXG4gICAgICAvLyBoYW5kbGVkKS4gSW4gZWl0aGVyIGNhc2UsIHdlIGNhbiBkaXNyZWdhcmQgYGV2ZW50LnBhdGhgLlxuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcykge1xuICAgICAgICB0aGlzLl9zZXRGb2N1c2VkKGV2ZW50LnR5cGUgPT09ICdmb2N1cycpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9faGFuZGxlRXZlbnRSZXRhcmdldGluZykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gLyoqIEB0eXBlIHtOb2RlfSAqLyhQb2x5bWVyLmRvbShldmVudCkubG9jYWxUYXJnZXQpO1xuICAgICAgICBpZiAoIXRoaXMuaXNMaWdodERlc2NlbmRhbnQodGFyZ2V0KSkge1xuICAgICAgICAgIHRoaXMuZmlyZShldmVudC50eXBlLCB7c291cmNlRXZlbnQ6IGV2ZW50fSwge1xuICAgICAgICAgICAgbm9kZTogdGhpcyxcbiAgICAgICAgICAgIGJ1YmJsZXM6IGV2ZW50LmJ1YmJsZXMsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBldmVudC5jYW5jZWxhYmxlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2Rpc2FibGVkQ2hhbmdlZDogZnVuY3Rpb24oZGlzYWJsZWQsIG9sZCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBkaXNhYmxlZCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgICAgdGhpcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gZGlzYWJsZWQgPyAnbm9uZScgOiAnJztcbiAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAvLyBSZWFkIHRoZSBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBpbnN0ZWFkIG9mIHRoZSBgdGFiSW5kZXhgIHByb3BlcnR5LlxuICAgICAgICAvLyBUaGUgcHJvcGVydHkgcmV0dXJucyBgLTFgIGlmIHRoZXJlIGlzIG5vIGB0YWJpbmRleGAgYXR0cmlidXRlLlxuICAgICAgICAvLyBUaGlzIGRpc3RpbmN0aW9uIGlzIGltcG9ydGFudCB3aGVuIHJlc3RvcmluZyB0aGUgdmFsdWUgYmVjYXVzZVxuICAgICAgICAvLyBsZWF2aW5nIGAtMWAgaGlkZXMgc2hhZG93IHJvb3QgY2hpbGRyZW4gZnJvbSB0aGUgdGFiIG9yZGVyLlxuICAgICAgICB0aGlzLl9vbGRUYWJJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICB0aGlzLl9zZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgICAgdGhpcy50YWJJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fb2xkVGFiSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGhpcy5fb2xkVGFiSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCB0aGlzLl9vbGRUYWJJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NoYW5nZWRDb250cm9sU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gX2NvbnRyb2xTdGF0ZUNoYW5nZWQgaXMgYWJzdHJhY3QsIGZvbGxvdy1vbiBiZWhhdmlvcnMgbWF5IGltcGxlbWVudCBpdFxuICAgICAgaWYgKHRoaXMuX2NvbnRyb2xTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5fY29udHJvbFN0YXRlQ2hhbmdlZCgpO1xuICAgICAgfVxuICAgIH1cblxuICB9O1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1iZWhhdmlvcnMvaXJvbi1idXR0b24tc3RhdGUuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cInBhcGVyLXJpcHBsZS1iZWhhdmlvci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIC8qKlxuICAgKiBgUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9yYCBpbXBsZW1lbnRzIGEgcmlwcGxlIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKlxuICAgKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJJbmt5Rm9jdXNCZWhhdmlvclxuICAgKi9cbiAgUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9ySW1wbCA9IHtcbiAgICBvYnNlcnZlcnM6IFtcbiAgICAgICdfZm9jdXNlZENoYW5nZWQocmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCknXG4gICAgXSxcblxuICAgIF9mb2N1c2VkQ2hhbmdlZDogZnVuY3Rpb24ocmVjZWl2ZWRGb2N1c0Zyb21LZXlib2FyZCkge1xuICAgICAgaWYgKHJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSaXBwbGUoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhc1JpcHBsZSgpKSB7XG4gICAgICAgIHRoaXMuX3JpcHBsZS5ob2xkRG93biA9IHJlY2VpdmVkRm9jdXNGcm9tS2V5Ym9hcmQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9jcmVhdGVSaXBwbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJpcHBsZSA9IFBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvci5fY3JlYXRlUmlwcGxlKCk7XG4gICAgICByaXBwbGUuaWQgPSAnaW5rJztcbiAgICAgIHJpcHBsZS5zZXRBdHRyaWJ1dGUoJ2NlbnRlcicsICcnKTtcbiAgICAgIHJpcHBsZS5jbGFzc0xpc3QuYWRkKCdjaXJjbGUnKTtcbiAgICAgIHJldHVybiByaXBwbGU7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuUGFwZXJJbmt5Rm9jdXNCZWhhdmlvciAqL1xuICBQb2x5bWVyLlBhcGVySW5reUZvY3VzQmVoYXZpb3IgPSBbXG4gICAgUG9seW1lci5Jcm9uQnV0dG9uU3RhdGUsXG4gICAgUG9seW1lci5Jcm9uQ29udHJvbFN0YXRlLFxuICAgIFBvbHltZXIuUGFwZXJSaXBwbGVCZWhhdmlvcixcbiAgICBQb2x5bWVyLlBhcGVySW5reUZvY3VzQmVoYXZpb3JJbXBsXG4gIF07XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1tZXRhL2lyb24tbWV0YS5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWxcIj5cblxuPCEtLVxuXG5UaGUgYGlyb24taWNvbmAgZWxlbWVudCBkaXNwbGF5cyBhbiBpY29uLiBCeSBkZWZhdWx0IGFuIGljb24gcmVuZGVycyBhcyBhIDI0cHggc3F1YXJlLlxuXG5FeGFtcGxlIHVzaW5nIHNyYzpcblxuICAgIDxpcm9uLWljb24gc3JjPVwic3Rhci5wbmdcIj48L2lyb24taWNvbj5cblxuRXhhbXBsZSBzZXR0aW5nIHNpemUgdG8gMzJweCB4IDMycHg6XG5cbiAgICA8aXJvbi1pY29uIGNsYXNzPVwiYmlnXCIgc3JjPVwiYmlnX3N0YXIucG5nXCI+PC9pcm9uLWljb24+XG5cbiAgICA8c3R5bGUgaXM9XCJjdXN0b20tc3R5bGVcIj5cbiAgICAgIC5iaWcge1xuICAgICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IDMycHg7XG4gICAgICAgIC0taXJvbi1pY29uLXdpZHRoOiAzMnB4O1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG5cblRoZSBpcm9uIGVsZW1lbnRzIGluY2x1ZGUgc2V2ZXJhbCBzZXRzIG9mIGljb25zLlxuVG8gdXNlIHRoZSBkZWZhdWx0IHNldCBvZiBpY29ucywgaW1wb3J0IGBpcm9uLWljb25zLmh0bWxgIGFuZCB1c2UgdGhlIGBpY29uYCBhdHRyaWJ1dGUgdG8gc3BlY2lmeSBhbiBpY29uOlxuXG4gICAgPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi9jb21wb25lbnRzL2lyb24taWNvbnMvaXJvbi1pY29ucy5odG1sXCI+XG5cbiAgICA8aXJvbi1pY29uIGljb249XCJtZW51XCI+PC9pcm9uLWljb24+XG5cblRvIHVzZSBhIGRpZmZlcmVudCBidWlsdC1pbiBzZXQgb2YgaWNvbnMsIGltcG9ydCB0aGUgc3BlY2lmaWMgYGlyb24taWNvbnMvPGljb25zZXQ+LWljb25zLmh0bWxgLCBhbmRcbnNwZWNpZnkgdGhlIGljb24gYXMgYDxpY29uc2V0Pjo8aWNvbj5gLiBGb3IgZXhhbXBsZSwgdG8gdXNlIGEgY29tbXVuaWNhdGlvbiBpY29uLCB5b3Ugd291bGRcbnVzZTpcblxuICAgIDxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIvY29tcG9uZW50cy9pcm9uLWljb25zL2NvbW11bmljYXRpb24taWNvbnMuaHRtbFwiPlxuXG4gICAgPGlyb24taWNvbiBpY29uPVwiY29tbXVuaWNhdGlvbjplbWFpbFwiPjwvaXJvbi1pY29uPlxuXG5Zb3UgY2FuIGFsc28gY3JlYXRlIGN1c3RvbSBpY29uIHNldHMgb2YgYml0bWFwIG9yIFNWRyBpY29ucy5cblxuRXhhbXBsZSBvZiB1c2luZyBhbiBpY29uIG5hbWVkIGBjaGVycnlgIGZyb20gYSBjdXN0b20gaWNvbnNldCB3aXRoIHRoZSBJRCBgZnJ1aXRgOlxuXG4gICAgPGlyb24taWNvbiBpY29uPVwiZnJ1aXQ6Y2hlcnJ5XCI+PC9pcm9uLWljb24+XG5cblNlZSBbaXJvbi1pY29uc2V0XShpcm9uLWljb25zZXQpIGFuZCBbaXJvbi1pY29uc2V0LXN2Z10oaXJvbi1pY29uc2V0LXN2ZykgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXRcbmhvdyB0byBjcmVhdGUgYSBjdXN0b20gaWNvbnNldC5cblxuU2VlIHRoZSBbaXJvbi1pY29ucyBkZW1vXShpcm9uLWljb25zP3ZpZXc9ZGVtbzpkZW1vL2luZGV4Lmh0bWwpIHRvIHNlZSB0aGUgaWNvbnMgYXZhaWxhYmxlXG5pbiB0aGUgdmFyaW91cyBpY29uc2V0cy5cblxuVG8gbG9hZCBhIHN1YnNldCBvZiBpY29ucyBmcm9tIG9uZSBvZiB0aGUgZGVmYXVsdCBgaXJvbi1pY29uc2Agc2V0cywgeW91IGNhblxudXNlIHRoZSBbcG9seS1pY29uXShodHRwczovL3BvbHktaWNvbi5hcHBzcG90LmNvbS8pIHRvb2wuIEl0IGFsbG93cyB5b3VcbnRvIHNlbGVjdCBpbmRpdmlkdWFsIGljb25zLCBhbmQgY3JlYXRlcyBhbiBpY29uc2V0IGZyb20gdGhlbSB0aGF0IHlvdSBjYW5cbnVzZSBkaXJlY3RseSBpbiB5b3VyIGVsZW1lbnRzLlxuXG4jIyMgU3R5bGluZ1xuXG5UaGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XG5cbkN1c3RvbSBwcm9wZXJ0eSB8IERlc2NyaXB0aW9uIHwgRGVmYXVsdFxuLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS1cbmAtLWlyb24taWNvbmAgfCBNaXhpbiBhcHBsaWVkIHRvIHRoZSBpY29uIHwge31cbmAtLWlyb24taWNvbi13aWR0aGAgfCBXaWR0aCBvZiB0aGUgaWNvbiB8IGAyNHB4YFxuYC0taXJvbi1pY29uLWhlaWdodGAgfCBIZWlnaHQgb2YgdGhlIGljb24gfCBgMjRweGBcbmAtLWlyb24taWNvbi1maWxsLWNvbG9yYCB8IEZpbGwgY29sb3Igb2YgdGhlIHN2ZyBpY29uIHwgYGN1cnJlbnRjb2xvcmBcbmAtLWlyb24taWNvbi1zdHJva2UtY29sb3JgIHwgU3Ryb2tlIGNvbG9yIG9mIHRoZSBzdmcgaWNvbiB8IG5vbmVcblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBlbGVtZW50IGlyb24taWNvblxuQGRlbW8gZGVtby9pbmRleC5odG1sXG5AaGVybyBoZXJvLnN2Z1xuQGhvbWVwYWdlIHBvbHltZXIuZ2l0aHViLmlvXG4tLT5cblxuPGRvbS1tb2R1bGUgaWQ9XCJpcm9uLWljb25cIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWlubGluZTtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlci1jZW50ZXI7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuXG4gICAgICAgIGZpbGw6IHZhcigtLWlyb24taWNvbi1maWxsLWNvbG9yLCBjdXJyZW50Y29sb3IpO1xuICAgICAgICBzdHJva2U6IHZhcigtLWlyb24taWNvbi1zdHJva2UtY29sb3IsIG5vbmUpO1xuXG4gICAgICAgIHdpZHRoOiB2YXIoLS1pcm9uLWljb24td2lkdGgsIDI0cHgpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLWlyb24taWNvbi1oZWlnaHQsIDI0cHgpO1xuICAgICAgICBAYXBwbHkgLS1pcm9uLWljb247XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtoaWRkZW5dKSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC90ZW1wbGF0ZT5cblxuICA8c2NyaXB0PlxuXG4gICAgUG9seW1lcih7XG5cbiAgICAgIGlzOiAnaXJvbi1pY29uJyxcblxuICAgICAgcHJvcGVydGllczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiB0byB1c2UuIFRoZSBuYW1lIHNob3VsZCBiZSBvZiB0aGUgZm9ybTpcbiAgICAgICAgICogYGljb25zZXRfbmFtZTppY29uX25hbWVgLlxuICAgICAgICAgKi9cbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdGhlbWUgdG8gdXNlZCwgaWYgb25lIGlzIHNwZWNpZmllZCBieSB0aGVcbiAgICAgICAgICogaWNvbnNldC5cbiAgICAgICAgICovXG4gICAgICAgIHRoZW1lOiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHVzaW5nIGlyb24taWNvbiB3aXRob3V0IGFuIGljb25zZXQsIHlvdSBjYW4gc2V0IHRoZSBzcmMgdG8gYmVcbiAgICAgICAgICogdGhlIFVSTCBvZiBhbiBpbmRpdmlkdWFsIGljb24gaW1hZ2UgZmlsZS4gTm90ZSB0aGF0IHRoaXMgd2lsbCB0YWtlXG4gICAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciBhIGdpdmVuIGljb24gYXR0cmlidXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgc3JjOiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHshUG9seW1lci5Jcm9uTWV0YX1cbiAgICAgICAgICovXG4gICAgICAgIF9tZXRhOiB7XG4gICAgICAgICAgdmFsdWU6IFBvbHltZXIuQmFzZS5jcmVhdGUoJ2lyb24tbWV0YScsIHt0eXBlOiAnaWNvbnNldCd9KVxuICAgICAgICB9XG5cbiAgICAgIH0sXG5cbiAgICAgIG9ic2VydmVyczogW1xuICAgICAgICAnX3VwZGF0ZUljb24oX21ldGEsIGlzQXR0YWNoZWQpJyxcbiAgICAgICAgJ191cGRhdGVJY29uKHRoZW1lLCBpc0F0dGFjaGVkKScsXG4gICAgICAgICdfc3JjQ2hhbmdlZChzcmMsIGlzQXR0YWNoZWQpJyxcbiAgICAgICAgJ19pY29uQ2hhbmdlZChpY29uLCBpc0F0dGFjaGVkKSdcbiAgICAgIF0sXG5cbiAgICAgIF9ERUZBVUxUX0lDT05TRVQ6ICdpY29ucycsXG5cbiAgICAgIF9pY29uQ2hhbmdlZDogZnVuY3Rpb24oaWNvbikge1xuICAgICAgICB2YXIgcGFydHMgPSAoaWNvbiB8fCAnJykuc3BsaXQoJzonKTtcbiAgICAgICAgdGhpcy5faWNvbk5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgdGhpcy5faWNvbnNldE5hbWUgPSBwYXJ0cy5wb3AoKSB8fCB0aGlzLl9ERUZBVUxUX0lDT05TRVQ7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUljb24oKTtcbiAgICAgIH0sXG5cbiAgICAgIF9zcmNDaGFuZ2VkOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlSWNvbigpO1xuICAgICAgfSxcblxuICAgICAgX3VzZXNJY29uc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWNvbiB8fCAhdGhpcy5zcmM7XG4gICAgICB9LFxuXG4gICAgICAvKiogQHN1cHByZXNzIHt2aXNpYmlsaXR5fSAqL1xuICAgICAgX3VwZGF0ZUljb246IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fdXNlc0ljb25zZXQoKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9pbWcgJiYgdGhpcy5faW1nLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIFBvbHltZXIuZG9tKHRoaXMucm9vdCkucmVtb3ZlQ2hpbGQodGhpcy5faW1nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX2ljb25OYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faWNvbnNldCkge1xuICAgICAgICAgICAgICB0aGlzLl9pY29uc2V0LnJlbW92ZUljb24odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9pY29uc2V0TmFtZSAmJiB0aGlzLl9tZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pY29uc2V0ID0gLyoqIEB0eXBlIHs/UG9seW1lci5JY29uc2V0fSAqLyAoXG4gICAgICAgICAgICAgIHRoaXMuX21ldGEuYnlLZXkodGhpcy5faWNvbnNldE5hbWUpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pY29uc2V0KSB7XG4gICAgICAgICAgICAgIHRoaXMuX2ljb25zZXQuYXBwbHlJY29uKHRoaXMsIHRoaXMuX2ljb25OYW1lLCB0aGlzLnRoZW1lKTtcbiAgICAgICAgICAgICAgdGhpcy51bmxpc3Rlbih3aW5kb3csICdpcm9uLWljb25zZXQtYWRkZWQnLCAnX3VwZGF0ZUljb24nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubGlzdGVuKHdpbmRvdywgJ2lyb24taWNvbnNldC1hZGRlZCcsICdfdXBkYXRlSWNvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5faWNvbnNldCkge1xuICAgICAgICAgICAgdGhpcy5faWNvbnNldC5yZW1vdmVJY29uKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMuX2ltZykge1xuICAgICAgICAgICAgdGhpcy5faW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICB0aGlzLl9pbWcuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICB0aGlzLl9pbWcuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICAgICAgdGhpcy5faW1nLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9pbWcuc3JjID0gdGhpcy5zcmM7XG4gICAgICAgICAgUG9seW1lci5kb20odGhpcy5yb290KS5hcHBlbmRDaGlsZCh0aGlzLl9pbWcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcblxuICA8L3NjcmlwdD5cblxuPC9kb20tbW9kdWxlPlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9pcm9uLWljb24vaXJvbi1pY29uLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9wYXBlci1iZWhhdmlvcnMvcGFwZXItaW5reS1mb2N1cy1iZWhhdmlvci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcGFwZXItc3R5bGVzL2RlZmF1bHQtdGhlbWUuaHRtbFwiPlxuXG48IS0tXG5NYXRlcmlhbCBkZXNpZ246IFtJY29uIHRvZ2dsZXNdKGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvY29tcG9uZW50cy9idXR0b25zLmh0bWwjYnV0dG9ucy10b2dnbGUtYnV0dG9ucylcblxuYHBhcGVyLWljb24tYnV0dG9uYCBpcyBhIGJ1dHRvbiB3aXRoIGFuIGltYWdlIHBsYWNlZCBhdCB0aGUgY2VudGVyLiBXaGVuIHRoZSB1c2VyIHRvdWNoZXNcbnRoZSBidXR0b24sIGEgcmlwcGxlIGVmZmVjdCBlbWFuYXRlcyBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGJ1dHRvbi5cblxuYHBhcGVyLWljb24tYnV0dG9uYCBkb2VzIG5vdCBpbmNsdWRlIGEgZGVmYXVsdCBpY29uIHNldC4gVG8gdXNlIGljb25zIGZyb20gdGhlIGRlZmF1bHRcbnNldCwgaW5jbHVkZSBgUG9seW1lckVsZW1lbnRzL2lyb24taWNvbnMvaXJvbi1pY29ucy5odG1sYCwgYW5kIHVzZSB0aGUgYGljb25gIGF0dHJpYnV0ZSB0byBzcGVjaWZ5IHdoaWNoIGljb25cbmZyb20gdGhlIGljb24gc2V0IHRvIHVzZS5cblxuICAgIDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPVwibWVudVwiPjwvcGFwZXItaWNvbi1idXR0b24+XG5cblNlZSBbYGlyb24taWNvbnNldGBdKGlyb24taWNvbnNldCkgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXRcbmhvdyB0byB1c2UgYSBjdXN0b20gaWNvbiBzZXQuXG5cbkV4YW1wbGU6XG5cbiAgICA8bGluayBocmVmPVwicGF0aC90by9pcm9uLWljb25zL2lyb24taWNvbnMuaHRtbFwiIHJlbD1cImltcG9ydFwiPlxuXG4gICAgPHBhcGVyLWljb24tYnV0dG9uIGljb249XCJmYXZvcml0ZVwiPjwvcGFwZXItaWNvbi1idXR0b24+XG4gICAgPHBhcGVyLWljb24tYnV0dG9uIHNyYz1cInN0YXIucG5nXCI+PC9wYXBlci1pY29uLWJ1dHRvbj5cblxuVG8gdXNlIGBwYXBlci1pY29uLWJ1dHRvbmAgYXMgYSBsaW5rLCB3cmFwIGl0IGluIGFuIGFuY2hvciB0YWcuIFNpbmNlIGBwYXBlci1pY29uLWJ1dHRvbmBcbndpbGwgYWxyZWFkeSByZWNlaXZlIGZvY3VzLCB5b3UgbWF5IHdhbnQgdG8gcHJldmVudCB0aGUgYW5jaG9yIHRhZyBmcm9tIHJlY2VpdmluZyBmb2N1c1xuYXMgd2VsbCBieSBzZXR0aW5nIGl0cyB0YWJpbmRleCB0byAtMS5cblxuICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5wb2x5bWVyLXByb2plY3Qub3JnXCIgdGFiaW5kZXg9XCItMVwiPlxuICAgICAgPHBhcGVyLWljb24tYnV0dG9uIGljb249XCJwb2x5bWVyXCI+PC9wYXBlci1pY29uLWJ1dHRvbj5cbiAgICA8L2E+XG5cbiMjIyBTdHlsaW5nXG5cblN0eWxlIHRoZSBidXR0b24gd2l0aCBDU1MgYXMgeW91IHdvdWxkIGEgbm9ybWFsIERPTSBlbGVtZW50LiBJZiB5b3UgYXJlIHVzaW5nIHRoZSBpY29uc1xucHJvdmlkZWQgYnkgYGlyb24taWNvbnNgLCB0aGV5IHdpbGwgaW5oZXJpdCB0aGUgZm9yZWdyb3VuZCBjb2xvciBvZiB0aGUgYnV0dG9uLlxuXG4gICAgLyogbWFrZSBhIHJlZCBcImZhdm9yaXRlXCIgYnV0dG9uICovXG4gICAgPHBhcGVyLWljb24tYnV0dG9uIGljb249XCJmYXZvcml0ZVwiIHN0eWxlPVwiY29sb3I6IHJlZDtcIj48L3BhcGVyLWljb24tYnV0dG9uPlxuXG5CeSBkZWZhdWx0LCB0aGUgcmlwcGxlIGlzIHRoZSBzYW1lIGNvbG9yIGFzIHRoZSBmb3JlZ3JvdW5kIGF0IDI1JSBvcGFjaXR5LiBZb3UgbWF5XG5jdXN0b21pemUgdGhlIGNvbG9yIHVzaW5nIHRoZSBgLS1wYXBlci1pY29uLWJ1dHRvbi1pbmstY29sb3JgIGN1c3RvbSBwcm9wZXJ0eS5cblxuVGhlIGZvbGxvd2luZyBjdXN0b20gcHJvcGVydGllcyBhbmQgbWl4aW5zIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XG5cbkN1c3RvbSBwcm9wZXJ0eSB8IERlc2NyaXB0aW9uIHwgRGVmYXVsdFxuLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS1cbmAtLXBhcGVyLWljb24tYnV0dG9uLWRpc2FibGVkLXRleHRgIHwgVGhlIGNvbG9yIG9mIHRoZSBkaXNhYmxlZCBidXR0b24gfCBgLS1kaXNhYmxlZC10ZXh0LWNvbG9yYFxuYC0tcGFwZXItaWNvbi1idXR0b24taW5rLWNvbG9yYCB8IFNlbGVjdGVkL2ZvY3VzIHJpcHBsZSBjb2xvciB8IGAtLXByaW1hcnktdGV4dC1jb2xvcmBcbmAtLXBhcGVyLWljb24tYnV0dG9uYCB8IE1peGluIGZvciBhIGJ1dHRvbiB8IGB7fWBcbmAtLXBhcGVyLWljb24tYnV0dG9uLWRpc2FibGVkYCB8IE1peGluIGZvciBhIGRpc2FibGVkIGJ1dHRvbiB8IGB7fWBcbmAtLXBhcGVyLWljb24tYnV0dG9uLWhvdmVyYCB8IE1peGluIGZvciBidXR0b24gb24gaG92ZXIgfCBge31gXG5cbkBncm91cCBQYXBlciBFbGVtZW50c1xuQGVsZW1lbnQgcGFwZXItaWNvbi1idXR0b25cbkBkZW1vIGRlbW8vaW5kZXguaHRtbFxuLS0+XG5cbjxkb20tbW9kdWxlIGlkPVwicGFwZXItaWNvbi1idXR0b25cIj5cbiAgPHRlbXBsYXRlIHN0cmlwLXdoaXRlc3BhY2U+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIHotaW5kZXg6IDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICAgICAgIHdpZHRoOiA0MHB4O1xuICAgICAgICBoZWlnaHQ6IDQwcHg7XG5cbiAgICAgICAgLyogTk9URTogQm90aCB2YWx1ZXMgYXJlIG5lZWRlZCwgc2luY2Ugc29tZSBwaG9uZXMgcmVxdWlyZSB0aGUgdmFsdWUgdG8gYmUgYHRyYW5zcGFyZW50YC4gKi9cbiAgICAgICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG4gICAgICAgIC8qIEJlY2F1c2Ugb2YgcG9seW1lci8yNTU4LCB0aGlzIHN0eWxlIGhhcyBsb3dlciBzcGVjaWZpY2l0eSB0aGFuICogKi9cbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveCAhaW1wb3J0YW50O1xuXG4gICAgICAgIEBhcHBseSAtLXBhcGVyLWljb24tYnV0dG9uO1xuICAgICAgfVxuXG4gICAgICA6aG9zdCAjaW5rIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXBhcGVyLWljb24tYnV0dG9uLWluay1jb2xvciwgdmFyKC0tcHJpbWFyeS10ZXh0LWNvbG9yKSk7XG4gICAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkge1xuICAgICAgICBjb2xvcjogdmFyKC0tcGFwZXItaWNvbi1idXR0b24tZGlzYWJsZWQtdGV4dCwgdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvcikpO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgY3Vyc29yOiBhdXRvO1xuXG4gICAgICAgIEBhcHBseSAtLXBhcGVyLWljb24tYnV0dG9uLWRpc2FibGVkO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KDpob3Zlcikge1xuICAgICAgICBAYXBwbHkgLS1wYXBlci1pY29uLWJ1dHRvbi1ob3ZlcjtcbiAgICAgIH1cblxuICAgICAgaXJvbi1pY29uIHtcbiAgICAgICAgLS1pcm9uLWljb24td2lkdGg6IDEwMCU7XG4gICAgICAgIC0taXJvbi1pY29uLWhlaWdodDogMTAwJTtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuXG4gICAgPGlyb24taWNvbiBpZD1cImljb25cIiBzcmM9XCJbW3NyY11dXCIgaWNvbj1cIltbaWNvbl1dXCIgYWx0JD1cIltbYWx0XV1cIj48L2lyb24taWNvbj5cbiAgPC90ZW1wbGF0ZT5cblxuICA8c2NyaXB0PlxuICAgIFBvbHltZXIoe1xuICAgICAgaXM6ICdwYXBlci1pY29uLWJ1dHRvbicsXG5cbiAgICAgIGhvc3RBdHRyaWJ1dGVzOiB7XG4gICAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgICAgICB0YWJpbmRleDogJzAnXG4gICAgICB9LFxuXG4gICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgUG9seW1lci5QYXBlcklua3lGb2N1c0JlaGF2aW9yXG4gICAgICBdLFxuXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJMIG9mIGFuIGltYWdlIGZvciB0aGUgaWNvbi4gSWYgdGhlIHNyYyBwcm9wZXJ0eSBpcyBzcGVjaWZpZWQsXG4gICAgICAgICAqIHRoZSBpY29uIHByb3BlcnR5IHNob3VsZCBub3QgYmUuXG4gICAgICAgICAqL1xuICAgICAgICBzcmM6IHtcbiAgICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBpY29uIG5hbWUgb3IgaW5kZXggaW4gdGhlIHNldCBvZiBpY29ucyBhdmFpbGFibGUgaW5cbiAgICAgICAgICogdGhlIGljb24ncyBpY29uIHNldC4gSWYgdGhlIGljb24gcHJvcGVydHkgaXMgc3BlY2lmaWVkLFxuICAgICAgICAgKiB0aGUgc3JjIHByb3BlcnR5IHNob3VsZCBub3QgYmUuXG4gICAgICAgICAqL1xuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgYWx0ZXJuYXRlIHRleHQgZm9yIHRoZSBidXR0b24sIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgICAgICAgKi9cbiAgICAgICAgYWx0OiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgIG9ic2VydmVyOiBcIl9hbHRDaGFuZ2VkXCJcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX2FsdENoYW5nZWQ6IGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpO1xuXG4gICAgICAgIC8vIERvbid0IHN0b21wIG92ZXIgYSB1c2VyLXNldCBhcmlhLWxhYmVsLlxuICAgICAgICBpZiAoIWxhYmVsIHx8IG9sZFZhbHVlID09IGxhYmVsKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgPC9zY3JpcHQ+XG48L2RvbS1tb2R1bGU+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9wb2x5bWVyL3BvbHltZXIuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImlyb24tc2VsZWN0YWJsZS5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIC8qKlxuICAgKiBAcG9seW1lckJlaGF2aW9yIFBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9yXG4gICAqL1xuICBQb2x5bWVyLklyb25NdWx0aVNlbGVjdGFibGVCZWhhdmlvckltcGwgPSB7XG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRydWUsIG11bHRpcGxlIHNlbGVjdGlvbnMgYXJlIGFsbG93ZWQuXG4gICAgICAgKi9cbiAgICAgIG11bHRpOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgb2JzZXJ2ZXI6ICdtdWx0aUNoYW5nZWQnXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldHMgb3Igc2V0cyB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuIFRoaXMgaXMgdXNlZCBpbnN0ZWFkIG9mIGBzZWxlY3RlZGAgd2hlbiBgbXVsdGlgXG4gICAgICAgKiBpcyB0cnVlLlxuICAgICAgICovXG4gICAgICBzZWxlY3RlZFZhbHVlczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW1zLlxuICAgICAgICovXG4gICAgICBzZWxlY3RlZEl0ZW1zOiB7XG4gICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgfSxcblxuICAgIG9ic2VydmVyczogW1xuICAgICAgJ191cGRhdGVTZWxlY3RlZChzZWxlY3RlZFZhbHVlcy5zcGxpY2VzKSdcbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gdmFsdWUuIElmIHRoZSBgbXVsdGlgIHByb3BlcnR5IGlzIHRydWUsIHRoZW4gdGhlIHNlbGVjdGVkIHN0YXRlIG9mIHRoZVxuICAgICAqIGB2YWx1ZWAgd2lsbCBiZSB0b2dnbGVkOyBvdGhlcndpc2UgdGhlIGB2YWx1ZWAgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VsZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2VsZWN0LlxuICAgICAqL1xuICAgIHNlbGVjdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgIHRoaXMuX3RvZ2dsZVNlbGVjdGVkKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbXVsdGlDaGFuZ2VkOiBmdW5jdGlvbihtdWx0aSkge1xuICAgICAgdGhpcy5fc2VsZWN0aW9uLm11bHRpID0gbXVsdGk7XG4gICAgICB0aGlzLl91cGRhdGVTZWxlY3RlZCgpO1xuICAgIH0sXG5cbiAgICAvLyBVTlVTRUQsIEZPUiBBUEkgQ09NUEFUSUJJTElUWVxuICAgIGdldCBfc2hvdWxkVXBkYXRlU2VsZWN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWQgIT0gbnVsbCB8fFxuICAgICAgICAodGhpcy5zZWxlY3RlZFZhbHVlcyAhPSBudWxsICYmIHRoaXMuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKTtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZUF0dHJGb3JTZWxlY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMubXVsdGkpIHtcbiAgICAgICAgUG9seW1lci5Jcm9uU2VsZWN0YWJsZUJlaGF2aW9yLl91cGRhdGVBdHRyRm9yU2VsZWN0ZWQuYXBwbHkodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRJdGVtcyAmJiB0aGlzLnNlbGVjdGVkSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdGhpcy5zZWxlY3RlZEl0ZW1zLm1hcChmdW5jdGlvbihzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faW5kZXhUb1ZhbHVlKHRoaXMuaW5kZXhPZihzZWxlY3RlZEl0ZW0pKTtcbiAgICAgICAgfSwgdGhpcykuZmlsdGVyKGZ1bmN0aW9uKHVuZmlsdGVyZWRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiB1bmZpbHRlcmVkVmFsdWUgIT0gbnVsbDtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF91cGRhdGVTZWxlY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5tdWx0aSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RNdWx0aSh0aGlzLnNlbGVjdGVkVmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdFNlbGVjdGVkKHRoaXMuc2VsZWN0ZWQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfc2VsZWN0TXVsdGk6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgdmFsdWVzID0gdmFsdWVzIHx8IFtdO1xuXG4gICAgICB2YXIgc2VsZWN0ZWRJdGVtcyA9ICh0aGlzLl92YWx1ZXNUb0l0ZW1zKHZhbHVlcykgfHwgW10pLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBudWxsICYmIGl0ZW0gIT09IHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBjbGVhciBhbGwgYnV0IHRoZSBjdXJyZW50IHNlbGVjdGVkIGl0ZW1zXG4gICAgICB0aGlzLl9zZWxlY3Rpb24uY2xlYXIoc2VsZWN0ZWRJdGVtcyk7XG5cbiAgICAgIC8vIHNlbGVjdCBvbmx5IHRob3NlIG5vdCBzZWxlY3RlZCB5ZXRcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb24uc2V0SXRlbVNlbGVjdGVkKHNlbGVjdGVkSXRlbXNbaV0sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3IgaXRlbXMsIHNpbmNlIHRoaXMgYXJyYXkgaXMgcG9wdWxhdGVkIG9ubHkgd2hlbiBhdHRhY2hlZFxuICAgICAgaWYgKHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24gJiYgIXRoaXMuX3NlbGVjdGlvbi5nZXQoKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gdGhpcy5fdmFsdWVUb0l0ZW0odGhpcy5mYWxsYmFja1NlbGVjdGlvbik7XG4gICAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgIHRoaXMuc2VsZWN0KHRoaXMuZmFsbGJhY2tTZWxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZWxlY3Rpb25DaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHMgPSB0aGlzLl9zZWxlY3Rpb24uZ2V0KCk7XG4gICAgICBpZiAodGhpcy5tdWx0aSkge1xuICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW1zKHMpO1xuICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW0ocy5sZW5ndGggPyBzWzBdIDogbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocyAhPT0gbnVsbCAmJiBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZEl0ZW1zKFtzXSk7XG4gICAgICAgICAgdGhpcy5fc2V0U2VsZWN0ZWRJdGVtKHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NldFNlbGVjdGVkSXRlbXMoW10pO1xuICAgICAgICAgIHRoaXMuX3NldFNlbGVjdGVkSXRlbShudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBfdG9nZ2xlU2VsZWN0ZWQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG4gICAgICB2YXIgdW5zZWxlY3RlZCA9IGkgPCAwO1xuICAgICAgaWYgKHVuc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5wdXNoKCdzZWxlY3RlZFZhbHVlcycsdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zcGxpY2UoJ3NlbGVjdGVkVmFsdWVzJyxpLDEpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfdmFsdWVzVG9JdGVtczogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gKHZhbHVlcyA9PSBudWxsKSA/IG51bGwgOiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZVRvSXRlbSh2YWx1ZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqIEBwb2x5bWVyQmVoYXZpb3IgKi9cbiAgUG9seW1lci5Jcm9uTXVsdGlTZWxlY3RhYmxlQmVoYXZpb3IgPSBbXG4gICAgUG9seW1lci5Jcm9uU2VsZWN0YWJsZUJlaGF2aW9yLFxuICAgIFBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9ySW1wbFxuICBdO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJpcm9uLW11bHRpLXNlbGVjdGFibGUuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgYGlyb24tc2VsZWN0b3JgIGlzIGFuIGVsZW1lbnQgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFuYWdlIGEgbGlzdCBvZiBlbGVtZW50c1xuICB0aGF0IGNhbiBiZSBzZWxlY3RlZC4gIFRhcHBpbmcgb24gdGhlIGl0ZW0gd2lsbCBtYWtlIHRoZSBpdGVtIHNlbGVjdGVkLiAgVGhlIGBzZWxlY3RlZGAgaW5kaWNhdGVzXG4gIHdoaWNoIGl0ZW0gaXMgYmVpbmcgc2VsZWN0ZWQuICBUaGUgZGVmYXVsdCBpcyB0byB1c2UgdGhlIGluZGV4IG9mIHRoZSBpdGVtLlxuXG4gIEV4YW1wbGU6XG5cbiAgICAgIDxpcm9uLXNlbGVjdG9yIHNlbGVjdGVkPVwiMFwiPlxuICAgICAgICA8ZGl2Pkl0ZW0gMTwvZGl2PlxuICAgICAgICA8ZGl2Pkl0ZW0gMjwvZGl2PlxuICAgICAgICA8ZGl2Pkl0ZW0gMzwvZGl2PlxuICAgICAgPC9pcm9uLXNlbGVjdG9yPlxuXG4gIElmIHlvdSB3YW50IHRvIHVzZSB0aGUgYXR0cmlidXRlIHZhbHVlIG9mIGFuIGVsZW1lbnQgZm9yIGBzZWxlY3RlZGAgaW5zdGVhZCBvZiB0aGUgaW5kZXgsXG4gIHNldCBgYXR0ckZvclNlbGVjdGVkYCB0byB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIHNlbGVjdCBpdGVtIGJ5XG4gIGBuYW1lYCwgc2V0IGBhdHRyRm9yU2VsZWN0ZWRgIHRvIGBuYW1lYC5cblxuICBFeGFtcGxlOlxuXG4gICAgICA8aXJvbi1zZWxlY3RvciBhdHRyLWZvci1zZWxlY3RlZD1cIm5hbWVcIiBzZWxlY3RlZD1cImZvb1wiPlxuICAgICAgICA8ZGl2IG5hbWU9XCJmb29cIj5Gb288L2Rpdj5cbiAgICAgICAgPGRpdiBuYW1lPVwiYmFyXCI+QmFyPC9kaXY+XG4gICAgICAgIDxkaXYgbmFtZT1cInpvdFwiPlpvdDwvZGl2PlxuICAgICAgPC9pcm9uLXNlbGVjdG9yPlxuXG4gIFlvdSBjYW4gc3BlY2lmeSBhIGRlZmF1bHQgZmFsbGJhY2sgd2l0aCBgZmFsbGJhY2tTZWxlY3Rpb25gIGluIGNhc2UgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlIGRvZXNcbiAgbm90IG1hdGNoIHRoZSBgYXR0ckZvclNlbGVjdGVkYCBhdHRyaWJ1dGUgb2YgYW55IGVsZW1lbnRzLlxuXG4gIEV4YW1wbGU6XG5cbiAgICAgICAgPGlyb24tc2VsZWN0b3IgYXR0ci1mb3Itc2VsZWN0ZWQ9XCJuYW1lXCIgc2VsZWN0ZWQ9XCJub24tZXhpc3RpbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFjay1zZWxlY3Rpb249XCJkZWZhdWx0XCI+XG4gICAgICAgICAgPGRpdiBuYW1lPVwiZm9vXCI+Rm9vPC9kaXY+XG4gICAgICAgICAgPGRpdiBuYW1lPVwiYmFyXCI+QmFyPC9kaXY+XG4gICAgICAgICAgPGRpdiBuYW1lPVwiZGVmYXVsdFwiPkRlZmF1bHQ8L2Rpdj5cbiAgICAgICAgPC9pcm9uLXNlbGVjdG9yPlxuXG4gIE5vdGU6IFdoZW4gdGhlIHNlbGVjdG9yIGlzIG11bHRpLCB0aGUgc2VsZWN0aW9uIHdpbGwgc2V0IHRvIGBmYWxsYmFja1NlbGVjdGlvbmAgaWZmXG4gIHRoZSBudW1iZXIgb2YgbWF0Y2hpbmcgZWxlbWVudHMgaXMgemVyby5cblxuICBgaXJvbi1zZWxlY3RvcmAgaXMgbm90IHN0eWxlZC4gVXNlIHRoZSBgaXJvbi1zZWxlY3RlZGAgQ1NTIGNsYXNzIHRvIHN0eWxlIHRoZSBzZWxlY3RlZCBlbGVtZW50LlxuXG4gIEV4YW1wbGU6XG5cbiAgICAgIDxzdHlsZT5cbiAgICAgICAgLmlyb24tc2VsZWN0ZWQge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNlZWU7XG4gICAgICAgIH1cbiAgICAgIDwvc3R5bGU+XG5cbiAgICAgIC4uLlxuXG4gICAgICA8aXJvbi1zZWxlY3RvciBzZWxlY3RlZD1cIjBcIj5cbiAgICAgICAgPGRpdj5JdGVtIDE8L2Rpdj5cbiAgICAgICAgPGRpdj5JdGVtIDI8L2Rpdj5cbiAgICAgICAgPGRpdj5JdGVtIDM8L2Rpdj5cbiAgICAgIDwvaXJvbi1zZWxlY3Rvcj5cblxuICBAZGVtbyBkZW1vL2luZGV4Lmh0bWxcbiAgKi9cblxuICBQb2x5bWVyKHtcblxuICAgIGlzOiAnaXJvbi1zZWxlY3RvcicsXG5cbiAgICBiZWhhdmlvcnM6IFtcbiAgICAgIFBvbHltZXIuSXJvbk11bHRpU2VsZWN0YWJsZUJlaGF2aW9yXG4gICAgXVxuXG4gIH0pO1xuXG48L3NjcmlwdD5cbiIsIlxuPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cblxuPHNjcmlwdD5cblxuICAvKipcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IHNlbGVjdENhbGxiYWNrXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm92aWRlfVxuICAgKi9cbiAgUG9seW1lci5Jcm9uU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsZWN0Q2FsbGJhY2spIHtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IFtdO1xuICAgIHRoaXMuc2VsZWN0Q2FsbGJhY2sgPSBzZWxlY3RDYWxsYmFjaztcbiAgfTtcblxuICBQb2x5bWVyLklyb25TZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBzZWxlY3RlZCBpdGVtKHMpLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBzZWxlY3RlZCBpdGVtKHMpLiBJZiB0aGUgbXVsdGkgcHJvcGVydHkgaXMgdHJ1ZSxcbiAgICAgKiBgZ2V0YCB3aWxsIHJldHVybiBhbiBhcnJheSwgb3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuXG4gICAgICogdGhlIHNlbGVjdGVkIGl0ZW0gb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubXVsdGkgPyB0aGlzLnNlbGVjdGlvbi5zbGljZSgpIDogdGhpcy5zZWxlY3Rpb25bMF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgdGhlIHNlbGVjdGlvbiBleGNlcHQgdGhlIG9uZXMgaW5kaWNhdGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGV4Y2x1ZGVzIGl0ZW1zIHRvIGJlIGV4Y2x1ZGVkLlxuICAgICAqL1xuICAgIGNsZWFyOiBmdW5jdGlvbihleGNsdWRlcykge1xuICAgICAgdGhpcy5zZWxlY3Rpb24uc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYgKCFleGNsdWRlcyB8fCBleGNsdWRlcy5pbmRleE9mKGl0ZW0pIDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0SXRlbVNlbGVjdGVkKGl0ZW0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiBhIGdpdmVuIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGlzU2VsZWN0ZWRcbiAgICAgKiBAcGFyYW0geyp9IGl0ZW0gVGhlIGl0ZW0gd2hvc2Ugc2VsZWN0aW9uIHN0YXRlIHNob3VsZCBiZSBjaGVja2VkLlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgdHJ1ZSBpZiBgaXRlbWAgaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgaXNTZWxlY3RlZDogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmluZGV4T2YoaXRlbSkgPj0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2VsZWN0aW9uIHN0YXRlIGZvciBhIGdpdmVuIGl0ZW0gdG8gZWl0aGVyIHNlbGVjdGVkIG9yIGRlc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldEl0ZW1TZWxlY3RlZFxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBUaGUgaXRlbSB0byBzZWxlY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1NlbGVjdGVkIFRydWUgZm9yIHNlbGVjdGVkLCBmYWxzZSBmb3IgZGVzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBzZXRJdGVtU2VsZWN0ZWQ6IGZ1bmN0aW9uKGl0ZW0sIGlzU2VsZWN0ZWQpIHtcbiAgICAgIGlmIChpdGVtICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQgIT09IHRoaXMuaXNTZWxlY3RlZChpdGVtKSkge1xuICAgICAgICAgIC8vIHByb2NlZWQgdG8gdXBkYXRlIHNlbGVjdGlvbiBvbmx5IGlmIHJlcXVlc3RlZCBzdGF0ZSBkaWZmZXJzIGZyb20gY3VycmVudFxuICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5wdXNoKGl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuc2VsZWN0aW9uLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuc2VsZWN0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Q2FsbGJhY2soaXRlbSwgaXNTZWxlY3RlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNlbGVjdGlvbiBzdGF0ZSBmb3IgYSBnaXZlbiBpdGVtLiBJZiB0aGUgYG11bHRpYCBwcm9wZXJ0eVxuICAgICAqIGlzIHRydWUsIHRoZW4gdGhlIHNlbGVjdGVkIHN0YXRlIG9mIGBpdGVtYCB3aWxsIGJlIHRvZ2dsZWQ7IG90aGVyd2lzZVxuICAgICAqIHRoZSBgaXRlbWAgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2VsZWN0XG4gICAgICogQHBhcmFtIHsqfSBpdGVtIFRoZSBpdGVtIHRvIHNlbGVjdC5cbiAgICAgKi9cbiAgICBzZWxlY3Q6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKGl0ZW0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmdldCgpICE9PSBpdGVtKSB7XG4gICAgICAgIHRoaXMuc2V0SXRlbVNlbGVjdGVkKHRoaXMuZ2V0KCksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRJdGVtU2VsZWN0ZWQoaXRlbSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGlvbiBzdGF0ZSBmb3IgYGl0ZW1gLlxuICAgICAqXG4gICAgICogQG1ldGhvZCB0b2dnbGVcbiAgICAgKiBAcGFyYW0geyp9IGl0ZW0gVGhlIGl0ZW0gdG8gdG9nZ2xlLlxuICAgICAqL1xuICAgIHRvZ2dsZTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy5zZXRJdGVtU2VsZWN0ZWQoaXRlbSwgIXRoaXMuaXNTZWxlY3RlZChpdGVtKSk7XG4gICAgfVxuXG4gIH07XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci9pcm9uLXJlc2l6YWJsZS1iZWhhdmlvci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vaXJvbi1zZWxlY3Rvci9pcm9uLXNlbGVjdGFibGUuaHRtbFwiPlxuXG48IS0tXG5gaXJvbi1wYWdlc2AgaXMgdXNlZCB0byBzZWxlY3Qgb25lIG9mIGl0cyBjaGlsZHJlbiB0byBzaG93LiBPbmUgdXNlIGlzIHRvIGN5Y2xlIHRocm91Z2ggYSBsaXN0IG9mXG5jaGlsZHJlbiBcInBhZ2VzXCIuXG5cbkV4YW1wbGU6XG5cbiAgICA8aXJvbi1wYWdlcyBzZWxlY3RlZD1cIjBcIj5cbiAgICAgIDxkaXY+T25lPC9kaXY+XG4gICAgICA8ZGl2PlR3bzwvZGl2PlxuICAgICAgPGRpdj5UaHJlZTwvZGl2PlxuICAgIDwvaXJvbi1wYWdlcz5cblxuICAgIDxzY3JpcHQ+XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHBhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaXJvbi1wYWdlcycpO1xuICAgICAgICBwYWdlcy5zZWxlY3ROZXh0KCk7XG4gICAgICB9KTtcbiAgICA8L3NjcmlwdD5cblxuQGdyb3VwIElyb24gRWxlbWVudHNcbkBoZXJvIGhlcm8uc3ZnXG5AZGVtbyBkZW1vL2luZGV4Lmh0bWxcbi0tPlxuXG48ZG9tLW1vZHVsZSBpZD1cImlyb24tcGFnZXNcIj5cblxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cblxuICAgICAgOmhvc3QgPiA6OnNsb3R0ZWQoOm5vdChzbG90KTpub3QoLmlyb24tc2VsZWN0ZWQpKSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuXG4gICAgPHNsb3Q+PC9zbG90PlxuICA8L3RlbXBsYXRlPlxuXG4gIDxzY3JpcHQ+XG4gICAgUG9seW1lcih7XG5cbiAgICAgIGlzOiAnaXJvbi1wYWdlcycsXG5cbiAgICAgIGJlaGF2aW9yczogW1BvbHltZXIuSXJvblJlc2l6YWJsZUJlaGF2aW9yLCBQb2x5bWVyLklyb25TZWxlY3RhYmxlQmVoYXZpb3JdLFxuXG4gICAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgICAgLy8gYXMgdGhlIHNlbGVjdGVkIHBhZ2UgaXMgdGhlIG9ubHkgb25lIHZpc2libGUsIGFjdGl2YXRlRXZlbnRcbiAgICAgICAgLy8gaXMgYm90aCBub24tc2Vuc2ljYWwgYW5kIHByb2JsZW1hdGljOyBlLmcuIGluIGNhc2VzIHdoZXJlIGEgdXNlclxuICAgICAgICAvLyBoYW5kbGVyIGF0dGVtcHRzIHRvIGNoYW5nZSB0aGUgcGFnZSBhbmQgdGhlIGFjdGl2YXRlRXZlbnRcbiAgICAgICAgLy8gaGFuZGxlciBpbW1lZGlhdGVseSBjaGFuZ2VzIGl0IGJhY2tcbiAgICAgICAgYWN0aXZhdGVFdmVudDoge3R5cGU6IFN0cmluZywgdmFsdWU6IG51bGx9XG5cbiAgICAgIH0sXG5cbiAgICAgIG9ic2VydmVyczogWydfc2VsZWN0ZWRQYWdlQ2hhbmdlZChzZWxlY3RlZCknXSxcblxuICAgICAgX3NlbGVjdGVkUGFnZUNoYW5nZWQ6IGZ1bmN0aW9uKHNlbGVjdGVkLCBvbGQpIHtcbiAgICAgICAgdGhpcy5hc3luYyh0aGlzLm5vdGlmeVJlc2l6ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIDwvc2NyaXB0PlxuPC9kb20tbW9kdWxlPlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi8uLi9pcm9uLWZsZXgtbGF5b3V0L2lyb24tZmxleC1sYXlvdXQuaHRtbFwiPlxuXG48IS0tXG5hcHAtdG9vbGJhciBpcyBhIGhvcml6b250YWwgdG9vbGJhciBjb250YWluaW5nIGl0ZW1zIHRoYXQgY2FuIGJlIHVzZWQgZm9yXG5sYWJlbCwgbmF2aWdhdGlvbiwgc2VhcmNoIGFuZCBhY3Rpb25zLlxuXG4jIyMgRXhhbXBsZVxuXG5BZGQgYSB0aXRsZSB0byB0aGUgdG9vbGJhci5cblxuYGBgaHRtbFxuPGFwcC10b29sYmFyPlxuICA8ZGl2IG1haW4tdGl0bGU+QXBwIG5hbWU8L2Rpdj5cbjwvYXBwLXRvb2xiYXI+XG5gYGBcblxuQWRkIGEgYnV0dG9uIHRvIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlIG9mIHRoZSB0b29sYmFyLlxuXG5gYGBodG1sXG48YXBwLXRvb2xiYXI+XG4gIDxwYXBlci1pY29uLWJ1dHRvbiBpY29uPVwibWVudVwiPjwvcGFwZXItaWNvbi1idXR0b24+XG4gIDxkaXYgbWFpbi10aXRsZT5BcHAgbmFtZTwvZGl2PlxuICA8cGFwZXItaWNvbi1idXR0b24gaWNvbj1cInNlYXJjaFwiPjwvcGFwZXItaWNvbi1idXR0b24+XG48L2FwcC10b29sYmFyPlxuYGBgXG5cbllvdSBjYW4gdXNlIHRoZSBhdHRyaWJ1dGVzIGB0b3AtaXRlbWAgb3IgYGJvdHRvbS1pdGVtYCB0byBjb21wbGV0ZWx5IGZpdCBhbiBlbGVtZW50XG50byB0aGUgdG9wIG9yIGJvdHRvbSBvZiB0aGUgdG9vbGJhciByZXNwZWN0aXZlbHkuXG5cbiMjIyBDb250ZW50IGF0dHJpYnV0ZXNcblxuQXR0cmlidXRlICAgICAgICAgICAgfCBEZXNjcmlwdGlvblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuYG1haW4tdGl0bGVgICAgICAgICAgfCBUaGUgbWFpbiB0aXRsZSBlbGVtZW50LlxuYGNvbmRlbnNlZC10aXRsZWAgICAgfCBUaGUgdGl0bGUgZWxlbWVudCBpZiB1c2VkIGluc2lkZSBhIGNvbmRlbnNlZCBhcHAtaGVhZGVyLlxuYHNwYWNlcmAgICAgICAgICAgICAgfCBBZGRzIGEgbGVmdCBtYXJnaW4gb2YgYDY0cHhgLlxuYGJvdHRvbS1pdGVtYCAgICAgICAgfCBTdGlja3MgdGhlIGVsZW1lbnQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdG9vbGJhci5cbmB0b3AtaXRlbWAgICAgICAgICAgIHwgU3RpY2tzIHRoZSBlbGVtZW50IHRvIHRoZSB0b3Agb2YgdGhlIHRvb2xiYXIuXG5cbiMjIyBTdHlsaW5nXG5cbkN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgIHwgRGVmYXVsdFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5gLS1hcHAtdG9vbGJhci1mb250LXNpemVgICAgIHwgVG9vbGJhciBmb250IHNpemUgICAgICAgICAgICB8IDIwcHhcblxuQGdyb3VwIEFwcCBFbGVtZW50c1xuQGVsZW1lbnQgYXBwLXRvb2xiYXJcbkBkZW1vIGFwcC10b29sYmFyL2RlbW8vaW5kZXguaHRtbFxuLS0+XG5cbjxkb20tbW9kdWxlIGlkPVwiYXBwLXRvb2xiYXJcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cblxuICAgICAgOmhvc3Qge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQtaG9yaXpvbnRhbDtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWNlbnRlcjtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBoZWlnaHQ6IDY0cHg7XG4gICAgICAgIHBhZGRpbmc6IDAgMTZweDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tYXBwLXRvb2xiYXItZm9udC1zaXplLCAyMHB4KTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QgOjpzbG90dGVkKCopIHtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgICB9XG5cbiAgICAgIDpob3N0IDo6c2xvdHRlZChwYXBlci1pY29uLWJ1dHRvbikge1xuICAgICAgICAvKiBwYXBlci1pY29uLWJ1dHRvbi9pc3N1ZXMvMzMgKi9cbiAgICAgICAgZm9udC1zaXplOiAwO1xuICAgICAgfVxuXG4gICAgICA6aG9zdCA6OnNsb3R0ZWQoW21haW4tdGl0bGVdKSxcbiAgICAgIDpob3N0IDo6c2xvdHRlZChbY29uZGVuc2VkLXRpdGxlXSkge1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWZsZXg7XG4gICAgICB9XG5cbiAgICAgIDpob3N0IDo6c2xvdHRlZChbYm90dG9tLWl0ZW1dKSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QgOjpzbG90dGVkKFt0b3AtaXRlbV0pIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgfVxuXG4gICAgICA6aG9zdCA6OnNsb3R0ZWQoW3NwYWNlcl0pIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDY0cHg7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cblxuICAgIDxzbG90Pjwvc2xvdD5cblxuICA8L3RlbXBsYXRlPlxuXG4gIDxzY3JpcHQ+XG4gICAgUG9seW1lcih7XG4gICAgICBpczogJ2FwcC10b29sYmFyJ1xuICAgIH0pO1xuICA8L3NjcmlwdD5cbjwvZG9tLW1vZHVsZT5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2FwcC1zY3JvbGwtZWZmZWN0cy1iZWhhdmlvci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIC8qKlxuICAgKiBVcG9uIHNjcm9sbGluZyBwYXN0IGEgdGhyZXNob2xkLCBDU1MgdHJhbnNpdGlvbiB0aGUgZm9udCBzaXplIG9mIGEgZGVzaWduYXRlZCB0aXRsZSBlbGVtZW50XG4gICAqIGJldHdlZW4gdHdvIHZhbHVlcy5cbiAgICovXG4gIFBvbHltZXIuQXBwTGF5b3V0LnJlZ2lzdGVyRWZmZWN0KCdyZXNpemUtc25hcHBlZC10aXRsZScsIHtcbiAgICAvKipcbiAgICAgKiBAdGhpcyBQb2x5bWVyLkFwcExheW91dC5FbGVtZW50V2l0aEJhY2tncm91bmRcbiAgICAgKi9cbiAgICBzZXRVcDogZnVuY3Rpb24gc2V0VXAoY29uZmlnKSB7XG4gICAgICB2YXIgdGl0bGUgPSB0aGlzLl9nZXRET01SZWYoJ21haW5UaXRsZScpO1xuICAgICAgdmFyIGNvbmRlbnNlZFRpdGxlID0gdGhpcy5fZ2V0RE9NUmVmKCdjb25kZW5zZWRUaXRsZScpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gY29uZmlnLmR1cmF0aW9uIHx8ICcwLjJzJztcbiAgICAgIHZhciBmeCA9IHt9O1xuXG4gICAgICBpZiAoIWNvbmRlbnNlZFRpdGxlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignU2Nyb2xsIGVmZmVjdCBgcmVzaXplLXNuYXBwZWQtdGl0bGVgOiB1bmRlZmluZWQgYGNvbmRlbnNlZC10aXRsZWAnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Njcm9sbCBlZmZlY3QgYHJlc2l6ZS1zbmFwcGVkLXRpdGxlYDogdW5kZWZpbmVkIGBtYWluLXRpdGxlYCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRpdGxlLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdvcGFjaXR5JztcbiAgICAgIHRpdGxlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgY29uZGVuc2VkVGl0bGUuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ29wYWNpdHknO1xuICAgICAgY29uZGVuc2VkVGl0bGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICBmeC5jb25kZW5zZWRUaXRsZSA9IGNvbmRlbnNlZFRpdGxlO1xuICAgICAgZngudGl0bGUgPSB0aXRsZTtcbiAgICAgIHRoaXMuX2Z4UmVzaXplU25hcHBlZFRpdGxlID0gZng7XG4gICAgfSxcbiAgICAvKiogQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kICovXG4gICAgcnVuOiBmdW5jdGlvbiBydW4ocCwgeSkge1xuICAgICAgdmFyIGZ4ID0gdGhpcy5fZnhSZXNpemVTbmFwcGVkVGl0bGU7XG4gICAgICBpZiAocCA+IDApIHtcbiAgICAgICAgZngudGl0bGUuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIGZ4LmNvbmRlbnNlZFRpdGxlLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZngudGl0bGUuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIGZ4LmNvbmRlbnNlZFRpdGxlLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgIHRlYXJEb3duOiBmdW5jdGlvbiB0ZWFyRG93bigpIHtcbiAgICAgIHZhciBmeCA9IHRoaXMuX2Z4UmVzaXplU25hcHBlZFRpdGxlO1xuICAgICAgZngudGl0bGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgZnguY29uZGVuc2VkVGl0bGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgZGVsZXRlIHRoaXMuX2Z4UmVzaXplU25hcHBlZFRpdGxlO1xuICAgIH1cbiAgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2FwcC1zY3JvbGwtZWZmZWN0cy1iZWhhdmlvci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwid2F0ZXJmYWxsLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJyZXNpemUtdGl0bGUuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJsZW5kLWJhY2tncm91bmQuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cInBhcmFsbGF4LWJhY2tncm91bmQuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgICogU2hvcnRoYW5kIGZvciB0aGUgd2F0ZXJmYWxsLCByZXNpemUtdGl0bGUsIGJsZW5kLWJhY2tncm91bmQsIGFuZCBwYXJhbGxheC1iYWNrZ3JvdW5kIGVmZmVjdHMuXG4gICAqL1xuICBQb2x5bWVyLkFwcExheW91dC5yZWdpc3RlckVmZmVjdCgnbWF0ZXJpYWwnLCB7XG4gICAgLyoqXG4gICAgICogQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kXG4gICAgICovXG4gICAgc2V0VXA6IGZ1bmN0aW9uIHNldFVwKCkge1xuICAgICAgdGhpcy5lZmZlY3RzID0gJ3dhdGVyZmFsbCByZXNpemUtdGl0bGUgYmxlbmQtYmFja2dyb3VuZCBwYXJhbGxheC1iYWNrZ3JvdW5kJztcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtc2Nyb2xsLWVmZmVjdHMtYmVoYXZpb3IuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAvKipcbiAgICogVXBvbiBzY3JvbGxpbmcgcGFzdCBhIHRocmVzaG9sZCwgZmFkZSBpbiB0aGUgcmVhciBiYWNrZ3JvdW5kIGxheWVyIGFuZCBmYWRlIG91dCB0aGUgZnJvbnRcbiAgICogYmFja2dyb3VuZCBsYXllciAob3BhY2l0eSBDU1MgdHJhbnNpdGlvbmVkIG92ZXIgdGltZSkuXG4gICAqXG4gICAqXG4gICAqL1xuICBQb2x5bWVyLkFwcExheW91dC5yZWdpc3RlckVmZmVjdCgnZmFkZS1iYWNrZ3JvdW5kJywge1xuICAgIC8qKiBAdGhpcyBQb2x5bWVyLkFwcExheW91dC5FbGVtZW50V2l0aEJhY2tncm91bmQgKi9cbiAgICBzZXRVcDogZnVuY3Rpb24gc2V0VXAoY29uZmlnKSB7XG4gICAgICB2YXIgZnggPSB7fTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbiB8fCAnMC41cyc7XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllciA9IHRoaXMuX2dldERPTVJlZignYmFja2dyb3VuZEZyb250TGF5ZXInKTtcbiAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIgPSB0aGlzLl9nZXRET01SZWYoJ2JhY2tncm91bmRSZWFyTGF5ZXInKTtcbiAgICAgIGZ4LmJhY2tncm91bmRGcm9udExheWVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnb3BhY2l0eSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllci5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlWigwKSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllci5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnb3BhY2l0eSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kRnJvbnRMYXllci5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIuc3R5bGUud2lsbENoYW5nZSA9ICdvcGFjaXR5JztcbiAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVooMCknO1xuICAgICAgZnguYmFja2dyb3VuZFJlYXJMYXllci5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnb3BhY2l0eSc7XG4gICAgICBmeC5iYWNrZ3JvdW5kUmVhckxheWVyLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgdGhpcy5fZnhGYWRlQmFja2dyb3VuZCA9IGZ4O1xuICAgIH0sXG4gICAgLyoqIEB0aGlzIFBvbHltZXIuQXBwTGF5b3V0LkVsZW1lbnRXaXRoQmFja2dyb3VuZCAqL1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuKHAsIHkpIHtcbiAgICAgIHZhciBmeCA9IHRoaXMuX2Z4RmFkZUJhY2tncm91bmQ7XG4gICAgICBpZiAocCA+PSAxKSB7XG4gICAgICAgIGZ4LmJhY2tncm91bmRGcm9udExheWVyLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBmeC5iYWNrZ3JvdW5kUmVhckxheWVyLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnguYmFja2dyb3VuZEZyb250TGF5ZXIuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIGZ4LmJhY2tncm91bmRSZWFyTGF5ZXIuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiogQHRoaXMgUG9seW1lci5BcHBMYXlvdXQuRWxlbWVudFdpdGhCYWNrZ3JvdW5kICovXG4gICAgdGVhckRvd246IGZ1bmN0aW9uIHRlYXJEb3duKCkge1xuICAgICAgZGVsZXRlIHRoaXMuX2Z4RmFkZUJhY2tncm91bmQ7XG4gICAgfVxuICB9KTtcbjwvc2NyaXB0PlxuIiwiXG5yZXF1aXJlKCcuL2VmZmVjdHMvYmxlbmQtYmFja2dyb3VuZC5odG1sJyk7XG5cbnJlcXVpcmUoJy4vZWZmZWN0cy9mYWRlLWJhY2tncm91bmQuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2VmZmVjdHMvbWF0ZXJpYWwuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2VmZmVjdHMvcGFyYWxsYXgtYmFja2dyb3VuZC5odG1sJyk7XG5cbnJlcXVpcmUoJy4vZWZmZWN0cy9yZXNpemUtc25hcHBlZC10aXRsZS5odG1sJyk7XG5cbnJlcXVpcmUoJy4vZWZmZWN0cy9yZXNpemUtdGl0bGUuaHRtbCcpO1xuXG5yZXF1aXJlKCcuL2VmZmVjdHMvd2F0ZXJmYWxsLmh0bWwnKTtcbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtbGF5b3V0LWJlaGF2aW9yL2FwcC1sYXlvdXQtYmVoYXZpb3IuaHRtbFwiPlxuXG48IS0tXG5hcHAtaGVhZGVyLWxheW91dCBpcyBhIHdyYXBwZXIgZWxlbWVudCB0aGF0IHBvc2l0aW9ucyBhbiBhcHAtaGVhZGVyIGFuZCBvdGhlciBjb250ZW50LiBUaGlzXG5lbGVtZW50IHVzZXMgdGhlIGRvY3VtZW50IHNjcm9sbCBieSBkZWZhdWx0LCBidXQgaXQgY2FuIGFsc28gZGVmaW5lIGl0cyBvd24gc2Nyb2xsaW5nIHJlZ2lvbi5cblxuVXNpbmcgdGhlIGRvY3VtZW50IHNjcm9sbDpcblxuYGBgaHRtbFxuPGFwcC1oZWFkZXItbGF5b3V0PlxuICA8YXBwLWhlYWRlciBzbG90PVwiaGVhZGVyXCIgZml4ZWQgY29uZGVuc2VzIGVmZmVjdHM9XCJ3YXRlcmZhbGxcIj5cbiAgICA8YXBwLXRvb2xiYXI+XG4gICAgICA8ZGl2IG1haW4tdGl0bGU+QXBwIG5hbWU8L2Rpdj5cbiAgICA8L2FwcC10b29sYmFyPlxuICA8L2FwcC1oZWFkZXI+XG4gIDxkaXY+XG4gICAgbWFpbiBjb250ZW50XG4gIDwvZGl2PlxuPC9hcHAtaGVhZGVyLWxheW91dD5cbmBgYFxuXG5Vc2luZyBhbiBvd24gc2Nyb2xsaW5nIHJlZ2lvbjpcblxuYGBgaHRtbFxuPGFwcC1oZWFkZXItbGF5b3V0IGhhcy1zY3JvbGxpbmctcmVnaW9uIHN0eWxlPVwid2lkdGg6IDMwMHB4OyBoZWlnaHQ6IDQwMHB4O1wiPlxuICA8YXBwLWhlYWRlciBzbG90PVwiaGVhZGVyXCIgZml4ZWQgY29uZGVuc2VzIGVmZmVjdHM9XCJ3YXRlcmZhbGxcIj5cbiAgICA8YXBwLXRvb2xiYXI+XG4gICAgICA8ZGl2IG1haW4tdGl0bGU+QXBwIG5hbWU8L2Rpdj5cbiAgICA8L2FwcC10b29sYmFyPlxuICA8L2FwcC1oZWFkZXI+XG4gIDxkaXY+XG4gICAgbWFpbiBjb250ZW50XG4gIDwvZGl2PlxuPC9hcHAtaGVhZGVyLWxheW91dD5cbmBgYFxuXG5BZGQgdGhlIGBmdWxsYmxlZWRgIGF0dHJpYnV0ZSB0byBhcHAtaGVhZGVyLWxheW91dCB0byBtYWtlIGl0IGZpdCB0aGUgc2l6ZSBvZiBpdHMgY29udGFpbmVyOlxuXG5gYGBodG1sXG48YXBwLWhlYWRlci1sYXlvdXQgZnVsbGJsZWVkPlxuIC4uLlxuPC9hcHAtaGVhZGVyLWxheW91dD5cbmBgYFxuXG5AZ3JvdXAgQXBwIEVsZW1lbnRzXG5AZWxlbWVudCBhcHAtaGVhZGVyLWxheW91dFxuQGRlbW8gYXBwLWhlYWRlci1sYXlvdXQvZGVtby9zaW1wbGUuaHRtbCBTaW1wbGUgRGVtb1xuQGRlbW8gYXBwLWhlYWRlci1sYXlvdXQvZGVtby9zY3JvbGxpbmctcmVnaW9uLmh0bWwgU2Nyb2xsaW5nIFJlZ2lvblxuQGRlbW8gYXBwLWhlYWRlci1sYXlvdXQvZGVtby9tdXNpYy5odG1sIE11c2ljIERlbW9cbkBkZW1vIGFwcC1oZWFkZXItbGF5b3V0L2RlbW8vZm9vdGVyLmh0bWwgRm9vdGVyIERlbW9cbi0tPlxuXG48ZG9tLW1vZHVsZSBpZD1cImFwcC1oZWFkZXItbGF5b3V0XCI+XG4gIDx0ZW1wbGF0ZT5cbiAgICA8c3R5bGU+XG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9yY2UgYXBwLWhlYWRlci1sYXlvdXQgdG8gaGF2ZSBpdHMgb3duIHN0YWNraW5nIGNvbnRleHQgc28gdGhhdCBpdHMgcGFyZW50IGNhblxuICAgICAgICAgKiBjb250cm9sIHRoZSBzdGFja2luZyBvZiBpdCByZWxhdGl2ZSB0byBvdGhlciBlbGVtZW50cyAoZS5nLiBhcHAtZHJhd2VyLWxheW91dCkuXG4gICAgICAgICAqIFRoaXMgY291bGQgYmUgZG9uZSB1c2luZyBgaXNvbGF0aW9uOiBpc29sYXRlYCwgYnV0IHRoYXQncyBub3Qgd2VsbCBzdXBwb3J0ZWRcbiAgICAgICAgICogYWNyb3NzIGJyb3dzZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB6LWluZGV4OiAwO1xuICAgICAgfVxuXG4gICAgICAjd3JhcHBlciA6OnNsb3R0ZWQoW3Nsb3Q9aGVhZGVyXSkge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQtZml4ZWQtdG9wO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgfVxuXG4gICAgICAjd3JhcHBlci5pbml0aWFsaXppbmcgOjpzbG90dGVkKFtzbG90PWhlYWRlcl0pIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaGFzLXNjcm9sbGluZy1yZWdpb25dKSB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2hhcy1zY3JvbGxpbmctcmVnaW9uXSkgI3dyYXBwZXIgOjpzbG90dGVkKFtzbG90PWhlYWRlcl0pIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaGFzLXNjcm9sbGluZy1yZWdpb25dKSAjd3JhcHBlci5pbml0aWFsaXppbmcgOjpzbG90dGVkKFtzbG90PWhlYWRlcl0pIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbaGFzLXNjcm9sbGluZy1yZWdpb25dKSAjd3JhcHBlciAjY29udGVudENvbnRhaW5lciB7XG4gICAgICAgIEBhcHBseSAtLWxheW91dC1maXQ7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2hhcy1zY3JvbGxpbmctcmVnaW9uXSkgI3dyYXBwZXIuaW5pdGlhbGl6aW5nICNjb250ZW50Q29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbZnVsbGJsZWVkXSkge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQtdmVydGljYWw7XG4gICAgICAgIEBhcHBseSAtLWxheW91dC1maXQ7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtmdWxsYmxlZWRdKSAjd3JhcHBlcixcbiAgICAgIDpob3N0KFtmdWxsYmxlZWRdKSAjd3JhcHBlciAjY29udGVudENvbnRhaW5lciB7XG4gICAgICAgIEBhcHBseSAtLWxheW91dC12ZXJ0aWNhbDtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWZsZXg7XG4gICAgICB9XG5cbiAgICAgICNjb250ZW50Q29udGFpbmVyIHtcbiAgICAgICAgLyogQ3JlYXRlIGEgc3RhY2tpbmcgY29udGV4dCBoZXJlIHNvIHRoYXQgYWxsIGNoaWxkcmVuIGFwcGVhciBiZWxvdyB0aGUgaGVhZGVyLiAqL1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHotaW5kZXg6IDA7XG4gICAgICB9XG5cbiAgICAgIEBtZWRpYSBwcmludCB7XG4gICAgICAgIDpob3N0KFtoYXMtc2Nyb2xsaW5nLXJlZ2lvbl0pICN3cmFwcGVyICNjb250ZW50Q29udGFpbmVyIHtcbiAgICAgICAgICBvdmVyZmxvdy15OiB2aXNpYmxlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICA8L3N0eWxlPlxuXG4gICAgPGRpdiBpZD1cIndyYXBwZXJcIiBjbGFzcz1cImluaXRpYWxpemluZ1wiPlxuICAgICAgPHNsb3QgaWQ9XCJoZWFkZXJTbG90XCIgbmFtZT1cImhlYWRlclwiPjwvc2xvdD5cblxuICAgICAgPGRpdiBpZD1cImNvbnRlbnRDb250YWluZXJcIj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgPC90ZW1wbGF0ZT5cblxuICA8c2NyaXB0PlxuICAgIFBvbHltZXIoe1xuICAgICAgaXM6ICdhcHAtaGVhZGVyLWxheW91dCcsXG5cbiAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICBQb2x5bWVyLkFwcExheW91dEJlaGF2aW9yXG4gICAgICBdLFxuXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0cnVlLCB0aGUgY3VycmVudCBlbGVtZW50IHdpbGwgaGF2ZSBpdHMgb3duIHNjcm9sbGluZyByZWdpb24uXG4gICAgICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGRvY3VtZW50IHNjcm9sbCB0byBjb250cm9sIHRoZSBoZWFkZXIuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNTY3JvbGxpbmdSZWdpb246IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgb2JzZXJ2ZXJzOiBbXG4gICAgICAgICdyZXNldExheW91dChpc0F0dGFjaGVkLCBoYXNTY3JvbGxpbmdSZWdpb24pJ1xuICAgICAgXSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYXBwLWhlYWRlciBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwcm9wZXJ0eSBoZWFkZXJcbiAgICAgICAqL1xuICAgICAgZ2V0IGhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIFBvbHltZXIuZG9tKHRoaXMuJC5oZWFkZXJTbG90KS5nZXREaXN0cmlidXRlZE5vZGVzKClbMF07XG4gICAgICB9LFxuXG4gICAgICBfdXBkYXRlTGF5b3V0U3RhdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhlYWRlciA9IHRoaXMuaGVhZGVyO1xuICAgICAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCB8fCAhaGVhZGVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgaW5pdGlhbGl6aW5nIGNsYXNzLCB3aGljaCBzdGF0aWNseSBwb3NpdGlvbnMgdGhlIGhlYWRlciBhbmQgdGhlIGNvbnRlbnRcbiAgICAgICAgLy8gdW50aWwgdGhlIGhlaWdodCBvZiB0aGUgaGVhZGVyIGNhbiBiZSByZWFkLlxuICAgICAgICB0aGlzLiQud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdpbml0aWFsaXppbmcnKTtcbiAgICAgICAgLy8gVXBkYXRlIHNjcm9sbCB0YXJnZXQuXG4gICAgICAgIGhlYWRlci5zY3JvbGxUYXJnZXQgPSB0aGlzLmhhc1Njcm9sbGluZ1JlZ2lvbiA/XG4gICAgICAgICAgICB0aGlzLiQuY29udGVudENvbnRhaW5lciA6IHRoaXMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIC8vIEdldCBoZWFkZXIgaGVpZ2h0IGhlcmUgc28gdGhhdCBzdHlsZSByZWFkcyBhcmUgYmF0Y2hlZCB0b2dldGhlciBiZWZvcmUgc3R5bGUgd3JpdGVzXG4gICAgICAgIC8vIChpLmUuIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGJlbG93KS5cbiAgICAgICAgdmFyIGhlYWRlckhlaWdodCA9IGhlYWRlci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaGVhZGVyIHBvc2l0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuaGFzU2Nyb2xsaW5nUmVnaW9uKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIHJpZ2h0T2Zmc2V0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gcmVjdC5yaWdodDtcbiAgICAgICAgICAgIGhlYWRlci5zdHlsZS5sZWZ0ID0gcmVjdC5sZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgIGhlYWRlci5zdHlsZS5yaWdodCA9IHJpZ2h0T2Zmc2V0ICsgJ3B4JztcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgICAgICAgaGVhZGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBjb250ZW50IGNvbnRhaW5lciBwb3NpdGlvbi5cbiAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gdGhpcy4kLmNvbnRlbnRDb250YWluZXIuc3R5bGU7XG4gICAgICAgIGlmIChoZWFkZXIuZml4ZWQgJiYgIWhlYWRlci5jb25kZW5zZXMgJiYgdGhpcy5oYXNTY3JvbGxpbmdSZWdpb24pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgaGVhZGVyIHNpemUgZG9lcyBub3QgY2hhbmdlIGFuZCB3ZSdyZSB1c2luZyBhIHNjcm9sbGluZyByZWdpb24sIGV4Y2x1ZGVcbiAgICAgICAgICAvLyB0aGUgaGVhZGVyIGFyZWEgZnJvbSB0aGUgc2Nyb2xsaW5nIHJlZ2lvbiBzbyB0aGF0IHRoZSBoZWFkZXIgZG9lc24ndCBvdmVybGFwXG4gICAgICAgICAgLy8gdGhlIHNjcm9sbGJhci5cbiAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW5Ub3AgPSBoZWFkZXJIZWlnaHQgKyAncHgnO1xuICAgICAgICAgIGNvbnRhaW5lclN0eWxlLnBhZGRpbmdUb3AgPSAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluZXJTdHlsZS5wYWRkaW5nVG9wID0gaGVhZGVySGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSk7XG4gIDwvc2NyaXB0PlxuPC9kb20tbW9kdWxlPlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vcG9seW1lci9wb2x5bWVyLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgLyoqIEBuYW1lc3BhY2UgKi9cbiAgUG9seW1lci5BcHBMYXlvdXQgPSBQb2x5bWVyLkFwcExheW91dCB8fCB7fTtcblxuICBQb2x5bWVyLkFwcExheW91dC5fc2Nyb2xsRWZmZWN0cyA9IHt9O1xuICBQb2x5bWVyLkFwcExheW91dC5fc2Nyb2xsVGltZXIgPSBudWxsO1xuXG4gIFBvbHltZXIuQXBwTGF5b3V0LnNjcm9sbFRpbWluZ0Z1bmN0aW9uID0gZnVuY3Rpb24gZWFzZU91dFF1YWQodCwgYiwgYywgZCkge1xuICAgIHQgLz0gZDtcbiAgICByZXR1cm4gLWMgKiB0Kih0LTIpICsgYjtcbiAgfTtcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgc2Nyb2xsIGVmZmVjdCB0byBiZSB1c2VkIGluIGVsZW1lbnRzIHRoYXQgaW1wbGVtZW50IHRoZVxuICAgKiBgUG9seW1lci5BcHBTY3JvbGxFZmZlY3RzQmVoYXZpb3JgIGJlaGF2aW9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWZmZWN0TmFtZSBUaGUgZWZmZWN0IG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlZmZlY3REZWYgVGhlIGVmZmVjdCBkZWZpbml0aW9uLlxuICAgKi9cbiAgUG9seW1lci5BcHBMYXlvdXQucmVnaXN0ZXJFZmZlY3QgPSBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChlZmZlY3ROYW1lLCBlZmZlY3REZWYpIHtcbiAgICBpZiAoUG9seW1lci5BcHBMYXlvdXQuX3Njcm9sbEVmZmVjdHNbZWZmZWN0TmFtZV0gIT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdlZmZlY3QgYCcrIGVmZmVjdE5hbWUgKyAnYCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQuJyk7XG4gICAgfVxuICAgIFBvbHltZXIuQXBwTGF5b3V0Ll9zY3JvbGxFZmZlY3RzW2VmZmVjdE5hbWVdID0gZWZmZWN0RGVmO1xuICB9O1xuXG5cbiAgUG9seW1lci5BcHBMYXlvdXQucXVlcnlBbGxSb290ID0gZnVuY3Rpb24oc2VsZWN0b3IsIHJvb3QpIHtcbiAgICB2YXIgcXVldWUgPSBbcm9vdF07XG4gICAgdmFyIG1hdGNoZXMgPSBbXTtcblxuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgbm9kZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBtYXRjaGVzLnB1c2guYXBwbHkobWF0Y2hlcywgbm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgbm9kZS5jaGlsZHJlbltpXTsgaSsrKSB7XG4gICAgICAgIGlmIChub2RlLmNoaWxkcmVuW2ldLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKG5vZGUuY2hpbGRyZW5baV0uc2hhZG93Um9vdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdG8gYSBwYXJ0aWN1bGFyIHNldCBvZiBjb29yZGluYXRlcyBpbiBhIHNjcm9sbCB0YXJnZXQuXG4gICAqIElmIHRoZSBzY3JvbGwgdGFyZ2V0IGlzIG5vdCBkZWZpbmVkLCB0aGVuIGl0IHdvdWxkIHVzZSB0aGUgbWFpbiBkb2N1bWVudCBhcyB0aGUgdGFyZ2V0LlxuICAgKlxuICAgKiBUbyBzY3JvbGwgaW4gYSBzbW9vdGggZmFzaGlvbiwgeW91IGNhbiBzZXQgdGhlIG9wdGlvbiBgYmVoYXZpb3I6ICdzbW9vdGgnYC4gZS5nLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBQb2x5bWVyLkFwcExheW91dC5zY3JvbGwoe3RvcDogMCwgYmVoYXZpb3I6ICdzbW9vdGgnfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBUbyBzY3JvbGwgaW4gYSBzaWxlbnQgbW9kZSwgd2l0aG91dCBub3RpZnlpbmcgc2Nyb2xsIGNoYW5nZXMgdG8gYW55IGFwcC1sYXlvdXQgZWxlbWVudHMsXG4gICAqIHlvdSBjYW4gc2V0IHRoZSBvcHRpb24gYGJlaGF2aW9yOiAnc2lsZW50J2AuIFRoaXMgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCB3ZSB5b3UgYXJlIHVzaW5nXG4gICAqIGBhcHAtaGVhZGVyYCBhbmQgeW91IGRlc2lyZSB0byBzY3JvbGwgdG8gdGhlIHRvcCBvZiBhIHNjcm9sbGluZyByZWdpb24gd2l0aG91dCBydW5uaW5nXG4gICAqIHNjcm9sbCBlZmZlY3RzLiBlLmcuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIFBvbHltZXIuQXBwTGF5b3V0LnNjcm9sbCh7dG9wOiAwLCBiZWhhdmlvcjogJ3NpbGVudCd9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHt0b3A6IE51bWJlciwgbGVmdDogTnVtYmVyLCBiZWhhdmlvcjogU3RyaW5nKHNtb290aCB8IHNpbGVudCl9XG4gICAqL1xuICBQb2x5bWVyLkFwcExheW91dC5zY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciB0YXJnZXQgPSBvcHRpb25zLnRhcmdldCB8fCBkb2NFbDtcbiAgICB2YXIgaGFzTmF0aXZlU2Nyb2xsQmVoYXZpb3IgPSAnc2Nyb2xsQmVoYXZpb3InIGluIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQuc2Nyb2xsO1xuICAgIHZhciBzY3JvbGxDbGFzc05hbWUgPSAnYXBwLWxheW91dC1zaWxlbnQtc2Nyb2xsJztcbiAgICB2YXIgc2Nyb2xsVG9wID0gb3B0aW9ucy50b3AgfHwgMDtcbiAgICB2YXIgc2Nyb2xsTGVmdCA9IG9wdGlvbnMubGVmdCB8fCAwO1xuICAgIHZhciBzY3JvbGxUbyA9IHRhcmdldCA9PT0gZG9jRWwgPyB3aW5kb3cuc2Nyb2xsVG8gOlxuICAgICAgZnVuY3Rpb24gc2Nyb2xsVG8oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKSB7XG4gICAgICAgIHRhcmdldC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgdGFyZ2V0LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy5iZWhhdmlvciA9PT0gJ3Ntb290aCcpIHtcblxuICAgICAgaWYgKGhhc05hdGl2ZVNjcm9sbEJlaGF2aW9yKSB7XG5cbiAgICAgICAgdGFyZ2V0LnNjcm9sbChvcHRpb25zKTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICB2YXIgdGltaW5nRm4gPSBQb2x5bWVyLkFwcExheW91dC5zY3JvbGxUaW1pbmdGdW5jdGlvbjtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsVG9wID0gdGFyZ2V0ID09PSBkb2NFbCA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IHRhcmdldC5zY3JvbGxUb3A7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsTGVmdCA9IHRhcmdldCA9PT0gZG9jRWwgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiB0YXJnZXQuc2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIGRlbHRhU2Nyb2xsVG9wID0gc2Nyb2xsVG9wIC0gY3VycmVudFNjcm9sbFRvcDtcbiAgICAgICAgdmFyIGRlbHRhU2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQgLSBjdXJyZW50U2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gMzAwO1xuICAgICAgICB2YXIgdXBkYXRlRnJhbWUgPSAoZnVuY3Rpb24gdXBkYXRlRnJhbWUoKSB7XG4gICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgdmFyIGVsYXBzZWRUaW1lID0gbm93IC0gc3RhcnRUaW1lO1xuXG4gICAgICAgICAgaWYgKGVsYXBzZWRUaW1lIDwgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHNjcm9sbFRvKHRpbWluZ0ZuKGVsYXBzZWRUaW1lLCBjdXJyZW50U2Nyb2xsTGVmdCwgZGVsdGFTY3JvbGxMZWZ0LCBkdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgdGltaW5nRm4oZWxhcHNlZFRpbWUsIGN1cnJlbnRTY3JvbGxUb3AsIGRlbHRhU2Nyb2xsVG9wLCBkdXJhdGlvbikpO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZUZyYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdXBkYXRlRnJhbWUoKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5iZWhhdmlvciA9PT0gJ3NpbGVudCcpIHtcbiAgICAgIHZhciBoZWFkZXJzID0gUG9seW1lci5BcHBMYXlvdXQucXVlcnlBbGxSb290KCdhcHAtaGVhZGVyJywgZG9jdW1lbnQuYm9keSk7XG5cbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgaGVhZGVyLnNldEF0dHJpYnV0ZSgnc2lsZW50LXNjcm9sbCcsICcnKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBCcm93c2VycyBrZWVwIHRoZSBzY3JvbGwgbW9tZW50dW0gZXZlbiBpZiB0aGUgYm90dG9tIG9mIHRoZSBzY3JvbGxpbmcgY29udGVudFxuICAgICAgLy8gd2FzIHJlYWNoZWQuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nIHNjcm9sbCh7dG9wOiAwLCBiZWhhdmlvcjogJ3NpbGVudCd9KSB3aGVuXG4gICAgICAvLyB0aGUgbW9tZW50dW0gaXMgc3RpbGwgZ29pbmcgd2lsbCByZXN1bHQgaW4gbW9yZSBzY3JvbGwgZXZlbnRzIGFuZCB0aHVzIHNjcm9sbCBlZmZlY3RzLlxuICAgICAgLy8gVGhpcyBzZWVtcyB0byBvbmx5IGFwcGx5IHdoZW4gdXNpbmcgZG9jdW1lbnQgc2Nyb2xsaW5nLlxuICAgICAgLy8gVGhlcmVmb3JlLCB3aGVuIHNob3VsZCB3ZSByZW1vdmUgdGhlIGNsYXNzIGZyb20gdGhlIGRvY3VtZW50IGVsZW1lbnQ/XG5cbiAgICAgIGlmIChQb2x5bWVyLkFwcExheW91dC5fc2Nyb2xsVGltZXIpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKFBvbHltZXIuQXBwTGF5b3V0Ll9zY3JvbGxUaW1lcik7XG4gICAgICB9XG5cbiAgICAgIFBvbHltZXIuQXBwTGF5b3V0Ll9zY3JvbGxUaW1lciA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgICBoZWFkZXIucmVtb3ZlQXR0cmlidXRlKCdzaWxlbnQtc2Nyb2xsJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBQb2x5bWVyLkFwcExheW91dC5fc2Nyb2xsVGltZXIgPSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAgIHNjcm9sbFRvKHNjcm9sbExlZnQsIHNjcm9sbFRvcCk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBzY3JvbGxUbyhzY3JvbGxMZWZ0LCBzY3JvbGxUb3ApO1xuXG4gICAgfVxuICB9O1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG5cbjxzY3JpcHQ+XG4gIC8qKlxuICAgKiBgUG9seW1lci5Jcm9uU2Nyb2xsVGFyZ2V0QmVoYXZpb3JgIGFsbG93cyBhbiBlbGVtZW50IHRvIHJlc3BvbmQgdG8gc2Nyb2xsXG4gICAqIGV2ZW50cyBmcm9tIGEgZGVzaWduYXRlZCBzY3JvbGwgdGFyZ2V0LlxuICAgKlxuICAgKiBFbGVtZW50cyB0aGF0IGNvbnN1bWUgdGhpcyBiZWhhdmlvciBjYW4gb3ZlcnJpZGUgdGhlIGBfc2Nyb2xsSGFuZGxlcmBcbiAgICogbWV0aG9kIHRvIGFkZCBsb2dpYyBvbiB0aGUgc2Nyb2xsIGV2ZW50LlxuICAgKlxuICAgKiBAZGVtbyBkZW1vL3Njcm9sbGluZy1yZWdpb24uaHRtbCBTY3JvbGxpbmcgUmVnaW9uXG4gICAqIEBkZW1vIGRlbW8vZG9jdW1lbnQuaHRtbCBEb2N1bWVudCBFbGVtZW50XG4gICAqIEBwb2x5bWVyQmVoYXZpb3JcbiAgICovXG4gIFBvbHltZXIuSXJvblNjcm9sbFRhcmdldEJlaGF2aW9yID0ge1xuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIFNwZWNpZmllcyB0aGUgZWxlbWVudCB0aGF0IHdpbGwgaGFuZGxlIHRoZSBzY3JvbGwgZXZlbnRcbiAgICAgICAqIG9uIHRoZSBiZWhhbGYgb2YgdGhlIGN1cnJlbnQgZWxlbWVudC4gVGhpcyBpcyB0eXBpY2FsbHkgYSByZWZlcmVuY2UgdG8gYW5cbiAgICAgICAqZWxlbWVudCwgYnV0IHRoZXJlIGFyZSBhIGZldyBtb3JlIHBvc2liaWxpdGllczpcbiAgICAgICAqXG4gICAgICAgKiAjIyMgRWxlbWVudHMgaWRcbiAgICAgICAqXG4gICAgICAgKmBgYGh0bWxcbiAgICAgICAqIDxkaXYgaWQ9XCJzY3JvbGxhYmxlLWVsZW1lbnRcIiBzdHlsZT1cIm92ZXJmbG93OiBhdXRvO1wiPlxuICAgICAgICogIDx4LWVsZW1lbnQgc2Nyb2xsLXRhcmdldD1cInNjcm9sbGFibGUtZWxlbWVudFwiPlxuICAgICAgICogICAgPCEtLSBDb250ZW50LS0+XG4gICAgICAgKiAgPC94LWVsZW1lbnQ+XG4gICAgICAgKiA8L2Rpdj5cbiAgICAgICAqYGBgXG4gICAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBgc2Nyb2xsVGFyZ2V0YCB3aWxsIHBvaW50IHRvIHRoZSBvdXRlciBkaXYgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiAjIyMgRG9jdW1lbnQgc2Nyb2xsaW5nXG4gICAgICAgKlxuICAgICAgICogRm9yIGRvY3VtZW50IHNjcm9sbGluZywgeW91IGNhbiB1c2UgdGhlIHJlc2VydmVkIHdvcmQgYGRvY3VtZW50YDpcbiAgICAgICAqXG4gICAgICAgKmBgYGh0bWxcbiAgICAgICAqIDx4LWVsZW1lbnQgc2Nyb2xsLXRhcmdldD1cImRvY3VtZW50XCI+XG4gICAgICAgKiAgIDwhLS0gQ29udGVudCAtLT5cbiAgICAgICAqIDwveC1lbGVtZW50PlxuICAgICAgICpgYGBcbiAgICAgICAqXG4gICAgICAgKiAjIyMgRWxlbWVudHMgcmVmZXJlbmNlXG4gICAgICAgKlxuICAgICAgICpgYGBqc1xuICAgICAgICogYXBwSGVhZGVyLnNjcm9sbFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzY3JvbGxhYmxlLWVsZW1lbnQnKTtcbiAgICAgICAqYGBgXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgICAgICogQGRlZmF1bHQgZG9jdW1lbnRcbiAgICAgICAqL1xuICAgICAgc2Nyb2xsVGFyZ2V0OiB7XG4gICAgICAgIHR5cGU6IEhUTUxFbGVtZW50LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRTY3JvbGxUYXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb2JzZXJ2ZXJzOiBbJ19zY3JvbGxUYXJnZXRDaGFuZ2VkKHNjcm9sbFRhcmdldCwgaXNBdHRhY2hlZCknXSxcblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgdGhlIGV2ZW50IGxpc3RlbmVyIHNob3VsZCBiZSBpbnN0YWxsZWQuXG4gICAgICovXG4gICAgX3Nob3VsZEhhdmVMaXN0ZW5lcjogdHJ1ZSxcblxuICAgIF9zY3JvbGxUYXJnZXRDaGFuZ2VkOiBmdW5jdGlvbihzY3JvbGxUYXJnZXQsIGlzQXR0YWNoZWQpIHtcbiAgICAgIHZhciBldmVudFRhcmdldDtcblxuICAgICAgaWYgKHRoaXMuX29sZFNjcm9sbFRhcmdldCkge1xuICAgICAgICB0aGlzLl90b2dnbGVTY3JvbGxMaXN0ZW5lcihmYWxzZSwgdGhpcy5fb2xkU2Nyb2xsVGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fb2xkU2Nyb2xsVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBdHRhY2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBTdXBwb3J0IGVsZW1lbnQgaWQgcmVmZXJlbmNlc1xuICAgICAgaWYgKHNjcm9sbFRhcmdldCA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICB0aGlzLnNjcm9sbFRhcmdldCA9IHRoaXMuX2RvYztcblxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2Nyb2xsVGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgZG9tSG9zdCA9IHRoaXMuZG9tSG9zdDtcblxuICAgICAgICB0aGlzLnNjcm9sbFRhcmdldCA9IGRvbUhvc3QgJiYgZG9tSG9zdC4kID9cbiAgICAgICAgICAgIGRvbUhvc3QuJFtzY3JvbGxUYXJnZXRdIDpcbiAgICAgICAgICAgIFBvbHltZXIuZG9tKHRoaXMub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvcignIycgKyBzY3JvbGxUYXJnZXQpO1xuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVmFsaWRTY3JvbGxUYXJnZXQoKSkge1xuICAgICAgICB0aGlzLl9vbGRTY3JvbGxUYXJnZXQgPSBzY3JvbGxUYXJnZXQ7XG4gICAgICAgIHRoaXMuX3RvZ2dsZVNjcm9sbExpc3RlbmVyKHRoaXMuX3Nob3VsZEhhdmVMaXN0ZW5lciwgc2Nyb2xsVGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUnVucyBvbiBldmVyeSBzY3JvbGwgZXZlbnQuIENvbnN1bWVyIG9mIHRoaXMgYmVoYXZpb3IgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3Njcm9sbEhhbmRsZXI6IGZ1bmN0aW9uIHNjcm9sbEhhbmRsZXIoKSB7fSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHNjcm9sbCB0YXJnZXQuIENvbnN1bWVycyBvZiB0aGlzIGJlaGF2aW9yIG1heSB3YW50IHRvIGN1c3RvbWl6ZVxuICAgICAqIHRoZSBkZWZhdWx0IHNjcm9sbCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXQgX2RlZmF1bHRTY3JvbGxUYXJnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZG9jO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCBmb3IgdGhlIGRvY3VtZW50IGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fVxuICAgICAqL1xuICAgIGdldCBfZG9jKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgY29udGVudCBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkXG4gICAgICogdXB3YXJkLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgX3Njcm9sbFRvcCgpIHtcbiAgICAgIGlmICh0aGlzLl9pc1ZhbGlkU2Nyb2xsVGFyZ2V0KCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsVGFyZ2V0ID09PSB0aGlzLl9kb2MgPyB3aW5kb3cucGFnZVlPZmZzZXQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgdGhlIGNvbnRlbnQgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCB0byB0aGVcbiAgICAgKiBsZWZ0LlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgX3Njcm9sbExlZnQoKSB7XG4gICAgICBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbFRhcmdldCA9PT0gdGhpcy5fZG9jID8gd2luZG93LnBhZ2VYT2Zmc2V0IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgY29udGVudCBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkXG4gICAgICogdXB3YXJkLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBzZXQgX3Njcm9sbFRvcCh0b3ApIHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbFRhcmdldCA9PT0gdGhpcy5fZG9jKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh3aW5kb3cucGFnZVhPZmZzZXQsIHRvcCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVmFsaWRTY3JvbGxUYXJnZXQoKSkge1xuICAgICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgY29udGVudCBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkIHRvIHRoZVxuICAgICAqIGxlZnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHNldCBfc2Nyb2xsTGVmdChsZWZ0KSB7XG4gICAgICBpZiAodGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYykge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8obGVmdCwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRoZSBjb250ZW50IHRvIGEgcGFydGljdWxhciBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2Nyb2xsXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IXtsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyfX0gbGVmdE9yT3B0aW9ucyBUaGUgbGVmdCBwb3NpdGlvbiBvciBzY3JvbGwgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdG9wIFRoZSB0b3AgcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHNjcm9sbDogZnVuY3Rpb24obGVmdE9yT3B0aW9ucywgdG9wKSB7XG4gICAgICB2YXIgbGVmdDtcblxuICAgICAgaWYgKHR5cGVvZiBsZWZ0T3JPcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICBsZWZ0ID0gbGVmdE9yT3B0aW9ucy5sZWZ0O1xuICAgICAgICB0b3AgPSBsZWZ0T3JPcHRpb25zLnRvcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnQgPSBsZWZ0T3JPcHRpb25zO1xuICAgICAgfVxuXG4gICAgICBsZWZ0ID0gbGVmdCB8fCAwO1xuICAgICAgdG9wID0gdG9wIHx8IDA7XG4gICAgICBpZiAodGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYykge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8obGVmdCwgdG9wKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFNjcm9sbFRhcmdldCgpKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0LnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnNjcm9sbFRhcmdldC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgX3Njcm9sbFRhcmdldFdpZHRoKCkge1xuICAgICAgaWYgKHRoaXMuX2lzVmFsaWRTY3JvbGxUYXJnZXQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdy5pbm5lcldpZHRoIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRhcmdldC5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHNjcm9sbCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBfc2Nyb2xsVGFyZ2V0SGVpZ2h0KCkge1xuICAgICAgaWYgKHRoaXMuX2lzVmFsaWRTY3JvbGxUYXJnZXQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgPT09IHRoaXMuX2RvYyA/IHdpbmRvdy5pbm5lckhlaWdodCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2Nyb2xsIHRhcmdldCBpcyBhIHZhbGlkIEhUTUxFbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBfaXNWYWxpZFNjcm9sbFRhcmdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICB9LFxuXG4gICAgX3RvZ2dsZVNjcm9sbExpc3RlbmVyOiBmdW5jdGlvbih5ZXMsIHNjcm9sbFRhcmdldCkge1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gc2Nyb2xsVGFyZ2V0ID09PSB0aGlzLl9kb2MgPyB3aW5kb3cgOiBzY3JvbGxUYXJnZXQ7XG4gICAgICBpZiAoeWVzKSB7XG4gICAgICAgIGlmICghdGhpcy5fYm91bmRTY3JvbGxIYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5fYm91bmRTY3JvbGxIYW5kbGVyID0gdGhpcy5fc2Nyb2xsSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX2JvdW5kU2Nyb2xsSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9ib3VuZFNjcm9sbEhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLl9ib3VuZFNjcm9sbEhhbmRsZXIpO1xuICAgICAgICAgIHRoaXMuX2JvdW5kU2Nyb2xsSGFuZGxlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB5ZXMgVHJ1ZSB0byBhZGQgdGhlIGV2ZW50LCBGYWxzZSB0byByZW1vdmUgaXQuXG4gICAgICovXG4gICAgdG9nZ2xlU2Nyb2xsTGlzdGVuZXI6IGZ1bmN0aW9uKHllcykge1xuICAgICAgdGhpcy5fc2hvdWxkSGF2ZUxpc3RlbmVyID0geWVzO1xuICAgICAgdGhpcy5fdG9nZ2xlU2Nyb2xsTGlzdGVuZXIoeWVzLCB0aGlzLnNjcm9sbFRhcmdldCk7XG4gICAgfVxuXG4gIH07XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtc2Nyb2xsLWVmZmVjdHMvYXBwLXNjcm9sbC1lZmZlY3RzLWJlaGF2aW9yLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtbGF5b3V0LWJlaGF2aW9yL2FwcC1sYXlvdXQtYmVoYXZpb3IuaHRtbFwiPlxuXG48IS0tXG5hcHAtaGVhZGVyIGlzIGNvbnRhaW5lciBlbGVtZW50IGZvciBhcHAtdG9vbGJhcnMgYXQgdGhlIHRvcCBvZiB0aGUgc2NyZWVuIHRoYXQgY2FuIGhhdmUgc2Nyb2xsXG5lZmZlY3RzLiBCeSBkZWZhdWx0LCBhbiBhcHAtaGVhZGVyIG1vdmVzIGF3YXkgZnJvbSB0aGUgdmlld3BvcnQgd2hlbiBzY3JvbGxpbmcgZG93biBhbmRcbmlmIHVzaW5nIGByZXZlYWxzYCwgdGhlIGhlYWRlciBzbGlkZXMgYmFjayB3aGVuIHNjcm9sbGluZyBiYWNrIHVwLiBGb3IgZXhhbXBsZTpcblxuYGBgaHRtbFxuPGFwcC1oZWFkZXIgcmV2ZWFscz5cbiAgPGFwcC10b29sYmFyPlxuICAgIDxkaXYgbWFpbi10aXRsZT5BcHAgbmFtZTwvZGl2PlxuICA8L2FwcC10b29sYmFyPlxuPC9hcHAtaGVhZGVyPlxuYGBgXG5cbmFwcC1oZWFkZXIgY2FuIGFsc28gY29uZGVuc2Ugd2hlbiBzY3JvbGxpbmcgZG93bi4gVG8gYWNoaWV2ZSB0aGlzIGJlaGF2aW9yLCB0aGUgaGVhZGVyXG5tdXN0IGhhdmUgYSBsYXJnZXIgaGVpZ2h0IHRoYW4gdGhlIGBzdGlja3lgIGVsZW1lbnQgaW4gdGhlIGxpZ2h0IERPTS4gRm9yIGV4YW1wbGU6XG5cbmBgYGh0bWxcbjxhcHAtaGVhZGVyIHN0eWxlPVwiaGVpZ2h0OiA5NnB4O1wiIGNvbmRlbnNlcyBmaXhlZD5cbiAgPGFwcC10b29sYmFyIHN0eWxlPVwiaGVpZ2h0OiA2NHB4O1wiPlxuICAgIDxkaXYgbWFpbi10aXRsZT5BcHAgbmFtZTwvZGl2PlxuICA8L2FwcC10b29sYmFyPlxuPC9hcHAtaGVhZGVyPlxuYGBgXG5cbkluIHRoaXMgY2FzZSB0aGUgaGVhZGVyIGlzIGluaXRpYWxseSBgOTZweGAgdGFsbCwgYW5kIGl0IHNocmlua3MgdG8gYDY0cHhgIHdoZW4gc2Nyb2xsaW5nIGRvd24uXG5UaGF0IGlzIHdoYXQgaXMgbWVhbnQgYnkgXCJjb25kZW5zaW5nXCIuXG5cbiMjIyBTdGlja3kgZWxlbWVudFxuXG5UaGUgZWxlbWVudCB0aGF0IGlzIHBvc2l0aW9uZWQgZml4ZWQgdG8gdG9wIG9mIHRoZSBoZWFkZXIncyBgc2Nyb2xsVGFyZ2V0YCB3aGVuIGEgdGhyZXNob2xkXG5pcyByZWFjaGVkLCBzaW1pbGFyIHRvIGBwb3NpdGlvbjogc3RpY2t5YCBpbiBDU1MuIFRoaXMgZWxlbWVudCAqKm11c3QqKiBiZSBhbiBpbW1lZGlhdGVcbmNoaWxkIG9mIGFwcC1oZWFkZXIuIEJ5IGRlZmF1bHQsIHRoZSBgc3RpY2t5YCBlbGVtZW50IGlzIHRoZSBmaXJzdCBgYXBwLXRvb2xiYXIgdGhhdFxuaXMgYW4gaW1tZWRpYXRlIGNoaWxkIG9mIGFwcC1oZWFkZXIuXG5cbmBgYGh0bWxcbjxhcHAtaGVhZGVyIGNvbmRlbnNlcz5cbiAgPGFwcC10b29sYmFyPiBTdGlja3kgZWxlbWVudCA8L2FwcC10b29sYmFyPlxuPC9hcHAtaGVhZGVyPlxuYGBgXG5cbiMjIyMgQ3VzdG9taXppbmcgdGhlIHN0aWNreSBlbGVtZW50XG5cbmBgYGh0bWxcbjxhcHAtaGVhZGVyIGNvbmRlbnNlcz5cbiAgPGFwcC10b29sYmFyPjwvYXBwLXRvb2xiYXI+XG4gIDxhcHAtdG9vbGJhciBzdGlja3k+IFN0aWNreSBlbGVtZW50IDwvYXBwLXRvb2xiYXI+XG48L2FwcC1oZWFkZXI+XG5gYGBcblxuIyMjIFNjcm9sbCB0YXJnZXRcblxuVGhlIGFwcC1oZWFkZXIncyBgc2Nyb2xsVGFyZ2V0YCBwcm9wZXJ0eSBhbGxvd3MgdG8gY3VzdG9taXplIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgdG8gd2hpY2hcbnRoZSBoZWFkZXIgcmVzcG9uZHMgd2hlbiB0aGUgdXNlciBzY3JvbGxzLiBCeSBkZWZhdWx0LCBhcHAtaGVhZGVyIHVzZXMgdGhlIGRvY3VtZW50IGFzXG50aGUgc2Nyb2xsIHRhcmdldCwgYnV0IHlvdSBjYW4gY3VzdG9taXplIHRoaXMgcHJvcGVydHkgYnkgc2V0dGluZyB0aGUgaWQgb2YgdGhlIGVsZW1lbnQsIGUuZy5cblxuYGBgaHRtbFxuPGRpdiBpZD1cInNjcm9sbGluZ1JlZ2lvblwiIHN0eWxlPVwib3ZlcmZsb3cteTogYXV0bztcIj5cbiAgPGFwcC1oZWFkZXIgc2Nyb2xsLXRhcmdldD1cInNjcm9sbGluZ1JlZ2lvblwiPlxuICA8L2FwcC1oZWFkZXI+XG48L2Rpdj5cbmBgYFxuXG5JbiB0aGlzIGNhc2UsIHRoZSBgc2Nyb2xsVGFyZ2V0YCBwcm9wZXJ0eSBwb2ludHMgdG8gdGhlIG91dGVyIGRpdiBlbGVtZW50LiBBbHRlcm5hdGl2ZWx5LFxueW91IGNhbiBzZXQgdGhpcyBwcm9wZXJ0eSBwcm9ncmFtbWF0aWNhbGx5OlxuXG5gYGBqc1xuYXBwSGVhZGVyLnNjcm9sbFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2Nyb2xsaW5nUmVnaW9uXCIpO1xuYGBgXG5cbiMjIEJhY2tncm91bmRzXG5hcHAtaGVhZGVyIGhhcyB0d28gYmFja2dyb3VuZCBsYXllcnMgdGhhdCBjYW4gYmUgdXNlZCBmb3Igc3R5bGluZyB3aGVuIHRoZSBoZWFkZXIgaXMgY29uZGVuc2VkXG5vciB3aGVuIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgaXMgc2Nyb2xsZWQgdG8gdGhlIHRvcC5cblxuIyMgU2Nyb2xsIGVmZmVjdHNcblxuU2Nyb2xsIGVmZmVjdHMgYXJlIF9vcHRpb25hbF8gdmlzdWFsIGVmZmVjdHMgYXBwbGllZCBpbiBhcHAtaGVhZGVyIGJhc2VkIG9uIHNjcm9sbCBwb3NpdGlvbi4gRm9yIGV4YW1wbGUsXG5UaGUgW01hdGVyaWFsIERlc2lnbiBzY3JvbGxpbmcgdGVjaG5pcXVlc10oaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9wYXR0ZXJucy9zY3JvbGxpbmctdGVjaG5pcXVlcy5odG1sKVxucmVjb21tZW5kcyBlZmZlY3RzIHRoYXQgY2FuIGJlIGluc3RhbGxlZCB2aWEgdGhlIGBlZmZlY3RzYCBwcm9wZXJ0eS4gZS5nLlxuXG5gYGBodG1sXG48YXBwLWhlYWRlciBlZmZlY3RzPVwid2F0ZXJmYWxsXCI+XG4gIDxhcHAtdG9vbGJhcj5BcHAgbmFtZTwvYXBwLXRvb2xiYXI+XG48L2FwcC1oZWFkZXI+XG5gYGBcblxuIyMjIyBJbXBvcnRpbmcgdGhlIGVmZmVjdHNcblxuVG8gdXNlIHRoZSBzY3JvbGwgZWZmZWN0cywgeW91IG11c3QgZXhwbGljaXRseSBpbXBvcnQgdGhlbSBpbiBhZGRpdGlvbiB0byBgYXBwLWhlYWRlcmA6XG5cbmBgYGh0bWxcbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIvYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1zY3JvbGwtZWZmZWN0cy9hcHAtc2Nyb2xsLWVmZmVjdHMuaHRtbFwiPlxuYGBgXG5cbiMjIyMgTGlzdCBvZiBlZmZlY3RzXG5cbiogKipibGVuZC1iYWNrZ3JvdW5kKipcbkZhZGVzIGluL291dCB0d28gYmFja2dyb3VuZCBlbGVtZW50cyBieSBhcHBseWluZyBDU1Mgb3BhY2l0eSBiYXNlZCBvbiBzY3JvbGwgcG9zaXRpb24uXG5Zb3UgY2FuIHVzZSB0aGlzIGVmZmVjdCB0byBzbW9vdGhseSBjaGFuZ2UgdGhlIGJhY2tncm91bmQgY29sb3Igb3IgaW1hZ2Ugb2YgdGhlIGhlYWRlci5cbkZvciBleGFtcGxlLCB1c2luZyB0aGUgbWl4aW4gYC0tYXBwLWhlYWRlci1iYWNrZ3JvdW5kLXJlYXItbGF5ZXJgIGxldHMgeW91IGFzc2lnbiBhIGRpZmZlcmVudFxuYmFja2dyb3VuZCB3aGVuIHRoZSBoZWFkZXIgaXMgY29uZGVuc2VkOlxuXG5gYGBjc3NcbmFwcC1oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG4gIC0tYXBwLWhlYWRlci1iYWNrZ3JvdW5kLXJlYXItbGF5ZXI6IHtcbiAgICAvKiBUaGUgaGVhZGVyIGlzIGJsdWUgd2hlbiBjb25kZW5zZWQgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xuICB9O1xufVxuYGBgXG5cbiogKipmYWRlLWJhY2tncm91bmQqKlxuVXBvbiBzY3JvbGxpbmcgcGFzdCBhIHRocmVzaG9sZCwgdGhpcyBlZmZlY3Qgd2lsbCB0cmlnZ2VyIGFuIG9wYWNpdHkgdHJhbnNpdGlvbiB0b1xuZmFkZSBpbi9vdXQgdGhlIGJhY2tncm91bmRzLiBDb21wYXJlZCB0byB0aGUgYGJsZW5kLWJhY2tncm91bmRgIGVmZmVjdCxcbnRoaXMgZWZmZWN0IGRvZXNuJ3QgaW50ZXJwb2xhdGUgdGhlIG9wYWNpdHkgYmFzZWQgb24gc2Nyb2xsIHBvc2l0aW9uLlxuXG5cbiogKipwYXJhbGxheC1iYWNrZ3JvdW5kKipcbkEgc2ltcGxlIHBhcmFsbGF4IGVmZmVjdCB0aGF0IHZlcnRpY2FsbHkgdHJhbnNsYXRlcyB0aGUgYmFja2dyb3VuZHMgYmFzZWQgb24gYSBmcmFjdGlvblxub2YgdGhlIHNjcm9sbCBwb3NpdGlvbi4gRm9yIGV4YW1wbGU6XG5cbmBgYGNzc1xuYXBwLWhlYWRlciB7XG4gIC0tYXBwLWhlYWRlci1iYWNrZ3JvdW5kLWZyb250LWxheWVyOiB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uLik7XG4gIH07XG59XG5gYGBcbmBgYGh0bWxcbjxhcHAtaGVhZGVyIHN0eWxlPVwiaGVpZ2h0OiAzMDBweDtcIiBlZmZlY3RzPVwicGFyYWxsYXgtYmFja2dyb3VuZFwiPlxuICA8YXBwLXRvb2xiYXI+QXBwIG5hbWU8L2FwcC10b29sYmFyPlxuPC9hcHAtaGVhZGVyPlxuYGBgXG5cblRoZSBmcmFjdGlvbiBkZXRlcm1pbmVzIGhvdyBmYXIgdGhlIGJhY2tncm91bmQgbW92ZXMgcmVsYXRpdmUgdG8gdGhlIHNjcm9sbCBwb3NpdGlvbi5cblRoaXMgdmFsdWUgY2FuIGJlIGFzc2lnbmVkIHZpYSB0aGUgYHNjYWxhcmAgY29uZmlnIHZhbHVlIGFuZCBpdCBpcyB0eXBpY2FsbHkgYSB2YWx1ZVxuYmV0d2VlbiAwIGFuZCAxIGluY2x1c2l2ZS4gSWYgYHNjYWxhcj0wYCwgdGhlIGJhY2tncm91bmQgZG9lc24ndCBtb3ZlIGF3YXkgZnJvbSB0aGUgaGVhZGVyLlxuXG4qICoqcmVzaXplLXRpdGxlKipcblByb2dyZXNzaXZlbHkgaW50ZXJwb2xhdGVzIHRoZSBzaXplIG9mIHRoZSB0aXRsZSBmcm9tIHRoZSBlbGVtZW50IHdpdGggdGhlIGBtYWluLXRpdGxlYCBhdHRyaWJ1dGVcbnRvIHRoZSBlbGVtZW50IHdpdGggdGhlIGBjb25kZW5zZWQtdGl0bGVgIGF0dHJpYnV0ZSBhcyB0aGUgaGVhZGVyIGNvbmRlbnNlcy4gRm9yIGV4YW1wbGU6XG5cbmBgYGh0bWxcbjxhcHAtaGVhZGVyIGNvbmRlbnNlcyByZXZlYWxzIGVmZmVjdHM9XCJyZXNpemUtdGl0bGVcIj5cbiAgPGFwcC10b29sYmFyPlxuICAgICAgPGg0IGNvbmRlbnNlZC10aXRsZT5BcHAgbmFtZTwvaDQ+XG4gIDwvYXBwLXRvb2xiYXI+XG4gIDxhcHAtdG9vbGJhcj5cbiAgICAgIDxoMSBtYWluLXRpdGxlPkFwcCBuYW1lPC9oMT5cbiAgPC9hcHAtdG9vbGJhcj5cbjwvYXBwLWhlYWRlcj5cbmBgYFxuXG4qICoqcmVzaXplLXNuYXBwZWQtdGl0bGUqKlxuVXBvbiBzY3JvbGxpbmcgcGFzdCBhIHRocmVzaG9sZCwgdGhpcyBlZmZlY3QgZmFkZXMgaW4vb3V0IHRoZSB0aXRsZXMgdXNpbmcgb3BhY2l0eSB0cmFuc2l0aW9ucy5cblNpbWlsYXJseSB0byBgcmVzaXplLXRpdGxlYCwgdGhlIGBtYWluLXRpdGxlYCBhbmQgYGNvbmRlbnNlZC10aXRsZWAgZWxlbWVudHMgbXVzdCBiZSBwbGFjZWQgaW4gdGhlXG5saWdodCBET00uXG5cbiogKip3YXRlcmZhbGwqKlxuVG9nZ2xlcyB0aGUgc2hhZG93IHByb3BlcnR5IGluIGFwcC1oZWFkZXIgdG8gY3JlYXRlIGEgc2Vuc2Ugb2YgZGVwdGggKGFzIHJlY29tbWVuZGVkIGluIHRoZVxuTUQgc3BlYykgYmV0d2VlbiB0aGUgaGVhZGVyIGFuZCB0aGUgdW5kZXJuZWF0aCBjb250ZW50LiBZb3UgY2FuIGNoYW5nZSB0aGUgc2hhZG93IGJ5XG5jdXN0b21pemluZyB0aGUgYC0tYXBwLWhlYWRlci1zaGFkb3dgIG1peGluLiBGb3IgZXhhbXBsZTpcblxuYGBgY3NzXG5hcHAtaGVhZGVyIHtcbiAgLS1hcHAtaGVhZGVyLXNoYWRvdzoge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDBweCA1cHggMnB4IC0zcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICB9O1xufVxuYGBgXG5cbmBgYGh0bWxcbjxhcHAtaGVhZGVyIGNvbmRlbnNlcyByZXZlYWxzIGVmZmVjdHM9XCJ3YXRlcmZhbGxcIj5cbiAgPGFwcC10b29sYmFyPlxuICAgICAgPGgxIG1haW4tdGl0bGU+QXBwIG5hbWU8L2gxPlxuICA8L2FwcC10b29sYmFyPlxuPC9hcHAtaGVhZGVyPlxuYGBgXG5cbiogKiptYXRlcmlhbCoqXG5JbnN0YWxscyB0aGUgd2F0ZXJmYWxsLCByZXNpemUtdGl0bGUsIGJsZW5kLWJhY2tncm91bmQgYW5kIHBhcmFsbGF4LWJhY2tncm91bmQgZWZmZWN0cy5cblxuIyMjIENvbnRlbnQgYXR0cmlidXRlc1xuXG5BdHRyaWJ1dGUgfCBEZXNjcmlwdGlvbiAgICAgICAgIHwgRGVmYXVsdFxuLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuYHN0aWNreWAgfCBFbGVtZW50IHRoYXQgcmVtYWlucyBhdCB0aGUgdG9wIHdoZW4gdGhlIGhlYWRlciBjb25kZW5zZXMuIHwgVGhlIGZpcnN0IGFwcC10b29sYmFyIGluIHRoZSBsaWdodCBET00uXG5cblxuIyMgU3R5bGluZ1xuXG5NaXhpbiB8IERlc2NyaXB0aW9uIHwgRGVmYXVsdFxuLS0tLS0tfC0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLVxuYC0tYXBwLWhlYWRlci1iYWNrZ3JvdW5kLWZyb250LWxheWVyYCB8IEFwcGxpZXMgdG8gdGhlIGZyb250IGxheWVyIG9mIHRoZSBiYWNrZ3JvdW5kLiB8IHt9XG5gLS1hcHAtaGVhZGVyLWJhY2tncm91bmQtcmVhci1sYXllcmAgfCBBcHBsaWVzIHRvIHRoZSByZWFyIGxheWVyIG9mIHRoZSBiYWNrZ3JvdW5kLiB8IHt9XG5gLS1hcHAtaGVhZGVyLXNoYWRvd2AgfCBBcHBsaWVzIHRvIHRoZSBzaGFkb3cuIHwge31cblxuQGdyb3VwIEFwcCBFbGVtZW50c1xuQGVsZW1lbnQgYXBwLWhlYWRlclxuQGRlbW8gYXBwLWhlYWRlci9kZW1vL2JsZW5kLWJhY2tncm91bmQtMS5odG1sIEJsZW5kIEJhY2tncm91bmQgSW1hZ2VcbkBkZW1vIGFwcC1oZWFkZXIvZGVtby9ibGVuZC1iYWNrZ3JvdW5kLTIuaHRtbCBCbGVuZCAyIEJhY2tncm91bmQgSW1hZ2VzXG5AZGVtbyBhcHAtaGVhZGVyL2RlbW8vYmxlbmQtYmFja2dyb3VuZC0zLmh0bWwgQmxlbmQgQmFja2dyb3VuZCBDb2xvcnNcbkBkZW1vIGFwcC1oZWFkZXIvZGVtby9jb250YWN0cy5odG1sIENvbnRhY3RzIERlbW9cbkBkZW1vIGFwcC1oZWFkZXIvZGVtby9naXZlLmh0bWwgUmVzaXplIFNuYXBwZWQgVGl0bGUgRGVtb1xuQGRlbW8gYXBwLWhlYWRlci9kZW1vL211c2ljLmh0bWwgUmV2ZWFscyBEZW1vXG5AZGVtbyBhcHAtaGVhZGVyL2RlbW8vbm8tZWZmZWN0cy5odG1sIENvbmRlbnNlcyBhbmQgUmV2ZWFscyBEZW1vXG5AZGVtbyBhcHAtaGVhZGVyL2RlbW8vbm90ZXMuaHRtbCBGaXhlZCB3aXRoIER5bmFtaWMgU2hhZG93IERlbW9cbkBkZW1vIGFwcC1oZWFkZXIvZGVtby9jdXN0b20tc3RpY2t5LWVsZW1lbnQtMS5odG1sIEN1c3RvbSBTdGlja3kgRWxlbWVudCBEZW1vIDFcbkBkZW1vIGFwcC1oZWFkZXIvZGVtby9jdXN0b20tc3RpY2t5LWVsZW1lbnQtMi5odG1sIEN1c3RvbSBTdGlja3kgRWxlbWVudCBEZW1vIDJcblxuLS0+XG5cbjxkb20tbW9kdWxlIGlkPVwiYXBwLWhlYWRlclwiPlxuICA8dGVtcGxhdGU+XG4gICAgPHN0eWxlPlxuICAgICAgOmhvc3Qge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiAtd2Via2l0LXRyYW5zZm9ybTtcbiAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICA6aG9zdDo6YmVmb3JlIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMHB4O1xuICAgICAgICBib3R0b206IC01cHg7XG4gICAgICAgIGxlZnQ6IDBweDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogNXB4O1xuICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNHM7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwcHggNXB4IDZweCAtM3B4IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgICAgICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gICAgICAgIEBhcHBseSAtLWFwcC1oZWFkZXItc2hhZG93O1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbc2hhZG93XSk6OmJlZm9yZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG5cbiAgICAgICNiYWNrZ3JvdW5kIHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWZpdDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgI2JhY2tncm91bmRGcm9udExheWVyLFxuICAgICAgI2JhY2tncm91bmRSZWFyTGF5ZXIge1xuICAgICAgICBAYXBwbHkgLS1sYXlvdXQtZml0O1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgfVxuXG4gICAgICAjYmFja2dyb3VuZEZyb250TGF5ZXIge1xuICAgICAgICBAYXBwbHkgLS1hcHAtaGVhZGVyLWJhY2tncm91bmQtZnJvbnQtbGF5ZXI7XG4gICAgICB9XG5cbiAgICAgICNiYWNrZ3JvdW5kUmVhckxheWVyIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgQGFwcGx5IC0tYXBwLWhlYWRlci1iYWNrZ3JvdW5kLXJlYXItbGF5ZXI7XG4gICAgICB9XG5cbiAgICAgICNjb250ZW50Q29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbZGlzYWJsZWRdKSxcbiAgICAgIDpob3N0KFtkaXNhYmxlZF0pOjphZnRlcixcbiAgICAgIDpob3N0KFtkaXNhYmxlZF0pICNiYWNrZ3JvdW5kRnJvbnRMYXllcixcbiAgICAgIDpob3N0KFtkaXNhYmxlZF0pICNiYWNrZ3JvdW5kUmVhckxheWVyLFxuICAgICAgLyogU2lsZW50IHNjcm9sbGluZyBzaG91bGQgbm90IHJ1biBDU1MgdHJhbnNpdGlvbnMgKi9cbiAgICAgIDpob3N0KFtzaWxlbnQtc2Nyb2xsXSksXG4gICAgICA6aG9zdChbc2lsZW50LXNjcm9sbF0pOjphZnRlcixcbiAgICAgIDpob3N0KFtzaWxlbnQtc2Nyb2xsXSkgI2JhY2tncm91bmRGcm9udExheWVyLFxuICAgICAgOmhvc3QoW3NpbGVudC1zY3JvbGxdKSAjYmFja2dyb3VuZFJlYXJMYXllciB7XG4gICAgICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKGFwcC10b29sYmFyOmZpcnN0LW9mLXR5cGUpLFxuICAgICAgOmhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKFtzdGlja3ldKSxcbiAgICAgIC8qIFNpbGVudCBzY3JvbGxpbmcgc2hvdWxkIG5vdCBydW4gQ1NTIHRyYW5zaXRpb25zICovXG4gICAgICA6aG9zdChbc2lsZW50LXNjcm9sbF0pIDo6c2xvdHRlZChhcHAtdG9vbGJhcjpmaXJzdC1vZi10eXBlKSxcbiAgICAgIDpob3N0KFtzaWxlbnQtc2Nyb2xsXSkgOjpzbG90dGVkKFtzdGlja3ldKSB7XG4gICAgICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIH1cblxuICAgIDwvc3R5bGU+XG4gICAgPGRpdiBpZD1cImNvbnRlbnRDb250YWluZXJcIj5cbiAgICAgIDxzbG90IGlkPVwic2xvdFwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cblxuICA8c2NyaXB0PlxuICAgIFBvbHltZXIoe1xuICAgICAgaXM6ICdhcHAtaGVhZGVyJyxcblxuICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgIFBvbHltZXIuQXBwU2Nyb2xsRWZmZWN0c0JlaGF2aW9yLFxuICAgICAgICBQb2x5bWVyLkFwcExheW91dEJlaGF2aW9yXG4gICAgICBdLFxuXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0cnVlLCB0aGUgaGVhZGVyIHdpbGwgYXV0b21hdGljYWxseSBjb2xsYXBzZSB3aGVuIHNjcm9sbGluZyBkb3duLlxuICAgICAgICAgKiBUaGF0IGlzLCB0aGUgYHN0aWNreWAgZWxlbWVudCByZW1haW5zIHZpc2libGUgd2hlbiB0aGUgaGVhZGVyIGlzIGZ1bGx5IGNvbmRlbnNlZFxuICAgICAgICAgKiB3aGVyZWFzIHRoZSByZXN0IG9mIHRoZSBlbGVtZW50cyB3aWxsIGNvbGxhcHNlIGJlbG93IGBzdGlja3lgIGVsZW1lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBgc3RpY2t5YCBlbGVtZW50IGlzIHRoZSBmaXJzdCB0b29sYmFyIGluIHRoZSBsaWdodCBET006XG4gICAgICAgICAqXG4gICAgICAgICAqYGBgaHRtbFxuICAgICAgICAgKiA8YXBwLWhlYWRlciBjb25kZW5zZXM+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyPlRoaXMgdG9vbGJhciByZW1haW5zIG9uIHRvcDwvYXBwLXRvb2xiYXI+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyPjwvYXBwLXRvb2xiYXI+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyPjwvYXBwLXRvb2xiYXI+XG4gICAgICAgICAqIDwvYXBwLWhlYWRlcj5cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBzcGVjaWZ5IHdoaWNoIHRvb2xiYXIgb3IgZWxlbWVudCByZW1haW5zIHZpc2libGUgaW4gY29uZGVuc2VkIG1vZGVcbiAgICAgICAgICogYnkgYWRkaW5nIHRoZSBgc3RpY2t5YCBhdHRyaWJ1dGUgdG8gdGhhdCBlbGVtZW50LiBGb3IgZXhhbXBsZTogaWYgd2Ugd2FudCB0aGUgbGFzdFxuICAgICAgICAgKiB0b29sYmFyIHRvIHJlbWFpbiB2aXNpYmxlLCB3ZSBjYW4gYWRkIHRoZSBgc3RpY2t5YCBhdHRyaWJ1dGUgdG8gaXQuXG4gICAgICAgICAqXG4gICAgICAgICAqYGBgaHRtbFxuICAgICAgICAgKiA8YXBwLWhlYWRlciBjb25kZW5zZXM+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyPjwvYXBwLXRvb2xiYXI+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyPjwvYXBwLXRvb2xiYXI+XG4gICAgICAgICAqICAgPGFwcC10b29sYmFyIHN0aWNreT5UaGlzIHRvb2xiYXIgcmVtYWlucyBvbiB0b3A8L2FwcC10b29sYmFyPlxuICAgICAgICAgKiA8L2FwcC1oZWFkZXI+XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBOb3RlIHRoZSBgc3RpY2t5YCBlbGVtZW50IG11c3QgYmUgYSBkaXJlY3QgY2hpbGQgb2YgYGFwcC1oZWFkZXJgLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uZGVuc2VzOiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFudGFpbnMgdGhlIGhlYWRlciBmaXhlZCBhdCB0aGUgdG9wIHNvIGl0IG5ldmVyIG1vdmVzIGF3YXkuXG4gICAgICAgICAqL1xuICAgICAgICBmaXhlZDoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNsaWRlcyBiYWNrIHRoZSBoZWFkZXIgd2hlbiBzY3JvbGxpbmcgYmFjayB1cC5cbiAgICAgICAgICovXG4gICAgICAgIHJldmVhbHM6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNwbGF5cyBhIHNoYWRvdyBiZWxvdyB0aGUgaGVhZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hhZG93OiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9ic2VydmVyczogW1xuICAgICAgICAnX2NvbmZpZ0NoYW5nZWQoaXNBdHRhY2hlZCwgY29uZGVuc2VzLCBmaXhlZCknXG4gICAgICBdLFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgY2FjaGVkIG9mZnNldEhlaWdodCBvZiB0aGUgY3VycmVudCBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIF9oZWlnaHQ6IDAsXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRpc3RhbmNlIGluIHBpeGVscyB0aGUgaGVhZGVyIHdpbGwgYmUgdHJhbnNsYXRlZCB0byB3aGVuIHNjcm9sbGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICBfZEhlaWdodDogMCxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgb2Zmc2V0VG9wIG9mIGBfc3RpY2t5RWxgXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgX3N0aWNreUVsVG9wOiAwLFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHRoYXQgcmVtYWlucyB2aXNpYmxlIHdoZW4gdGhlIGhlYWRlciBjb25kZW5zZXMuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgICAgICovXG4gICAgICBfc3RpY2t5RWxSZWY6IG51bGwsXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGhlYWRlcidzIHRvcCB2YWx1ZSB1c2VkIGZvciB0aGUgYHRyYW5zZm9ybVlgXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgX3RvcDogMCxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY3VycmVudCBzY3JvbGwgcHJvZ3Jlc3MuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgX3Byb2dyZXNzOiAwLFxuXG4gICAgICBfd2FzU2Nyb2xsaW5nRG93bjogZmFsc2UsXG4gICAgICBfaW5pdFNjcm9sbFRvcDogMCxcbiAgICAgIF9pbml0VGltZXN0YW1wOiAwLFxuICAgICAgX2xhc3RUaW1lc3RhbXA6IDAsXG4gICAgICBfbGFzdFNjcm9sbFRvcDogMCxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZGlzdGFuY2UgdGhlIGhlYWRlciBpcyBhbGxvd2VkIHRvIG1vdmUgYXdheS5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQgX21heEhlYWRlclRvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZml4ZWQgPyB0aGlzLl9kSGVpZ2h0IDogdGhpcy5faGVpZ2h0ICsgNTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgc3RpY2t5IGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9P1xuICAgICAgICovXG4gICAgICBnZXQgX3N0aWNreUVsKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RpY2t5RWxSZWYpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc3RpY2t5RWxSZWY7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGVzID0gUG9seW1lci5kb20odGhpcy4kLnNsb3QpLmdldERpc3RyaWJ1dGVkTm9kZXMoKTtcbiAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50IHdpdGggdGhlIHN0aWNreSBhdHRyaWJ1dGUgb24gaXQgb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG5vZGU7IG5vZGUgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8gKG5vZGVzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3N0aWNreScpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0aWNreUVsUmVmID0gbm9kZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9zdGlja3lFbFJlZikge1xuICAgICAgICAgICAgICB0aGlzLl9zdGlja3lFbFJlZiA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGlja3lFbFJlZjtcbiAgICAgIH0sXG5cbiAgICAgIF9jb25maWdDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZXNldExheW91dCgpO1xuICAgICAgICB0aGlzLl9ub3RpZnlMYXlvdXRDaGFuZ2VkKCk7XG4gICAgICB9LFxuXG4gICAgICBfdXBkYXRlTGF5b3V0U3RhdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0V2lkdGggPT09IDAgJiYgdGhpcy5vZmZzZXRIZWlnaHQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2NsYW1wZWRTY3JvbGxUb3A7XG4gICAgICAgIHZhciBmaXJzdFNldHVwID0gdGhpcy5faGVpZ2h0ID09PSAwIHx8IHNjcm9sbFRvcCA9PT0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnREaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IHRoaXMub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB0aGlzLl9zdGlja3lFbFJlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAvLyBwcmVwYXJlIGZvciBtZWFzdXJlbWVudFxuICAgICAgICBpZiAgKCFmaXJzdFNldHVwKSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsU3RhdGUoMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21heU1vdmUoKSkge1xuICAgICAgICAgIHRoaXMuX2RIZWlnaHQgPSB0aGlzLl9zdGlja3lFbCA/IHRoaXMuX2hlaWdodCAtIHRoaXMuX3N0aWNreUVsLm9mZnNldEhlaWdodCA6IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZEhlaWdodCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RpY2t5RWxUb3AgPSB0aGlzLl9zdGlja3lFbCA/IHRoaXMuX3N0aWNreUVsLm9mZnNldFRvcCA6IDA7XG4gICAgICAgIHRoaXMuX3NldFVwRWZmZWN0KCk7XG4gICAgICAgIGlmIChmaXJzdFNldHVwKSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsU3RhdGUoc2Nyb2xsVG9wLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGxTdGF0ZSh0aGlzLl9sYXN0U2Nyb2xsVG9wLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLl9sYXlvdXRJZkRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzdG9yZSBubyB0cmFuc2l0aW9uXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBjdXJyZW50RGlzYWJsZWQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFVwZGF0ZXMgdGhlIHNjcm9sbCBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsVG9wXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBmb3JjZVVwZGF0ZSAoZGVmYXVsdDogZmFsc2UpXG4gICAgICAgKi9cbiAgICAgIF91cGRhdGVTY3JvbGxTdGF0ZTogZnVuY3Rpb24oc2Nyb2xsVG9wLCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5faGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9ncmVzcyA9IDA7XG4gICAgICAgIHZhciB0b3AgPSAwO1xuICAgICAgICB2YXIgbGFzdFRvcCA9IHRoaXMuX3RvcDtcbiAgICAgICAgdmFyIGxhc3RTY3JvbGxUb3AgPSB0aGlzLl9sYXN0U2Nyb2xsVG9wO1xuICAgICAgICB2YXIgbWF4SGVhZGVyVG9wID0gdGhpcy5fbWF4SGVhZGVyVG9wO1xuICAgICAgICB2YXIgZFNjcm9sbFRvcCA9IHNjcm9sbFRvcCAtIHRoaXMuX2xhc3RTY3JvbGxUb3A7XG4gICAgICAgIHZhciBhYnNEU2Nyb2xsVG9wID0gTWF0aC5hYnMoZFNjcm9sbFRvcCk7XG4gICAgICAgIHZhciBpc1Njcm9sbGluZ0Rvd24gPSBzY3JvbGxUb3AgPiB0aGlzLl9sYXN0U2Nyb2xsVG9wO1xuICAgICAgICB2YXIgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX21heU1vdmUoKSkge1xuICAgICAgICAgIHRvcCA9IHRoaXMuX2NsYW1wKHRoaXMucmV2ZWFscyA/IGxhc3RUb3AgKyBkU2Nyb2xsVG9wIDogc2Nyb2xsVG9wLCAwLCBtYXhIZWFkZXJUb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPj0gdGhpcy5fZEhlaWdodCkge1xuICAgICAgICAgIHRvcCA9IHRoaXMuY29uZGVuc2VzICYmICF0aGlzLmZpeGVkID8gTWF0aC5tYXgodGhpcy5fZEhlaWdodCwgdG9wKSA6IHRvcDtcbiAgICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJldmVhbHMgJiYgIXRoaXMuZGlzYWJsZWQgJiYgYWJzRFNjcm9sbFRvcCA8IDEwMCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICBpZiAobm93IC0gdGhpcy5faW5pdFRpbWVzdGFtcCA+IDMwMCB8fCB0aGlzLl93YXNTY3JvbGxpbmdEb3duICE9PSBpc1Njcm9sbGluZ0Rvd24pIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgICAgICB0aGlzLl9pbml0VGltZXN0YW1wID0gbm93O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1heEhlYWRlclRvcCkge1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGhlYWRlciBpcyBhbGxvd2VkIHRvIHNuYXBcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLl9pbml0U2Nyb2xsVG9wIC0gc2Nyb2xsVG9wKSA+IDMwIHx8IGFic0RTY3JvbGxUb3AgPiAxMCkge1xuICAgICAgICAgICAgICBpZiAoaXNTY3JvbGxpbmdEb3duICYmIHNjcm9sbFRvcCA+PSBtYXhIZWFkZXJUb3ApIHtcbiAgICAgICAgICAgICAgICB0b3AgPSBtYXhIZWFkZXJUb3A7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU2Nyb2xsaW5nRG93biAmJiBzY3JvbGxUb3AgPj0gdGhpcy5fZEhlaWdodCkge1xuICAgICAgICAgICAgICAgIHRvcCA9IHRoaXMuY29uZGVuc2VzICYmICF0aGlzLmZpeGVkID8gdGhpcy5fZEhlaWdodCA6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIHNjcm9sbFZlbG9jaXR5ID0gZFNjcm9sbFRvcCAvIChub3cgLSB0aGlzLl9sYXN0VGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLl9jbGFtcCgodG9wIC0gbGFzdFRvcCkgLyBzY3JvbGxWZWxvY2l0eSwgMCwgMzAwKSArICdtcyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0b3AgPSB0aGlzLl90b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kSGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBzY3JvbGxUb3AgPiAwID8gMSA6IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSB0b3AgLyB0aGlzLl9kSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICAgIHRoaXMuX3RvcCA9IHRvcDtcbiAgICAgICAgICB0aGlzLl93YXNTY3JvbGxpbmdEb3duID0gaXNTY3JvbGxpbmdEb3duO1xuICAgICAgICAgIHRoaXMuX2xhc3RUaW1lc3RhbXAgPSBub3c7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmNlVXBkYXRlIHx8IHByb2dyZXNzICE9PSB0aGlzLl9wcm9ncmVzcyB8fCBsYXN0VG9wICE9PSB0b3AgfHwgc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICB0aGlzLl9ydW5FZmZlY3RzKHByb2dyZXNzLCB0b3ApO1xuICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybUhlYWRlcih0b3ApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBoZWFkZXIgaXMgYWxsb3dlZCB0byBtb3ZlIGFzIHRoZSB1c2VyIHNjcm9sbHMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgX21heU1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kZW5zZXMgfHwgIXRoaXMuZml4ZWQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBoZWFkZXIgd2lsbCBjb25kZW5zZSBiYXNlZCBvbiB0aGUgc2l6ZSBvZiB0aGUgaGVhZGVyXG4gICAgICAgKiBhbmQgdGhlIGBjb25zZW5zZXNgIHByb3BlcnR5LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHdpbGxDb25kZW5zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kSGVpZ2h0ID4gMCAmJiB0aGlzLmNvbmRlbnNlcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgb24gdGhlIHNjcmVlbi5cbiAgICAgICAqIFRoYXQgaXMsIHZpc2libGUgaW4gdGhlIGN1cnJlbnQgdmlld3BvcnQuXG4gICAgICAgKlxuICAgICAgICogQG1ldGhvZCBpc09uU2NyZWVuXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAgICovXG4gICAgICBpc09uU2NyZWVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodCAhPT0gMCAmJiB0aGlzLl90b3AgPCB0aGlzLl9oZWlnaHQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSdzIGNvbnRlbnQgYmVsb3cgdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAbWV0aG9kIGlzQ29udGVudEJlbG93XG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAgICovXG4gICAgICBpc0NvbnRlbnRCZWxvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b3AgPT09IDAgPyB0aGlzLl9jbGFtcGVkU2Nyb2xsVG9wID4gMCA6XG4gICAgICAgICAgICB0aGlzLl9jbGFtcGVkU2Nyb2xsVG9wIC0gdGhpcy5fbWF4SGVhZGVyVG9wID49IDA7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRyYW5zZm9ybXMgdGhlIGhlYWRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAgICovXG4gICAgICBfdHJhbnNmb3JtSGVhZGVyOiBmdW5jdGlvbih5KSB7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlM2QoMCwgKC15KSArICdweCcsIDApO1xuICAgICAgICBpZiAodGhpcy5fc3RpY2t5RWwpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zbGF0ZTNkKDAsIHRoaXMuY29uZGVuc2VzICYmIHkgPj0gdGhpcy5fc3RpY2t5RWxUb3AgP1xuICAgICAgICAgICAgICAoTWF0aC5taW4oeSwgdGhpcy5fZEhlaWdodCkgLSB0aGlzLl9zdGlja3lFbFRvcCkgKyAncHgnIDogMCwgIDAsIHRoaXMuX3N0aWNreUVsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX2NsYW1wOiBmdW5jdGlvbih2LCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHYpKTtcbiAgICAgIH0sXG5cbiAgICAgIF9lbnN1cmVCZ0NvbnRhaW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2JnQ29udGFpbmVyKSB7XG4gICAgICAgICAgdGhpcy5fYmdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLl9iZ0NvbnRhaW5lci5pZCA9ICdiYWNrZ3JvdW5kJztcbiAgICAgICAgICB0aGlzLl9iZ1JlYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLl9iZ1JlYXIuaWQgPSAnYmFja2dyb3VuZFJlYXJMYXllcic7XG4gICAgICAgICAgdGhpcy5fYmdDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fYmdSZWFyKTtcbiAgICAgICAgICB0aGlzLl9iZ0Zyb250ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGhpcy5fYmdGcm9udC5pZCA9ICdiYWNrZ3JvdW5kRnJvbnRMYXllcic7XG4gICAgICAgICAgdGhpcy5fYmdDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fYmdGcm9udCk7XG4gICAgICAgICAgUG9seW1lci5kb20odGhpcy5yb290KS5pbnNlcnRCZWZvcmUodGhpcy5fYmdDb250YWluZXIsIHRoaXMuJC5jb250ZW50Q29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX2dldERPTVJlZjogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgc3dpdGNoIChpZCkge1xuICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmRGcm9udExheWVyJzpcbiAgICAgICAgICAgIHRoaXMuX2Vuc3VyZUJnQ29udGFpbmVycygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JnRnJvbnQ7XG4gICAgICAgICAgY2FzZSAnYmFja2dyb3VuZFJlYXJMYXllcic6XG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVCZ0NvbnRhaW5lcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iZ1JlYXI7XG4gICAgICAgICAgY2FzZSAnYmFja2dyb3VuZCc6XG4gICAgICAgICAgICB0aGlzLl9lbnN1cmVCZ0NvbnRhaW5lcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iZ0NvbnRhaW5lcjtcbiAgICAgICAgICBjYXNlICdtYWluVGl0bGUnOlxuICAgICAgICAgICAgcmV0dXJuIFBvbHltZXIuZG9tKHRoaXMpLnF1ZXJ5U2VsZWN0b3IoJ1ttYWluLXRpdGxlXScpO1xuICAgICAgICAgIGNhc2UgJ2NvbmRlbnNlZFRpdGxlJzpcbiAgICAgICAgICAgIHJldHVybiBQb2x5bWVyLmRvbSh0aGlzKS5xdWVyeVNlbGVjdG9yKCdbY29uZGVuc2VkLXRpdGxlXScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwcm9ncmVzcyB2YWx1ZSBvZiB0aGUgc2Nyb2xsIGVmZmVjdHNcbiAgICAgICAqIGFuZCB0aGUgdG9wIHBvc2l0aW9uIG9mIHRoZSBoZWFkZXIuXG4gICAgICAgKlxuICAgICAgICogQG1ldGhvZCBnZXRTY3JvbGxTdGF0ZVxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBnZXRTY3JvbGxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHByb2dyZXNzOiB0aGlzLl9wcm9ncmVzcywgdG9wOiB0aGlzLl90b3AgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgPC9zY3JpcHQ+XG48L2RvbS1tb2R1bGU+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9wb2x5bWVyL3BvbHltZXIuaHRtbFwiPlxuXG48IS0tXG5gaXJvbi1tZWRpYS1xdWVyeWAgY2FuIGJlIHVzZWQgdG8gZGF0YSBiaW5kIHRvIGEgQ1NTIG1lZGlhIHF1ZXJ5LlxuVGhlIGBxdWVyeWAgcHJvcGVydHkgaXMgYSBiYXJlIENTUyBtZWRpYSBxdWVyeS5cblRoZSBgcXVlcnktbWF0Y2hlc2AgcHJvcGVydHkgaXMgYSBib29sZWFuIHJlcHJlc2VudGluZyB3aGV0aGVyIHRoZSBwYWdlIG1hdGNoZXMgdGhhdCBtZWRpYSBxdWVyeS5cblxuRXhhbXBsZTpcblxuICAgIDxpcm9uLW1lZGlhLXF1ZXJ5IHF1ZXJ5PVwiKG1pbi13aWR0aDogNjAwcHgpXCIgcXVlcnktbWF0Y2hlcz1cInt7cXVlcnlNYXRjaGVzfX1cIj48L2lyb24tbWVkaWEtcXVlcnk+XG5cbkBncm91cCBJcm9uIEVsZW1lbnRzXG5AZGVtbyBkZW1vL2luZGV4Lmh0bWxcbkBoZXJvIGhlcm8uc3ZnXG5AZWxlbWVudCBpcm9uLW1lZGlhLXF1ZXJ5XG4tLT5cblxuPHNjcmlwdD5cblxuICBQb2x5bWVyKHtcblxuICAgIGlzOiAnaXJvbi1tZWRpYS1xdWVyeScsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIEJvb2xlYW4gcmV0dXJuIHZhbHVlIG9mIHRoZSBtZWRpYSBxdWVyeS5cbiAgICAgICAqL1xuICAgICAgcXVlcnlNYXRjaGVzOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgQ1NTIG1lZGlhIHF1ZXJ5IHRvIGV2YWx1YXRlLlxuICAgICAgICovXG4gICAgICBxdWVyeToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIG9ic2VydmVyOiAncXVlcnlDaGFuZ2VkJ1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0cnVlLCB0aGUgcXVlcnkgYXR0cmlidXRlIGlzIGFzc3VtZWQgdG8gYmUgYSBjb21wbGV0ZSBtZWRpYSBxdWVyeVxuICAgICAgICogc3RyaW5nIHJhdGhlciB0aGFuIGEgc2luZ2xlIG1lZGlhIGZlYXR1cmUuXG4gICAgICAgKi9cbiAgICAgIGZ1bGw6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtmdW5jdGlvbihNZWRpYVF1ZXJ5TGlzdCl9XG4gICAgICAgKi9cbiAgICAgIF9ib3VuZE1RSGFuZGxlcjoge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge01lZGlhUXVlcnlMaXN0fVxuICAgICAgICovXG4gICAgICBfbXE6IHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy5xdWVyeUNoYW5nZWQoKTtcbiAgICB9LFxuXG4gICAgZGV0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fcmVtb3ZlKCk7XG4gICAgfSxcblxuICAgIF9hZGQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX21xKSB7XG4gICAgICAgIHRoaXMuX21xLmFkZExpc3RlbmVyKHRoaXMuX2JvdW5kTVFIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3JlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fbXEpIHtcbiAgICAgICAgdGhpcy5fbXEucmVtb3ZlTGlzdGVuZXIodGhpcy5fYm91bmRNUUhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbXEgPSBudWxsO1xuICAgIH0sXG5cbiAgICBxdWVyeUNoYW5nZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fcmVtb3ZlKCk7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgaWYgKCFxdWVyeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZnVsbCAmJiBxdWVyeVswXSAhPT0gJygnKSB7XG4gICAgICAgIHF1ZXJ5ID0gJygnICsgcXVlcnkgKyAnKSc7XG4gICAgICB9XG4gICAgICB0aGlzLl9tcSA9IHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICAgIHRoaXMuX2FkZCgpO1xuICAgICAgdGhpcy5xdWVyeUhhbmRsZXIodGhpcy5fbXEpO1xuICAgIH0sXG5cbiAgICBxdWVyeUhhbmRsZXI6IGZ1bmN0aW9uKG1xKSB7XG4gICAgICB0aGlzLl9zZXRRdWVyeU1hdGNoZXMobXEubWF0Y2hlcyk7XG4gICAgfVxuXG4gIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vaXJvbi1tZWRpYS1xdWVyeS9pcm9uLW1lZGlhLXF1ZXJ5Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9hcHAtbGF5b3V0LWJlaGF2aW9yL2FwcC1sYXlvdXQtYmVoYXZpb3IuaHRtbFwiPlxuXG48IS0tXG5hcHAtZHJhd2VyLWxheW91dCBpcyBhIHdyYXBwZXIgZWxlbWVudCB0aGF0IHBvc2l0aW9ucyBhbiBhcHAtZHJhd2VyIGFuZCBvdGhlciBjb250ZW50LiBXaGVuXG50aGUgdmlld3BvcnQgd2lkdGggaXMgc21hbGxlciB0aGFuIGByZXNwb25zaXZlV2lkdGhgLCB0aGlzIGVsZW1lbnQgY2hhbmdlcyB0byBuYXJyb3cgbGF5b3V0LlxuSW4gbmFycm93IGxheW91dCwgdGhlIGRyYXdlciB3aWxsIGJlIHN0YWNrZWQgb24gdG9wIG9mIHRoZSBtYWluIGNvbnRlbnQuIFRoZSBkcmF3ZXIgd2lsbCBzbGlkZVxuaW4vb3V0IHRvIGhpZGUvcmV2ZWFsIHRoZSBtYWluIGNvbnRlbnQuXG5cbkJ5IGRlZmF1bHQgdGhlIGRyYXdlciBpcyBhbGlnbmVkIHRvIHRoZSBzdGFydCwgd2hpY2ggaXMgbGVmdCBpbiBMVFIgbGF5b3V0czpcblxuYGBgaHRtbFxuPGFwcC1kcmF3ZXItbGF5b3V0PlxuICA8YXBwLWRyYXdlciBzbG90PVwiZHJhd2VyXCI+XG4gICAgZHJhd2VyIGNvbnRlbnRcbiAgPC9hcHAtZHJhd2VyPlxuICA8ZGl2PlxuICAgIG1haW4gY29udGVudFxuICA8L2Rpdj5cbjwvYXBwLWRyYXdlci1sYXlvdXQ+XG5gYGBcblxuQWxpZ24gdGhlIGRyYXdlciBhdCB0aGUgZW5kOlxuXG5gYGBodG1sXG48YXBwLWRyYXdlci1sYXlvdXQ+XG4gIDxhcHAtZHJhd2VyIHNsb3Q9XCJkcmF3ZXJcIiBhbGlnbj1cImVuZFwiPlxuICAgICBkcmF3ZXIgY29udGVudFxuICA8L2FwcC1kcmF3ZXI+XG4gIDxkaXY+XG4gICAgbWFpbiBjb250ZW50XG4gIDwvZGl2PlxuPC9hcHAtZHJhd2VyLWxheW91dD5cbmBgYFxuXG5XaXRoIGFuIGFwcC1oZWFkZXItbGF5b3V0OlxuXG5gYGBodG1sXG48YXBwLWRyYXdlci1sYXlvdXQ+XG4gIDxhcHAtZHJhd2VyIHNsb3Q9XCJkcmF3ZXJcIj5cbiAgICBkcmF3ZXItY29udGVudFxuICA8L2FwcC1kcmF3ZXI+XG4gIDxhcHAtaGVhZGVyLWxheW91dD5cbiAgICA8YXBwLWhlYWRlciBzbG90PVwiaGVhZGVyXCI+XG4gICAgICA8YXBwLXRvb2xiYXI+XG4gICAgICAgIDxkaXYgbWFpbi10aXRsZT5BcHAgbmFtZTwvZGl2PlxuICAgICAgPC9hcHAtdG9vbGJhcj5cbiAgICA8L2FwcC1oZWFkZXI+XG5cbiAgICBtYWluIGNvbnRlbnRcblxuICA8L2FwcC1oZWFkZXItbGF5b3V0PlxuPC9hcHAtZHJhd2VyLWxheW91dD5cbmBgYFxuXG5BZGQgdGhlIGBkcmF3ZXItdG9nZ2xlYCBhdHRyaWJ1dGUgdG8gZWxlbWVudHMgaW5zaWRlIGBhcHAtZHJhd2VyLWxheW91dGAgdGhhdCB0b2dnbGUgdGhlIGRyYXdlciBvbiBjbGljayBldmVudHM6XG5cbmBgYGh0bWxcbjxhcHAtZHJhd2VyLWxheW91dD5cbiAgPGFwcC1kcmF3ZXIgc2xvdD1cImRyYXdlclwiPlxuICAgIGRyYXdlci1jb250ZW50XG4gIDwvYXBwLWRyYXdlcj5cbiAgPGFwcC1oZWFkZXItbGF5b3V0PlxuICAgIDxhcHAtaGVhZGVyIHNsb3Q9XCJoZWFkZXJcIj5cbiAgICAgIDxhcHAtdG9vbGJhcj5cbiAgICAgICAgPHBhcGVyLWljb24tYnV0dG9uIGljb249XCJtZW51XCIgZHJhd2VyLXRvZ2dsZT48L3BhcGVyLWljb24tYnV0dG9uPlxuICAgICAgICA8ZGl2IG1haW4tdGl0bGU+QXBwIG5hbWU8L2Rpdj5cbiAgICAgIDwvYXBwLXRvb2xiYXI+XG4gICAgPC9hcHAtaGVhZGVyPlxuXG4gICAgbWFpbiBjb250ZW50XG5cbiAgPC9hcHAtaGVhZGVyLWxheW91dD5cbjwvYXBwLWRyYXdlci1sYXlvdXQ+XG5gYGBcblxuKipOT1RFOioqIFdpdGggYXBwLWxheW91dCAyLjAsIHRoZSBgZHJhd2VyLXRvZ2dsZWAgZWxlbWVudCBuZWVkcyB0byBiZSBtYW51YWxseSBoaWRkZW5cbndoZW4gYXBwLWRyYXdlci1sYXlvdXQgaXMgbm90IGluIG5hcnJvdyBsYXlvdXQuIFRvIGFkZCB0aGlzLCBhZGQgdGhlIGZvbGxvd2luZyBDU1MgcnVsZSB3aGVyZVxuYXBwLWRyYXdlci1sYXlvdXQgaXMgdXNlZDpcblxuYGBgY3NzXG5hcHAtZHJhd2VyLWxheW91dDpub3QoW25hcnJvd10pIFtkcmF3ZXItdG9nZ2xlXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5gYGBcblxuQWRkIHRoZSBgZnVsbGJsZWVkYCBhdHRyaWJ1dGUgdG8gYXBwLWRyYXdlci1sYXlvdXQgdG8gbWFrZSBpdCBmaXQgdGhlIHNpemUgb2YgaXRzIGNvbnRhaW5lcjpcblxuYGBgaHRtbFxuPGFwcC1kcmF3ZXItbGF5b3V0IGZ1bGxibGVlZD5cbiAgPGFwcC1kcmF3ZXIgc2xvdD1cImRyYXdlclwiPlxuICAgICBkcmF3ZXIgY29udGVudFxuICA8L2FwcC1kcmF3ZXI+XG4gIDxkaXY+XG4gICAgbWFpbiBjb250ZW50XG4gIDwvZGl2PlxuPC9hcHAtZHJhd2VyLWxheW91dD5cbmBgYFxuXG4jIyMgU3R5bGluZ1xuXG5DdXN0b20gcHJvcGVydHkgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVmYXVsdFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tXG5gLS1hcHAtZHJhd2VyLXdpZHRoYCAgICAgICAgICAgICAgICAgICAgIHwgV2lkdGggb2YgdGhlIGRyYXdlciAgICAgICAgICAgICAgICAgIHwgMjU2cHhcbmAtLWFwcC1kcmF3ZXItbGF5b3V0LWNvbnRlbnQtdHJhbnNpdGlvbmAgfCBUcmFuc2l0aW9uIGZvciB0aGUgY29udGVudCBjb250YWluZXIgfCBub25lXG5cbioqTk9URToqKiBJZiB5b3UgdXNlIDxhcHAtZHJhd2VyPiB3aXRoIDxhcHAtZHJhd2VyLWxheW91dD4gYW5kIHNwZWNpZnkgYSB2YWx1ZSBmb3JcbmAtLWFwcC1kcmF3ZXItd2lkdGhgLCB0aGF0IHZhbHVlIG11c3QgYmUgYWNjZXNzaWJsZSBieSBib3RoIGVsZW1lbnRzLiBUaGlzIGNhbiBiZSBkb25lIGJ5XG5kZWZpbmluZyB0aGUgdmFsdWUgb24gdGhlIGA6aG9zdGAgdGhhdCBjb250YWlucyA8YXBwLWRyYXdlci1sYXlvdXQ+IChvciBgaHRtbGAgaWYgb3V0c2lkZVxuYSBzaGFkb3cgcm9vdCk6XG5cbmBgYGNzc1xuOmhvc3Qge1xuICAtLWFwcC1kcmF3ZXItd2lkdGg6IDMwMHB4O1xufVxuYGBgXG5cbkBncm91cCBBcHAgRWxlbWVudHNcbkBlbGVtZW50IGFwcC1kcmF3ZXItbGF5b3V0XG5AZGVtbyBhcHAtZHJhd2VyLWxheW91dC9kZW1vL2luZGV4Lmh0bWxcbi0tPlxuXG48ZG9tLW1vZHVsZSBpZD1cImFwcC1kcmF3ZXItbGF5b3V0XCI+XG4gIDx0ZW1wbGF0ZT5cbiAgICA8c3R5bGU+XG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9yY2UgYXBwLWRyYXdlci1sYXlvdXQgdG8gaGF2ZSBpdHMgb3duIHN0YWNraW5nIGNvbnRleHQgc28gdGhhdCBpdHMgcGFyZW50IGNhblxuICAgICAgICAgKiBjb250cm9sIHRoZSBzdGFja2luZyBvZiBpdCByZWxhdGl2ZSB0byBvdGhlciBlbGVtZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMDtcbiAgICAgIH1cblxuICAgICAgOmhvc3QgOjpzbG90dGVkKFtzbG90PWRyYXdlcl0pIHtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW2Z1bGxibGVlZF0pIHtcbiAgICAgICAgQGFwcGx5IC0tbGF5b3V0LWZpdDtcbiAgICAgIH1cblxuICAgICAgI2NvbnRlbnRDb250YWluZXIge1xuICAgICAgICAvKiBDcmVhdGUgYSBzdGFja2luZyBjb250ZXh0IGhlcmUgc28gdGhhdCBhbGwgY2hpbGRyZW4gYXBwZWFyIGJlbG93IHRoZSBoZWFkZXIuICovXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB0cmFuc2l0aW9uOiB2YXIoLS1hcHAtZHJhd2VyLWxheW91dC1jb250ZW50LXRyYW5zaXRpb24sIG5vbmUpO1xuICAgICAgfVxuXG4gICAgICAjY29udGVudENvbnRhaW5lcltkcmF3ZXItcG9zaXRpb249bGVmdF0ge1xuICAgICAgICBtYXJnaW4tbGVmdDogdmFyKC0tYXBwLWRyYXdlci13aWR0aCwgMjU2cHgpO1xuICAgICAgfVxuXG4gICAgICAjY29udGVudENvbnRhaW5lcltkcmF3ZXItcG9zaXRpb249cmlnaHRdIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiB2YXIoLS1hcHAtZHJhd2VyLXdpZHRoLCAyNTZweCk7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cblxuICAgIDxzbG90IGlkPVwiZHJhd2VyU2xvdFwiIG5hbWU9XCJkcmF3ZXJcIj48L3Nsb3Q+XG5cbiAgICA8ZGl2IGlkPVwiY29udGVudENvbnRhaW5lclwiIGRyYXdlci1wb3NpdGlvbiQ9XCJbW19kcmF3ZXJQb3NpdGlvbl1dXCI+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+XG5cbiAgICA8aXJvbi1tZWRpYS1xdWVyeVxuICAgICAgICBxdWVyeT1cIltbX2NvbXB1dGVNZWRpYVF1ZXJ5KGZvcmNlTmFycm93LCByZXNwb25zaXZlV2lkdGgpXV1cIlxuICAgICAgICBvbi1xdWVyeS1tYXRjaGVzLWNoYW5nZWQ9XCJfb25RdWVyeU1hdGNoZXNDaGFuZ2VkXCI+PC9pcm9uLW1lZGlhLXF1ZXJ5PlxuICA8L3RlbXBsYXRlPlxuXG4gIDxzY3JpcHQ+XG4gICAgUG9seW1lcih7XG4gICAgICBpczogJ2FwcC1kcmF3ZXItbGF5b3V0JyxcblxuICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgIFBvbHltZXIuQXBwTGF5b3V0QmVoYXZpb3JcbiAgICAgIF0sXG5cbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRydWUsIGlnbm9yZSBgcmVzcG9uc2l2ZVdpZHRoYCBzZXR0aW5nIGFuZCBmb3JjZSB0aGUgbmFycm93IGxheW91dC5cbiAgICAgICAgICovXG4gICAgICAgIGZvcmNlTmFycm93OiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHZpZXdwb3J0J3Mgd2lkdGggaXMgc21hbGxlciB0aGFuIHRoaXMgdmFsdWUsIHRoZSBwYW5lbCB3aWxsIGNoYW5nZSB0byBuYXJyb3dcbiAgICAgICAgICogbGF5b3V0LiBJbiB0aGUgbW9kZSB0aGUgZHJhd2VyIHdpbGwgYmUgY2xvc2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzcG9uc2l2ZVdpZHRoOiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgIHZhbHVlOiAnNjQwcHgnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiBpdCBpcyBpbiBuYXJyb3cgbGF5b3V0LiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgbmVlZCB0byBzaG93L2hpZGVcbiAgICAgICAgICogZWxlbWVudHMgYmFzZWQgb24gdGhlIGxheW91dC5cbiAgICAgICAgICovXG4gICAgICAgIG5hcnJvdzoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0cnVlLCB0aGUgZHJhd2VyIHdpbGwgaW5pdGlhbGx5IGJlIG9wZW5lZCB3aGVuIGluIG5hcnJvdyBsYXlvdXQgbW9kZS5cbiAgICAgICAgICovXG4gICAgICAgIG9wZW5lZFdoZW5OYXJyb3c6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9kcmF3ZXJQb3NpdGlvbjoge1xuICAgICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgJ2NsaWNrJzogJ19jbGlja0hhbmRsZXInXG4gICAgICB9LFxuXG4gICAgICBvYnNlcnZlcnM6IFtcbiAgICAgICAgJ19uYXJyb3dDaGFuZ2VkKG5hcnJvdyknXG4gICAgICBdLFxuXG4gICAgICAvKipcbiAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBhcHAtZHJhd2VyIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHByb3BlcnR5IGRyYXdlclxuICAgICAgICovXG4gICAgICBnZXQgZHJhd2VyKCkge1xuICAgICAgICByZXR1cm4gUG9seW1lci5kb20odGhpcy4kLmRyYXdlclNsb3QpLmdldERpc3RyaWJ1dGVkTm9kZXMoKVswXTtcbiAgICAgIH0sXG5cbiAgICAgIGF0dGFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRGlzYWJsZSBkcmF3ZXIgdHJhbnNpdGlvbnMgdW50aWwgYWZ0ZXIgYXBwLWRyYXdlci1sYXlvdXQgc2V0cyB0aGUgaW5pdGlhbCBvcGVuZWQgc3RhdGUuXG4gICAgICAgIHZhciBkcmF3ZXIgPSB0aGlzLmRyYXdlcjtcbiAgICAgICAgaWYgKGRyYXdlcikge1xuICAgICAgICAgIGRyYXdlci5zZXRBdHRyaWJ1dGUoJ25vLXRyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9jbGlja0hhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IFBvbHltZXIuZG9tKGUpLmxvY2FsVGFyZ2V0O1xuICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RyYXdlci10b2dnbGUnKSkge1xuICAgICAgICAgIHZhciBkcmF3ZXIgPSB0aGlzLmRyYXdlcjtcbiAgICAgICAgICBpZiAoZHJhd2VyICYmICFkcmF3ZXIucGVyc2lzdGVudCkge1xuICAgICAgICAgICAgZHJhd2VyLnRvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3VwZGF0ZUxheW91dFN0YXRlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkcmF3ZXIgPSB0aGlzLmRyYXdlcjtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXR0YWNoZWQgfHwgIWRyYXdlcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYXdlclBvc2l0aW9uID0gdGhpcy5uYXJyb3cgPyBudWxsIDogZHJhd2VyLnBvc2l0aW9uO1xuICAgICAgICBpZiAodGhpcy5fZHJhd2VyTmVlZHNSZXNldCkge1xuICAgICAgICAgIGlmICh0aGlzLm5hcnJvdykge1xuICAgICAgICAgICAgZHJhd2VyLm9wZW5lZCA9IHRoaXMub3BlbmVkV2hlbk5hcnJvdztcbiAgICAgICAgICAgIGRyYXdlci5wZXJzaXN0ZW50ID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyYXdlci5vcGVuZWQgPSBkcmF3ZXIucGVyc2lzdGVudCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkcmF3ZXIuaGFzQXR0cmlidXRlKCduby10cmFuc2l0aW9uJykpIHtcbiAgICAgICAgICAgIC8vIEVuYWJsZSBkcmF3ZXIgdHJhbnNpdGlvbnMgYWZ0ZXIgYXBwLWRyYXdlci1sYXlvdXQgc2V0cyB0aGUgaW5pdGlhbCBvcGVuZWQgc3RhdGUuXG4gICAgICAgICAgICBQb2x5bWVyLlJlbmRlclN0YXR1cy5hZnRlck5leHRSZW5kZXIodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGRyYXdlci5yZW1vdmVBdHRyaWJ1dGUoJ25vLXRyYW5zaXRpb24nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9kcmF3ZXJOZWVkc1Jlc2V0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9uYXJyb3dDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyTmVlZHNSZXNldCA9IHRydWU7XG4gICAgICAgIHRoaXMucmVzZXRMYXlvdXQoKTtcbiAgICAgIH0sXG5cbiAgICAgIF9vblF1ZXJ5TWF0Y2hlc0NoYW5nZWQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3NldE5hcnJvdyhldmVudC5kZXRhaWwudmFsdWUpO1xuICAgICAgfSxcblxuICAgICAgX2NvbXB1dGVNZWRpYVF1ZXJ5OiBmdW5jdGlvbihmb3JjZU5hcnJvdywgcmVzcG9uc2l2ZVdpZHRoKSB7XG4gICAgICAgIHJldHVybiBmb3JjZU5hcnJvdyA/ICcobWluLXdpZHRoOiAwcHgpJyA6ICcobWF4LXdpZHRoOiAnICsgcmVzcG9uc2l2ZVdpZHRoICsgJyknO1xuICAgICAgfVxuICAgIH0pO1xuICA8L3NjcmlwdD5cbjwvZG9tLW1vZHVsZT5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL21peGlucy9tdXRhYmxlLWRhdGEuaHRtbFwiPlxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgbGV0IG11dGFibGVQcm9wZXJ0eUNoYW5nZTtcbiAgLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9ICovXG4gICgoKSA9PiB7XG4gICAgbXV0YWJsZVByb3BlcnR5Q2hhbmdlID0gUG9seW1lci5NdXRhYmxlRGF0YS5fbXV0YWJsZVByb3BlcnR5Q2hhbmdlO1xuICB9KSgpO1xuXG4gIC8qKlxuICAgKiBMZWdhY3kgZWxlbWVudCBiZWhhdmlvciB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzLFxuICAgKiAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKSBmb3IgdXNlIG9uIGxlZ2FjeSBBUEkgUG9seW1lciBlbGVtZW50cy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYFBvbHltZXIuUHJvcGVydHlFZmZlY3RzYCBwZXJmb3JtcyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgb25cbiAgICogb2JqZWN0cywgd2hpY2ggbWVhbnMgdGhhdCBhbnkgZGVlcCBtb2RpZmljYXRpb25zIHRvIGFuIG9iamVjdCBvciBhcnJheSB3aWxsXG4gICAqIG5vdCBiZSBwcm9wYWdhdGVkIHVubGVzcyBcImltbXV0YWJsZVwiIGRhdGEgcGF0dGVybnMgYXJlIHVzZWQgKGkuZS4gYWxsIG9iamVjdFxuICAgKiByZWZlcmVuY2VzIGZyb20gdGhlIHJvb3QgdG8gdGhlIG11dGF0aW9uIHdlcmUgY2hhbmdlZCkuXG4gICAqXG4gICAqIFBvbHltZXIgYWxzbyBwcm92aWRlcyBhIHByb3ByaWV0YXJ5IGRhdGEgbXV0YXRpb24gYW5kIHBhdGggbm90aWZpY2F0aW9uIEFQSVxuICAgKiAoZS5nLiBgbm90aWZ5UGF0aGAsIGBzZXRgLCBhbmQgYXJyYXkgbXV0YXRpb24gQVBJJ3MpIHRoYXQgYWxsb3cgZWZmaWNpZW50XG4gICAqIG11dGF0aW9uIGFuZCBub3RpZmljYXRpb24gb2YgZGVlcCBjaGFuZ2VzIGluIGFuIG9iamVjdCBncmFwaCB0byBhbGwgZWxlbWVudHNcbiAgICogYm91bmQgdG8gdGhlIHNhbWUgb2JqZWN0IGdyYXBoLlxuICAgKlxuICAgKiBJbiBjYXNlcyB3aGVyZSBuZWl0aGVyIGltbXV0YWJsZSBwYXR0ZXJucyBub3IgdGhlIGRhdGEgbXV0YXRpb24gQVBJIGNhbiBiZVxuICAgKiB1c2VkLCBhcHBseWluZyB0aGlzIG1peGluIHdpbGwgY2F1c2UgUG9seW1lciB0byBza2lwIGRpcnR5IGNoZWNraW5nIGZvclxuICAgKiBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlIFwiZGlydHlcIikuICBUaGlzIGFsbG93cyBhXG4gICAqIHVzZXIgdG8gbWFrZSBhIGRlZXAgbW9kaWZpY2F0aW9uIHRvIGEgYm91bmQgb2JqZWN0IGdyYXBoLCBhbmQgdGhlbiBlaXRoZXJcbiAgICogc2ltcGx5IHJlLXNldCB0aGUgb2JqZWN0IChlLmcuIGB0aGlzLml0ZW1zID0gdGhpcy5pdGVtc2ApIG9yIGNhbGwgYG5vdGlmeVBhdGhgXG4gICAqIChlLmcuIGB0aGlzLm5vdGlmeVBhdGgoJ2l0ZW1zJylgKSB0byB1cGRhdGUgdGhlIHRyZWUuICBOb3RlIHRoYXQgYWxsXG4gICAqIGVsZW1lbnRzIHRoYXQgd2lzaCB0byBiZSB1cGRhdGVkIGJhc2VkIG9uIGRlZXAgbXV0YXRpb25zIG11c3QgYXBwbHkgdGhpc1xuICAgKiBtaXhpbiBvciBvdGhlcndpc2Ugc2tpcCBzdHJpY3QgZGlydHkgY2hlY2tpbmcgZm9yIG9iamVjdHMvYXJyYXlzLlxuICAgKiBTcGVjaWZpY2FsbHksIGFueSBlbGVtZW50cyBpbiB0aGUgYmluZGluZyB0cmVlIGJldHdlZW4gdGhlIHNvdXJjZSBvZiBhXG4gICAqIG11dGF0aW9uIGFuZCB0aGUgY29uc3VtcHRpb24gb2YgaXQgbXVzdCBhcHBseSB0aGlzIGJlaGF2aW9yIG9yIGVuYWJsZSB0aGVcbiAgICogYFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YUJlaGF2aW9yYC5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gbWFrZSB0aGUgZGlydHkgY2hlY2sgc3RyYXRlZ3kgY29uZmlndXJhYmxlLCBzZWVcbiAgICogYFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YUJlaGF2aW9yYC5cbiAgICpcbiAgICogTm90ZSwgdGhlIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyBvZiBwcm9wYWdhdGluZyBsYXJnZSBvYmplY3QgZ3JhcGhzXG4gICAqIHdpbGwgYmUgd29yc2UgYXMgb3Bwb3NlZCB0byB1c2luZyBzdHJpY3QgZGlydHkgY2hlY2tpbmcgd2l0aCBpbW11dGFibGVcbiAgICogcGF0dGVybnMgb3IgUG9seW1lcidzIHBhdGggbm90aWZpY2F0aW9uIEFQSS5cbiAgICpcbiAgICogQHBvbHltZXJCZWhhdmlvclxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBCZWhhdmlvciB0byBza2lwIHN0cmljdCBkaXJ0eS1jaGVja2luZyBmb3Igb2JqZWN0cyBhbmRcbiAgICogICBhcnJheXNcbiAgICovXG4gIFBvbHltZXIuTXV0YWJsZURhdGFCZWhhdmlvciA9IHtcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHRvIHByb3ZpZGUgb3B0aW9uIGZvciBza2lwcGluZ1xuICAgICAqIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyBmb3IgT2JqZWN0cyBhbmQgQXJyYXlzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcHVsbHMgdGhlIHZhbHVlIHRvIGRpcnR5IGNoZWNrIGFnYWluc3QgZnJvbSB0aGUgYF9fZGF0YVRlbXBgXG4gICAgICogY2FjaGUgKHJhdGhlciB0aGFuIHRoZSBub3JtYWwgYF9fZGF0YWAgY2FjaGUpIGZvciBPYmplY3RzLiAgU2luY2UgdGhlIHRlbXBcbiAgICAgKiBjYWNoZSBpcyBjbGVhcmVkIGF0IHRoZSBlbmQgb2YgYSB0dXJuLCB0aGlzIGltcGxlbWVudGF0aW9uIGFsbG93c1xuICAgICAqIHNpZGUtZWZmZWN0cyBvZiBkZWVwIG9iamVjdCBjaGFuZ2VzIHRvIGJlIHByb2Nlc3NlZCBieSByZS1zZXR0aW5nIHRoZVxuICAgICAqIHNhbWUgb2JqZWN0ICh1c2luZyB0aGUgdGVtcCBjYWNoZSBhcyBhbiBpbi10dXJuIGJhY2tzdG9wIHRvIHByZXZlbnRcbiAgICAgKiBjeWNsZXMgZHVlIHRvIDItd2F5IG5vdGlmaWNhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHByb3BlcnR5IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBvbGQgUHJldmlvdXMgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpIHtcbiAgICAgIHJldHVybiBtdXRhYmxlUHJvcGVydHlDaGFuZ2UodGhpcywgcHJvcGVydHksIHZhbHVlLCBvbGQsIHRydWUpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogTGVnYWN5IGVsZW1lbnQgYmVoYXZpb3IgdG8gYWRkIHRoZSBvcHRpb25hbCBhYmlsaXR5IHRvIHNraXAgc3RyaWN0XG4gICAqIGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvIGJlXG4gICAqIFwiZGlydHlcIikgYnkgc2V0dGluZyBhIGBtdXRhYmxlLWRhdGFgIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IGluc3RhbmNlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHBlcmZvcm1zIHN0cmljdCBkaXJ0eSBjaGVja2luZyBvblxuICAgKiBvYmplY3RzLCB3aGljaCBtZWFucyB0aGF0IGFueSBkZWVwIG1vZGlmaWNhdGlvbnMgdG8gYW4gb2JqZWN0IG9yIGFycmF5IHdpbGxcbiAgICogbm90IGJlIHByb3BhZ2F0ZWQgdW5sZXNzIFwiaW1tdXRhYmxlXCIgZGF0YSBwYXR0ZXJucyBhcmUgdXNlZCAoaS5lLiBhbGwgb2JqZWN0XG4gICAqIHJlZmVyZW5jZXMgZnJvbSB0aGUgcm9vdCB0byB0aGUgbXV0YXRpb24gd2VyZSBjaGFuZ2VkKS5cbiAgICpcbiAgICogUG9seW1lciBhbHNvIHByb3ZpZGVzIGEgcHJvcHJpZXRhcnkgZGF0YSBtdXRhdGlvbiBhbmQgcGF0aCBub3RpZmljYXRpb24gQVBJXG4gICAqIChlLmcuIGBub3RpZnlQYXRoYCwgYHNldGAsIGFuZCBhcnJheSBtdXRhdGlvbiBBUEkncykgdGhhdCBhbGxvdyBlZmZpY2llbnRcbiAgICogbXV0YXRpb24gYW5kIG5vdGlmaWNhdGlvbiBvZiBkZWVwIGNoYW5nZXMgaW4gYW4gb2JqZWN0IGdyYXBoIHRvIGFsbCBlbGVtZW50c1xuICAgKiBib3VuZCB0byB0aGUgc2FtZSBvYmplY3QgZ3JhcGguXG4gICAqXG4gICAqIEluIGNhc2VzIHdoZXJlIG5laXRoZXIgaW1tdXRhYmxlIHBhdHRlcm5zIG5vciB0aGUgZGF0YSBtdXRhdGlvbiBBUEkgY2FuIGJlXG4gICAqIHVzZWQsIGFwcGx5aW5nIHRoaXMgbWl4aW4gd2lsbCBhbGxvdyBQb2x5bWVyIHRvIHNraXAgZGlydHkgY2hlY2tpbmcgZm9yXG4gICAqIG9iamVjdHMgYW5kIGFycmF5cyAoYWx3YXlzIGNvbnNpZGVyIHRoZW0gdG8gYmUgXCJkaXJ0eVwiKS4gIFRoaXMgYWxsb3dzIGFcbiAgICogdXNlciB0byBtYWtlIGEgZGVlcCBtb2RpZmljYXRpb24gdG8gYSBib3VuZCBvYmplY3QgZ3JhcGgsIGFuZCB0aGVuIGVpdGhlclxuICAgKiBzaW1wbHkgcmUtc2V0IHRoZSBvYmplY3QgKGUuZy4gYHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zYCkgb3IgY2FsbCBgbm90aWZ5UGF0aGBcbiAgICogKGUuZy4gYHRoaXMubm90aWZ5UGF0aCgnaXRlbXMnKWApIHRvIHVwZGF0ZSB0aGUgdHJlZS4gIE5vdGUgdGhhdCBhbGxcbiAgICogZWxlbWVudHMgdGhhdCB3aXNoIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gZGVlcCBtdXRhdGlvbnMgbXVzdCBhcHBseSB0aGlzXG4gICAqIG1peGluIG9yIG90aGVyd2lzZSBza2lwIHN0cmljdCBkaXJ0eSBjaGVja2luZyBmb3Igb2JqZWN0cy9hcnJheXMuXG4gICAqIFNwZWNpZmljYWxseSwgYW55IGVsZW1lbnRzIGluIHRoZSBiaW5kaW5nIHRyZWUgYmV0d2VlbiB0aGUgc291cmNlIG9mIGFcbiAgICogbXV0YXRpb24gYW5kIHRoZSBjb25zdW1wdGlvbiBvZiBpdCBtdXN0IGVuYWJsZSB0aGlzIGJlaGF2aW9yIG9yIGFwcGx5IHRoZVxuICAgKiBgUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhQmVoYXZpb3JgLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGJlaGF2aW9yIGFkZHMgdGhlIGFiaWxpdHkgdG8gZm9yZ28gT2JqZWN0L0FycmF5IGRpcnR5IGNoZWNraW5nLFxuICAgKiB0aGUgYG11dGFibGVEYXRhYCBmbGFnIGRlZmF1bHRzIHRvIGZhbHNlIGFuZCBtdXN0IGJlIHNldCBvbiB0aGUgaW5zdGFuY2UuXG4gICAqXG4gICAqIE5vdGUsIHRoZSBwZXJmb3JtYW5jZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgcHJvcGFnYXRpbmcgbGFyZ2Ugb2JqZWN0IGdyYXBoc1xuICAgKiB3aWxsIGJlIHdvcnNlIGJ5IHJlbHlpbmcgb24gYG11dGFibGVEYXRhOiB0cnVlYCBhcyBvcHBvc2VkIHRvIHVzaW5nXG4gICAqIHN0cmljdCBkaXJ0eSBjaGVja2luZyB3aXRoIGltbXV0YWJsZSBwYXR0ZXJucyBvciBQb2x5bWVyJ3MgcGF0aCBub3RpZmljYXRpb25cbiAgICogQVBJLlxuICAgKlxuICAgKiBAcG9seW1lckJlaGF2aW9yXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEJlaGF2aW9yIHRvIG9wdGlvbmFsbHkgc2tpcCBzdHJpY3QgZGlydHktY2hlY2tpbmcgZm9yIG9iamVjdHMgYW5kXG4gICAqICAgYXJyYXlzXG4gICAqL1xuICBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGFCZWhhdmlvciA9IHtcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIC8qKlxuICAgICAgICogSW5zdGFuY2UtbGV2ZWwgZmxhZyBmb3IgY29uZmlndXJpbmcgdGhlIGRpcnR5LWNoZWNraW5nIHN0cmF0ZWd5XG4gICAgICAgKiBmb3IgdGhpcyBlbGVtZW50LiAgV2hlbiB0cnVlLCBPYmplY3RzIGFuZCBBcnJheXMgd2lsbCBza2lwIGRpcnR5XG4gICAgICAgKiBjaGVja2luZywgb3RoZXJ3aXNlIHN0cmljdCBlcXVhbGl0eSBjaGVja2luZyB3aWxsIGJlIHVzZWQuXG4gICAgICAgKi9cbiAgICAgIG11dGFibGVEYXRhOiBCb29sZWFuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUG9seW1lci5Qcm9wZXJ0eUVmZmVjdHNgIHRvIHNraXAgc3RyaWN0IGVxdWFsaXR5IGNoZWNraW5nXG4gICAgICogZm9yIE9iamVjdHMgYW5kIEFycmF5cy5cbiAgICAgKlxuICAgICAqIFB1bGxzIHRoZSB2YWx1ZSB0byBkaXJ0eSBjaGVjayBhZ2FpbnN0IGZyb20gdGhlIGBfX2RhdGFUZW1wYCBjYWNoZVxuICAgICAqIChyYXRoZXIgdGhhbiB0aGUgbm9ybWFsIGBfX2RhdGFgIGNhY2hlKSBmb3IgT2JqZWN0cy4gIFNpbmNlIHRoZSB0ZW1wXG4gICAgICogY2FjaGUgaXMgY2xlYXJlZCBhdCB0aGUgZW5kIG9mIGEgdHVybiwgdGhpcyBpbXBsZW1lbnRhdGlvbiBhbGxvd3NcbiAgICAgKiBzaWRlLWVmZmVjdHMgb2YgZGVlcCBvYmplY3QgY2hhbmdlcyB0byBiZSBwcm9jZXNzZWQgYnkgcmUtc2V0dGluZyB0aGVcbiAgICAgKiBzYW1lIG9iamVjdCAodXNpbmcgdGhlIHRlbXAgY2FjaGUgYXMgYW4gaW4tdHVybiBiYWNrc3RvcCB0byBwcmV2ZW50XG4gICAgICogY3ljbGVzIGR1ZSB0byAyLXdheSBub3RpZmljYXRpb24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2xkIFByZXZpb3VzIHByb3BlcnR5IHZhbHVlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBjaGFuZ2VcbiAgICAgKiBAdGhpcyB7dGhpc31cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHByb3BlcnR5LCB2YWx1ZSwgb2xkKSB7XG4gICAgICByZXR1cm4gbXV0YWJsZVByb3BlcnR5Q2hhbmdlKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgb2xkLCB0aGlzLm11dGFibGVEYXRhKTtcbiAgICB9XG4gIH07XG5cbn0pKCk7XG5cbjwvc2NyaXB0PlxuIiwiKGZ1bmN0aW9uKCl7LypcblxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYz0hKHdpbmRvdy5TaGFkeURPTSYmd2luZG93LlNoYWR5RE9NLmluVXNlKSxmO2Z1bmN0aW9uIGcoYSl7Zj1hJiZhLnNoaW1jc3Nwcm9wZXJ0aWVzPyExOmN8fCEobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC82MDF8RWRnZVxcLzE1Lyl8fCF3aW5kb3cuQ1NTfHwhQ1NTLnN1cHBvcnRzfHwhQ1NTLnN1cHBvcnRzKFwiYm94LXNoYWRvd1wiLFwiMCAwIDAgdmFyKC0tZm9vKVwiKSl9d2luZG93LlNoYWR5Q1NTJiZ2b2lkIDAhPT13aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzP2Y9d2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzczp3aW5kb3cuU2hhZHlDU1M/KGcod2luZG93LlNoYWR5Q1NTKSx3aW5kb3cuU2hhZHlDU1M9dm9pZCAwKTpnKHdpbmRvdy5XZWJDb21wb25lbnRzJiZ3aW5kb3cuV2ViQ29tcG9uZW50cy5mbGFncyk7dmFyIGg9ZjtmdW5jdGlvbiBrKGEsYil7Zm9yKHZhciBkIGluIGIpbnVsbD09PWQ/YS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShkKTphLnN0eWxlLnNldFByb3BlcnR5KGQsYltkXSl9O3ZhciBsPW51bGwsbT13aW5kb3cuSFRNTEltcG9ydHMmJndpbmRvdy5IVE1MSW1wb3J0cy53aGVuUmVhZHl8fG51bGwsbjtmdW5jdGlvbiBwKCl7dmFyIGE9cTtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXttP20oYSk6KGx8fChsPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGEpe249YX0pLFwiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGU/bigpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24oKXtcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlJiZuKCl9KSksbC50aGVuKGZ1bmN0aW9uKCl7YSYmYSgpfSkpfSl9O3ZhciByPW51bGwscT1udWxsO2Z1bmN0aW9uIHQoKXt0aGlzLmN1c3RvbVN0eWxlcz1bXTt0aGlzLmVucXVldWVkPSExfWZ1bmN0aW9uIHUoYSl7IWEuZW5xdWV1ZWQmJnEmJihhLmVucXVldWVkPSEwLHAoKSl9dC5wcm90b3R5cGUuYz1mdW5jdGlvbihhKXthLl9fc2VlbkJ5U2hhZHlDU1N8fChhLl9fc2VlbkJ5U2hhZHlDU1M9ITAsdGhpcy5jdXN0b21TdHlsZXMucHVzaChhKSx1KHRoaXMpKX07dC5wcm90b3R5cGUuYj1mdW5jdGlvbihhKXtpZihhLl9fc2hhZHlDU1NDYWNoZWRTdHlsZSlyZXR1cm4gYS5fX3NoYWR5Q1NTQ2FjaGVkU3R5bGU7dmFyIGI7YS5nZXRTdHlsZT9iPWEuZ2V0U3R5bGUoKTpiPWE7cmV0dXJuIGJ9O1xudC5wcm90b3R5cGUuYT1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmN1c3RvbVN0eWxlcyxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl07aWYoIWQuX19zaGFkeUNTU0NhY2hlZFN0eWxlKXt2YXIgZT10aGlzLmIoZCk7ZSYmKGU9ZS5fX2FwcGxpZWRFbGVtZW50fHxlLHImJnIoZSksZC5fX3NoYWR5Q1NTQ2FjaGVkU3R5bGU9ZSl9fXJldHVybiBhfTt0LnByb3RvdHlwZS5hZGRDdXN0b21TdHlsZT10LnByb3RvdHlwZS5jO3QucHJvdG90eXBlLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGU9dC5wcm90b3R5cGUuYjt0LnByb3RvdHlwZS5wcm9jZXNzU3R5bGVzPXQucHJvdG90eXBlLmE7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LnByb3RvdHlwZSx7dHJhbnNmb3JtQ2FsbGJhY2s6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1hfX0sdmFsaWRhdGVDYWxsYmFjazp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXt2YXIgYj0hMTtxfHwoYj0hMCk7cT1hO2ImJnUodGhpcyl9fX0pO3ZhciB2PW5ldyB0O3dpbmRvdy5TaGFkeUNTU3x8KHdpbmRvdy5TaGFkeUNTUz17cHJlcGFyZVRlbXBsYXRlOmZ1bmN0aW9uKCl7fSxzdHlsZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXt2LmEoKTtrKGEsYil9LHN0eWxlRWxlbWVudDpmdW5jdGlvbigpe3YuYSgpfSxzdHlsZURvY3VtZW50OmZ1bmN0aW9uKGEpe3YuYSgpO2soZG9jdW1lbnQuYm9keSxhKX0sZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGE9d2luZG93LmdldENvbXB1dGVkU3R5bGUoYSkuZ2V0UHJvcGVydHlWYWx1ZShiKSk/YS50cmltKCk6XCJcIn0sbmF0aXZlQ3NzOmgsbmF0aXZlU2hhZG93OmN9KTt3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2U9djt9KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tc3R5bGUtaW50ZXJmYWNlLm1pbi5qcy5tYXBcbiIsIlxucmVxdWlyZSgnLi9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLm1pbi5qcycpO1xuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uLy4uL3NoYWR5Y3NzL2N1c3RvbS1zdHlsZS1pbnRlcmZhY2UuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL3N0eWxlLWdhdGhlci5odG1sXCI+XG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgY29uc3QgYXR0ciA9ICdpbmNsdWRlJztcblxuICBjb25zdCBDdXN0b21TdHlsZUludGVyZmFjZSA9IHdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVsZW1lbnQgZm9yIGRlZmluaW5nIHN0eWxlcyBpbiB0aGUgbWFpbiBkb2N1bWVudCB0aGF0IGNhbiB0YWtlXG4gICAqIGFkdmFudGFnZSBvZiBbc2hhZHkgRE9NXShodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWNzcykgc2hpbXNcbiAgICogZm9yIHN0eWxlIGVuY2Fwc3VsYXRpb24sIGN1c3RvbSBwcm9wZXJ0aWVzLCBhbmQgY3VzdG9tIG1peGlucy5cbiAgICpcbiAgICogLSBEb2N1bWVudCBzdHlsZXMgZGVmaW5lZCBpbiBhIGA8Y3VzdG9tLXN0eWxlPmAgYXJlIHNoaW1tZWQgdG8gZW5zdXJlIHRoZXlcbiAgICogICBkbyBub3QgbGVhayBpbnRvIGxvY2FsIERPTSB3aGVuIHJ1bm5pbmcgb24gYnJvd3NlcnMgd2l0aG91dCBuYXRpdmVcbiAgICogICBTaGFkb3cgRE9NLlxuICAgKiAtIEN1c3RvbSBwcm9wZXJ0aWVzIGNhbiBiZSBkZWZpbmVkIGluIGEgYDxjdXN0b20tc3R5bGU+YC4gVXNlIHRoZSBgaHRtbGAgc2VsZWN0b3JcbiAgICogICB0byBkZWZpbmUgY3VzdG9tIHByb3BlcnRpZXMgdGhhdCBhcHBseSB0byBhbGwgY3VzdG9tIGVsZW1lbnRzLlxuICAgKiAtIEN1c3RvbSBtaXhpbnMgY2FuIGJlIGRlZmluZWQgaW4gYSBgPGN1c3RvbS1zdHlsZT5gLCBpZiB5b3UgaW1wb3J0IHRoZSBvcHRpb25hbFxuICAgKiAgIFthcHBseSBzaGltXShodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWNzcyNhYm91dC1hcHBseXNoaW0pXG4gICAqICAgKGBzaGFkeWNzcy9hcHBseS1zaGltLmh0bWxgKS5cbiAgICpcbiAgICogVG8gdXNlOlxuICAgKlxuICAgKiAtIEltcG9ydCBgY3VzdG9tLXN0eWxlLmh0bWxgLlxuICAgKiAtIFBsYWNlIGEgYDxjdXN0b20tc3R5bGU+YCBlbGVtZW50IGluIHRoZSBtYWluIGRvY3VtZW50LCB3cmFwcGluZyBhbiBpbmxpbmUgYDxzdHlsZT5gIHRhZyB0aGF0XG4gICAqICAgY29udGFpbnMgdGhlIENTUyBydWxlcyB5b3Ugd2FudCB0byBzaGltLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8IS0tIGltcG9ydCBhcHBseSBzaGltLS1vbmx5IHJlcXVpcmVkIGlmIHVzaW5nIG1peGlucyAtLT5cbiAgICogPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImJvd2VyX2NvbXBvbmVudHMvc2hhZHljc3MvYXBwbHktc2hpbS5odG1sXCI+XG4gICAqIDwhLS0gaW1wb3J0IGN1c3RvbS1zdHlsZSBlbGVtZW50IC0tPlxuICAgKiA8bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYm93ZXJfY29tcG9uZW50cy9wb2x5bWVyL2xpYi9lbGVtZW50cy9jdXN0b20tc3R5bGUuaHRtbFwiPlxuICAgKlxuICAgKiA8Y3VzdG9tLXN0eWxlPlxuICAgKiAgIDxzdHlsZT5cbiAgICogICAgIGh0bWwge1xuICAgKiAgICAgICAtLWN1c3RvbS1jb2xvcjogYmx1ZTtcbiAgICogICAgICAgLS1jdXN0b20tbWl4aW46IHtcbiAgICogICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICogICAgICAgICBjb2xvcjogcmVkO1xuICAgKiAgICAgICB9O1xuICAgKiAgICAgfVxuICAgKiAgIDwvc3R5bGU+XG4gICAqIDwvY3VzdG9tLXN0eWxlPlxuICAgKiBgYGBcbiAgICpcbiAgICogQGN1c3RvbUVsZW1lbnRcbiAgICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgZm9yIGRlZmluaW5nIHN0eWxlcyBpbiB0aGUgbWFpbiBkb2N1bWVudCB0aGF0IGNhblxuICAgKiAgIHRha2UgYWR2YW50YWdlIG9mIFBvbHltZXIncyBzdHlsZSBzY29waW5nIGFuZCBjdXN0b20gcHJvcGVydGllcyBzaGltcy5cbiAgICovXG4gIGNsYXNzIEN1c3RvbVN0eWxlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX3N0eWxlID0gbnVsbDtcbiAgICAgIEN1c3RvbVN0eWxlSW50ZXJmYWNlLmFkZEN1c3RvbVN0eWxlKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaWdodC1ET00gYDxzdHlsZT5gIGNoaWxkIHRoaXMgZWxlbWVudCB3cmFwcy4gIFVwb24gZmlyc3RcbiAgICAgKiBjYWxsIGFueSBzdHlsZSBtb2R1bGVzIHJlZmVyZW5jZWQgdmlhIHRoZSBgaW5jbHVkZWAgYXR0cmlidXRlIHdpbGwgYmVcbiAgICAgKiBjb25jYXRlbmF0ZWQgdG8gdGhpcyBlbGVtZW50J3MgYDxzdHlsZT5gLlxuICAgICAqXG4gICAgICogQHJldHVybiB7SFRNTFN0eWxlRWxlbWVudH0gVGhpcyBlbGVtZW50J3MgbGlnaHQtRE9NIGA8c3R5bGU+YFxuICAgICAqL1xuICAgIGdldFN0eWxlKCkge1xuICAgICAgaWYgKHRoaXMuX3N0eWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqLyh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpO1xuICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICBjb25zdCBpbmNsdWRlID0gc3R5bGUuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IFBvbHltZXIuU3R5bGVHYXRoZXIuY3NzRnJvbU1vZHVsZXMoaW5jbHVkZSkgKyBzdHlsZS50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIC8qXG4gICAgICBIVE1MIEltcG9ydHMgc3R5bGluZyB0aGUgbWFpbiBkb2N1bWVudCBhcmUgZGVwcmVjYXRlZCBpbiBDaHJvbWVcbiAgICAgIGh0dHBzOi8vY3JidWcuY29tLzUyMzk1MlxuXG4gICAgICBJZiB0aGlzIGVsZW1lbnQgaXMgbm90IGluIHRoZSBtYWluIGRvY3VtZW50LCB0aGVuIGl0IG11c3QgYmUgaW4gYW4gSFRNTCBJbXBvcnQgZG9jdW1lbnQuXG4gICAgICBJbiB0aGF0IGNhc2UsIG1vdmUgdGhlIGN1c3RvbSBzdHlsZSB0byB0aGUgbWFpbiBkb2N1bWVudC5cblxuICAgICAgVGhlIG9yZGVyaW5nIG9mIGA8Y3VzdG9tLXN0eWxlPmAgc2hvdWxkIHN0YXkgdGhlIHNhbWUgYXMgd2hlbiBsb2FkZWQgYnkgSFRNTCBJbXBvcnRzLCBidXQgdGhlcmUgbWF5IGJlIG9kZFxuICAgICAgY2FzZXMgb2Ygb3JkZXJpbmcgdy5yLnQgdGhlIG1haW4gZG9jdW1lbnQgc3R5bGVzLlxuICAgICAgKi9cbiAgICAgIGlmICh0aGlzLm93bmVyRG9jdW1lbnQgIT09IHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdXN0b20tc3R5bGUnLCBDdXN0b21TdHlsZSk7XG4gIFBvbHltZXIuQ3VzdG9tU3R5bGUgPSBDdXN0b21TdHlsZTtcbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXItZWxlbWVudC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvbWl4aW4uaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2FycmF5LXNwbGljZS5odG1sXCI+XG5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogRWxlbWVudCBtaXhpbiBmb3IgcmVjb3JkaW5nIGR5bmFtaWMgYXNzb2NpYXRpb25zIGJldHdlZW4gaXRlbSBwYXRocyBpbiBhXG4gICAqIG1hc3RlciBgaXRlbXNgIGFycmF5IGFuZCBhIGBzZWxlY3RlZGAgYXJyYXkgc3VjaCB0aGF0IHBhdGggY2hhbmdlcyB0byB0aGVcbiAgICogbWFzdGVyIGFycmF5IChhdCB0aGUgaG9zdCkgZWxlbWVudCBvciBlbHNld2hlcmUgdmlhIGRhdGEtYmluZGluZykgYXJlXG4gICAqIGNvcnJlY3RseSBwcm9wYWdhdGVkIHRvIGl0ZW1zIGluIHRoZSBzZWxlY3RlZCBhcnJheSBhbmQgdmljZS12ZXJzYS5cbiAgICpcbiAgICogVGhlIGBpdGVtc2AgcHJvcGVydHkgYWNjZXB0cyBhbiBhcnJheSBvZiB1c2VyIGRhdGEsIGFuZCB2aWEgdGhlXG4gICAqIGBzZWxlY3QoaXRlbSlgIGFuZCBgZGVzZWxlY3QoaXRlbSlgIEFQSSwgdXBkYXRlcyB0aGUgYHNlbGVjdGVkYCBwcm9wZXJ0eVxuICAgKiB3aGljaCBtYXkgYmUgYm91bmQgdG8gb3RoZXIgcGFydHMgb2YgdGhlIGFwcGxpY2F0aW9uLCBhbmQgYW55IGNoYW5nZXMgdG9cbiAgICogc3ViLWZpZWxkcyBvZiBgc2VsZWN0ZWRgIGl0ZW0ocykgd2lsbCBiZSBrZXB0IGluIHN5bmMgd2l0aCBpdGVtcyBpbiB0aGVcbiAgICogYGl0ZW1zYCBhcnJheS4gIFdoZW4gYG11bHRpYCBpcyBmYWxzZSwgYHNlbGVjdGVkYCBpcyBhIHByb3BlcnR5XG4gICAqIHJlcHJlc2VudGluZyB0aGUgbGFzdCBzZWxlY3RlZCBpdGVtLiAgV2hlbiBgbXVsdGlgIGlzIHRydWUsIGBzZWxlY3RlZGBcbiAgICogaXMgYW4gYXJyYXkgb2YgbXVsdGlwbHkgc2VsZWN0ZWQgaXRlbXMuXG4gICAqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5FbGVtZW50TWl4aW5cbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgRWxlbWVudCBtaXhpbiBmb3IgcmVjb3JkaW5nIGR5bmFtaWMgYXNzb2NpYXRpb25zIGJldHdlZW4gaXRlbSBwYXRocyBpbiBhXG4gICAqIG1hc3RlciBgaXRlbXNgIGFycmF5IGFuZCBhIGBzZWxlY3RlZGAgYXJyYXlcbiAgICovXG4gIGxldCBBcnJheVNlbGVjdG9yTWl4aW4gPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyB7c3VwZXJDbGFzc31cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gICAgICovXG4gICAgbGV0IGVsZW1lbnRCYXNlID0gUG9seW1lci5FbGVtZW50TWl4aW4oc3VwZXJDbGFzcyk7XG5cbiAgICAvKipcbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBtaXhpbkNsYXNzXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfQXJyYXlTZWxlY3Rvck1peGlufVxuICAgICAqIEB1bnJlc3RyaWN0ZWRcbiAgICAgKi9cbiAgICBjbGFzcyBBcnJheVNlbGVjdG9yTWl4aW4gZXh0ZW5kcyBlbGVtZW50QmFzZSB7XG5cbiAgICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyBpdGVtcyBmcm9tIHdoaWNoIHNlbGVjdGlvbiB3aWxsIGJlIG1hZGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBXaGVuIGB0cnVlYCwgbXVsdGlwbGUgaXRlbXMgbWF5IGJlIHNlbGVjdGVkIGF0IG9uY2UgKGluIHRoaXMgY2FzZSxcbiAgICAgICAgICAgKiBgc2VsZWN0ZWRgIGlzIGFuIGFycmF5IG9mIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtcykuICBXaGVuIGBmYWxzZWAsXG4gICAgICAgICAgICogb25seSBvbmUgaXRlbSBtYXkgYmUgc2VsZWN0ZWQgYXQgYSB0aW1lLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG11bHRpOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgdHJ1ZSwgdGhpcyBpcyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGFueSBzZWxlY3RlZC5cbiAgICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgZmFsc2UsIHRoaXMgaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtLCBvciBgbnVsbGBcbiAgICAgICAgICAgKiBpZiBubyBpdGVtIGlzIHNlbGVjdGVkLlxuICAgICAgICAgICAqIEB0eXBlIHs/KE9iamVjdHxBcnJheTwhT2JqZWN0Pil9XG4gICAgICAgICAgICovXG4gICAgICAgICAgc2VsZWN0ZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgICAgIG5vdGlmeTogdHJ1ZVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBXaGVuIGBtdWx0aWAgaXMgZmFsc2UsIHRoaXMgaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtLCBvciBgbnVsbGBcbiAgICAgICAgICAgKiBpZiBubyBpdGVtIGlzIHNlbGVjdGVkLlxuICAgICAgICAgICAqIEB0eXBlIHs/T2JqZWN0fVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNlbGVjdGVkSXRlbToge1xuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgbm90aWZ5OiB0cnVlXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFdoZW4gYHRydWVgLCBjYWxsaW5nIGBzZWxlY3RgIG9uIGFuIGl0ZW0gdGhhdCBpcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICAgICAgICogd2lsbCBkZXNlbGVjdCB0aGUgaXRlbS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0b2dnbGU6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICAgIHJldHVybiBbJ19fdXBkYXRlU2VsZWN0aW9uKG11bHRpLCBpdGVtcy4qKSddO1xuICAgICAgfVxuXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fX2xhc3RJdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX19sYXN0TXVsdGkgPSBudWxsO1xuICAgICAgICB0aGlzLl9fc2VsZWN0ZWRNYXAgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBfX3VwZGF0ZVNlbGVjdGlvbihtdWx0aSwgaXRlbXNJbmZvKSB7XG4gICAgICAgIGxldCBwYXRoID0gaXRlbXNJbmZvLnBhdGg7XG4gICAgICAgIGlmIChwYXRoID09ICdpdGVtcycpIHtcbiAgICAgICAgICAvLyBDYXNlIDEgLSBpdGVtcyBhcnJheSBjaGFuZ2VkLCBzbyBkaWZmIGFnYWluc3QgcHJldmlvdXMgYXJyYXkgYW5kXG4gICAgICAgICAgLy8gZGVzZWxlY3QgYW55IHJlbW92ZWQgaXRlbXMgYW5kIGFkanVzdCBzZWxlY3RlZCBpbmRpY2VzXG4gICAgICAgICAgbGV0IG5ld0l0ZW1zID0gaXRlbXNJbmZvLmJhc2UgfHwgW107XG4gICAgICAgICAgbGV0IGxhc3RJdGVtcyA9IHRoaXMuX19sYXN0SXRlbXM7XG4gICAgICAgICAgbGV0IGxhc3RNdWx0aSA9IHRoaXMuX19sYXN0TXVsdGk7XG4gICAgICAgICAgaWYgKG11bHRpICE9PSBsYXN0TXVsdGkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxhc3RJdGVtcykge1xuICAgICAgICAgICAgbGV0IHNwbGljZXMgPSBQb2x5bWVyLkFycmF5U3BsaWNlLmNhbGN1bGF0ZVNwbGljZXMobmV3SXRlbXMsIGxhc3RJdGVtcyk7XG4gICAgICAgICAgICB0aGlzLl9fYXBwbHlTcGxpY2VzKHNwbGljZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9fbGFzdEl0ZW1zID0gbmV3SXRlbXM7XG4gICAgICAgICAgdGhpcy5fX2xhc3RNdWx0aSA9IG11bHRpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW1zSW5mby5wYXRoID09ICdpdGVtcy5zcGxpY2VzJykge1xuICAgICAgICAgIC8vIENhc2UgMiAtIGdvdCBzcGVjaWZpYyBzcGxpY2UgaW5mb3JtYXRpb24gZGVzY3JpYmluZyB0aGUgYXJyYXkgbXV0YXRpb246XG4gICAgICAgICAgLy8gZGVzZWxlY3QgYW55IHJlbW92ZWQgaXRlbXMgYW5kIGFkanVzdCBzZWxlY3RlZCBpbmRpY2VzXG4gICAgICAgICAgdGhpcy5fX2FwcGx5U3BsaWNlcyhpdGVtc0luZm8udmFsdWUuaW5kZXhTcGxpY2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDYXNlIDMgLSBhbiBhcnJheSBlbGVtZW50IHdhcyBjaGFuZ2VkLCBzbyBkZXNlbGVjdCB0aGUgcHJldmlvdXNcbiAgICAgICAgICAvLyBpdGVtIGZvciB0aGF0IGluZGV4IGlmIGl0IHdhcyBwcmV2aW91c2x5IHNlbGVjdGVkXG4gICAgICAgICAgbGV0IHBhcnQgPSBwYXRoLnNsaWNlKCdpdGVtcy4nLmxlbmd0aCk7XG4gICAgICAgICAgbGV0IGlkeCA9IHBhcnNlSW50KHBhcnQsIDEwKTtcbiAgICAgICAgICBpZiAoKHBhcnQuaW5kZXhPZignLicpIDwgMCkgJiYgcGFydCA9PSBpZHgpIHtcbiAgICAgICAgICAgIHRoaXMuX19kZXNlbGVjdENoYW5nZWRJZHgoaWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX19hcHBseVNwbGljZXMoc3BsaWNlcykge1xuICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLl9fc2VsZWN0ZWRNYXA7XG4gICAgICAgIC8vIEFkanVzdCBzZWxlY3RlZCBpbmRpY2VzIGFuZCBtYXJrIHJlbW92YWxzXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxzcGxpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHMgPSBzcGxpY2VzW2ldO1xuICAgICAgICAgIHNlbGVjdGVkLmZvckVhY2goKGlkeCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA8IHMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gbm8gY2hhbmdlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlkeCA+PSBzLmluZGV4ICsgcy5yZW1vdmVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBhZGp1c3QgaW5kZXhcbiAgICAgICAgICAgICAgc2VsZWN0ZWQuc2V0KGl0ZW0sIGlkeCArIHMuYWRkZWRDb3VudCAtIHMucmVtb3ZlZC5sZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIGluZGV4XG4gICAgICAgICAgICAgIHNlbGVjdGVkLnNldChpdGVtLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHMuYWRkZWRDb3VudDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgaWR4ID0gcy5pbmRleCArIGo7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzKHRoaXMuaXRlbXNbaWR4XSkpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWQuc2V0KHRoaXMuaXRlbXNbaWR4XSwgaWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGxpbmtlZCBwYXRoc1xuICAgICAgICB0aGlzLl9fdXBkYXRlTGlua3MoKTtcbiAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGVkIGl0ZW1zIHRoYXQgd2VyZSByZW1vdmVkIGZyb20gdGhlIGl0ZW1zIGFycmF5XG4gICAgICAgIGxldCBzaWR4ID0gMDtcbiAgICAgICAgc2VsZWN0ZWQuZm9yRWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3BsaWNlKCdzZWxlY3RlZCcsIHNpZHgsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGVjdGVkLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2lkeCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF9fdXBkYXRlTGlua3MoKSB7XG4gICAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMubXVsdGkpIHtcbiAgICAgICAgICBsZXQgc2lkeCA9IDA7XG4gICAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmZvckVhY2goaWR4ID0+IHtcbiAgICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgICB0aGlzLmxpbmtQYXRocygnaXRlbXMuJyArIGlkeCwgJ3NlbGVjdGVkLicgKyBzaWR4KyspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5mb3JFYWNoKGlkeCA9PiB7XG4gICAgICAgICAgICB0aGlzLmxpbmtQYXRocygnc2VsZWN0ZWQnLCAnaXRlbXMuJyArIGlkeCk7XG4gICAgICAgICAgICB0aGlzLmxpbmtQYXRocygnc2VsZWN0ZWRJdGVtJywgJ2l0ZW1zLicgKyBpZHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2xlYXJzIHRoZSBzZWxlY3Rpb24gc3RhdGUuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgLy8gVW5iaW5kIHByZXZpb3VzIHNlbGVjdGlvblxuICAgICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0ge307XG4gICAgICAgIC8vIFRoZSBzZWxlY3RlZCBtYXAgc3RvcmVzIDMgcGllY2VzIG9mIGluZm9ybWF0aW9uOlxuICAgICAgICAvLyBrZXk6IGl0ZW1zIGFycmF5IG9iamVjdFxuICAgICAgICAvLyB2YWx1ZTogaXRlbXMgYXJyYXkgaW5kZXhcbiAgICAgICAgLy8gb3JkZXI6IHNlbGVjdGVkIGFycmF5IGluZGV4XG4gICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBzZWxlY3Rpb25cbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMubXVsdGkgPyBbXSA6IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGl0ZW0gaXMgY3VycmVudGx5IHNlbGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byB0ZXN0XG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBpdGVtIGlzIHNlbGVjdGVkXG4gICAgICAgKi9cbiAgICAgIGlzU2VsZWN0ZWQoaXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX3NlbGVjdGVkTWFwLmhhcyhpdGVtKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGl0ZW0gaXMgY3VycmVudGx5IHNlbGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHRlc3RcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGl0ZW0gaXMgc2VsZWN0ZWRcbiAgICAgICAqL1xuICAgICAgaXNJbmRleFNlbGVjdGVkKGlkeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NlbGVjdGVkKHRoaXMuaXRlbXNbaWR4XSk7XG4gICAgICB9XG5cbiAgICAgIF9fZGVzZWxlY3RDaGFuZ2VkSWR4KGlkeCkge1xuICAgICAgICBsZXQgc2lkeCA9IHRoaXMuX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4KGlkeCk7XG4gICAgICAgIGlmIChzaWR4ID49IDApIHtcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmZvckVhY2goKGlkeCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKHNpZHggPT0gaSsrKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3QoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4KGlkeCkge1xuICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzWydpdGVtcy4nICsgaWR4XTtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNlbGVjdGVkLnNsaWNlKCdzZWxlY3RlZC4nLmxlbmd0aCksIDEwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlc2VsZWN0cyB0aGUgZ2l2ZW4gaXRlbSBpZiBpdCBpcyBhbHJlYWR5IHNlbGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBJdGVtIGZyb20gYGl0ZW1zYCBhcnJheSB0byBkZXNlbGVjdFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgZGVzZWxlY3QoaXRlbSkge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fX3NlbGVjdGVkTWFwLmdldChpdGVtKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgICBsZXQgc2lkeDtcbiAgICAgICAgICBpZiAodGhpcy5tdWx0aSkge1xuICAgICAgICAgICAgc2lkeCA9IHRoaXMuX19zZWxlY3RlZEluZGV4Rm9ySXRlbUluZGV4KGlkeCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX191cGRhdGVMaW5rcygpO1xuICAgICAgICAgIGlmICh0aGlzLm11bHRpKSB7XG4gICAgICAgICAgICB0aGlzLnNwbGljZSgnc2VsZWN0ZWQnLCBzaWR4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXNlbGVjdHMgdGhlIGdpdmVuIGluZGV4IGlmIGl0IGlzIGFscmVhZHkgc2VsZWN0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGlkeCBJbmRleCBmcm9tIGBpdGVtc2AgYXJyYXkgdG8gZGVzZWxlY3RcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGRlc2VsZWN0SW5kZXgoaWR4KSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3QodGhpcy5pdGVtc1tpZHhdKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZWxlY3RzIHRoZSBnaXZlbiBpdGVtLiAgV2hlbiBgdG9nZ2xlYCBpcyB0cnVlLCB0aGlzIHdpbGwgYXV0b21hdGljYWxseVxuICAgICAgICogZGVzZWxlY3QgdGhlIGl0ZW0gaWYgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IGl0ZW0gSXRlbSBmcm9tIGBpdGVtc2AgYXJyYXkgdG8gc2VsZWN0XG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBzZWxlY3QoaXRlbSkge1xuICAgICAgICB0aGlzLnNlbGVjdEluZGV4KHRoaXMuaXRlbXMuaW5kZXhPZihpdGVtKSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2VsZWN0cyB0aGUgZ2l2ZW4gaW5kZXguICBXaGVuIGB0b2dnbGVgIGlzIHRydWUsIHRoaXMgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICAgKiBkZXNlbGVjdCB0aGUgaXRlbSBpZiBhbHJlYWR5IHNlbGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHggSW5kZXggZnJvbSBgaXRlbXNgIGFycmF5IHRvIHNlbGVjdFxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgc2VsZWN0SW5kZXgoaWR4KSB7XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy5pdGVtc1tpZHhdO1xuICAgICAgICBpZiAoIXRoaXMuaXNTZWxlY3RlZChpdGVtKSkge1xuICAgICAgICAgIGlmICghdGhpcy5tdWx0aSkge1xuICAgICAgICAgICAgdGhpcy5fX3NlbGVjdGVkTWFwLmNsZWFyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19zZWxlY3RlZE1hcC5zZXQoaXRlbSwgaWR4KTtcbiAgICAgICAgICB0aGlzLl9fdXBkYXRlTGlua3MoKTtcbiAgICAgICAgICBpZiAodGhpcy5tdWx0aSkge1xuICAgICAgICAgICAgdGhpcy5wdXNoKCdzZWxlY3RlZCcsIGl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSkge1xuICAgICAgICAgIHRoaXMuZGVzZWxlY3RJbmRleChpZHgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXlTZWxlY3Rvck1peGluO1xuXG4gIH0pO1xuXG4gIC8vIGV4cG9ydCBtaXhpblxuICBQb2x5bWVyLkFycmF5U2VsZWN0b3JNaXhpbiA9IEFycmF5U2VsZWN0b3JNaXhpbjtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtQb2x5bWVyLkVsZW1lbnR9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0FycmF5U2VsZWN0b3JNaXhpbn1cbiAgICovXG4gIGxldCBiYXNlQXJyYXlTZWxlY3RvciA9IEFycmF5U2VsZWN0b3JNaXhpbihQb2x5bWVyLkVsZW1lbnQpO1xuXG4gIC8qKlxuICAgKiBFbGVtZW50IGltcGxlbWVudGluZyB0aGUgYFBvbHltZXIuQXJyYXlTZWxlY3RvcmAgbWl4aW4sIHdoaWNoIHJlY29yZHNcbiAgICogZHluYW1pYyBhc3NvY2lhdGlvbnMgYmV0d2VlbiBpdGVtIHBhdGhzIGluIGEgbWFzdGVyIGBpdGVtc2AgYXJyYXkgYW5kIGFcbiAgICogYHNlbGVjdGVkYCBhcnJheSBzdWNoIHRoYXQgcGF0aCBjaGFuZ2VzIHRvIHRoZSBtYXN0ZXIgYXJyYXkgKGF0IHRoZSBob3N0KVxuICAgKiBlbGVtZW50IG9yIGVsc2V3aGVyZSB2aWEgZGF0YS1iaW5kaW5nKSBhcmUgY29ycmVjdGx5IHByb3BhZ2F0ZWQgdG8gaXRlbXNcbiAgICogaW4gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCB2aWNlLXZlcnNhLlxuICAgKlxuICAgKiBUaGUgYGl0ZW1zYCBwcm9wZXJ0eSBhY2NlcHRzIGFuIGFycmF5IG9mIHVzZXIgZGF0YSwgYW5kIHZpYSB0aGVcbiAgICogYHNlbGVjdChpdGVtKWAgYW5kIGBkZXNlbGVjdChpdGVtKWAgQVBJLCB1cGRhdGVzIHRoZSBgc2VsZWN0ZWRgIHByb3BlcnR5XG4gICAqIHdoaWNoIG1heSBiZSBib3VuZCB0byBvdGhlciBwYXJ0cyBvZiB0aGUgYXBwbGljYXRpb24sIGFuZCBhbnkgY2hhbmdlcyB0b1xuICAgKiBzdWItZmllbGRzIG9mIGBzZWxlY3RlZGAgaXRlbShzKSB3aWxsIGJlIGtlcHQgaW4gc3luYyB3aXRoIGl0ZW1zIGluIHRoZVxuICAgKiBgaXRlbXNgIGFycmF5LiAgV2hlbiBgbXVsdGlgIGlzIGZhbHNlLCBgc2VsZWN0ZWRgIGlzIGEgcHJvcGVydHlcbiAgICogcmVwcmVzZW50aW5nIHRoZSBsYXN0IHNlbGVjdGVkIGl0ZW0uICBXaGVuIGBtdWx0aWAgaXMgdHJ1ZSwgYHNlbGVjdGVkYFxuICAgKiBpcyBhbiBhcnJheSBvZiBtdWx0aXBseSBzZWxlY3RlZCBpdGVtcy5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8ZG9tLW1vZHVsZSBpZD1cImVtcGxveWVlLWxpc3RcIj5cbiAgICpcbiAgICogICA8dGVtcGxhdGU+XG4gICAqXG4gICAqICAgICA8ZGl2PiBFbXBsb3llZSBsaXN0OiA8L2Rpdj5cbiAgICogICAgIDxkb20tcmVwZWF0IGlkPVwiZW1wbG95ZWVMaXN0XCIgaXRlbXM9XCJ7e2VtcGxveWVlc319XCI+XG4gICAqICAgICAgIDx0ZW1wbGF0ZT5cbiAgICogICAgICAgICA8ZGl2PkZpcnN0IG5hbWU6IDxzcGFuPnt7aXRlbS5maXJzdH19PC9zcGFuPjwvZGl2PlxuICAgKiAgICAgICAgICAgPGRpdj5MYXN0IG5hbWU6IDxzcGFuPnt7aXRlbS5sYXN0fX08L3NwYW4+PC9kaXY+XG4gICAqICAgICAgICAgICA8YnV0dG9uIG9uLWNsaWNrPVwidG9nZ2xlU2VsZWN0aW9uXCI+U2VsZWN0PC9idXR0b24+XG4gICAqICAgICAgIDwvdGVtcGxhdGU+XG4gICAqICAgICA8L2RvbS1yZXBlYXQ+XG4gICAqXG4gICAqICAgICA8YXJyYXktc2VsZWN0b3IgaWQ9XCJzZWxlY3RvclwiIGl0ZW1zPVwie3tlbXBsb3llZXN9fVwiIHNlbGVjdGVkPVwie3tzZWxlY3RlZH19XCIgbXVsdGkgdG9nZ2xlPjwvYXJyYXktc2VsZWN0b3I+XG4gICAqXG4gICAqICAgICA8ZGl2PiBTZWxlY3RlZCBlbXBsb3llZXM6IDwvZGl2PlxuICAgKiAgICAgPGRvbS1yZXBlYXQgaXRlbXM9XCJ7e3NlbGVjdGVkfX1cIj5cbiAgICogICAgICAgPHRlbXBsYXRlPlxuICAgKiAgICAgICAgIDxkaXY+Rmlyc3QgbmFtZTogPHNwYW4+e3tpdGVtLmZpcnN0fX08L3NwYW4+PC9kaXY+XG4gICAqICAgICAgICAgPGRpdj5MYXN0IG5hbWU6IDxzcGFuPnt7aXRlbS5sYXN0fX08L3NwYW4+PC9kaXY+XG4gICAqICAgICAgIDwvdGVtcGxhdGU+XG4gICAqICAgICA8L2RvbS1yZXBlYXQ+XG4gICAqXG4gICAqICAgPC90ZW1wbGF0ZT5cbiAgICpcbiAgICogPC9kb20tbW9kdWxlPlxuICAgKiBgYGBcbiAgICpcbiAgICogYGBganNcbiAgICpjbGFzcyBFbXBsb3llZUxpc3QgZXh0ZW5kcyBQb2x5bWVyLkVsZW1lbnQge1xuICAgKiAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICdlbXBsb3llZS1saXN0JzsgfVxuICAgKiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgKiAgICByZXR1cm4ge1xuICAgKiAgICAgIGVtcGxveWVlczoge1xuICAgKiAgICAgICAgdmFsdWUoKSB7XG4gICAqICAgICAgICAgIHJldHVybiBbXG4gICAqICAgICAgICAgICAge2ZpcnN0OiAnQm9iJywgbGFzdDogJ1NtaXRoJ30sXG4gICAqICAgICAgICAgICAge2ZpcnN0OiAnU2FsbHknLCBsYXN0OiAnSm9obnNvbid9LFxuICAgKiAgICAgICAgICAgIC4uLlxuICAgKiAgICAgICAgICBdO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfTtcbiAgICogIH1cbiAgICogIHRvZ2dsZVNlbGVjdGlvbihlKSB7XG4gICAqICAgIGxldCBpdGVtID0gdGhpcy4kLmVtcGxveWVlTGlzdC5pdGVtRm9yRWxlbWVudChlLnRhcmdldCk7XG4gICAqICAgIHRoaXMuJC5zZWxlY3Rvci5zZWxlY3QoaXRlbSk7XG4gICAqICB9XG4gICAqfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBvbHltZXJcbiAgICogQGN1c3RvbUVsZW1lbnRcbiAgICogQGV4dGVuZHMge2Jhc2VBcnJheVNlbGVjdG9yfVxuICAgKiBAYXBwbGllc01peGluIFBvbHltZXIuQXJyYXlTZWxlY3Rvck1peGluXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRoYXQgbGlua3MgcGF0aHMgYmV0d2VlbiBhbiBpbnB1dCBgaXRlbXNgIGFycmF5IGFuZFxuICAgKiAgIGFuIG91dHB1dCBgc2VsZWN0ZWRgIGl0ZW0gb3IgYXJyYXkgYmFzZWQgb24gY2FsbHMgdG8gaXRzIHNlbGVjdGlvbiBBUEkuXG4gICAqL1xuICBjbGFzcyBBcnJheVNlbGVjdG9yIGV4dGVuZHMgYmFzZUFycmF5U2VsZWN0b3Ige1xuICAgIC8vIE5vdCBuZWVkZWQgdG8gZmluZCB0ZW1wbGF0ZTsgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgYW5hbHl6ZXJcbiAgICAvLyBjYW4gZmluZCB0aGUgdGFnIG5hbWUgZnJvbSBjdXN0b21FbGVtZW50cy5kZWZpbmUgY2FsbFxuICAgIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnYXJyYXktc2VsZWN0b3InOyB9XG4gIH1cbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKEFycmF5U2VsZWN0b3IuaXMsIEFycmF5U2VsZWN0b3IpO1xuICBQb2x5bWVyLkFycmF5U2VsZWN0b3IgPSBBcnJheVNlbGVjdG9yO1xuXG59KSgpO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXItZWxlbWVudC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvdGVtcGxhdGl6ZS5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvZGVib3VuY2UuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2ZsdXNoLmh0bWxcIj5cblxuPHNjcmlwdD5cblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFRoZSBgPGRvbS1pZj5gIGVsZW1lbnQgd2lsbCBzdGFtcCBhIGxpZ2h0LWRvbSBgPHRlbXBsYXRlPmAgY2hpbGQgd2hlblxuICAgKiB0aGUgYGlmYCBwcm9wZXJ0eSBiZWNvbWVzIHRydXRoeSwgYW5kIHRoZSB0ZW1wbGF0ZSBjYW4gdXNlIFBvbHltZXJcbiAgICogZGF0YS1iaW5kaW5nIGFuZCBkZWNsYXJhdGl2ZSBldmVudCBmZWF0dXJlcyB3aGVuIHVzZWQgaW4gdGhlIGNvbnRleHQgb2ZcbiAgICogYSBQb2x5bWVyIGVsZW1lbnQncyB0ZW1wbGF0ZS5cbiAgICpcbiAgICogV2hlbiBgaWZgIGJlY29tZXMgZmFsc3ksIHRoZSBzdGFtcGVkIGNvbnRlbnQgaXMgaGlkZGVuIGJ1dCBub3RcbiAgICogcmVtb3ZlZCBmcm9tIGRvbS4gV2hlbiBgaWZgIHN1YnNlcXVlbnRseSBiZWNvbWVzIHRydXRoeSBhZ2FpbiwgdGhlIGNvbnRlbnRcbiAgICogaXMgc2ltcGx5IHJlLXNob3duLiBUaGlzIGFwcHJvYWNoIGlzIHVzZWQgZHVlIHRvIGl0cyBmYXZvcmFibGUgcGVyZm9ybWFuY2VcbiAgICogY2hhcmFjdGVyaXN0aWNzOiB0aGUgZXhwZW5zZSBvZiBjcmVhdGluZyB0ZW1wbGF0ZSBjb250ZW50IGlzIHBhaWQgb25seVxuICAgKiBvbmNlIGFuZCBsYXppbHkuXG4gICAqXG4gICAqIFNldCB0aGUgYHJlc3RhbXBgIHByb3BlcnR5IHRvIHRydWUgdG8gZm9yY2UgdGhlIHN0YW1wZWQgY29udGVudCB0byBiZVxuICAgKiBjcmVhdGVkIC8gZGVzdHJveWVkIHdoZW4gdGhlIGBpZmAgY29uZGl0aW9uIGNoYW5nZXMuXG4gICAqXG4gICAqIEBjdXN0b21FbGVtZW50XG4gICAqIEBwb2x5bWVyXG4gICAqIEBleHRlbmRzIFBvbHltZXIuRWxlbWVudFxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCB0aGF0IGNvbmRpdGlvbmFsbHkgc3RhbXBzIGFuZCBoaWRlcyBvciByZW1vdmVzXG4gICAqICAgdGVtcGxhdGUgY29udGVudCBiYXNlZCBvbiBhIGJvb2xlYW4gZmxhZy5cbiAgICovXG4gIGNsYXNzIERvbUlmIGV4dGVuZHMgUG9seW1lci5FbGVtZW50IHtcblxuICAgIC8vIE5vdCBuZWVkZWQgdG8gZmluZCB0ZW1wbGF0ZTsgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgYW5hbHl6ZXJcbiAgICAvLyBjYW4gZmluZCB0aGUgdGFnIG5hbWUgZnJvbSBjdXN0b21FbGVtZW50cy5kZWZpbmUgY2FsbFxuICAgIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAnZG9tLWlmJzsgfVxuXG4gICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcblxuICAgICAgcmV0dXJuIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbmV2ZXIgRE9NIGlzIGFkZGVkIG9yIHJlbW92ZWQvaGlkZGVuIGJ5IHRoaXMgdGVtcGxhdGUgKGJ5XG4gICAgICAgICAqIGRlZmF1bHQsIHJlbmRlcmluZyBvY2N1cnMgbGF6aWx5KS4gIFRvIGZvcmNlIGltbWVkaWF0ZSByZW5kZXJpbmcsIGNhbGxcbiAgICAgICAgICogYHJlbmRlcmAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBkb20tY2hhbmdlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgdGVtcGxhdGUgc2hvdWxkIHN0YW1wLlxuICAgICAgICAgKi9cbiAgICAgICAgaWY6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIG9ic2VydmVyOiAnX19kZWJvdW5jZVJlbmRlcidcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiB0cnVlLCBlbGVtZW50cyB3aWxsIGJlIHJlbW92ZWQgZnJvbSBET00gYW5kIGRpc2NhcmRlZCB3aGVuIGBpZmBcbiAgICAgICAgICogYmVjb21lcyBmYWxzZSBhbmQgcmUtY3JlYXRlZCBhbmQgYWRkZWQgYmFjayB0byB0aGUgRE9NIHdoZW4gYGlmYFxuICAgICAgICAgKiBiZWNvbWVzIHRydWUuICBCeSBkZWZhdWx0LCBzdGFtcGVkIGVsZW1lbnRzIHdpbGwgYmUgaGlkZGVuIGJ1dCBsZWZ0XG4gICAgICAgICAqIGluIHRoZSBET00gd2hlbiBgaWZgIGJlY29tZXMgZmFsc2UsIHdoaWNoIGlzIGdlbmVyYWxseSByZXN1bHRzXG4gICAgICAgICAqIGluIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlc3RhbXA6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIG9ic2VydmVyOiAnX19kZWJvdW5jZVJlbmRlcidcbiAgICAgICAgfVxuXG4gICAgICB9O1xuXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IG51bGw7XG4gICAgICB0aGlzLl9faW52YWxpZFByb3BzID0gbnVsbDtcbiAgICAgIHRoaXMuX19pbnN0YW5jZSA9IG51bGw7XG4gICAgICB0aGlzLl9sYXN0SWYgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19jdG9yID0gbnVsbDtcbiAgICB9XG5cbiAgICBfX2RlYm91bmNlUmVuZGVyKCkge1xuICAgICAgLy8gUmVuZGVyIGlzIGFzeW5jIGZvciAyIHJlYXNvbnM6XG4gICAgICAvLyAxLiBUbyBlbGltaW5hdGUgZG9tIGNyZWF0aW9uIHRyYXNoaW5nIGlmIHVzZXIgY29kZSB0aHJhc2hlcyBgaWZgIGluIHRoZVxuICAgICAgLy8gICAgc2FtZSB0dXJuLiBUaGlzIHdhcyBtb3JlIGNvbW1vbiBpbiAxLnggd2hlcmUgYSBjb21wb3VuZCBjb21wdXRlZFxuICAgICAgLy8gICAgcHJvcGVydHkgY291bGQgcmVzdWx0IGluIHRoZSByZXN1bHQgY2hhbmdpbmcgbXVsdGlwbGUgdGltZXMsIGJ1dCBpc1xuICAgICAgLy8gICAgbWl0aWdhdGVkIHRvIGEgbGFyZ2UgZXh0ZW50IGJ5IGJhdGNoZWQgcHJvcGVydHkgcHJvY2Vzc2luZyBpbiAyLnguXG4gICAgICAvLyAyLiBUbyBhdm9pZCBkb3VibGUgb2JqZWN0IHByb3BhZ2F0aW9uIHdoZW4gYSBiYWcgaW5jbHVkaW5nIHZhbHVlcyBib3VuZFxuICAgICAgLy8gICAgdG8gdGhlIGBpZmAgcHJvcGVydHkgYXMgd2VsbCBhcyBvbmUgb3IgbW9yZSBob3N0UHJvcHMgY291bGQgZW5xdWV1ZVxuICAgICAgLy8gICAgdGhlIDxkb20taWY+IHRvIGZsdXNoIGJlZm9yZSB0aGUgPHRlbXBsYXRlPidzIGhvc3QgcHJvcGVydHlcbiAgICAgIC8vICAgIGZvcndhcmRpbmcuIEluIHRoYXQgc2NlbmFyaW8gY3JlYXRpbmcgYW4gaW5zdGFuY2Ugd291bGQgcmVzdWx0IGluXG4gICAgICAvLyAgICB0aGUgaG9zdCBwcm9wcyBiZWluZyBzZXQgb25jZSwgYW5kIHRoZW4gdGhlIGVucXVldWVkIGNoYW5nZXMgb24gdGhlXG4gICAgICAvLyAgICB0ZW1wbGF0ZSB3b3VsZCBzZXQgcHJvcGVydGllcyBhIHNlY29uZCB0aW1lLCBwb3RlbnRpYWxseSBjYXVzaW5nIGFuXG4gICAgICAvLyAgICBvYmplY3QgdG8gYmUgc2V0IHRvIGFuIGluc3RhbmNlIG1vcmUgdGhhbiBvbmNlLiAgQ3JlYXRpbmcgdGhlXG4gICAgICAvLyAgICBpbnN0YW5jZSBhc3luYyBmcm9tIGZsdXNoaW5nIGRhdGEgZW5zdXJlcyB0aGlzIGRvZXNuJ3QgaGFwcGVuLiBJZlxuICAgICAgLy8gICAgd2Ugd2FudGVkIGEgc3luYyBvcHRpb24gaW4gdGhlIGZ1dHVyZSwgc2ltcGx5IGhhdmluZyA8ZG9tLWlmPiBmbHVzaFxuICAgICAgLy8gICAgKG9yIGNsZWFyKSBpdHMgdGVtcGxhdGUncyBwZW5kaW5nIGhvc3QgcHJvcGVydGllcyBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vICAgIHRoZSBpbnN0YW5jZSB3b3VsZCBhbHNvIGF2b2lkIHRoZSBwcm9ibGVtLlxuICAgICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IFBvbHltZXIuRGVib3VuY2VyLmRlYm91bmNlKFxuICAgICAgICAgICAgdGhpcy5fX3JlbmRlckRlYm91bmNlclxuICAgICAgICAgICwgUG9seW1lci5Bc3luYy5taWNyb1Rhc2tcbiAgICAgICAgICAsICgpID0+IHRoaXMuX19yZW5kZXIoKSk7XG4gICAgICBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIodGhpcy5fX3JlbmRlckRlYm91bmNlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICBpZiAoIXRoaXMucGFyZW50Tm9kZSB8fFxuICAgICAgICAgICh0aGlzLnBhcmVudE5vZGUubm9kZVR5cGUgPT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICYmXG4gICAgICAgICAgICF0aGlzLnBhcmVudE5vZGUuaG9zdCkpIHtcbiAgICAgICAgdGhpcy5fX3RlYXJkb3duSW5zdGFuY2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGlmICh0aGlzLmlmKSB7XG4gICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlcyB0aGUgZWxlbWVudCB0byByZW5kZXIgaXRzIGNvbnRlbnQuIE5vcm1hbGx5IHJlbmRlcmluZyBpc1xuICAgICAqIGFzeW5jaHJvbm91cyB0byBhIHByb3Zva2luZyBjaGFuZ2UuIFRoaXMgaXMgZG9uZSBmb3IgZWZmaWNpZW5jeSBzb1xuICAgICAqIHRoYXQgbXVsdGlwbGUgY2hhbmdlcyB0cmlnZ2VyIG9ubHkgYSBzaW5nbGUgcmVuZGVyLiBUaGUgcmVuZGVyIG1ldGhvZFxuICAgICAqIHNob3VsZCBiZSBjYWxsZWQgaWYsIGZvciBleGFtcGxlLCB0ZW1wbGF0ZSByZW5kZXJpbmcgaXMgcmVxdWlyZWQgdG9cbiAgICAgKiB2YWxpZGF0ZSBhcHBsaWNhdGlvbiBzdGF0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgIFBvbHltZXIuZmx1c2goKTtcbiAgICB9XG5cbiAgICBfX3JlbmRlcigpIHtcbiAgICAgIGlmICh0aGlzLmlmKSB7XG4gICAgICAgIGlmICghdGhpcy5fX2Vuc3VyZUluc3RhbmNlKCkpIHtcbiAgICAgICAgICAvLyBObyB0ZW1wbGF0ZSBmb3VuZCB5ZXRcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2hvd0hpZGVDaGlsZHJlbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnJlc3RhbXApIHtcbiAgICAgICAgdGhpcy5fX3RlYXJkb3duSW5zdGFuY2UoKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5yZXN0YW1wICYmIHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgICB0aGlzLl9zaG93SGlkZUNoaWxkcmVuKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZiAhPSB0aGlzLl9sYXN0SWYpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZG9tLWNoYW5nZScsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fbGFzdElmID0gdGhpcy5pZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX2Vuc3VyZUluc3RhbmNlKCkge1xuICAgICAgbGV0IHBhcmVudE5vZGUgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAvLyBHdWFyZCBhZ2FpbnN0IGVsZW1lbnQgYmVpbmcgZGV0YWNoZWQgd2hpbGUgcmVuZGVyIHdhcyBxdWV1ZWRcbiAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5fX2N0b3IpIHtcbiAgICAgICAgICBsZXQgdGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBjaGlsZExpc3QgY2hhbmdlcyBhbmQgdGVtcGxhdGUgc2hvdWxkIGJlIHRoZXJlIGJ5IHRoZW5cbiAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcmVuZGVyKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkb20taWYgcmVxdWlyZXMgYSA8dGVtcGxhdGU+IGNoaWxkJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLCB7Y2hpbGRMaXN0OiB0cnVlfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19jdG9yID0gUG9seW1lci5UZW1wbGF0aXplLnRlbXBsYXRpemUodGVtcGxhdGUsIHRoaXMsIHtcbiAgICAgICAgICAgIC8vIGRvbS1pZiB0ZW1wbGF0aXplciBpbnN0YW5jZXMgcmVxdWlyZSBgbXV0YWJsZTogdHJ1ZWAsIGFzXG4gICAgICAgICAgICAvLyBgX19zeW5jSG9zdFByb3BlcnRpZXNgIHJlbGllcyBvbiB0aGF0IGJlaGF2aW9yIHRvIHN5bmMgb2JqZWN0c1xuICAgICAgICAgICAgbXV0YWJsZURhdGE6IHRydWUsXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRvIGZvcndhcmRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb2YgcHJvcGVydHlcbiAgICAgICAgICAgICAqIEB0aGlzIHt0aGlzfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3J3YXJkSG9zdFByb3A6IGZ1bmN0aW9uKHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZikge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fX2luc3RhbmNlLmZvcndhcmRIb3N0UHJvcChwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYW4gaW5zdGFuY2UgYnV0IGFyZSBzcXVlbGNoaW5nIGhvc3QgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgIC8vIGZvcndhcmRpbmcgZHVlIHRvIGlmIGJlaW5nIGZhbHNlLCBub3RlIHRoZSBpbnZhbGlkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gcHJvcGVydGllcyBzbyBgX19zeW5jSG9zdFByb3BlcnRpZXNgIGNhbiBzeW5jIHRoZW0gdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgIC8vIHRpbWUgYGlmYCBiZWNvbWVzIHRydWVcbiAgICAgICAgICAgICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHMgPSB0aGlzLl9faW52YWxpZFByb3BzIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9faW52YWxpZFByb3BzW1BvbHltZXIuUGF0aC5yb290KHByb3ApXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9faW5zdGFuY2UpIHtcbiAgICAgICAgICB0aGlzLl9faW5zdGFuY2UgPSBuZXcgdGhpcy5fX2N0b3IoKTtcbiAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLl9faW5zdGFuY2Uucm9vdCwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX3N5bmNIb3N0UHJvcGVydGllcygpO1xuICAgICAgICAgIGxldCBjJCA9IHRoaXMuX19pbnN0YW5jZS5jaGlsZHJlbjtcbiAgICAgICAgICBpZiAoYyQgJiYgYyQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBEZXRlY3QgY2FzZSB3aGVyZSBkb20taWYgd2FzIHJlLWF0dGFjaGVkIGluIG5ldyBwb3NpdGlvblxuICAgICAgICAgICAgbGV0IGxhc3RDaGlsZCA9IHRoaXMucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKGxhc3RDaGlsZCAhPT0gYyRbYyQubGVuZ3RoLTFdKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGk9MCwgbjsgKGk8YyQubGVuZ3RoKSAmJiAobj1jJFtpXSk7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG4sIHRoaXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfX3N5bmNIb3N0UHJvcGVydGllcygpIHtcbiAgICAgIGxldCBwcm9wcyA9IHRoaXMuX19pbnZhbGlkUHJvcHM7XG4gICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXMuX19pbnN0YW5jZS5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3AsIHRoaXMuX19kYXRhSG9zdFtwcm9wXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX2ludmFsaWRQcm9wcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX19pbnN0YW5jZS5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX190ZWFyZG93bkluc3RhbmNlKCkge1xuICAgICAgaWYgKHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgICBsZXQgYyQgPSB0aGlzLl9faW5zdGFuY2UuY2hpbGRyZW47XG4gICAgICAgIGlmIChjJCAmJiBjJC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB1c2UgZmlyc3QgY2hpbGQgcGFyZW50LCBmb3IgY2FzZSB3aGVuIGRvbS1pZiBtYXkgaGF2ZSBiZWVuIGRldGFjaGVkXG4gICAgICAgICAgbGV0IHBhcmVudCA9IGMkWzBdLnBhcmVudE5vZGU7XG4gICAgICAgICAgZm9yIChsZXQgaT0wLCBuOyAoaTxjJC5sZW5ndGgpICYmIChuPWMkW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX19pbnZhbGlkUHJvcHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIG9yIGhpZGVzIHRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSB0b3AgbGV2ZWwgY2hpbGQgZWxlbWVudHMuIEZvclxuICAgICAqIHRleHQgbm9kZXMsIGB0ZXh0Q29udGVudGAgaXMgcmVtb3ZlZCB3aGlsZSBcImhpZGRlblwiIGFuZCByZXBsYWNlZCB3aGVuXG4gICAgICogXCJzaG93bi5cIlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zaG93SGlkZUNoaWxkcmVuKCkge1xuICAgICAgbGV0IGhpZGRlbiA9IHRoaXMuX19oaWRlVGVtcGxhdGVDaGlsZHJlbl9fIHx8ICF0aGlzLmlmO1xuICAgICAgaWYgKHRoaXMuX19pbnN0YW5jZSkge1xuICAgICAgICB0aGlzLl9faW5zdGFuY2UuX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZGVuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZShEb21JZi5pcywgRG9tSWYpO1xuXG4gIFBvbHltZXIuRG9tSWYgPSBEb21JZjtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vcG9seW1lci1lbGVtZW50Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy90ZW1wbGF0aXplLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9kZWJvdW5jZS5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvZmx1c2guaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL21peGlucy9tdXRhYmxlLWRhdGEuaHRtbFwiPlxuXG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgbGV0IFRlbXBsYXRlSW5zdGFuY2VCYXNlID0gUG9seW1lci5UZW1wbGF0ZUluc3RhbmNlQmFzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAgICogQGV4dGVuZHMge1BvbHltZXIuRWxlbWVudH1cbiAgICovXG4gIGNvbnN0IGRvbVJlcGVhdEJhc2UgPSBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGEoUG9seW1lci5FbGVtZW50KTtcblxuICAvKipcbiAgICogVGhlIGA8ZG9tLXJlcGVhdD5gIGVsZW1lbnQgd2lsbCBhdXRvbWF0aWNhbGx5IHN0YW1wIGFuZCBiaW5kcyBvbmUgaW5zdGFuY2VcbiAgICogb2YgdGVtcGxhdGUgY29udGVudCB0byBlYWNoIG9iamVjdCBpbiBhIHVzZXItcHJvdmlkZWQgYXJyYXkuXG4gICAqIGBkb20tcmVwZWF0YCBhY2NlcHRzIGFuIGBpdGVtc2AgcHJvcGVydHksIGFuZCBvbmUgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlXG4gICAqIGlzIHN0YW1wZWQgZm9yIGVhY2ggaXRlbSBpbnRvIHRoZSBET00gYXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBgZG9tLXJlcGVhdGBcbiAgICogZWxlbWVudC4gIFRoZSBgaXRlbWAgcHJvcGVydHkgd2lsbCBiZSBzZXQgb24gZWFjaCBpbnN0YW5jZSdzIGJpbmRpbmdcbiAgICogc2NvcGUsIHRodXMgdGVtcGxhdGVzIHNob3VsZCBiaW5kIHRvIHN1Yi1wcm9wZXJ0aWVzIG9mIGBpdGVtYC5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8ZG9tLW1vZHVsZSBpZD1cImVtcGxveWVlLWxpc3RcIj5cbiAgICpcbiAgICogICA8dGVtcGxhdGU+XG4gICAqXG4gICAqICAgICA8ZGl2PiBFbXBsb3llZSBsaXN0OiA8L2Rpdj5cbiAgICogICAgIDxkb20tcmVwZWF0IGl0ZW1zPVwie3tlbXBsb3llZXN9fVwiPlxuICAgKiAgICAgICA8dGVtcGxhdGU+XG4gICAqICAgICAgICAgPGRpdj5GaXJzdCBuYW1lOiA8c3Bhbj57e2l0ZW0uZmlyc3R9fTwvc3Bhbj48L2Rpdj5cbiAgICogICAgICAgICA8ZGl2Pkxhc3QgbmFtZTogPHNwYW4+e3tpdGVtLmxhc3R9fTwvc3Bhbj48L2Rpdj5cbiAgICogICAgICAgPC90ZW1wbGF0ZT5cbiAgICogICAgIDwvZG9tLXJlcGVhdD5cbiAgICpcbiAgICogICA8L3RlbXBsYXRlPlxuICAgKlxuICAgKiA8L2RvbS1tb2R1bGU+XG4gICAqIGBgYFxuICAgKlxuICAgKiBXaXRoIHRoZSBmb2xsb3dpbmcgY3VzdG9tIGVsZW1lbnQgZGVmaW5pdGlvbjpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3MgRW1wbG95ZWVMaXN0IGV4dGVuZHMgUG9seW1lci5FbGVtZW50IHtcbiAgICogICBzdGF0aWMgZ2V0IGlzKCkgeyByZXR1cm4gJ2VtcGxveWVlLWxpc3QnOyB9XG4gICAqICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgZW1wbG95ZWVzOiB7XG4gICAqICAgICAgICAgdmFsdWUoKSB7XG4gICAqICAgICAgICAgICByZXR1cm4gW1xuICAgKiAgICAgICAgICAgICB7Zmlyc3Q6ICdCb2InLCBsYXN0OiAnU21pdGgnfSxcbiAgICogICAgICAgICAgICAge2ZpcnN0OiAnU2FsbHknLCBsYXN0OiAnSm9obnNvbid9LFxuICAgKiAgICAgICAgICAgICAuLi5cbiAgICogICAgICAgICAgIF07XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9XG4gICAqICAgICB9O1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogTm90aWZpY2F0aW9ucyBmb3IgY2hhbmdlcyB0byBpdGVtcyBzdWItcHJvcGVydGllcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0ZW1wbGF0ZVxuICAgKiBpbnN0YW5jZXMsIHdoaWNoIHdpbGwgdXBkYXRlIHZpYSB0aGUgbm9ybWFsIHN0cnVjdHVyZWQgZGF0YSBub3RpZmljYXRpb24gc3lzdGVtLlxuICAgKlxuICAgKiBNdXRhdGlvbnMgdG8gdGhlIGBpdGVtc2AgYXJyYXkgaXRzZWxmIHNob3VsZCBiZSBtYWRlIHVzaW5nIHRoZSBBcnJheVxuICAgKiBtdXRhdGlvbiBBUEkncyBvbiBgUG9seW1lci5CYXNlYCAoYHB1c2hgLCBgcG9wYCwgYHNwbGljZWAsIGBzaGlmdGAsXG4gICAqIGB1bnNoaWZ0YCksIGFuZCB0ZW1wbGF0ZSBpbnN0YW5jZXMgd2lsbCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgZGF0YSBpbiB0aGVcbiAgICogYXJyYXkuXG4gICAqXG4gICAqIEV2ZW50cyBjYXVnaHQgYnkgZXZlbnQgaGFuZGxlcnMgd2l0aGluIHRoZSBgZG9tLXJlcGVhdGAgdGVtcGxhdGUgd2lsbCBiZVxuICAgKiBkZWNvcmF0ZWQgd2l0aCBhIGBtb2RlbGAgcHJvcGVydHksIHdoaWNoIHJlcHJlc2VudHMgdGhlIGJpbmRpbmcgc2NvcGUgZm9yXG4gICAqIGVhY2ggdGVtcGxhdGUgaW5zdGFuY2UuICBUaGUgbW9kZWwgaXMgYW4gaW5zdGFuY2Ugb2YgUG9seW1lci5CYXNlLCBhbmQgc2hvdWxkXG4gICAqIGJlIHVzZWQgdG8gbWFuaXB1bGF0ZSBkYXRhIG9uIHRoZSBpbnN0YW5jZSwgZm9yIGV4YW1wbGVcbiAgICogYGV2ZW50Lm1vZGVsLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7YC5cbiAgICpcbiAgICogQWx0ZXJuYXRpdmVseSwgdGhlIG1vZGVsIGZvciBhIHRlbXBsYXRlIGluc3RhbmNlIGZvciBhbiBlbGVtZW50IHN0YW1wZWQgYnlcbiAgICogYSBgZG9tLXJlcGVhdGAgY2FuIGJlIG9idGFpbmVkIHVzaW5nIHRoZSBgbW9kZWxGb3JFbGVtZW50YCBBUEkgb24gdGhlXG4gICAqIGBkb20tcmVwZWF0YCB0aGF0IHN0YW1wZWQgaXQsIGZvciBleGFtcGxlXG4gICAqIGB0aGlzLiQuZG9tUmVwZWF0Lm1vZGVsRm9yRWxlbWVudChldmVudC50YXJnZXQpLnNldCgnaXRlbS5jaGVja2VkJywgdHJ1ZSk7YC5cbiAgICogVGhpcyBtYXkgYmUgdXNlZnVsIGZvciBtYW5pcHVsYXRpbmcgaW5zdGFuY2UgZGF0YSBvZiBldmVudCB0YXJnZXRzIG9idGFpbmVkXG4gICAqIGJ5IGV2ZW50IGhhbmRsZXJzIG9uIHBhcmVudHMgb2YgdGhlIGBkb20tcmVwZWF0YCAoZXZlbnQgZGVsZWdhdGlvbikuXG4gICAqXG4gICAqIEEgdmlldy1zcGVjaWZpYyBmaWx0ZXIvc29ydCBtYXkgYmUgYXBwbGllZCB0byBlYWNoIGBkb20tcmVwZWF0YCBieSBzdXBwbHlpbmcgYVxuICAgKiBgZmlsdGVyYCBhbmQvb3IgYHNvcnRgIHByb3BlcnR5LiAgVGhpcyBtYXkgYmUgYSBzdHJpbmcgdGhhdCBuYW1lcyBhIGZ1bmN0aW9uIG9uXG4gICAqIHRoZSBob3N0LCBvciBhIGZ1bmN0aW9uIG1heSBiZSBhc3NpZ25lZCB0byB0aGUgcHJvcGVydHkgZGlyZWN0bHkuICBUaGUgZnVuY3Rpb25zXG4gICAqIHNob3VsZCBpbXBsZW1lbnRlZCBmb2xsb3dpbmcgdGhlIHN0YW5kYXJkIGBBcnJheWAgZmlsdGVyL3NvcnQgQVBJLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byByZS1ydW4gdGhlIGZpbHRlciBvciBzb3J0IGZ1bmN0aW9ucyBiYXNlZCBvbiBjaGFuZ2VzIHRvIHN1Yi1maWVsZHNcbiAgICogb2YgYGl0ZW1zYCwgdGhlIGBvYnNlcnZlYCBwcm9wZXJ0eSBtYXkgYmUgc2V0IGFzIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2ZcbiAgICogYGl0ZW1gIHN1Yi1maWVsZHMgdGhhdCBzaG91bGQgY2F1c2UgYSByZS1maWx0ZXIvc29ydCB3aGVuIG1vZGlmaWVkLiAgSWZcbiAgICogdGhlIGZpbHRlciBvciBzb3J0IGZ1bmN0aW9uIGRlcGVuZHMgb24gcHJvcGVydGllcyBub3QgY29udGFpbmVkIGluIGBpdGVtc2AsXG4gICAqIHRoZSB1c2VyIHNob3VsZCBvYnNlcnZlIGNoYW5nZXMgdG8gdGhvc2UgcHJvcGVydGllcyBhbmQgY2FsbCBgcmVuZGVyYCB0byB1cGRhdGVcbiAgICogdGhlIHZpZXcgYmFzZWQgb24gdGhlIGRlcGVuZGVuY3kgY2hhbmdlLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgZm9yIGFuIGBkb20tcmVwZWF0YCB3aXRoIGEgZmlsdGVyIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGlzRW5naW5lZXIoaXRlbSkge1xuICAgKiAgIHJldHVybiBpdGVtLnR5cGUgPT0gJ2VuZ2luZWVyJyB8fCBpdGVtLm1hbmFnZXIudHlwZSA9PSAnZW5naW5lZXInO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGVuIHRoZSBgb2JzZXJ2ZWAgcHJvcGVydHkgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgYXMgZm9sbG93czpcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8ZG9tLXJlcGVhdCBpdGVtcz1cInt7ZW1wbG95ZWVzfX1cIiBmaWx0ZXI9XCJpc0VuZ2luZWVyXCIgb2JzZXJ2ZT1cInR5cGUgbWFuYWdlci50eXBlXCI+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAY3VzdG9tRWxlbWVudFxuICAgKiBAcG9seW1lclxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAZXh0ZW5kcyB7ZG9tUmVwZWF0QmFzZX1cbiAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLk9wdGlvbmFsTXV0YWJsZURhdGFcbiAgICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgZm9yIHN0YW1waW5nIGluc3RhbmNlIG9mIGEgdGVtcGxhdGUgYm91bmQgdG9cbiAgICogICBpdGVtcyBpbiBhbiBhcnJheS5cbiAgICovXG4gIGNsYXNzIERvbVJlcGVhdCBleHRlbmRzIGRvbVJlcGVhdEJhc2Uge1xuXG4gICAgLy8gTm90IG5lZWRlZCB0byBmaW5kIHRlbXBsYXRlOyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBhbmFseXplclxuICAgIC8vIGNhbiBmaW5kIHRoZSB0YWcgbmFtZSBmcm9tIGN1c3RvbUVsZW1lbnRzLmRlZmluZSBjYWxsXG4gICAgc3RhdGljIGdldCBpcygpIHsgcmV0dXJuICdkb20tcmVwZWF0JzsgfVxuXG4gICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlZCB3aGVuZXZlciBET00gaXMgYWRkZWQgb3IgcmVtb3ZlZCBieSB0aGlzIHRlbXBsYXRlIChieVxuICAgICAgICogZGVmYXVsdCwgcmVuZGVyaW5nIG9jY3VycyBsYXppbHkpLiAgVG8gZm9yY2UgaW1tZWRpYXRlIHJlbmRlcmluZywgY2FsbFxuICAgICAgICogYHJlbmRlcmAuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IGRvbS1jaGFuZ2VcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgY29udGFpbmluZyBpdGVtcyBkZXRlcm1pbmluZyBob3cgbWFueSBpbnN0YW5jZXMgb2YgdGhlIHRlbXBsYXRlXG4gICAgICAgICAqIHRvIHN0YW1wIGFuZCB0aGF0IHRoYXQgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSBzaG91bGQgYmluZCB0by5cbiAgICAgICAgICovXG4gICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgdHlwZTogQXJyYXlcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIHRvIGFkZCB0byB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIGFycmF5XG4gICAgICAgICAqIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gdGVtcGxhdGUgaW5zdGFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICBhczoge1xuICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICB2YWx1ZTogJ2l0ZW0nXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byBhZGQgdG8gdGhlIGJpbmRpbmcgc2NvcGUgd2l0aCB0aGUgaW5kZXhcbiAgICAgICAgICogb2YgdGhlIGluc3RhbmNlIGluIHRoZSBzb3J0ZWQgYW5kIGZpbHRlcmVkIGxpc3Qgb2YgcmVuZGVyZWQgaXRlbXMuXG4gICAgICAgICAqIE5vdGUsIGZvciB0aGUgaW5kZXggaW4gdGhlIGB0aGlzLml0ZW1zYCBhcnJheSwgdXNlIHRoZSB2YWx1ZSBvZiB0aGVcbiAgICAgICAgICogYGl0ZW1zSW5kZXhBc2AgcHJvcGVydHkuXG4gICAgICAgICAqL1xuICAgICAgICBpbmRleEFzOiB7XG4gICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgIHZhbHVlOiAnaW5kZXgnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byBhZGQgdG8gdGhlIGJpbmRpbmcgc2NvcGUgd2l0aCB0aGUgaW5kZXhcbiAgICAgICAgICogb2YgdGhlIGluc3RhbmNlIGluIHRoZSBgdGhpcy5pdGVtc2AgYXJyYXkuIE5vdGUsIGZvciB0aGUgaW5kZXggb2ZcbiAgICAgICAgICogdGhpcyBpbnN0YW5jZSBpbiB0aGUgc29ydGVkIGFuZCBmaWx0ZXJlZCBsaXN0IG9mIHJlbmRlcmVkIGl0ZW1zLFxuICAgICAgICAgKiB1c2UgdGhlIHZhbHVlIG9mIHRoZSBgaW5kZXhBc2AgcHJvcGVydHkuXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtc0luZGV4QXM6IHtcbiAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgdmFsdWU6ICdpdGVtc0luZGV4J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGRldGVybWluZSB0aGUgc29ydCBvcmRlciBvZiB0aGUgaXRlbXMuICBUaGlzXG4gICAgICAgICAqIHByb3BlcnR5IHNob3VsZCBlaXRoZXIgYmUgcHJvdmlkZWQgYXMgYSBzdHJpbmcsIGluZGljYXRpbmcgYSBtZXRob2RcbiAgICAgICAgICogbmFtZSBvbiB0aGUgZWxlbWVudCdzIGhvc3QsIG9yIGVsc2UgYmUgYW4gYWN0dWFsIGZ1bmN0aW9uLiAgVGhlXG4gICAgICAgICAqIGZ1bmN0aW9uIHNob3VsZCBtYXRjaCB0aGUgc29ydCBmdW5jdGlvbiBwYXNzZWQgdG8gYEFycmF5LnNvcnRgLlxuICAgICAgICAgKiBVc2luZyBhIHNvcnQgZnVuY3Rpb24gaGFzIG5vIGVmZmVjdCBvbiB0aGUgdW5kZXJseWluZyBgaXRlbXNgIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgc29ydDoge1xuICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgIG9ic2VydmVyOiAnX19zb3J0Q2hhbmdlZCdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBpdGVtcyBvdXQgb2YgdGhlIHZpZXcuICBUaGlzXG4gICAgICAgICAqIHByb3BlcnR5IHNob3VsZCBlaXRoZXIgYmUgcHJvdmlkZWQgYXMgYSBzdHJpbmcsIGluZGljYXRpbmcgYSBtZXRob2RcbiAgICAgICAgICogbmFtZSBvbiB0aGUgZWxlbWVudCdzIGhvc3QsIG9yIGVsc2UgYmUgYW4gYWN0dWFsIGZ1bmN0aW9uLiAgVGhlXG4gICAgICAgICAqIGZ1bmN0aW9uIHNob3VsZCBtYXRjaCB0aGUgc29ydCBmdW5jdGlvbiBwYXNzZWQgdG8gYEFycmF5LmZpbHRlcmAuXG4gICAgICAgICAqIFVzaW5nIGEgZmlsdGVyIGZ1bmN0aW9uIGhhcyBubyBlZmZlY3Qgb24gdGhlIHVuZGVybHlpbmcgYGl0ZW1zYCBhcnJheS5cbiAgICAgICAgICovXG4gICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgIG9ic2VydmVyOiAnX19maWx0ZXJDaGFuZ2VkJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHVzaW5nIGEgYGZpbHRlcmAgb3IgYHNvcnRgIGZ1bmN0aW9uLCB0aGUgYG9ic2VydmVgIHByb3BlcnR5XG4gICAgICAgICAqIHNob3VsZCBiZSBzZXQgdG8gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiB0aGUgbmFtZXMgb2YgaXRlbVxuICAgICAgICAgKiBzdWItZmllbGRzIHRoYXQgc2hvdWxkIHRyaWdnZXIgYSByZS1zb3J0IG9yIHJlLWZpbHRlciB3aGVuIGNoYW5nZWQuXG4gICAgICAgICAqIFRoZXNlIHNob3VsZCBnZW5lcmFsbHkgYmUgZmllbGRzIG9mIGBpdGVtYCB0aGF0IHRoZSBzb3J0IG9yIGZpbHRlclxuICAgICAgICAgKiBmdW5jdGlvbiBkZXBlbmRzIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb2JzZXJ2ZToge1xuICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICBvYnNlcnZlcjogJ19fb2JzZXJ2ZUNoYW5nZWQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdXNpbmcgYSBgZmlsdGVyYCBvciBgc29ydGAgZnVuY3Rpb24sIHRoZSBgZGVsYXlgIHByb3BlcnR5XG4gICAgICAgICAqIGRldGVybWluZXMgYSBkZWJvdW5jZSB0aW1lIGluIG1zIGFmdGVyIGEgY2hhbmdlIHRvIG9ic2VydmVkIGl0ZW1cbiAgICAgICAgICogcHJvcGVydGllcyB0aGF0IG11c3QgcGFzcyBiZWZvcmUgdGhlIGZpbHRlciBvciBzb3J0IGlzIHJlLXJ1bi5cbiAgICAgICAgICogVGhpcyBpcyB1c2VmdWwgaW4gcmF0ZS1saW1pdGluZyBzaHVmZmxpbmcgb2YgdGhlIHZpZXcgd2hlblxuICAgICAgICAgKiBpdGVtIGNoYW5nZXMgbWF5IGJlIGZyZXF1ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVsYXk6IE51bWJlcixcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ291bnQgb2YgY3VycmVudGx5IHJlbmRlcmVkIGl0ZW1zIGFmdGVyIGBmaWx0ZXJgIChpZiBhbnkpIGhhcyBiZWVuIGFwcGxpZWQuXG4gICAgICAgICAqIElmIFwiY2h1bmtpbmcgbW9kZVwiIGlzIGVuYWJsZWQsIGByZW5kZXJlZEl0ZW1Db3VudGAgaXMgdXBkYXRlZCBlYWNoIHRpbWUgYVxuICAgICAgICAgKiBzZXQgb2YgdGVtcGxhdGUgaW5zdGFuY2VzIGlzIHJlbmRlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyZWRJdGVtQ291bnQ6IHtcbiAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgYW4gaW5pdGlhbCBjb3VudCBvZiB0ZW1wbGF0ZSBpbnN0YW5jZXMgdG8gcmVuZGVyIGFmdGVyIHNldHRpbmdcbiAgICAgICAgICogdGhlIGBpdGVtc2AgYXJyYXksIGJlZm9yZSB0aGUgbmV4dCBwYWludCwgYW5kIHB1dHMgdGhlIGBkb20tcmVwZWF0YFxuICAgICAgICAgKiBpbnRvIFwiY2h1bmtpbmcgbW9kZVwiLiAgVGhlIHJlbWFpbmluZyBpdGVtcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIHJlbmRlcmVkXG4gICAgICAgICAqIGluY3JlbWVudGFsbHkgYXQgZWFjaCBhbmltYXRpb24gZnJhbWUgdGhlcm9mIHVudGlsIGFsbCBpbnN0YW5jZXMgaGF2ZVxuICAgICAgICAgKiBiZWVuIHJlbmRlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdGlhbENvdW50OiB7XG4gICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgIG9ic2VydmVyOiAnX19pbml0aWFsaXplQ2h1bmtpbmcnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYGluaXRpYWxDb3VudGAgaXMgdXNlZCwgdGhpcyBwcm9wZXJ0eSBkZWZpbmVzIGEgZnJhbWUgcmF0ZSAoaW5cbiAgICAgICAgICogZnBzKSB0byB0YXJnZXQgYnkgdGhyb3R0bGluZyB0aGUgbnVtYmVyIG9mIGluc3RhbmNlcyByZW5kZXJlZCBlYWNoXG4gICAgICAgICAqIGZyYW1lIHRvIG5vdCBleGNlZWQgdGhlIGJ1ZGdldCBmb3IgdGhlIHRhcmdldCBmcmFtZSByYXRlLiAgVGhlXG4gICAgICAgICAqIGZyYW1lcmF0ZSBpcyBlZmZlY3RpdmVseSB0aGUgbnVtYmVyIG9mIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgcyB0aGF0XG4gICAgICAgICAqIGl0IHRyaWVzIHRvIGFsbG93IHRvIGFjdHVhbGx5IGZpcmUgaW4gYSBnaXZlbiBzZWNvbmQuIEl0IGRvZXMgdGhpc1xuICAgICAgICAgKiBieSBtZWFzdXJpbmcgdGhlIHRpbWUgYmV0d2VlbiBgckFGYHMgYW5kIGNvbnRpbnVvdXNseSBhZGp1c3RpbmcgdGhlXG4gICAgICAgICAqIG51bWJlciBvZiBpdGVtcyBjcmVhdGVkIGVhY2ggYHJBRmAgdG8gbWFpbnRhaW4gdGhlIHRhcmdldCBmcmFtZXJhdGUuXG4gICAgICAgICAqIFNldHRpbmcgdGhpcyB0byBhIGhpZ2hlciBudW1iZXIgYWxsb3dzIGxvd2VyIGxhdGVuY3kgYW5kIGhpZ2hlclxuICAgICAgICAgKiB0aHJvdWdocHV0IGZvciBldmVudCBoYW5kbGVycyBhbmQgb3RoZXIgdGFza3MsIGJ1dCByZXN1bHRzIGluIGFcbiAgICAgICAgICogbG9uZ2VyIHRpbWUgZm9yIHRoZSByZW1haW5pbmcgaXRlbXMgdG8gY29tcGxldGUgcmVuZGVyaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGFyZ2V0RnJhbWVyYXRlOiB7XG4gICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgIHZhbHVlOiAyMFxuICAgICAgICB9LFxuXG4gICAgICAgIF90YXJnZXRGcmFtZVRpbWU6IHtcbiAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgY29tcHV0ZWQ6ICdfX2NvbXB1dGVGcmFtZVRpbWUodGFyZ2V0RnJhbWVyYXRlKSdcbiAgICAgICAgfVxuXG4gICAgICB9O1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICByZXR1cm4gWyAnX19pdGVtc0NoYW5nZWQoaXRlbXMuKiknIF07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fX2luc3RhbmNlcyA9IFtdO1xuICAgICAgdGhpcy5fX2xpbWl0ID0gSW5maW5pdHk7XG4gICAgICB0aGlzLl9fcG9vbCA9IFtdO1xuICAgICAgdGhpcy5fX3JlbmRlckRlYm91bmNlciA9IG51bGw7XG4gICAgICB0aGlzLl9faXRlbXNJZHhUb0luc3RJZHggPSB7fTtcbiAgICAgIHRoaXMuX19jaHVua0NvdW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX19sYXN0Q2h1bmtUaW1lID0gbnVsbDtcbiAgICAgIHRoaXMuX19zb3J0Rm4gPSBudWxsO1xuICAgICAgdGhpcy5fX2ZpbHRlckZuID0gbnVsbDtcbiAgICAgIHRoaXMuX19vYnNlcnZlUGF0aHMgPSBudWxsO1xuICAgICAgdGhpcy5fX2N0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fX2lzRGV0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9faXNEZXRhY2hlZCA9IHRydWU7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5fX2luc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl9fZGV0YWNoSW5zdGFuY2UoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAvLyBvbmx5IHBlcmZvcm0gYXR0YWNobWVudCBpZiB0aGUgZWxlbWVudCB3YXMgcHJldmlvdXNseSBkZXRhY2hlZC5cbiAgICAgIGlmICh0aGlzLl9faXNEZXRhY2hlZCkge1xuICAgICAgICB0aGlzLl9faXNEZXRhY2hlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5fX2luc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuX19hdHRhY2hJbnN0YW5jZShpLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19lbnN1cmVUZW1wbGF0aXplZCgpIHtcbiAgICAgIC8vIFRlbXBsYXRpemluZyAoZ2VuZXJhdGluZyB0aGUgaW5zdGFuY2UgY29uc3RydWN0b3IpIG5lZWRzIHRvIHdhaXRcbiAgICAgIC8vIHVudGlsIHJlYWR5LCBzaW5jZSB3b24ndCBoYXZlIGl0cyB0ZW1wbGF0ZSBjb250ZW50IGhhbmRlZCBiYWNrIHRvXG4gICAgICAvLyBpdCB1bnRpbCB0aGVuXG4gICAgICBpZiAoIXRoaXMuX19jdG9yKSB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgICAgICAvLyAvLyBXYWl0IHVudGlsIGNoaWxkTGlzdCBjaGFuZ2VzIGFuZCB0ZW1wbGF0ZSBzaG91bGQgYmUgdGhlcmUgYnkgdGhlblxuICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJykpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICB0aGlzLl9fcmVuZGVyKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RvbS1yZXBlYXQgcmVxdWlyZXMgYSA8dGVtcGxhdGU+IGNoaWxkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLCB7Y2hpbGRMaXN0OiB0cnVlfSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlbXBsYXRlIGluc3RhbmNlIHByb3BzIHRoYXQgc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gZm9yd2FyZGluZ1xuICAgICAgICBsZXQgaW5zdGFuY2VQcm9wcyA9IHt9O1xuICAgICAgICBpbnN0YW5jZVByb3BzW3RoaXMuYXNdID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2VQcm9wc1t0aGlzLmluZGV4QXNdID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2VQcm9wc1t0aGlzLml0ZW1zSW5kZXhBc10gPSB0cnVlO1xuICAgICAgICB0aGlzLl9fY3RvciA9IFBvbHltZXIuVGVtcGxhdGl6ZS50ZW1wbGF0aXplKHRlbXBsYXRlLCB0aGlzLCB7XG4gICAgICAgICAgbXV0YWJsZURhdGE6IHRoaXMubXV0YWJsZURhdGEsXG4gICAgICAgICAgcGFyZW50TW9kZWw6IHRydWUsXG4gICAgICAgICAgaW5zdGFuY2VQcm9wczogaW5zdGFuY2VQcm9wcyxcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAdGhpcyB7dGhpc31cbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSB0byBzZXRcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCBwcm9wZXJ0eSB0b1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGZvcndhcmRIb3N0UHJvcDogZnVuY3Rpb24ocHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBpJCA9IHRoaXMuX19pbnN0YW5jZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpPTAsIGluc3Q7IChpPGkkLmxlbmd0aCkgJiYgKGluc3Q9aSRbaV0pOyBpKyspIHtcbiAgICAgICAgICAgICAgaW5zdC5mb3J3YXJkSG9zdFByb3AocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHRoaXMge3RoaXN9XG4gICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluc3QgSW5zdGFuY2UgdG8gbm90aWZ5XG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgdG8gbm90aWZ5XG4gICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBub3RpZnlcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBub3RpZnlJbnN0YW5jZVByb3A6IGZ1bmN0aW9uKGluc3QsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoUG9seW1lci5QYXRoLm1hdGNoZXModGhpcy5hcywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgbGV0IGlkeCA9IGluc3RbdGhpcy5pdGVtc0luZGV4QXNdO1xuICAgICAgICAgICAgICBpZiAocHJvcCA9PSB0aGlzLmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpZHhdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGV0IHBhdGggPSBQb2x5bWVyLlBhdGgudHJhbnNsYXRlKHRoaXMuYXMsICdpdGVtcy4nICsgaWR4LCBwcm9wKTtcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZnlQYXRoKHBhdGgsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX19nZXRNZXRob2RIb3N0KCkge1xuICAgICAgLy8gVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgYmUgdGhlIG93bmVyIG9mIHRoZSBvdXRlcm1vc3QgdGVtcGxhdGUuXG4gICAgICAvLyBJbiBzaGFkb3cgZG9tLCB0aGlzIGlzIGFsd2F5cyBnZXRSb290Tm9kZSgpLmhvc3QsIGJ1dCB3ZSBjYW5cbiAgICAgIC8vIGFwcHJveGltYXRlIHRoaXMgdmlhIGNvb3BlcmF0aW9uIHdpdGggb3VyIGRhdGFIb3N0IGFsd2F5cyBzZXR0aW5nXG4gICAgICAvLyBgX21ldGhvZEhvc3RgIGFzIGxvbmcgYXMgdGhlcmUgd2VyZSBiaW5kaW5ncyAob3IgaWQncykgb24gdGhpc1xuICAgICAgLy8gaW5zdGFuY2UgY2F1c2luZyBpdCB0byBnZXQgYSBkYXRhSG9zdC5cbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YUhvc3QuX21ldGhvZEhvc3QgfHwgdGhpcy5fX2RhdGFIb3N0O1xuICAgIH1cblxuICAgIF9fZnVuY3Rpb25Gcm9tUHJvcGVydHlWYWx1ZShmdW5jdGlvbk9yTWV0aG9kTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbk9yTWV0aG9kTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGV0IG1ldGhvZE5hbWUgPSBmdW5jdGlvbk9yTWV0aG9kTmFtZTtcbiAgICAgICAgbGV0IG9iaiA9IHRoaXMuX19nZXRNZXRob2RIb3N0KCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIG9ialttZXRob2ROYW1lXS5hcHBseShvYmosIGFyZ3VtZW50cyk7IH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbk9yTWV0aG9kTmFtZTtcbiAgICB9XG5cbiAgICBfX3NvcnRDaGFuZ2VkKHNvcnQpIHtcbiAgICAgIHRoaXMuX19zb3J0Rm4gPSB0aGlzLl9fZnVuY3Rpb25Gcm9tUHJvcGVydHlWYWx1ZShzb3J0KTtcbiAgICAgIGlmICh0aGlzLml0ZW1zKSB7IHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTsgfVxuICAgIH1cblxuICAgIF9fZmlsdGVyQ2hhbmdlZChmaWx0ZXIpIHtcbiAgICAgIHRoaXMuX19maWx0ZXJGbiA9IHRoaXMuX19mdW5jdGlvbkZyb21Qcm9wZXJ0eVZhbHVlKGZpbHRlcik7XG4gICAgICBpZiAodGhpcy5pdGVtcykgeyB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlcik7IH1cbiAgICB9XG5cbiAgICBfX2NvbXB1dGVGcmFtZVRpbWUocmF0ZSkge1xuICAgICAgcmV0dXJuIE1hdGguY2VpbCgxMDAwL3JhdGUpO1xuICAgIH1cblxuICAgIF9faW5pdGlhbGl6ZUNodW5raW5nKCkge1xuICAgICAgaWYgKHRoaXMuaW5pdGlhbENvdW50KSB7XG4gICAgICAgIHRoaXMuX19saW1pdCA9IHRoaXMuaW5pdGlhbENvdW50O1xuICAgICAgICB0aGlzLl9fY2h1bmtDb3VudCA9IHRoaXMuaW5pdGlhbENvdW50O1xuICAgICAgICB0aGlzLl9fbGFzdENodW5rVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9fdHJ5UmVuZGVyQ2h1bmsoKSB7XG4gICAgICAvLyBEZWJvdW5jZWQgc28gdGhhdCBtdWx0aXBsZSBjYWxscyB0aHJvdWdoIGBfcmVuZGVyYCBiZXR3ZWVuIGFuaW1hdGlvblxuICAgICAgLy8gZnJhbWVzIG9ubHkgcXVldWUgb25lIG5ldyByQUYgKGUuZy4gYXJyYXkgbXV0YXRpb24gJiBjaHVua2VkIHJlbmRlcilcbiAgICAgIGlmICh0aGlzLml0ZW1zICYmIHRoaXMuX19saW1pdCA8IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVxdWVzdFJlbmRlckNodW5rKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX3JlcXVlc3RSZW5kZXJDaHVuaygpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+dGhpcy5fX3JlbmRlckNodW5rKCkpO1xuICAgIH1cblxuICAgIF9fcmVuZGVyQ2h1bmsoKSB7XG4gICAgICAvLyBTaW1wbGUgYXV0byBjaHVua1NpemUgdGhyb3R0bGluZyBhbGdvcml0aG0gYmFzZWQgb24gZmVlZGJhY2sgbG9vcDpcbiAgICAgIC8vIG1lYXN1cmUgYWN0dWFsIHRpbWUgYmV0d2VlbiBmcmFtZXMgYW5kIHNjYWxlIGNodW5rIGNvdW50IGJ5IHJhdGlvXG4gICAgICAvLyBvZiB0YXJnZXQvYWN0dWFsIGZyYW1lIHRpbWVcbiAgICAgIGxldCBjdXJyQ2h1bmtUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBsZXQgcmF0aW8gPSB0aGlzLl90YXJnZXRGcmFtZVRpbWUgLyAoY3VyckNodW5rVGltZSAtIHRoaXMuX19sYXN0Q2h1bmtUaW1lKTtcbiAgICAgIHRoaXMuX19jaHVua0NvdW50ID0gTWF0aC5yb3VuZCh0aGlzLl9fY2h1bmtDb3VudCAqIHJhdGlvKSB8fCAxO1xuICAgICAgdGhpcy5fX2xpbWl0ICs9IHRoaXMuX19jaHVua0NvdW50O1xuICAgICAgdGhpcy5fX2xhc3RDaHVua1RpbWUgPSBjdXJyQ2h1bmtUaW1lO1xuICAgICAgdGhpcy5fX2RlYm91bmNlUmVuZGVyKHRoaXMuX19yZW5kZXIpO1xuICAgIH1cblxuICAgIF9fb2JzZXJ2ZUNoYW5nZWQoKSB7XG4gICAgICB0aGlzLl9fb2JzZXJ2ZVBhdGhzID0gdGhpcy5vYnNlcnZlICYmXG4gICAgICAgIHRoaXMub2JzZXJ2ZS5yZXBsYWNlKCcuKicsICcuJykuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICBfX2l0ZW1zQ2hhbmdlZChjaGFuZ2UpIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zICYmICFBcnJheS5pc0FycmF5KHRoaXMuaXRlbXMpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignZG9tLXJlcGVhdCBleHBlY3RlZCBhcnJheSBmb3IgYGl0ZW1zYCwgZm91bmQnLCB0aGlzLml0ZW1zKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHBhdGggd2FzIHRvIGFuIGl0ZW0gKGUuZy4gJ2l0ZW1zLjMnIG9yICdpdGVtcy4zLmZvbycpLCBmb3J3YXJkIHRoZVxuICAgICAgLy8gcGF0aCB0byB0aGF0IGluc3RhbmNlIHN5bmNocm9ub3VzbHkgKHJldHVybnMgZmFsc2UgZm9yIG5vbi1pdGVtIHBhdGhzKVxuICAgICAgaWYgKCF0aGlzLl9faGFuZGxlSXRlbVBhdGgoY2hhbmdlLnBhdGgsIGNoYW5nZS52YWx1ZSkpIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgYXJyYXkgd2FzIHJlc2V0ICgnaXRlbXMnKSBvciBzcGxpY2VkICgnaXRlbXMuc3BsaWNlcycpLFxuICAgICAgICAvLyBzbyBxdWV1ZSBhIGZ1bGwgcmVmcmVzaFxuICAgICAgICB0aGlzLl9faW5pdGlhbGl6ZUNodW5raW5nKCk7XG4gICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfX2hhbmRsZU9ic2VydmVkUGF0aHMocGF0aCkge1xuICAgICAgLy8gSGFuZGxlIGNhc2VzIHdoZXJlIHBhdGggY2hhbmdlcyBzaG91bGQgY2F1c2UgYSByZS1zb3J0L2ZpbHRlclxuICAgICAgaWYgKHRoaXMuX19zb3J0Rm4gfHwgdGhpcy5fX2ZpbHRlckZuKSB7XG4gICAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAgIC8vIEFsd2F5cyByZS1yZW5kZXIgaWYgdGhlIGl0ZW0gaXRzZWxmIGNoYW5nZWRcbiAgICAgICAgICB0aGlzLl9fZGVib3VuY2VSZW5kZXIodGhpcy5fX3JlbmRlciwgdGhpcy5kZWxheSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX29ic2VydmVQYXRocykge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgcmUtcmVuZGVyIGlmIHRoZSBwYXRoIGNoYW5nZWQgbWF0Y2hlcyBhbiBvYnNlcnZlZCBwYXRoXG4gICAgICAgICAgbGV0IHBhdGhzID0gdGhpcy5fX29ic2VydmVQYXRocztcbiAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8cGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmluZGV4T2YocGF0aHNbaV0pID09PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyLCB0aGlzLmRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6RG9tUmVwZWF0KX0gZm4gRnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBkZWxheSBEZWxheSBpbiBtcyB0byBkZWJvdW5jZSBieS5cbiAgICAgKi9cbiAgICBfX2RlYm91bmNlUmVuZGVyKGZuLCBkZWxheSA9IDApIHtcbiAgICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXIgPSBQb2x5bWVyLkRlYm91bmNlci5kZWJvdW5jZShcbiAgICAgICAgICAgIHRoaXMuX19yZW5kZXJEZWJvdW5jZXJcbiAgICAgICAgICAsIGRlbGF5ID4gMCA/IFBvbHltZXIuQXN5bmMudGltZU91dC5hZnRlcihkZWxheSkgOiBQb2x5bWVyLkFzeW5jLm1pY3JvVGFza1xuICAgICAgICAgICwgZm4uYmluZCh0aGlzKSk7XG4gICAgICBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXIodGhpcy5fX3JlbmRlckRlYm91bmNlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yY2VzIHRoZSBlbGVtZW50IHRvIHJlbmRlciBpdHMgY29udGVudC4gTm9ybWFsbHkgcmVuZGVyaW5nIGlzXG4gICAgICogYXN5bmNocm9ub3VzIHRvIGEgcHJvdm9raW5nIGNoYW5nZS4gVGhpcyBpcyBkb25lIGZvciBlZmZpY2llbmN5IHNvXG4gICAgICogdGhhdCBtdWx0aXBsZSBjaGFuZ2VzIHRyaWdnZXIgb25seSBhIHNpbmdsZSByZW5kZXIuIFRoZSByZW5kZXIgbWV0aG9kXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZCBpZiwgZm9yIGV4YW1wbGUsIHRlbXBsYXRlIHJlbmRlcmluZyBpcyByZXF1aXJlZCB0b1xuICAgICAqIHZhbGlkYXRlIGFwcGxpY2F0aW9uIHN0YXRlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuICAgICAgLy8gUXVldWUgdGhpcyByZXBlYXRlciwgdGhlbiBmbHVzaCBhbGwgaW4gb3JkZXJcbiAgICAgIHRoaXMuX19kZWJvdW5jZVJlbmRlcih0aGlzLl9fcmVuZGVyKTtcbiAgICAgIFBvbHltZXIuZmx1c2goKTtcbiAgICB9XG5cbiAgICBfX3JlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5fX2Vuc3VyZVRlbXBsYXRpemVkKCkpIHtcbiAgICAgICAgLy8gTm8gdGVtcGxhdGUgZm91bmQgeWV0XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19hcHBseUZ1bGxSZWZyZXNoKCk7XG4gICAgICAvLyBSZXNldCB0aGUgcG9vbFxuICAgICAgLy8gVE9ETyhrc2NoYWFmKTogUmV1c2UgcG9vbCBhY3Jvc3MgdHVybnMgYW5kIG5lc3RlZCB0ZW1wbGF0ZXNcbiAgICAgIC8vIE5vdyB0aGF0IG9iamVjdHMvYXJyYXlzIGFyZSByZS1ldmFsdWF0ZWQgd2hlbiBzZXQsIHdlIGNhbiBzYWZlbHlcbiAgICAgIC8vIHJldXNlIHBvb2xlZCBpbnN0YW5jZXMgYWNyb3NzIHR1cm5zLCBob3dldmVyIHdlIHN0aWxsIG5lZWQgdG8gZGVjaWRlXG4gICAgICAvLyBzZW1hbnRpY3MgcmVnYXJkaW5nIGhvdyBsb25nIHRvIGhvbGQsIGhvdyBtYW55IHRvIGhvbGQsIGV0Yy5cbiAgICAgIHRoaXMuX19wb29sLmxlbmd0aCA9IDA7XG4gICAgICAvLyBTZXQgcmVuZGVyZWQgaXRlbSBjb3VudFxuICAgICAgdGhpcy5fc2V0UmVuZGVyZWRJdGVtQ291bnQodGhpcy5fX2luc3RhbmNlcy5sZW5ndGgpO1xuICAgICAgLy8gTm90aWZ5IHVzZXJzXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgICAgfSkpO1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIG5lZWQgdG8gcmVuZGVyIG1vcmUgaXRlbXNcbiAgICAgIHRoaXMuX190cnlSZW5kZXJDaHVuaygpO1xuICAgIH1cblxuICAgIF9fYXBwbHlGdWxsUmVmcmVzaCgpIHtcbiAgICAgIGxldCBpdGVtcyA9IHRoaXMuaXRlbXMgfHwgW107XG4gICAgICBsZXQgaXNudElkeFRvSXRlbXNJZHggPSBuZXcgQXJyYXkoaXRlbXMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGk9MDsgaTxpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpc250SWR4VG9JdGVtc0lkeFtpXSA9IGk7XG4gICAgICB9XG4gICAgICAvLyBBcHBseSB1c2VyIGZpbHRlclxuICAgICAgaWYgKHRoaXMuX19maWx0ZXJGbikge1xuICAgICAgICBpc250SWR4VG9JdGVtc0lkeCA9IGlzbnRJZHhUb0l0ZW1zSWR4LmZpbHRlcigoaSwgaWR4LCBhcnJheSkgPT5cbiAgICAgICAgICB0aGlzLl9fZmlsdGVyRm4oaXRlbXNbaV0sIGlkeCwgYXJyYXkpKTtcbiAgICAgIH1cbiAgICAgIC8vIEFwcGx5IHVzZXIgc29ydFxuICAgICAgaWYgKHRoaXMuX19zb3J0Rm4pIHtcbiAgICAgICAgaXNudElkeFRvSXRlbXNJZHguc29ydCgoYSwgYikgPT4gdGhpcy5fX3NvcnRGbihpdGVtc1thXSwgaXRlbXNbYl0pKTtcbiAgICAgIH1cbiAgICAgIC8vIGl0ZW1zLT5pbnN0IG1hcCBrZXB0IGZvciBpdGVtIHBhdGggZm9yd2FyZGluZ1xuICAgICAgY29uc3QgaXRlbXNJZHhUb0luc3RJZHggPSB0aGlzLl9faXRlbXNJZHhUb0luc3RJZHggPSB7fTtcbiAgICAgIGxldCBpbnN0SWR4ID0gMDtcbiAgICAgIC8vIEdlbmVyYXRlIGluc3RhbmNlcyBhbmQgYXNzaWduIGl0ZW1zXG4gICAgICBjb25zdCBsaW1pdCA9IE1hdGgubWluKGlzbnRJZHhUb0l0ZW1zSWR4Lmxlbmd0aCwgdGhpcy5fX2xpbWl0KTtcbiAgICAgIGZvciAoOyBpbnN0SWR4PGxpbWl0OyBpbnN0SWR4KyspIHtcbiAgICAgICAgbGV0IGluc3QgPSB0aGlzLl9faW5zdGFuY2VzW2luc3RJZHhdO1xuICAgICAgICBsZXQgaXRlbUlkeCA9IGlzbnRJZHhUb0l0ZW1zSWR4W2luc3RJZHhdO1xuICAgICAgICBsZXQgaXRlbSA9IGl0ZW1zW2l0ZW1JZHhdO1xuICAgICAgICBpdGVtc0lkeFRvSW5zdElkeFtpdGVtSWR4XSA9IGluc3RJZHg7XG4gICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5KHRoaXMuYXMsIGl0ZW0pO1xuICAgICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eSh0aGlzLmluZGV4QXMsIGluc3RJZHgpO1xuICAgICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eSh0aGlzLml0ZW1zSW5kZXhBcywgaXRlbUlkeCk7XG4gICAgICAgICAgaW5zdC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX2luc2VydEluc3RhbmNlKGl0ZW0sIGluc3RJZHgsIGl0ZW1JZHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgYW55IGV4dHJhIGluc3RhbmNlcyBmcm9tIHByZXZpb3VzIHN0YXRlXG4gICAgICBmb3IgKGxldCBpPXRoaXMuX19pbnN0YW5jZXMubGVuZ3RoLTE7IGk+PWluc3RJZHg7IGktLSkge1xuICAgICAgICB0aGlzLl9fZGV0YWNoQW5kUmVtb3ZlSW5zdGFuY2UoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19kZXRhY2hJbnN0YW5jZShpZHgpIHtcbiAgICAgIGxldCBpbnN0ID0gdGhpcy5fX2luc3RhbmNlc1tpZHhdO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPGluc3QuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGVsID0gaW5zdC5jaGlsZHJlbltpXTtcbiAgICAgICAgaW5zdC5yb290LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnN0O1xuICAgIH1cblxuICAgIF9fYXR0YWNoSW5zdGFuY2UoaWR4LCBwYXJlbnQpIHtcbiAgICAgIGxldCBpbnN0ID0gdGhpcy5fX2luc3RhbmNlc1tpZHhdO1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShpbnN0LnJvb3QsIHRoaXMpO1xuICAgIH1cblxuICAgIF9fZGV0YWNoQW5kUmVtb3ZlSW5zdGFuY2UoaWR4KSB7XG4gICAgICBsZXQgaW5zdCA9IHRoaXMuX19kZXRhY2hJbnN0YW5jZShpZHgpO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgdGhpcy5fX3Bvb2wucHVzaChpbnN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19pbnN0YW5jZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfVxuXG4gICAgX19zdGFtcEluc3RhbmNlKGl0ZW0sIGluc3RJZHgsIGl0ZW1JZHgpIHtcbiAgICAgIGxldCBtb2RlbCA9IHt9O1xuICAgICAgbW9kZWxbdGhpcy5hc10gPSBpdGVtO1xuICAgICAgbW9kZWxbdGhpcy5pbmRleEFzXSA9IGluc3RJZHg7XG4gICAgICBtb2RlbFt0aGlzLml0ZW1zSW5kZXhBc10gPSBpdGVtSWR4O1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLl9fY3Rvcihtb2RlbCk7XG4gICAgfVxuXG4gICAgX19pbnNlcnRJbnN0YW5jZShpdGVtLCBpbnN0SWR4LCBpdGVtSWR4KSB7XG4gICAgICBsZXQgaW5zdCA9IHRoaXMuX19wb29sLnBvcCgpO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgLy8gVE9ETyhrc2NoYWFmKTogSWYgdGhlIHBvb2wgaXMgc2hhcmVkIGFjcm9zcyB0dXJucywgaG9zdFByb3BzXG4gICAgICAgIC8vIG5lZWQgdG8gYmUgcmUtc2V0IHRvIHJldXNlZCBpbnN0YW5jZXMgaW4gYWRkaXRpb24gdG8gaXRlbVxuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkodGhpcy5hcywgaXRlbSk7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eSh0aGlzLmluZGV4QXMsIGluc3RJZHgpO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkodGhpcy5pdGVtc0luZGV4QXMsIGl0ZW1JZHgpO1xuICAgICAgICBpbnN0Ll9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3QgPSB0aGlzLl9fc3RhbXBJbnN0YW5jZShpdGVtLCBpbnN0SWR4LCBpdGVtSWR4KTtcbiAgICAgIH1cbiAgICAgIGxldCBiZWZvcmVSb3cgPSB0aGlzLl9faW5zdGFuY2VzW2luc3RJZHggKyAxXTtcbiAgICAgIGxldCBiZWZvcmVOb2RlID0gYmVmb3JlUm93ID8gYmVmb3JlUm93LmNoaWxkcmVuWzBdIDogdGhpcztcbiAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaW5zdC5yb290LCBiZWZvcmVOb2RlKTtcbiAgICAgIHRoaXMuX19pbnN0YW5jZXNbaW5zdElkeF0gPSBpbnN0O1xuICAgICAgcmV0dXJuIGluc3Q7XG4gICAgfVxuXG4gICAgLy8gSW1wbGVtZW50cyBleHRlbnNpb24gcG9pbnQgZnJvbSBUZW1wbGF0aXplIG1peGluXG4gICAgLyoqXG4gICAgICogU2hvd3Mgb3IgaGlkZXMgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHRvcCBsZXZlbCBjaGlsZCBlbGVtZW50cy4gRm9yXG4gICAgICogdGV4dCBub2RlcywgYHRleHRDb250ZW50YCBpcyByZW1vdmVkIHdoaWxlIFwiaGlkZGVuXCIgYW5kIHJlcGxhY2VkIHdoZW5cbiAgICAgKiBcInNob3duLlwiXG4gICAgICogQHBhcmFtIHtib29sZWFufSBoaWRkZW4gU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgY2hpbGRyZW47XG4gICAgICogc2V0IHRvIGZhbHNlIHRvIHNob3cgdGhlbS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2hvd0hpZGVDaGlsZHJlbihoaWRkZW4pIHtcbiAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLl9faW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX19pbnN0YW5jZXNbaV0uX3Nob3dIaWRlQ2hpbGRyZW4oaGlkZGVuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxsZWQgYXMgYSBzaWRlIGVmZmVjdCBvZiBhIGhvc3QgaXRlbXMuPGtleT4uPHBhdGg+IHBhdGggY2hhbmdlLFxuICAgIC8vIHJlc3BvbnNpYmxlIGZvciBub3RpZnlpbmcgaXRlbS48cGF0aD4gY2hhbmdlcyB0byBpbnN0IGZvciBrZXlcbiAgICBfX2hhbmRsZUl0ZW1QYXRoKHBhdGgsIHZhbHVlKSB7XG4gICAgICBsZXQgaXRlbXNQYXRoID0gcGF0aC5zbGljZSg2KTsgLy8gJ2l0ZW1zLicubGVuZ3RoID09IDZcbiAgICAgIGxldCBkb3QgPSBpdGVtc1BhdGguaW5kZXhPZignLicpO1xuICAgICAgbGV0IGl0ZW1zSWR4ID0gZG90IDwgMCA/IGl0ZW1zUGF0aCA6IGl0ZW1zUGF0aC5zdWJzdHJpbmcoMCwgZG90KTtcbiAgICAgIC8vIElmIHBhdGggd2FzIGluZGV4IGludG8gYXJyYXkuLi5cbiAgICAgIGlmIChpdGVtc0lkeCA9PSBwYXJzZUludChpdGVtc0lkeCwgMTApKSB7XG4gICAgICAgIGxldCBpdGVtU3ViUGF0aCA9IGRvdCA8IDAgPyAnJyA6IGl0ZW1zUGF0aC5zdWJzdHJpbmcoZG90KzEpO1xuICAgICAgICAvLyBJZiB0aGUgcGF0aCBpcyBvYnNlcnZlZCwgaXQgd2lsbCB0cmlnZ2VyIGEgZnVsbCByZWZyZXNoXG4gICAgICAgIHRoaXMuX19oYW5kbGVPYnNlcnZlZFBhdGhzKGl0ZW1TdWJQYXRoKTtcbiAgICAgICAgLy8gTm90ZSwgZXZlbiBpZiBhIHJ1bGwgcmVmcmVzaCBpcyB0cmlnZ2VyZWQsIGFsd2F5cyBkbyB0aGUgcGF0aFxuICAgICAgICAvLyBub3RpZmljYXRpb24gYmVjYXVzZSB1bmxlc3MgbXV0YWJsZURhdGEgaXMgdXNlZCBmb3IgZG9tLXJlcGVhdFxuICAgICAgICAvLyBhbmQgYWxsIGVsZW1lbnRzIGluIHRoZSBpbnN0YW5jZSBzdWJ0cmVlLCBhIGZ1bGwgcmVmcmVzaCBtYXlcbiAgICAgICAgLy8gbm90IHRyaWdnZXIgdGhlIHByb3BlciB1cGRhdGUuXG4gICAgICAgIGxldCBpbnN0SWR4ID0gdGhpcy5fX2l0ZW1zSWR4VG9JbnN0SWR4W2l0ZW1zSWR4XTtcbiAgICAgICAgbGV0IGluc3QgPSB0aGlzLl9faW5zdGFuY2VzW2luc3RJZHhdO1xuICAgICAgICBpZiAoaW5zdCkge1xuICAgICAgICAgIGxldCBpdGVtUGF0aCA9IHRoaXMuYXMgKyAoaXRlbVN1YlBhdGggPyAnLicgKyBpdGVtU3ViUGF0aCA6ICcnKTtcbiAgICAgICAgICAvLyBUaGlzIGlzIGVmZmVjdGl2ZWx5IGBub3RpZnlQYXRoYCwgYnV0IGF2b2lkcyBzb21lIG9mIHRoZSBvdmVyaGVhZFxuICAgICAgICAgIC8vIG9mIHRoZSBwdWJsaWMgQVBJXG4gICAgICAgICAgaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKGl0ZW1QYXRoLCB2YWx1ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGluc3QuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGl0ZW0gYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gZWxlbWVudCBzdGFtcGVkIGJ5XG4gICAgICogdGhpcyBgZG9tLXJlcGVhdGAuXG4gICAgICpcbiAgICAgKiBOb3RlLCB0byBtb2RpZnkgc3ViLXByb3BlcnRpZXMgb2YgdGhlIGl0ZW0sXG4gICAgICogYG1vZGVsRm9yRWxlbWVudChlbCkuc2V0KCdpdGVtLjxzdWItcHJvcD4nLCB2YWx1ZSlgXG4gICAgICogc2hvdWxkIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBmb3Igd2hpY2ggdG8gcmV0dXJuIHRoZSBpdGVtLlxuICAgICAqIEByZXR1cm4geyp9IEl0ZW0gYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGl0ZW1Gb3JFbGVtZW50KGVsKSB7XG4gICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLm1vZGVsRm9yRWxlbWVudChlbCk7XG4gICAgICByZXR1cm4gaW5zdGFuY2UgJiYgaW5zdGFuY2VbdGhpcy5hc107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5zdCBpbmRleCBmb3IgYSBnaXZlbiBlbGVtZW50IHN0YW1wZWQgYnkgdGhpcyBgZG9tLXJlcGVhdGAuXG4gICAgICogSWYgYHNvcnRgIGlzIHByb3ZpZGVkLCB0aGUgaW5kZXggd2lsbCByZWZsZWN0IHRoZSBzb3J0ZWQgb3JkZXIgKHJhdGhlclxuICAgICAqIHRoYW4gdGhlIG9yaWdpbmFsIGFycmF5IG9yZGVyKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbCBFbGVtZW50IGZvciB3aGljaCB0byByZXR1cm4gdGhlIGluZGV4LlxuICAgICAqIEByZXR1cm4gez9udW1iZXJ9IFJvdyBpbmRleCBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQgKG5vdGUgdGhpcyBtYXlcbiAgICAgKiAgIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBhcnJheSBpbmRleCBpZiBhIHVzZXIgYHNvcnRgIGlzIGFwcGxpZWQpLlxuICAgICAqL1xuICAgIGluZGV4Rm9yRWxlbWVudChlbCkge1xuICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5tb2RlbEZvckVsZW1lbnQoZWwpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlICYmIGluc3RhbmNlW3RoaXMuaW5kZXhBc107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGVtcGxhdGUgXCJtb2RlbFwiIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIGVsZW1lbnQsIHdoaWNoXG4gICAgICogc2VydmVzIGFzIHRoZSBiaW5kaW5nIHNjb3BlIGZvciB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdGhlIGVsZW1lbnQgaXNcbiAgICAgKiBjb250YWluZWQgaW4uIEEgdGVtcGxhdGUgbW9kZWwgaXMgYW4gaW5zdGFuY2Ugb2YgYFBvbHltZXIuQmFzZWAsIGFuZFxuICAgICAqIHNob3VsZCBiZSB1c2VkIHRvIG1hbmlwdWxhdGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhpcyB0ZW1wbGF0ZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgIGxldCBtb2RlbCA9IG1vZGVsRm9yRWxlbWVudChlbCk7XG4gICAgICogICBpZiAobW9kZWwuaW5kZXggPCAxMCkge1xuICAgICAqICAgICBtb2RlbC5zZXQoJ2l0ZW0uY2hlY2tlZCcsIHRydWUpO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsIEVsZW1lbnQgZm9yIHdoaWNoIHRvIHJldHVybiBhIHRlbXBsYXRlIG1vZGVsLlxuICAgICAqIEByZXR1cm4ge1RlbXBsYXRlSW5zdGFuY2VCYXNlfSBNb2RlbCByZXByZXNlbnRpbmcgdGhlIGJpbmRpbmcgc2NvcGUgZm9yXG4gICAgICogICB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb2RlbEZvckVsZW1lbnQoZWwpIHtcbiAgICAgIHJldHVybiBQb2x5bWVyLlRlbXBsYXRpemUubW9kZWxGb3JFbGVtZW50KHRoaXMudGVtcGxhdGUsIGVsKTtcbiAgICB9XG5cbiAgfVxuXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZShEb21SZXBlYXQuaXMsIERvbVJlcGVhdCk7XG5cbiAgUG9seW1lci5Eb21SZXBlYXQgPSBEb21SZXBlYXQ7XG5cbn0pKCk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvYm9vdC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL21peGlucy9tdXRhYmxlLWRhdGEuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL21peGlucy9nZXN0dXJlLWV2ZW50LWxpc3RlbmVycy5odG1sXCI+XG5cbjxzY3JpcHQ+XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBleHRlbmRzIHtIVE1MRWxlbWVudH1cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9XG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfT3B0aW9uYWxNdXRhYmxlRGF0YX1cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9HZXN0dXJlRXZlbnRMaXN0ZW5lcnN9XG4gICAgICovXG4gICAgY29uc3QgZG9tQmluZEJhc2UgPVxuICAgICAgUG9seW1lci5HZXN0dXJlRXZlbnRMaXN0ZW5lcnMoXG4gICAgICAgIFBvbHltZXIuT3B0aW9uYWxNdXRhYmxlRGF0YShcbiAgICAgICAgICBQb2x5bWVyLlByb3BlcnR5RWZmZWN0cyhIVE1MRWxlbWVudCkpKTtcblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBlbGVtZW50IHRvIGFsbG93IHVzaW5nIFBvbHltZXIncyB0ZW1wbGF0ZSBmZWF0dXJlcyAoZGF0YSBiaW5kaW5nLFxuICAgICAqIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycywgZXRjLikgaW4gdGhlIG1haW4gZG9jdW1lbnQgd2l0aG91dCBkZWZpbmluZ1xuICAgICAqIGEgbmV3IGN1c3RvbSBlbGVtZW50LlxuICAgICAqXG4gICAgICogYDx0ZW1wbGF0ZT5gIHRhZ3MgdXRpbGl6aW5nIGJpbmRpbmdzIG1heSBiZSB3cmFwcGVkIHdpdGggdGhlIGA8ZG9tLWJpbmQ+YFxuICAgICAqIGVsZW1lbnQsIHdoaWNoIHdpbGwgaW1tZWRpYXRlbHkgc3RhbXAgdGhlIHdyYXBwZWQgdGVtcGxhdGUgaW50byB0aGUgbWFpblxuICAgICAqIGRvY3VtZW50IGFuZCBiaW5kIGVsZW1lbnRzIHRvIHRoZSBgZG9tLWJpbmRgIGVsZW1lbnQgaXRzZWxmIGFzIHRoZVxuICAgICAqIGJpbmRpbmcgc2NvcGUuXG4gICAgICpcbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBjdXN0b21FbGVtZW50XG4gICAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c1xuICAgICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5PcHRpb25hbE11dGFibGVEYXRhXG4gICAgICogQGFwcGxpZXNNaXhpbiBQb2x5bWVyLkdlc3R1cmVFdmVudExpc3RlbmVyc1xuICAgICAqIEBleHRlbmRzIHtkb21CaW5kQmFzZX1cbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgICAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IHRvIGFsbG93IHVzaW5nIFBvbHltZXIncyB0ZW1wbGF0ZSBmZWF0dXJlcyAoZGF0YVxuICAgICAqICAgYmluZGluZywgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzLCBldGMuKSBpbiB0aGUgbWFpbiBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBjbGFzcyBEb21CaW5kIGV4dGVuZHMgZG9tQmluZEJhc2Uge1xuXG4gICAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsnbXV0YWJsZS1kYXRhJ107IH1cblxuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuJCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19jaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8qKiBAcmV0dXJuIHt2b2lkfSAqL1xuICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKCkge1xuICAgICAgICAvLyBhc3N1bWVzIG9ubHkgb25lIG9ic2VydmVkIGF0dHJpYnV0ZVxuICAgICAgICB0aGlzLm11dGFibGVEYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqIEByZXR1cm4ge3ZvaWR9ICovXG4gICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuXG4gICAgICAvKiogQHJldHVybiB7dm9pZH0gKi9cbiAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9fcmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICAgIH1cblxuICAgICAgX19pbnNlcnRDaGlsZHJlbigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnJvb3QsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBfX3JlbW92ZUNoaWxkcmVuKCkge1xuICAgICAgICBpZiAodGhpcy5fX2NoaWxkcmVuKSB7XG4gICAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuX19jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5yb290LmFwcGVuZENoaWxkKHRoaXMuX19jaGlsZHJlbltpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRm9yY2VzIHRoZSBlbGVtZW50IHRvIHJlbmRlciBpdHMgY29udGVudC4gVGhpcyBpcyB0eXBpY2FsbHkgb25seVxuICAgICAgICogbmVjZXNzYXJ5IHRvIGNhbGwgaWYgSFRNTEltcG9ydHMgd2l0aCB0aGUgYXN5bmMgYXR0cmlidXRlIGFyZSB1c2VkLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdGVtcGxhdGU7XG4gICAgICAgIGlmICghdGhpcy5fX2NoaWxkcmVuKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRlbXBsYXRlIHx8IHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBjaGlsZExpc3QgY2hhbmdlcyBhbmQgdGVtcGxhdGUgc2hvdWxkIGJlIHRoZXJlIGJ5IHRoZW5cbiAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgICAgdGVtcGxhdGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovKHRoaXMucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZG9tLWJpbmQgcmVxdWlyZXMgYSA8dGVtcGxhdGU+IGNoaWxkJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLCB7Y2hpbGRMaXN0OiB0cnVlfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAgIHRoaXMuJCA9IHRoaXMucm9vdC4kO1xuICAgICAgICAgIHRoaXMuX19jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IG49dGhpcy5yb290LmZpcnN0Q2hpbGQ7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgICAgICAgdGhpcy5fX2NoaWxkcmVuW3RoaXMuX19jaGlsZHJlbi5sZW5ndGhdID0gbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19pbnNlcnRDaGlsZHJlbigpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdkb20tY2hhbmdlJywge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY29tcG9zZWQ6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tYmluZCcsIERvbUJpbmQpO1xuXG4gICAgUG9seW1lci5Eb21CaW5kID0gRG9tQmluZDtcblxuICB9KSgpO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL3RlbXBsYXRpemUuaHRtbFwiPlxuXG48c2NyaXB0PlxuICAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgbGV0IFRlbXBsYXRlSW5zdGFuY2VCYXNlID0gUG9seW1lci5UZW1wbGF0ZUluc3RhbmNlQmFzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge3tcbiAgICAgKiAgIF90ZW1wbGF0aXplclRlbXBsYXRlOiBIVE1MVGVtcGxhdGVFbGVtZW50LFxuICAgICAqICAgX3BhcmVudE1vZGVsOiBib29sZWFuLFxuICAgICAqICAgX2luc3RhbmNlUHJvcHM6IE9iamVjdCxcbiAgICAgKiAgIF9mb3J3YXJkSG9zdFByb3BWMjogRnVuY3Rpb24sXG4gICAgICogICBfbm90aWZ5SW5zdGFuY2VQcm9wVjI6IEZ1bmN0aW9uLFxuICAgICAqICAgY3RvcjogVGVtcGxhdGVJbnN0YW5jZUJhc2VcbiAgICAgKiB9fVxuICAgICAqL1xuICAgIGxldCBUZW1wbGF0aXplclVzZXI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIC8qKlxuICAgICAqIFRoZSBgUG9seW1lci5UZW1wbGF0aXplcmAgYmVoYXZpb3IgYWRkcyBtZXRob2RzIHRvIGdlbmVyYXRlIGluc3RhbmNlcyBvZlxuICAgICAqIHRlbXBsYXRlcyB0aGF0IGFyZSBlYWNoIG1hbmFnZWQgYnkgYW4gYW5vbnltb3VzIGBQb2x5bWVyLlByb3BlcnR5RWZmZWN0c2BcbiAgICAgKiBpbnN0YW5jZSB3aGVyZSBkYXRhLWJpbmRpbmdzIGluIHRoZSBzdGFtcGVkIHRlbXBsYXRlIGNvbnRlbnQgYXJlIGJvdW5kIHRvXG4gICAgICogYWNjZXNzb3JzIG9uIGl0c2VsZi5cbiAgICAgKlxuICAgICAqIFRoaXMgYmVoYXZpb3IgaXMgcHJvdmlkZWQgaW4gUG9seW1lciAyLnggYXMgYSBoeWJyaWQtZWxlbWVudCBjb252ZW5pZW5jZVxuICAgICAqIG9ubHkuICBGb3Igbm9uLWh5YnJpZCB1c2FnZSwgdGhlIGBQb2x5bWVyLlRlbXBsYXRpemVgIGxpYnJhcnlcbiAgICAgKiBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqICAgICAvLyBHZXQgYSB0ZW1wbGF0ZSBmcm9tIHNvbWV3aGVyZSwgZS5nLiBsaWdodCBET01cbiAgICAgKiAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpO1xuICAgICAqICAgICAvLyBQcmVwYXJlIHRoZSB0ZW1wbGF0ZVxuICAgICAqICAgICB0aGlzLnRlbXBsYXRpemUodGVtcGxhdGUpO1xuICAgICAqICAgICAvLyBJbnN0YW5jZSB0aGUgdGVtcGxhdGUgd2l0aCBhbiBpbml0aWFsIGRhdGEgbW9kZWxcbiAgICAgKiAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5zdGFtcCh7bXlQcm9wOiAnaW5pdGlhbCd9KTtcbiAgICAgKiAgICAgLy8gSW5zZXJ0IHRoZSBpbnN0YW5jZSdzIERPTSBzb21ld2hlcmUsIGUuZy4gbGlnaHQgRE9NXG4gICAgICogICAgIFBvbHltZXIuZG9tKHRoaXMpLmFwcGVuZENoaWxkKGluc3RhbmNlLnJvb3QpO1xuICAgICAqICAgICAvLyBDaGFuZ2luZyBhIHByb3BlcnR5IG9uIHRoZSBpbnN0YW5jZSB3aWxsIHByb3BhZ2F0ZSB0byBiaW5kaW5nc1xuICAgICAqICAgICAvLyBpbiB0aGUgdGVtcGxhdGVcbiAgICAgKiAgICAgaW5zdGFuY2UubXlQcm9wID0gJ25ldyB2YWx1ZSc7XG4gICAgICpcbiAgICAgKiBVc2VycyBvZiBgVGVtcGxhdGl6ZXJgIG1heSBuZWVkIHRvIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIGFic3RyYWN0XG4gICAgICogQVBJJ3MgdG8gZGV0ZXJtaW5lIGhvdyBwcm9wZXJ0aWVzIGFuZCBwYXRocyBmcm9tIHRoZSBob3N0IHNob3VsZCBiZVxuICAgICAqIGZvcndhcmRlZCBpbnRvIHRvIGluc3RhbmNlczpcbiAgICAgKlxuICAgICAqICAgICBfZm9yd2FyZEhvc3RQcm9wVjI6IGZ1bmN0aW9uKHByb3AsIHZhbHVlKVxuICAgICAqXG4gICAgICogTGlrZXdpc2UsIHVzZXJzIG1heSBpbXBsZW1lbnQgdGhlc2UgYWRkaXRpb25hbCBhYnN0cmFjdCBBUEkncyB0byBkZXRlcm1pbmVcbiAgICAgKiBob3cgaW5zdGFuY2Utc3BlY2lmaWMgcHJvcGVydGllcyB0aGF0IGNoYW5nZSBvbiB0aGUgaW5zdGFuY2Ugc2hvdWxkIGJlXG4gICAgICogZm9yd2FyZGVkIG91dCB0byB0aGUgaG9zdCwgaWYgbmVjZXNzYXJ5LlxuICAgICAqXG4gICAgICogICAgIF9ub3RpZnlJbnN0YW5jZVByb3BWMjogZnVuY3Rpb24oaW5zdCwgcHJvcCwgdmFsdWUpXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydGllcyBhcmUgaW5zdGFuY2Utc3BlY2lmaWMgYW5kIHJlcXVpcmVcbiAgICAgKiBjdXN0b20gbm90aWZpY2F0aW9uIHZpYSBgX25vdGlmeUluc3RhbmNlUHJvcGAsIGRlZmluZSBhbiBgX2luc3RhbmNlUHJvcHNgXG4gICAgICogb2JqZWN0IGNvbnRhaW5pbmcga2V5cyBmb3IgZWFjaCBpbnN0YW5jZSBwcm9wLCBmb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqICAgICBfaW5zdGFuY2VQcm9wczoge1xuICAgICAqICAgICAgIGl0ZW06IHRydWUsXG4gICAgICogICAgICAgaW5kZXg6IHRydWVcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogQW55IHByb3BlcnRpZXMgdXNlZCBpbiB0aGUgdGVtcGxhdGUgdGhhdCBhcmUgbm90IGRlZmluZWQgaW4gX2luc3RhbmNlUHJvcFxuICAgICAqIHdpbGwgYmUgZm9yd2FyZGVkIG91dCB0byB0aGUgVGVtcGxhdGl6ZSBgb3duZXJgIGF1dG9tYXRpY2FsbHkuXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgYWxzbyBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBhYnN0cmFjdCBmdW5jdGlvbiB0byBzaG93IG9yXG4gICAgICogaGlkZSBhbnkgRE9NIGdlbmVyYXRlZCB1c2luZyBgc3RhbXBgOlxuICAgICAqXG4gICAgICogICAgIF9zaG93SGlkZUNoaWxkcmVuOiBmdW5jdGlvbihzaG91bGRIaWRlKVxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHNvbWUgY2FsbGJhY2tzIGFyZSBzdWZmaXhlZCB3aXRoIGBWMmAgaW4gdGhlIFBvbHltZXIgMi54IGJlaGF2aW9yXG4gICAgICogYXMgdGhlIGltcGxlbWVudGF0aW9ucyB3aWxsIG5lZWQgdG8gZGlmZmVyIGZyb20gdGhlIGNhbGxiYWNrcyByZXF1aXJlZFxuICAgICAqIGJ5IHRoZSAxLnggVGVtcGxhdGl6ZXIgQVBJIGR1ZSB0byBjaGFuZ2VzIGluIHRoZSBgVGVtcGxhdGVJbnN0YW5jZWAgQVBJXG4gICAgICogYmV0d2VlbiB2ZXJzaW9ucyAxLnggYW5kIDIueC5cbiAgICAgKlxuICAgICAqIEBwb2x5bWVyQmVoYXZpb3JcbiAgICAgKi9cbiAgICBQb2x5bWVyLlRlbXBsYXRpemVyID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEdlbmVyYXRlcyBhbiBhbm9ueW1vdXMgYFRlbXBsYXRlSW5zdGFuY2VgIGNsYXNzIChzdG9yZWQgYXMgYHRoaXMuY3RvcmApXG4gICAgICAgKiBmb3IgdGhlIHByb3ZpZGVkIHRlbXBsYXRlLiAgVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbmNlIHBlclxuICAgICAgICogdGVtcGxhdGUgdG8gcHJlcGFyZSBhbiBlbGVtZW50IGZvciBzdGFtcGluZyB0aGUgdGVtcGxhdGUsIGZvbGxvd2VkXG4gICAgICAgKiBieSBgc3RhbXBgIHRvIGNyZWF0ZSBuZXcgaW5zdGFuY2VzIG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBwcmVwYXJlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXRhYmxlRGF0YSBXaGVuIGB0cnVlYCwgdGhlIGdlbmVyYXRlZCBjbGFzcyB3aWxsIHNraXBcbiAgICAgICAqICAgc3RyaWN0IGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIGFuZCBhcnJheXMgKGFsd2F5cyBjb25zaWRlciB0aGVtIHRvXG4gICAgICAgKiAgIGJlIFwiZGlydHlcIikuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqIEB0aGlzIHtUZW1wbGF0aXplclVzZXJ9XG4gICAgICAgKi9cbiAgICAgIHRlbXBsYXRpemUodGVtcGxhdGUsIG11dGFibGVEYXRhKSB7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRpemVyVGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgdGhpcy5jdG9yID0gUG9seW1lci5UZW1wbGF0aXplLnRlbXBsYXRpemUodGVtcGxhdGUsIHRoaXMsIHtcbiAgICAgICAgICBtdXRhYmxlRGF0YTogQm9vbGVhbihtdXRhYmxlRGF0YSksXG4gICAgICAgICAgcGFyZW50TW9kZWw6IHRoaXMuX3BhcmVudE1vZGVsLFxuICAgICAgICAgIGluc3RhbmNlUHJvcHM6IHRoaXMuX2luc3RhbmNlUHJvcHMsXG4gICAgICAgICAgZm9yd2FyZEhvc3RQcm9wOiB0aGlzLl9mb3J3YXJkSG9zdFByb3BWMixcbiAgICAgICAgICBub3RpZnlJbnN0YW5jZVByb3A6IHRoaXMuX25vdGlmeUluc3RhbmNlUHJvcFYyXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBwcmVwYXJlZCBieSBgdGVtcGxhdGl6ZWAuICBUaGUgb2JqZWN0XG4gICAgICAgKiByZXR1cm5lZCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgYW5vbnltb3VzIGNsYXNzIGdlbmVyYXRlZCBieSBgdGVtcGxhdGl6ZWBcbiAgICAgICAqIHdob3NlIGByb290YCBwcm9wZXJ0eSBpcyBhIGRvY3VtZW50IGZyYWdtZW50IGNvbnRhaW5pbmcgbmV3bHkgY2xvbmVkXG4gICAgICAgKiB0ZW1wbGF0ZSBjb250ZW50LCBhbmQgd2hpY2ggaGFzIHByb3BlcnR5IGFjY2Vzc29ycyBjb3JyZXNwb25kaW5nIHRvXG4gICAgICAgKiBwcm9wZXJ0aWVzIHJlZmVyZW5jZWQgaW4gdGVtcGxhdGUgYmluZGluZ3MuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBtb2RlbCBPYmplY3QgY29udGFpbmluZyBpbml0aWFsIHByb3BlcnR5IHZhbHVlcyB0b1xuICAgICAgICogICBwb3B1bGF0ZSBpbnRvIHRoZSB0ZW1wbGF0ZSBiaW5kaW5ncy5cbiAgICAgICAqIEByZXR1cm4ge1RlbXBsYXRlSW5zdGFuY2VCYXNlfSBSZXR1cm5zIHRoZSBjcmVhdGVkIGluc3RhbmNlIG9mXG4gICAgICAgKiB0aGUgdGVtcGxhdGUgcHJlcGFyZWQgYnkgYHRlbXBsYXRpemVgLlxuICAgICAgICogQHRoaXMge1RlbXBsYXRpemVyVXNlcn1cbiAgICAgICAqL1xuICAgICAgc3RhbXAobW9kZWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmN0b3IobW9kZWwpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBcIm1vZGVsXCIgKGBUZW1wbGF0ZUluc3RhbmNlYCkgYXNzb2NpYXRlZCB3aXRoXG4gICAgICAgKiBhIGdpdmVuIGVsZW1lbnQsIHdoaWNoIHNlcnZlcyBhcyB0aGUgYmluZGluZyBzY29wZSBmb3IgdGhlIHRlbXBsYXRlXG4gICAgICAgKiBpbnN0YW5jZSB0aGUgZWxlbWVudCBpcyBjb250YWluZWQgaW4uICBBIHRlbXBsYXRlIG1vZGVsIHNob3VsZCBiZSB1c2VkXG4gICAgICAgKiB0byBtYW5pcHVsYXRlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdGVtcGxhdGUgaW5zdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBmb3Igd2hpY2ggdG8gcmV0dXJuIGEgdGVtcGxhdGUgbW9kZWwuXG4gICAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZUluc3RhbmNlQmFzZX0gTW9kZWwgcmVwcmVzZW50aW5nIHRoZSBiaW5kaW5nIHNjb3BlIGZvclxuICAgICAgICogICB0aGUgZWxlbWVudC5cbiAgICAgICAqIEB0aGlzIHtUZW1wbGF0aXplclVzZXJ9XG4gICAgICAgKi9cbiAgICAgIG1vZGVsRm9yRWxlbWVudChlbCkge1xuICAgICAgICByZXR1cm4gUG9seW1lci5UZW1wbGF0aXplLm1vZGVsRm9yRWxlbWVudCh0aGlzLl90ZW1wbGF0aXplclRlbXBsYXRlLCBlbCk7XG4gICAgICB9XG4gICAgfTtcblxuICB9KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwibGVnYWN5LWVsZW1lbnQtbWl4aW4uaHRtbFwiPlxuPHNjcmlwdD5cblxuICAoZnVuY3Rpb24oKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBsZXQgbWV0YVByb3BzID0ge1xuICAgICAgYXR0YWNoZWQ6IHRydWUsXG4gICAgICBkZXRhY2hlZDogdHJ1ZSxcbiAgICAgIHJlYWR5OiB0cnVlLFxuICAgICAgY3JlYXRlZDogdHJ1ZSxcbiAgICAgIGJlZm9yZVJlZ2lzdGVyOiB0cnVlLFxuICAgICAgcmVnaXN0ZXJlZDogdHJ1ZSxcbiAgICAgIGF0dHJpYnV0ZUNoYW5nZWQ6IHRydWUsXG4gICAgICAvLyBtZXRhIG9iamVjdHNcbiAgICAgIGJlaGF2aW9yczogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgXCJsZWdhY3lcIiBiZWhhdmlvciBvciBhcnJheSBvZiBiZWhhdmlvcnMgdG8gdGhlIHByb3ZpZGVkIGNsYXNzLlxuICAgICAqXG4gICAgICogTm90ZTogdGhpcyBtZXRob2Qgd2lsbCBhdXRvbWF0aWNhbGx5IGFsc28gYXBwbHkgdGhlIGBQb2x5bWVyLkxlZ2FjeUVsZW1lbnRNaXhpbmBcbiAgICAgKiB0byBlbnN1cmUgdGhhdCBhbnkgbGVnYWN5IGJlaGF2aW9ycyBjYW4gcmVseSBvbiBsZWdhY3kgUG9seW1lciBBUEkgb25cbiAgICAgKiB0aGUgdW5kZXJseWluZyBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0geyFPYmplY3R8IUFycmF5PCFPYmplY3Q+fSBiZWhhdmlvcnMgQmVoYXZpb3Igb2JqZWN0IG9yIGFycmF5IG9mIGJlaGF2aW9ycy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0ga2xhc3MgRWxlbWVudCBjbGFzcy5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IFJldHVybnMgYSBuZXcgRWxlbWVudCBjbGFzcyBleHRlbmRlZCBieSB0aGVcbiAgICAgKiBwYXNzZWQgaW4gYGJlaGF2aW9yc2AgYW5kIGFsc28gYnkgYFBvbHltZXIuTGVnYWN5RWxlbWVudE1peGluYC5cbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzLCBjaGVja1R5cGVzfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluQmVoYXZpb3JzKGJlaGF2aW9ycywga2xhc3MpIHtcbiAgICAgIGlmICghYmVoYXZpb3JzKSB7XG4gICAgICAgIGtsYXNzID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8oa2xhc3MpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICAgIHJldHVybiBrbGFzcztcbiAgICAgIH1cbiAgICAgIC8vIE5PVEU6IGVuc3VyZSB0aGUgYmVoYXZpb3IgaXMgZXh0ZW5kaW5nIGEgY2xhc3Mgd2l0aFxuICAgICAgLy8gbGVnYWN5IGVsZW1lbnQgYXBpLiBUaGlzIGlzIG5lY2Vzc2FyeSBzaW5jZSBiZWhhdmlvcnMgZXhwZWN0IHRvIGJlIGFibGVcbiAgICAgIC8vIHRvIGFjY2VzcyAxLnggbGVnYWN5IGFwaS5cbiAgICAgIGtsYXNzID0gUG9seW1lci5MZWdhY3lFbGVtZW50TWl4aW4oa2xhc3MpO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGJlaGF2aW9ycykpIHtcbiAgICAgICAgYmVoYXZpb3JzID0gW2JlaGF2aW9yc107XG4gICAgICB9XG4gICAgICBsZXQgc3VwZXJCZWhhdmlvcnMgPSBrbGFzcy5wcm90b3R5cGUuYmVoYXZpb3JzO1xuICAgICAgLy8gZ2V0IGZsYXR0ZW5lZCwgZGVkdXBlZCBsaXN0IG9mIGJlaGF2aW9ycyAqbm90KiBhbHJlYWR5IG9uIHN1cGVyIGNsYXNzXG4gICAgICBiZWhhdmlvcnMgPSBmbGF0dGVuQmVoYXZpb3JzKGJlaGF2aW9ycywgbnVsbCwgc3VwZXJCZWhhdmlvcnMpO1xuICAgICAgLy8gbWl4aW4gbmV3IGJlaGF2aW9yc1xuICAgICAga2xhc3MgPSBfbWl4aW5CZWhhdmlvcnMoYmVoYXZpb3JzLCBrbGFzcyk7XG4gICAgICBpZiAoc3VwZXJCZWhhdmlvcnMpIHtcbiAgICAgICAgYmVoYXZpb3JzID0gc3VwZXJCZWhhdmlvcnMuY29uY2F0KGJlaGF2aW9ycyk7XG4gICAgICB9XG4gICAgICAvLyBTZXQgYmVoYXZpb3JzIG9uIHByb3RvdHlwZSBmb3IgQkMuLi5cbiAgICAgIGtsYXNzLnByb3RvdHlwZS5iZWhhdmlvcnMgPSBiZWhhdmlvcnM7XG4gICAgICByZXR1cm4ga2xhc3M7XG4gICAgfVxuXG4gICAgLy8gTk9URTpcbiAgICAvLyAxLnhcbiAgICAvLyBCZWhhdmlvcnMgd2VyZSBtaXhlZCBpbiAqaW4gcmV2ZXJzZSBvcmRlciogYW5kIGRlLWR1cGVkIG9uIHRoZSBmbHkuXG4gICAgLy8gVGhlIHJ1bGUgd2FzIHRoYXQgYmVoYXZpb3IgcHJvcGVydGllcyB3ZXJlIGNvcGllZCBvbnRvIHRoZSBlbGVtZW50XG4gICAgLy8gcHJvdG90eXBlIGlmIGFuZCBvbmx5IGlmIHRoZSBwcm9wZXJ0eSBkaWQgbm90IGFscmVhZHkgZXhpc3QuXG4gICAgLy8gR2l2ZW46IFBvbHltZXJ7IGJlaGF2aW9yczogW0EsIEIsIEMsIEEsIEJdfSwgcHJvcGVydHkgY29weSBvcmRlciB3YXM6XG4gICAgLy8gKDEpLCBCLCAoMiksIEEsICgzKSBDLiBUaGlzIG1lYW5zIHByb3RvdHlwZSBwcm9wZXJ0aWVzIHdpbiBvdmVyXG4gICAgLy8gQiBwcm9wZXJ0aWVzIHdpbiBvdmVyIEEgd2luIG92ZXIgQy4gVGhpcyBtaXJyb3JzIHdoYXQgd291bGQgaGFwcGVuXG4gICAgLy8gd2l0aCBpbmhlcml0YW5jZSBpZiBlbGVtZW50IGV4dGVuZGVkIEIgZXh0ZW5kZWQgQSBleHRlbmRlZCBDLlxuICAgIC8vXG4gICAgLy8gQWdhaW4gZ2l2ZW4sIFBvbHltZXJ7IGJlaGF2aW9yczogW0EsIEIsIEMsIEEsIEJdfSwgdGhlIHJlc3VsdGluZ1xuICAgIC8vIGBiZWhhdmlvcnNgIGFycmF5IHdhcyBbQywgQSwgQl0uXG4gICAgLy8gQmVoYXZpb3IgbGlmZWN5Y2xlIG1ldGhvZHMgd2VyZSBjYWxsZWQgaW4gYmVoYXZpb3IgYXJyYXkgb3JkZXJcbiAgICAvLyBmb2xsb3dlZCBieSB0aGUgZWxlbWVudCwgZS5nLiAoMSkgQy5jcmVhdGVkLCAoMikgQS5jcmVhdGVkLFxuICAgIC8vICgzKSBCLmNyZWF0ZWQsICg0KSBlbGVtZW50LmNyZWF0ZWQuIFRoZXJlIHdhcyBubyBzdXBwb3J0IGZvclxuICAgIC8vIHN1cGVyLCBhbmQgXCJzdXBlci1iZWhhdmlvclwiIG1ldGhvZHMgd2VyZSBjYWxsYWJsZSBvbmx5IGJ5IG5hbWUpLlxuICAgIC8vXG4gICAgLy8gMi54XG4gICAgLy8gQmVoYXZpb3JzIGFyZSBtYWRlIGludG8gcHJvcGVyIG1peGlucyB3aGljaCBsaXZlIGluIHRoZVxuICAgIC8vIGVsZW1lbnQncyBwcm90b3R5cGUgY2hhaW4uIEJlaGF2aW9ycyBhcmUgcGxhY2VkIGluIHRoZSBlbGVtZW50IHByb3RvdHlwZVxuICAgIC8vIGVsZGVzdCB0byB5b3VuZ2VzdCBhbmQgZGUtZHVwZWQgeW91bmdlc3QgdG8gb2xkZXN0OlxuICAgIC8vIFNvLCBmaXJzdCBbQSwgQiwgQywgQSwgQl0gYmVjb21lcyBbQywgQSwgQl0gdGhlbixcbiAgICAvLyB0aGUgZWxlbWVudCBwcm90b3R5cGUgYmVjb21lcyAob2xkZXN0KSAoMSkgUG9seW1lci5FbGVtZW50LCAoMikgY2xhc3MoQyksXG4gICAgLy8gKDMpIGNsYXNzKEEpLCAoNCkgY2xhc3MoQiksICg1KSBjbGFzcyhQb2x5bWVyKHsuLi59KSkuXG4gICAgLy8gUmVzdWx0OlxuICAgIC8vIFRoaXMgbWVhbnMgZWxlbWVudCBwcm9wZXJ0aWVzIHdpbiBvdmVyIEIgcHJvcGVydGllcyB3aW4gb3ZlciBBIHdpblxuICAgIC8vIG92ZXIgQy4gKHNhbWUgYXMgMS54KVxuICAgIC8vIElmIGxpZmVjeWNsZSBpcyBjYWxsZWQgKHN1cGVyIHRoZW4gbWUpLCBvcmRlciBpc1xuICAgIC8vICgxKSBDLmNyZWF0ZWQsICgyKSBBLmNyZWF0ZWQsICgzKSBCLmNyZWF0ZWQsICg0KSBlbGVtZW50LmNyZWF0ZWRcbiAgICAvLyAoYWdhaW4gc2FtZSBhcyAxLngpXG4gICAgZnVuY3Rpb24gX21peGluQmVoYXZpb3JzKGJlaGF2aW9ycywga2xhc3MpIHtcbiAgICAgIGZvciAobGV0IGk9MDsgaTxiZWhhdmlvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGIgPSBiZWhhdmlvcnNbaV07XG4gICAgICAgIGlmIChiKSB7XG4gICAgICAgICAga2xhc3MgPSBBcnJheS5pc0FycmF5KGIpID8gX21peGluQmVoYXZpb3JzKGIsIGtsYXNzKSA6XG4gICAgICAgICAgICBHZW5lcmF0ZUNsYXNzRnJvbUluZm8oYiwga2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ga2xhc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtBcnJheX0gYmVoYXZpb3JzIExpc3Qgb2YgYmVoYXZpb3JzIHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtBcnJheT19IGxpc3QgVGFyZ2V0IGxpc3QgdG8gZmxhdHRlbiBiZWhhdmlvcnMgaW50by5cbiAgICAgKiBAcGFyYW0ge0FycmF5PX0gZXhjbHVkZSBMaXN0IG9mIGJlaGF2aW9ycyB0byBleGNsdWRlIGZyb20gdGhlIGxpc3QuXG4gICAgICogQHJldHVybiB7IUFycmF5fSBSZXR1cm5zIHRoZSBsaXN0IG9mIGZsYXR0ZW5lZCBiZWhhdmlvcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkJlaGF2aW9ycyhiZWhhdmlvcnMsIGxpc3QsIGV4Y2x1ZGUpIHtcbiAgICAgIGxpc3QgPSBsaXN0IHx8IFtdO1xuICAgICAgZm9yIChsZXQgaT1iZWhhdmlvcnMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGxldCBiID0gYmVoYXZpb3JzW2ldO1xuICAgICAgICBpZiAoYikge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICBmbGF0dGVuQmVoYXZpb3JzKGIsIGxpc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWR1cFxuICAgICAgICAgICAgaWYgKGxpc3QuaW5kZXhPZihiKSA8IDAgJiYgKCFleGNsdWRlIHx8IGV4Y2x1ZGUuaW5kZXhPZihiKSA8IDApKSB7XG4gICAgICAgICAgICAgIGxpc3QudW5zaGlmdChiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdiZWhhdmlvciBpcyBudWxsLCBjaGVjayBmb3IgbWlzc2luZyBvciA0MDQgaW1wb3J0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIFBvbHltZXIgaW5mbyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCl9IEJhc2UgYmFzZSBjbGFzcyB0byBleHRlbmQgd2l0aCBpbmZvIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCl9IEdlbmVyYXRlZCBjbGFzc1xuICAgICAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEdlbmVyYXRlQ2xhc3NGcm9tSW5mbyhpbmZvLCBCYXNlKSB7XG5cbiAgICAgIGNsYXNzIFBvbHltZXJHZW5lcmF0ZWQgZXh0ZW5kcyBCYXNlIHtcblxuICAgICAgICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIGluZm8ucHJvcGVydGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgICAgICAgIHJldHVybiBpbmZvLm9ic2VydmVycztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBmb3IgdGhpcyBjbGFzc1xuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgICAvLyBnZXQgdGVtcGxhdGUgZmlyc3QgZnJvbSBhbnkgaW1wZXJhdGl2ZSBzZXQgaW4gYGluZm8uX3RlbXBsYXRlYFxuICAgICAgICAgIHJldHVybiBpbmZvLl90ZW1wbGF0ZSB8fFxuICAgICAgICAgICAgLy8gbmV4dCBsb29rIGluIGRvbS1tb2R1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZWxlbWVudCdzIGlzLlxuICAgICAgICAgICAgUG9seW1lci5Eb21Nb2R1bGUgJiYgUG9seW1lci5Eb21Nb2R1bGUuaW1wb3J0KHRoaXMuaXMsICd0ZW1wbGF0ZScpIHx8XG4gICAgICAgICAgICAvLyBuZXh0IGxvb2sgZm9yIHN1cGVyY2xhc3MgdGVtcGxhdGUgKG5vdGU6IHVzZSBzdXBlcmNsYXNzIHN5bWJvbFxuICAgICAgICAgICAgLy8gdG8gZW5zdXJlIGNvcnJlY3QgYHRoaXMuaXNgKVxuICAgICAgICAgICAgQmFzZS50ZW1wbGF0ZSB8fFxuICAgICAgICAgICAgLy8gZmluYWxseSBmYWxsIGJhY2sgdG8gYF90ZW1wbGF0ZWAgaW4gZWxlbWVudCdzIHByb3RvdHlwZS5cbiAgICAgICAgICAgIHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZSB8fFxuICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlZCgpIHtcbiAgICAgICAgICBzdXBlci5jcmVhdGVkKCk7XG4gICAgICAgICAgaWYgKGluZm8uY3JlYXRlZCkge1xuICAgICAgICAgICAgaW5mby5jcmVhdGVkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBfcmVnaXN0ZXJlZCgpIHtcbiAgICAgICAgICBzdXBlci5fcmVnaXN0ZXJlZCgpO1xuICAgICAgICAgIC8qIE5PVEU6IGBiZWZvcmVSZWdpc3RlcmAgaXMgY2FsbGVkIGhlcmUgZm9yIGJjLCBidXQgdGhlIGJlaGF2aW9yXG4gICAgICAgICAgIGlzIGRpZmZlcmVudCB0aGFuIGluIDEueC4gSW4gMS4wLCB0aGUgbWV0aG9kIHdhcyBjYWxsZWQgKmFmdGVyKlxuICAgICAgICAgICBtaXhpbmcgcHJvdG90eXBlcyB0b2dldGhlciBidXQgKmJlZm9yZSogcHJvY2Vzc2luZyBvZiBtZXRhLW9iamVjdHMuXG4gICAgICAgICAgIEhvd2V2ZXIsIGR5bmFtaWMgZWZmZWN0cyBjYW4gc3RpbGwgYmUgc2V0IGhlcmUgYW5kIGNhbiBiZSBkb25lIGVpdGhlclxuICAgICAgICAgICBpbiBgYmVmb3JlUmVnaXN0ZXJgIG9yIGByZWdpc3RlcmVkYC4gSXQgaXMgbm8gbG9uZ2VyIHBvc3NpYmxlIHRvIHNldFxuICAgICAgICAgICBgaXNgIGluIGBiZWZvcmVSZWdpc3RlcmAgYXMgeW91IGNvdWxkIGluIDEueC5cbiAgICAgICAgICAqL1xuICAgICAgICAgIGlmIChpbmZvLmJlZm9yZVJlZ2lzdGVyKSB7XG4gICAgICAgICAgICBpbmZvLmJlZm9yZVJlZ2lzdGVyLmNhbGwoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZm8ucmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgaW5mby5yZWdpc3RlcmVkLmNhbGwoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIF9hcHBseUxpc3RlbmVycygpIHtcbiAgICAgICAgICBzdXBlci5fYXBwbHlMaXN0ZW5lcnMoKTtcbiAgICAgICAgICBpZiAoaW5mby5saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGwgaW4gaW5mby5saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZSh0aGlzLCBsLCBpbmZvLmxpc3RlbmVyc1tsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm90ZTogZXhjZXB0aW9uIHRvIFwic3VwZXIgdGhlbiBtZVwiIHJ1bGU7XG4gICAgICAgIC8vIGRvIHdvcmsgYmVmb3JlIGNhbGxpbmcgc3VwZXIgc28gdGhhdCBzdXBlciBhdHRyaWJ1dGVzXG4gICAgICAgIC8vIG9ubHkgYXBwbHkgaWYgbm90IGFscmVhZHkgc2V0LlxuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIF9lbnN1cmVBdHRyaWJ1dGVzKCkge1xuICAgICAgICAgIGlmIChpbmZvLmhvc3RBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBhIGluIGluZm8uaG9zdEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZW5zdXJlQXR0cmlidXRlKGEsIGluZm8uaG9zdEF0dHJpYnV0ZXNbYV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdXBlci5fZW5zdXJlQXR0cmlidXRlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICByZWFkeSgpIHtcbiAgICAgICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgICAgIGlmIChpbmZvLnJlYWR5KSB7XG4gICAgICAgICAgICBpbmZvLnJlYWR5LmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBhdHRhY2hlZCgpIHtcbiAgICAgICAgICBzdXBlci5hdHRhY2hlZCgpO1xuICAgICAgICAgIGlmIChpbmZvLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICBpbmZvLmF0dGFjaGVkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBkZXRhY2hlZCgpIHtcbiAgICAgICAgICBzdXBlci5kZXRhY2hlZCgpO1xuICAgICAgICAgIGlmIChpbmZvLmRldGFjaGVkKSB7XG4gICAgICAgICAgICBpbmZvLmRldGFjaGVkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudHMgbmF0aXZlIEN1c3RvbSBFbGVtZW50cyBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0b1xuICAgICAgICAgKiBzZXQgYW4gYXR0cmlidXRlIHZhbHVlIHRvIGEgcHJvcGVydHkgdmlhIGBfYXR0cmlidXRlVG9Qcm9wZXJ0eWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlIHRoYXQgY2hhbmdlZFxuICAgICAgICAgKiBAcGFyYW0gez9zdHJpbmd9IG9sZCBPbGQgYXR0cmlidXRlIHZhbHVlXG4gICAgICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgTmV3IGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBvbGQsIHZhbHVlKSB7XG4gICAgICAgICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZChuYW1lLCBvbGQsIHZhbHVlKTtcbiAgICAgICAgICBpZiAoaW5mby5hdHRyaWJ1dGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICBpbmZvLmF0dHJpYnV0ZUNoYW5nZWQuY2FsbCh0aGlzLCBuYW1lLCBvbGQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgfVxuICAgICAgfVxuXG4gICAgICBQb2x5bWVyR2VuZXJhdGVkLmdlbmVyYXRlZEZyb20gPSBpbmZvO1xuXG4gICAgICBmb3IgKGxldCBwIGluIGluZm8pIHtcbiAgICAgICAgLy8gTk9URTogY2Fubm90IGNvcHkgYG1ldGFQcm9wc2AgbWV0aG9kcyBvbnRvIHByb3RvdHlwZSBhdCBsZWFzdCBiZWNhdXNlXG4gICAgICAgIC8vIGBzdXBlci5yZWFkeWAgbXVzdCBiZSBjYWxsZWQgYW5kIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgdXNlciBmbi5cbiAgICAgICAgaWYgKCEocCBpbiBtZXRhUHJvcHMpKSB7XG4gICAgICAgICAgbGV0IHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpbmZvLCBwKTtcbiAgICAgICAgICBpZiAocGQpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2x5bWVyR2VuZXJhdGVkLnByb3RvdHlwZSwgcCwgcGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUG9seW1lckdlbmVyYXRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBjbGFzcyB0aGF0IGV4dGVuZHMgYFBvbHltZXIuTGVnYWN5RWxlbWVudGAgYmFzZWQgb24gdGhlXG4gICAgICogcHJvdmlkZWQgaW5mbyBvYmplY3QuICBNZXRhZGF0YSBvYmplY3RzIG9uIHRoZSBgaW5mb2Agb2JqZWN0XG4gICAgICogKGBwcm9wZXJ0aWVzYCwgYG9ic2VydmVyc2AsIGBsaXN0ZW5lcnNgLCBgYmVoYXZpb3JzYCwgYGlzYCkgYXJlIHVzZWRcbiAgICAgKiBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmcgc3lzdGVtcywgYW5kIGFueSBmdW5jdGlvbnMgYXJlIGNvcGllZFxuICAgICAqIHRvIHRoZSBnZW5lcmF0ZWQgY2xhc3MuXG4gICAgICpcbiAgICAgKiBWYWxpZCBcIm1ldGFkYXRhXCIgdmFsdWVzIGFyZSBhcyBmb2xsb3dzOlxuICAgICAqXG4gICAgICogYGlzYDogU3RyaW5nIHByb3ZpZGluZyB0aGUgdGFnIG5hbWUgdG8gcmVnaXN0ZXIgdGhlIGVsZW1lbnQgdW5kZXIuIEluXG4gICAgICogYWRkaXRpb24sIGlmIGEgYGRvbS1tb2R1bGVgIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzLCB0aGUgZmlyc3QgdGVtcGxhdGVcbiAgICAgKiBpbiB0aGF0IGBkb20tbW9kdWxlYCB3aWxsIGJlIHN0YW1wZWQgaW50byB0aGUgc2hhZG93IHJvb3Qgb2YgdGhpcyBlbGVtZW50LFxuICAgICAqIHdpdGggc3VwcG9ydCBmb3IgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzIChgb24tLi4uYCksIFBvbHltZXIgZGF0YVxuICAgICAqIGJpbmRpbmdzIChgW1suLi5dXWAgYW5kIGB7ey4uLn19YCksIGFuZCBpZC1iYXNlZCBub2RlIGZpbmRpbmcgaW50b1xuICAgICAqIGB0aGlzLiRgLlxuICAgICAqXG4gICAgICogYHByb3BlcnRpZXNgOiBPYmplY3QgZGVzY3JpYmluZyBwcm9wZXJ0eS1yZWxhdGVkIG1ldGFkYXRhIHVzZWQgYnkgUG9seW1lclxuICAgICAqIGZlYXR1cmVzIChrZXk6IHByb3BlcnR5IG5hbWVzLCB2YWx1ZTogb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydHkgbWV0YWRhdGEpLlxuICAgICAqIFZhbGlkIGtleXMgaW4gcGVyLXByb3BlcnR5IG1ldGFkYXRhIGluY2x1ZGU6XG4gICAgICogLSBgdHlwZWAgKFN0cmluZ3xOdW1iZXJ8T2JqZWN0fEFycmF5fC4uLik6IFVzZWQgYnlcbiAgICAgKiAgIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvIGRldGVybWluZSBob3cgc3RyaW5nLWJhc2VkIGF0dHJpYnV0ZXNcbiAgICAgKiAgIGFyZSBkZXNlcmlhbGl6ZWQgdG8gSmF2YVNjcmlwdCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogLSBgbm90aWZ5YCAoYm9vbGVhbik6IENhdXNlcyBhIGNoYW5nZSBpbiB0aGUgcHJvcGVydHkgdG8gZmlyZSBhXG4gICAgICogICBub24tYnViYmxpbmcgZXZlbnQgY2FsbGVkIGA8cHJvcGVydHk+LWNoYW5nZWRgLiBFbGVtZW50cyB0aGF0IGhhdmVcbiAgICAgKiAgIGVuYWJsZWQgdHdvLXdheSBiaW5kaW5nIHRvIHRoZSBwcm9wZXJ0eSB1c2UgdGhpcyBldmVudCB0byBvYnNlcnZlIGNoYW5nZXMuXG4gICAgICogLSBgcmVhZE9ubHlgIChib29sZWFuKTogQ3JlYXRlcyBhIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LCBidXQgbm8gc2V0dGVyLlxuICAgICAqICAgVG8gc2V0IGEgcmVhZC1vbmx5IHByb3BlcnR5LCB1c2UgdGhlIHByaXZhdGUgc2V0dGVyIG1ldGhvZFxuICAgICAqICAgYF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpYC5cbiAgICAgKiAtIGBvYnNlcnZlcmAgKHN0cmluZyk6IE9ic2VydmVyIG1ldGhvZCBuYW1lIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAgICAqICAgdGhlIHByb3BlcnR5IGNoYW5nZXMuIFRoZSBhcmd1bWVudHMgb2YgdGhlIG1ldGhvZCBhcmVcbiAgICAgKiAgIGAodmFsdWUsIHByZXZpb3VzVmFsdWUpYC5cbiAgICAgKiAtIGBjb21wdXRlZGAgKHN0cmluZyk6IFN0cmluZyBkZXNjcmliaW5nIG1ldGhvZCBhbmQgZGVwZW5kZW50IHByb3BlcnRpZXNcbiAgICAgKiAgIGZvciBjb21wdXRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgcHJvcGVydHkgKGUuZy4gYCdjb21wdXRlRm9vKGJhciwgem90KSdgKS5cbiAgICAgKiAgIENvbXB1dGVkIHByb3BlcnRpZXMgYXJlIHJlYWQtb25seSBieSBkZWZhdWx0IGFuZCBjYW4gb25seSBiZSBjaGFuZ2VkXG4gICAgICogICB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY29tcHV0aW5nIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIGBvYnNlcnZlcnNgOiBBcnJheSBvZiBzdHJpbmdzIGRlc2NyaWJpbmcgbXVsdGktcHJvcGVydHkgb2JzZXJ2ZXIgbWV0aG9kc1xuICAgICAqICBhbmQgdGhlaXIgZGVwZW5kZW50IHByb3BlcnRpZXMgKGUuZy4gYCdvYnNlcnZlQUJDKGEsIGIsIGMpJ2ApLlxuICAgICAqXG4gICAgICogYGxpc3RlbmVyc2A6IE9iamVjdCBkZXNjcmliaW5nIGV2ZW50IGxpc3RlbmVycyB0byBiZSBhZGRlZCB0byBlYWNoXG4gICAgICogIGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCAoa2V5OiBldmVudCBuYW1lLCB2YWx1ZTogbWV0aG9kIG5hbWUpLlxuICAgICAqXG4gICAgICogYGJlaGF2aW9yc2A6IEFycmF5IG9mIGFkZGl0aW9uYWwgYGluZm9gIG9iamVjdHMgY29udGFpbmluZyBtZXRhZGF0YVxuICAgICAqIGFuZCBjYWxsYmFja3MgaW4gdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgaW5mb2Agb2JqZWN0IGhlcmUgd2hpY2ggYXJlXG4gICAgICogbWVyZ2VkIGludG8gdGhpcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogYGhvc3RBdHRyaWJ1dGVzYDogT2JqZWN0IGxpc3RpbmcgYXR0cmlidXRlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBob3N0XG4gICAgICogIG9uY2UgY3JlYXRlZCAoa2V5OiBhdHRyaWJ1dGUgbmFtZSwgdmFsdWU6IGF0dHJpYnV0ZSB2YWx1ZSkuICBWYWx1ZXNcbiAgICAgKiAgYXJlIHNlcmlhbGl6ZWQgYmFzZWQgb24gdGhlIHR5cGUgb2YgdGhlIHZhbHVlLiAgSG9zdCBhdHRyaWJ1dGVzIHNob3VsZFxuICAgICAqICBnZW5lcmFsbHkgYmUgbGltaXRlZCB0byBhdHRyaWJ1dGVzIHN1Y2ggYXMgYHRhYkluZGV4YCBhbmQgYGFyaWEtLi4uYC5cbiAgICAgKiAgQXR0cmlidXRlcyBpbiBgaG9zdEF0dHJpYnV0ZXNgIGFyZSBvbmx5IGFwcGxpZWQgaWYgYSB1c2VyLXN1cHBsaWVkXG4gICAgICogIGF0dHJpYnV0ZSBpcyBub3QgYWxyZWFkeSBwcmVzZW50IChhdHRyaWJ1dGVzIGluIG1hcmt1cCBvdmVycmlkZVxuICAgICAqICBgaG9zdEF0dHJpYnV0ZXNgKS5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uLCB0aGUgZm9sbG93aW5nIFBvbHltZXItc3BlY2lmaWMgY2FsbGJhY2tzIG1heSBiZSBwcm92aWRlZDpcbiAgICAgKiAtIGByZWdpc3RlcmVkYDogY2FsbGVkIGFmdGVyIGZpcnN0IGluc3RhbmNlIG9mIHRoaXMgZWxlbWVudCxcbiAgICAgKiAtIGBjcmVhdGVkYDogY2FsbGVkIGR1cmluZyBgY29uc3RydWN0b3JgXG4gICAgICogLSBgYXR0YWNoZWRgOiBjYWxsZWQgZHVyaW5nIGBjb25uZWN0ZWRDYWxsYmFja2BcbiAgICAgKiAtIGBkZXRhY2hlZGA6IGNhbGxlZCBkdXJpbmcgYGRpc2Nvbm5lY3RlZENhbGxiYWNrYFxuICAgICAqIC0gYHJlYWR5YDogY2FsbGVkIGJlZm9yZSBmaXJzdCBgYXR0YWNoZWRgLCBhZnRlciBhbGwgcHJvcGVydGllcyBvZlxuICAgICAqICAgdGhpcyBlbGVtZW50IGhhdmUgYmVlbiBwcm9wYWdhdGVkIHRvIGl0cyB0ZW1wbGF0ZSBhbmQgYWxsIG9ic2VydmVyc1xuICAgICAqICAgaGF2ZSBydW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIE9iamVjdCBjb250YWluaW5nIFBvbHltZXIgbWV0YWRhdGEgYW5kIGZ1bmN0aW9uc1xuICAgICAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24obmV3OkhUTUxFbGVtZW50KX0gR2VuZXJhdGVkIGNsYXNzXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICAgKi9cbiAgICBQb2x5bWVyLkNsYXNzID0gZnVuY3Rpb24oaW5mbykge1xuICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUG9seW1lci5DbGFzcyByZXF1aXJlcyBgaW5mb2AgYXJndW1lbnQnKTtcbiAgICAgIH1cbiAgICAgIGxldCBrbGFzcyA9IEdlbmVyYXRlQ2xhc3NGcm9tSW5mbyhpbmZvLCBpbmZvLmJlaGF2aW9ycyA/XG4gICAgICAgIC8vIG5vdGU6IG1peGluQmVoYXZpb3JzIGVuc3VyZXMgYExlZ2FjeUVsZW1lbnRNaXhpbmAuXG4gICAgICAgIG1peGluQmVoYXZpb3JzKGluZm8uYmVoYXZpb3JzLCBIVE1MRWxlbWVudCkgOlxuICAgICAgICBQb2x5bWVyLkxlZ2FjeUVsZW1lbnRNaXhpbihIVE1MRWxlbWVudCkpO1xuICAgICAgLy8gZGVjb3JhdGUga2xhc3Mgd2l0aCByZWdpc3RyYXRpb24gaW5mb1xuICAgICAga2xhc3MuaXMgPSBpbmZvLmlzO1xuICAgICAgcmV0dXJuIGtsYXNzO1xuICAgIH07XG5cbiAgICBQb2x5bWVyLm1peGluQmVoYXZpb3JzID0gbWl4aW5CZWhhdmlvcnM7XG5cbiAgfSkoKTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJjbGFzcy5odG1sXCI+XG5cbjxzY3JpcHQ+XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIExlZ2FjeSBjbGFzcyBmYWN0b3J5IGFuZCByZWdpc3RyYXRpb24gaGVscGVyIGZvciBkZWZpbmluZyBQb2x5bWVyXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvXG4gICAgICogYGN1c3RvbUVsZW1lbnRzLmRlZmluZShpbmZvLmlzLCBQb2x5bWVyLkNsYXNzKGluZm8pKTtgXG4gICAgICpcbiAgICAgKiBTZWUgYFBvbHltZXIuQ2xhc3NgIGZvciBkZXRhaWxzIG9uIHZhbGlkIGxlZ2FjeSBtZXRhZGF0YSBmb3JtYXQgZm9yIGBpbmZvYC5cbiAgICAgKlxuICAgICAqIEBnbG9iYWxcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAZnVuY3Rpb24gUG9seW1lclxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJJbml0fSBpbmZvIE9iamVjdCBjb250YWluaW5nIFBvbHltZXIgbWV0YWRhdGEgYW5kIGZ1bmN0aW9uc1xuICAgICAqICAgdG8gYmVjb21lIGNsYXNzIG1ldGhvZHMuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24obmV3OiBIVE1MRWxlbWVudCl9IEdlbmVyYXRlZCBjbGFzc1xuICAgICAqIEBzdXBwcmVzcyB7ZHVwbGljYXRlLCBpbnZhbGlkQ2FzdHMsIGNoZWNrVHlwZXN9XG4gICAgICovXG4gICAgd2luZG93LlBvbHltZXIuX3BvbHltZXJGbiA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgIC8vIGlmIGlucHV0IGlzIGEgYGNsYXNzYCAoYWthIGEgZnVuY3Rpb24gd2l0aCBhIHByb3RvdHlwZSksIHVzZSB0aGUgcHJvdG90eXBlXG4gICAgICAvLyByZW1lbWJlciB0aGF0IHRoZSBgY29uc3RydWN0b3JgIHdpbGwgbmV2ZXIgYmUgY2FsbGVkXG4gICAgICBsZXQga2xhc3M7XG4gICAgICBpZiAodHlwZW9mIGluZm8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAga2xhc3MgPSBpbmZvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2xhc3MgPSBQb2x5bWVyLkNsYXNzKGluZm8pO1xuICAgICAgfVxuICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGtsYXNzLmlzLCAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8oa2xhc3MpKTtcbiAgICAgIHJldHVybiBrbGFzcztcbiAgICB9O1xuXG4gIH0pKCk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2Jvb3QuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2FycmF5LXNwbGljZS5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvYXN5bmMuaHRtbFwiPlxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYG5vZGVgIGlzIGEgc2xvdCBlbGVtZW50XG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYG5vZGVgIGlzIGEgc2xvdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gaXNTbG90KG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUubG9jYWxOYW1lID09PSAnc2xvdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHRoYXQgbGlzdGVucyBmb3IgY2hhbmdlcyAoYWRkaXRpb25zIG9yIHJlbW92YWxzKSB0b1xuICAgKiBcImZsYXR0ZW5lZCBub2Rlc1wiIG9uIGEgZ2l2ZW4gYG5vZGVgLiBUaGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgY29uc2lzdHNcbiAgICogb2YgYSBub2RlJ3MgY2hpbGRyZW4gYW5kLCBmb3IgYW55IGNoaWxkcmVuIHRoYXQgYXJlIGA8c2xvdD5gIGVsZW1lbnRzLFxuICAgKiB0aGUgZXhwYW5kZWQgZmxhdHRlbmVkIGxpc3Qgb2YgYGFzc2lnbmVkTm9kZXNgLlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIG9ic2VydmVkIG5vZGUgaGFzIGNoaWxkcmVuIGA8YT48L2E+PHNsb3Q+PC9zbG90PjxiPjwvYj5gXG4gICAqIGFuZCB0aGUgYDxzbG90PmAgaGFzIG9uZSBgPGRpdj5gIGFzc2lnbmVkIHRvIGl0LCB0aGVuIHRoZSBmbGF0dGVuZWRcbiAgICogbm9kZXMgbGlzdCBpcyBgPGE+PC9hPjxkaXY+PC9kaXY+PGI+PC9iPmAuIElmIHRoZSBgPHNsb3Q+YCBoYXMgb3RoZXJcbiAgICogYDxzbG90PmAgZWxlbWVudHMgYXNzaWduZWQgdG8gaXQsIHRoZXNlIGFyZSBmbGF0dGVuZWQgYXMgd2VsbC5cbiAgICpcbiAgICogVGhlIHByb3ZpZGVkIGBjYWxsYmFja2AgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBjaGFuZ2UgdG8gdGhpcyBsaXN0XG4gICAqIG9mIGZsYXR0ZW5lZCBub2RlcyBvY2N1cnMsIHdoZXJlIGFuIGFkZGl0aW9uIG9yIHJlbW92YWwgb2YgYSBub2RlIGlzXG4gICAqIGNvbnNpZGVyZWQgYSBjaGFuZ2UuIFRoZSBgY2FsbGJhY2tgIGlzIGNhbGxlZCB3aXRoIG9uZSBhcmd1bWVudCwgYW4gb2JqZWN0XG4gICAqIGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgYW55IGBhZGRlZE5vZGVzYCBhbmQgYHJlbW92ZWROb2Rlc2AuXG4gICAqXG4gICAqIE5vdGU6IHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgYXN5bmNocm9ub3VzIHRvIGFueSBjaGFuZ2VzXG4gICAqIGF0IGEgbWljcm90YXNrIGNoZWNrcG9pbnQuIFRoaXMgaXMgYmVjYXVzZSBvYnNlcnZhdGlvbiBpcyBwZXJmb3JtZWQgdXNpbmdcbiAgICogYE11dGF0aW9uT2JzZXJ2ZXJgIGFuZCB0aGUgYDxzbG90PmAgZWxlbWVudCdzIGBzbG90Y2hhbmdlYCBldmVudCB3aGljaFxuICAgKiBhcmUgYXN5bmNocm9ub3VzLlxuICAgKlxuICAgKiBBbiBleGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiBjbGFzcyBUZXN0U2VsZk9ic2VydmUgZXh0ZW5kcyBQb2x5bWVyLkVsZW1lbnQge1xuICAgKiAgIHN0YXRpYyBnZXQgaXMoKSB7IHJldHVybiAndGVzdC1zZWxmLW9ic2VydmUnO31cbiAgICogICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICogICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAqICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBQb2x5bWVyLkZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIodGhpcywgKGluZm8pID0+IHtcbiAgICogICAgICAgdGhpcy5pbmZvID0gaW5mbztcbiAgICogICAgIH0pO1xuICAgKiAgIH1cbiAgICogICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICogICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAqICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAqICAgfVxuICAgKiB9XG4gICAqIGN1c3RvbUVsZW1lbnRzLmRlZmluZShUZXN0U2VsZk9ic2VydmUuaXMsIFRlc3RTZWxmT2JzZXJ2ZSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBDbGFzcyB0aGF0IGxpc3RlbnMgZm9yIGNoYW5nZXMgKGFkZGl0aW9ucyBvciByZW1vdmFscykgdG9cbiAgICogXCJmbGF0dGVuZWQgbm9kZXNcIiBvbiBhIGdpdmVuIGBub2RlYC5cbiAgICovXG4gIGNsYXNzIEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMgZm9yIHRoZSBnaXZlbiBgbm9kZWAuXG4gICAgICogVGhpcyBsaXN0IGNvbnNpc3RzIG9mIGEgbm9kZSdzIGNoaWxkcmVuIGFuZCwgZm9yIGFueSBjaGlsZHJlblxuICAgICAqIHRoYXQgYXJlIGA8c2xvdD5gIGVsZW1lbnRzLCB0aGUgZXhwYW5kZWQgZmxhdHRlbmVkIGxpc3Qgb2YgYGFzc2lnbmVkTm9kZXNgLlxuICAgICAqIEZvciBleGFtcGxlLCBpZiB0aGUgb2JzZXJ2ZWQgbm9kZSBoYXMgY2hpbGRyZW4gYDxhPjwvYT48c2xvdD48L3Nsb3Q+PGI+PC9iPmBcbiAgICAgKiBhbmQgdGhlIGA8c2xvdD5gIGhhcyBvbmUgYDxkaXY+YCBhc3NpZ25lZCB0byBpdCwgdGhlbiB0aGUgZmxhdHRlbmVkXG4gICAgICogbm9kZXMgbGlzdCBpcyBgPGE+PC9hPjxkaXY+PC9kaXY+PGI+PC9iPmAuIElmIHRoZSBgPHNsb3Q+YCBoYXMgb3RoZXJcbiAgICAgKiBgPHNsb3Q+YCBlbGVtZW50cyBhc3NpZ25lZCB0byBpdCwgdGhlc2UgYXJlIGZsYXR0ZW5lZCBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxIVE1MU2xvdEVsZW1lbnR9IG5vZGUgVGhlIG5vZGUgZm9yIHdoaWNoIHRvIHJldHVybiB0aGUgbGlzdCBvZiBmbGF0dGVuZWQgbm9kZXMuXG4gICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBsaXN0IG9mIGZsYXR0ZW5lZCBub2RlcyBmb3IgdGhlIGdpdmVuIGBub2RlYC5cbiAgICAqL1xuICAgIHN0YXRpYyBnZXRGbGF0dGVuZWROb2Rlcyhub2RlKSB7XG4gICAgICBpZiAoaXNTbG90KG5vZGUpKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUge0hUTUxTbG90RWxlbWVudH0gKi8obm9kZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgICAgcmV0dXJuIG5vZGUuYXNzaWduZWROb2Rlcyh7ZmxhdHRlbjogdHJ1ZX0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKS5tYXAoKG5vZGUpID0+IHtcbiAgICAgICAgICBpZiAoaXNTbG90KG5vZGUpKSB7XG4gICAgICAgICAgICBub2RlID0gLyoqIEB0eXBlIHtIVE1MU2xvdEVsZW1lbnR9ICovKG5vZGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICAgICAgICByZXR1cm4gbm9kZS5hc3NpZ25lZE5vZGVzKHtmbGF0dGVuOiB0cnVlfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbbm9kZV07XG4gICAgICAgICAgfVxuICAgICAgICB9KS5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpLCBbXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgTm9kZSBvbiB3aGljaCB0byBsaXN0ZW4gZm9yIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oIUVsZW1lbnQsIHsgdGFyZ2V0OiAhRWxlbWVudCwgYWRkZWROb2RlczogIUFycmF5PCFFbGVtZW50PiwgcmVtb3ZlZE5vZGVzOiAhQXJyYXk8IUVsZW1lbnQ+IH0pOnZvaWR9IGNhbGxiYWNrIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZXJlIGFyZSBhZGRpdGlvbnNcbiAgICAgKiBvciByZW1vdmFscyBmcm9tIHRoZSB0YXJnZXQncyBsaXN0IG9mIGZsYXR0ZW5lZCBub2Rlcy5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgY2FsbGJhY2spIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge011dGF0aW9uT2JzZXJ2ZXJ9XG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcn1cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtFbGVtZW50fVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgdGhpcy5fZWZmZWN0aXZlTm9kZXMgPSBbXTtcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oKX1cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX2JvdW5kU2NoZWR1bGUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlKCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5jb25uZWN0KCk7XG4gICAgICB0aGlzLl9zY2hlZHVsZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyBhbiBvYnNlcnZlci4gVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlblxuICAgICAqIGEgYEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXJgIGlzIGNyZWF0ZWQuIEl0IHNob3VsZCBvbmx5IGJlIGNhbGxlZCB0b1xuICAgICAqIHJlLWFjdGl2YXRlIGFuIG9ic2VydmVyIHRoYXQgaGFzIGJlZW4gZGVhY3RpdmF0ZWQgdmlhIHRoZSBgZGlzY29ubmVjdGAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgaWYgKGlzU2xvdCh0aGlzLl90YXJnZXQpKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlblNsb3RzKFt0aGlzLl90YXJnZXRdKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGFyZ2V0LmNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlblNsb3RzKHRoaXMuX3RhcmdldC5jaGlsZHJlbik7XG4gICAgICAgIGlmICh3aW5kb3cuU2hhZHlET00pIHtcbiAgICAgICAgICB0aGlzLl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIgPVxuICAgICAgICAgICAgU2hhZHlET00ub2JzZXJ2ZUNoaWxkcmVuKHRoaXMuX3RhcmdldCwgKG11dGF0aW9ucykgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzTXV0YXRpb25zKG11dGF0aW9ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyID1cbiAgICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc011dGF0aW9ucyhtdXRhdGlvbnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3RhcmdldCwge2NoaWxkTGlzdDogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYWN0aXZhdGVzIHRoZSBmbGF0dGVuZWQgbm9kZXMgb2JzZXJ2ZXIuIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2RcbiAgICAgKiB0aGUgb2JzZXJ2ZXIgY2FsbGJhY2sgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW4gY2hhbmdlcyB0byBmbGF0dGVuZWQgbm9kZXNcbiAgICAgKiBvY2N1ci4gVGhlIGBjb25uZWN0YCBtZXRob2QgbWF5IGJlIHN1YnNlcXVlbnRseSBjYWxsZWQgdG8gcmVhY3RpdmF0ZVxuICAgICAqIHRoZSBvYnNlcnZlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgIGlmIChpc1Nsb3QodGhpcy5fdGFyZ2V0KSkge1xuICAgICAgICB0aGlzLl91bmxpc3RlblNsb3RzKFt0aGlzLl90YXJnZXRdKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGFyZ2V0LmNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuX3VubGlzdGVuU2xvdHModGhpcy5fdGFyZ2V0LmNoaWxkcmVuKTtcbiAgICAgICAgaWYgKHdpbmRvdy5TaGFkeURPTSAmJiB0aGlzLl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIpIHtcbiAgICAgICAgICBTaGFkeURPTS51bm9ic2VydmVDaGlsZHJlbih0aGlzLl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIpO1xuICAgICAgICAgIHRoaXMuX3NoYWR5Q2hpbGRyZW5PYnNlcnZlciA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICAgIHRoaXMuX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgIHRoaXMuX25hdGl2ZUNoaWxkcmVuT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NjaGVkdWxlKCkge1xuICAgICAgaWYgKCF0aGlzLl9zY2hlZHVsZWQpIHtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgUG9seW1lci5Bc3luYy5taWNyb1Rhc2sucnVuKCgpID0+IHRoaXMuZmx1c2goKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtBcnJheTxNdXRhdGlvblJlY29yZD59IG11dGF0aW9ucyBNdXRhdGlvbnMgc2lnbmFsZWQgYnkgdGhlIG11dGF0aW9uIG9ic2VydmVyXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wcm9jZXNzTXV0YXRpb25zKG11dGF0aW9ucykge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5PE11dGF0aW9uUmVjb3JkPn0gbXV0YXRpb25zIE11dGF0aW9ucyBzaWduYWxlZCBieSB0aGUgbXV0YXRpb24gb2JzZXJ2ZXJcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3Byb2Nlc3NTbG90TXV0YXRpb25zKG11dGF0aW9ucykge1xuICAgICAgaWYgKG11dGF0aW9ucykge1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgbXV0YXRpb24gPSBtdXRhdGlvbnNbaV07XG4gICAgICAgICAgaWYgKG11dGF0aW9uLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlblNsb3RzKG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobXV0YXRpb24ucmVtb3ZlZE5vZGVzKSB7XG4gICAgICAgICAgICB0aGlzLl91bmxpc3RlblNsb3RzKG11dGF0aW9uLnJlbW92ZWROb2Rlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmx1c2hlcyB0aGUgb2JzZXJ2ZXIgY2F1c2luZyBhbnkgcGVuZGluZyBjaGFuZ2VzIHRvIGJlIGltbWVkaWF0ZWx5XG4gICAgICogZGVsaXZlcmVkIHRoZSBvYnNlcnZlciBjYWxsYmFjay4gQnkgZGVmYXVsdCB0aGVzZSBjaGFuZ2VzIGFyZSBkZWxpdmVyZWRcbiAgICAgKiBhc3luY2hyb25vdXNseSBhdCB0aGUgbmV4dCBtaWNyb3Rhc2sgY2hlY2twb2ludC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgcGVuZGluZyBjaGFuZ2VzIGNhdXNlZCB0aGUgb2JzZXJ2ZXJcbiAgICAgKiBjYWxsYmFjayB0byBydW4uXG4gICAgICovXG4gICAgZmx1c2goKSB7XG4gICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAod2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAgIFNoYWR5RE9NLmZsdXNoKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbmF0aXZlQ2hpbGRyZW5PYnNlcnZlcikge1xuICAgICAgICB0aGlzLl9wcm9jZXNzU2xvdE11dGF0aW9ucyh0aGlzLl9uYXRpdmVDaGlsZHJlbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zaGFkeUNoaWxkcmVuT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc1Nsb3RNdXRhdGlvbnModGhpcy5fc2hhZHlDaGlsZHJlbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLl90YXJnZXQsXG4gICAgICAgIGFkZGVkTm9kZXM6IFtdLFxuICAgICAgICByZW1vdmVkTm9kZXM6IFtdXG4gICAgICB9O1xuICAgICAgbGV0IG5ld05vZGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXRGbGF0dGVuZWROb2Rlcyh0aGlzLl90YXJnZXQpO1xuICAgICAgbGV0IHNwbGljZXMgPSBQb2x5bWVyLkFycmF5U3BsaWNlLmNhbGN1bGF0ZVNwbGljZXMobmV3Tm9kZXMsXG4gICAgICAgIHRoaXMuX2VmZmVjdGl2ZU5vZGVzKTtcbiAgICAgIC8vIHByb2Nlc3MgcmVtb3ZhbHNcbiAgICAgIGZvciAobGV0IGk9MCwgczsgKGk8c3BsaWNlcy5sZW5ndGgpICYmIChzPXNwbGljZXNbaV0pOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaj0wLCBuOyAoaiA8IHMucmVtb3ZlZC5sZW5ndGgpICYmIChuPXMucmVtb3ZlZFtqXSk7IGorKykge1xuICAgICAgICAgIGluZm8ucmVtb3ZlZE5vZGVzLnB1c2gobik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHByb2Nlc3MgYWRkc1xuICAgICAgZm9yIChsZXQgaT0wLCBzOyAoaTxzcGxpY2VzLmxlbmd0aCkgJiYgKHM9c3BsaWNlc1tpXSk7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqPXMuaW5kZXg7IGogPCBzLmluZGV4ICsgcy5hZGRlZENvdW50OyBqKyspIHtcbiAgICAgICAgICBpbmZvLmFkZGVkTm9kZXMucHVzaChuZXdOb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSBjYWNoZVxuICAgICAgdGhpcy5fZWZmZWN0aXZlTm9kZXMgPSBuZXdOb2RlcztcbiAgICAgIGxldCBkaWRGbHVzaCA9IGZhbHNlO1xuICAgICAgaWYgKGluZm8uYWRkZWROb2Rlcy5sZW5ndGggfHwgaW5mby5yZW1vdmVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGRpZEZsdXNoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYWxsYmFjay5jYWxsKHRoaXMuX3RhcmdldCwgaW5mbyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlkRmx1c2g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshQXJyYXk8RWxlbWVudHxOb2RlPnwhTm9kZUxpc3Q8Tm9kZT59IG5vZGVMaXN0IE5vZGVzIHRoYXQgY291bGQgY2hhbmdlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9saXN0ZW5TbG90cyhub2RlTGlzdCkge1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG4gPSBub2RlTGlzdFtpXTtcbiAgICAgICAgaWYgKGlzU2xvdChuKSkge1xuICAgICAgICAgIG4uYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsIHRoaXMuX2JvdW5kU2NoZWR1bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshQXJyYXk8RWxlbWVudHxOb2RlPnwhTm9kZUxpc3Q8Tm9kZT59IG5vZGVMaXN0IE5vZGVzIHRoYXQgY291bGQgY2hhbmdlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91bmxpc3RlblNsb3RzKG5vZGVMaXN0KSB7XG4gICAgICBmb3IgKGxldCBpPTA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbiA9IG5vZGVMaXN0W2ldO1xuICAgICAgICBpZiAoaXNTbG90KG4pKSB7XG4gICAgICAgICAgbi5yZW1vdmVFdmVudExpc3RlbmVyKCdzbG90Y2hhbmdlJywgdGhpcy5fYm91bmRTY2hlZHVsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIFBvbHltZXIuRmxhdHRlbmVkTm9kZXNPYnNlcnZlciA9IEZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXI7XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9ib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9zZXR0aW5ncy5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vdXRpbHMvZmxhdHRlbmVkLW5vZGVzLW9ic2VydmVyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9mbHVzaC5odG1sXCI+XG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgY29uc3QgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuICAvKipcbiAgICogQGNvbnN0IHtmdW5jdGlvbih0aGlzOk5vZGUsIHN0cmluZyk6IGJvb2xlYW59XG4gICAqL1xuICBjb25zdCBub3JtYWxpemVkTWF0Y2hlc1NlbGVjdG9yID0gcC5tYXRjaGVzIHx8IHAubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcC5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgIHAub01hdGNoZXNTZWxlY3RvciB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuICAvKipcbiAgICogQ3Jvc3MtcGxhdGZvcm0gYGVsZW1lbnQubWF0Y2hlc2Agc2hpbS5cbiAgICpcbiAgICogQGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvclxuICAgKiBAbWVtYmVyb2YgUG9seW1lci5kb21cbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGNoZWNrIHNlbGVjdG9yIGFnYWluc3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFNlbGVjdG9yIHRvIG1hdGNoXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbm9kZSBtYXRjaGVkIHNlbGVjdG9yXG4gICAqL1xuICBjb25zdCBtYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBub3JtYWxpemVkTWF0Y2hlc1NlbGVjdG9yLmNhbGwobm9kZSwgc2VsZWN0b3IpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOb2RlIEFQSSB3cmFwcGVyIGNsYXNzIHJldHVybmVkIGZyb20gYFBvbHltZXIuZG9tLih0YXJnZXQpYCB3aGVuXG4gICAqIGB0YXJnZXRgIGlzIGEgYE5vZGVgLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKi9cbiAgY2xhc3MgRG9tQXBpIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIGZvciB3aGljaCB0byBjcmVhdGUgYSBQb2x5bWVyLmRvbSBoZWxwZXIgb2JqZWN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgUG9seW1lci5GbGF0dGVuZWROb2Rlc09ic2VydmVyYCB0aGF0XG4gICAgICogbGlzdGVucyBmb3Igbm9kZSBjaGFuZ2VzIG9uIHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVsZW1lbnQsIHsgdGFyZ2V0OiAhRWxlbWVudCwgYWRkZWROb2RlczogIUFycmF5PCFFbGVtZW50PiwgcmVtb3ZlZE5vZGVzOiAhQXJyYXk8IUVsZW1lbnQ+IH0pOnZvaWR9IGNhbGxiYWNrIENhbGxlZCB3aGVuIGRpcmVjdCBvciBkaXN0cmlidXRlZCBjaGlsZHJlblxuICAgICAqICAgb2YgdGhpcyBlbGVtZW50IGNoYW5nZXNcbiAgICAgKiBAcmV0dXJuIHshUG9seW1lci5GbGF0dGVuZWROb2Rlc09ic2VydmVyfSBPYnNlcnZlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIG9ic2VydmVOb2RlcyhjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG5ldyBQb2x5bWVyLkZsYXR0ZW5lZE5vZGVzT2JzZXJ2ZXIodGhpcy5ub2RlLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgYW4gb2JzZXJ2ZXIgcHJldmlvdXNseSBjcmVhdGVkIHZpYSBgb2JzZXJ2ZU5vZGVzYFxuICAgICAqXG4gICAgICogQHBhcmFtIHshUG9seW1lci5GbGF0dGVuZWROb2Rlc09ic2VydmVyfSBvYnNlcnZlckhhbmRsZSBPYnNlcnZlciBpbnN0YW5jZVxuICAgICAqICAgdG8gZGlzY29ubmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHVub2JzZXJ2ZU5vZGVzKG9ic2VydmVySGFuZGxlKSB7XG4gICAgICBvYnNlcnZlckhhbmRsZS5kaXNjb25uZWN0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZWQgYXMgYSBiYWNrd2FyZHMtY29tcGF0aWJsZSBBUEkgb25seS4gIFRoaXMgbWV0aG9kIGRvZXMgbm90aGluZy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIG5vdGlmeU9ic2VydmVyKCkge31cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgbm9kZSBpcyBjb250YWluZWQgd2l0aCB0aGlzIGVsZW1lbnQnc1xuICAgICAqIGxpZ2h0LURPTSBjaGlsZHJlbiBvciBzaGFkb3cgcm9vdCwgaW5jbHVkaW5nIGFueSBuZXN0ZWQgc2hhZG93IHJvb3RzXG4gICAgICogb2YgY2hpbGRyZW4gdGhlcmVpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHRlc3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGBub2RlYCBpcyBjb250YWluZWQgd2l0aGluXG4gICAgICogICB0aGlzIGVsZW1lbnQncyBsaWdodCBvciBzaGFkb3cgRE9NLlxuICAgICAqL1xuICAgIGRlZXBDb250YWlucyhub2RlKSB7XG4gICAgICBpZiAodGhpcy5ub2RlLmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbGV0IG4gPSBub2RlO1xuICAgICAgbGV0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgIC8vIHdhbGsgZnJvbSBub2RlIHRvIGB0aGlzYCBvciBgZG9jdW1lbnRgXG4gICAgICB3aGlsZSAobiAmJiBuICE9PSBkb2MgJiYgbiAhPT0gdGhpcy5ub2RlKSB7XG4gICAgICAgIC8vIHVzZSBsb2dpY2FsIHBhcmVudG5vZGUsIG9yIG5hdGl2ZSBTaGFkb3dSb290IGhvc3RcbiAgICAgICAgbiA9IG4ucGFyZW50Tm9kZSB8fCBuLmhvc3Q7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJvb3Qgbm9kZSBvZiB0aGlzIG5vZGUuICBFcXVpdmFsZW50IHRvIGBnZXRSb29kTm9kZSgpYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge05vZGV9IFRvcCBtb3N0IGVsZW1lbnQgaW4gdGhlIGRvbSB0cmVlIGluIHdoaWNoIHRoZSBub2RlXG4gICAgICogZXhpc3RzLiBJZiB0aGUgbm9kZSBpcyBjb25uZWN0ZWQgdG8gYSBkb2N1bWVudCB0aGlzIGlzIGVpdGhlciBhXG4gICAgICogc2hhZG93Um9vdCBvciB0aGUgZG9jdW1lbnQ7IG90aGVyd2lzZSwgaXQgbWF5IGJlIHRoZSBub2RlXG4gICAgICogaXRzZWxmIG9yIGEgbm9kZSBvciBkb2N1bWVudCBmcmFnbWVudCBjb250YWluaW5nIGl0LlxuICAgICAqL1xuICAgIGdldE93bmVyUm9vdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Um9vdE5vZGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3Igc2xvdCBlbGVtZW50cywgcmV0dXJucyB0aGUgbm9kZXMgYXNzaWduZWQgdG8gdGhlIHNsb3Q7IG90aGVyd2lzZVxuICAgICAqIGFuIGVtcHR5IGFycmF5LiBJdCBpcyBlcXVpdmFsZW50IHRvIGA8c2xvdD4uYWRkaWduZWROb2Rlcyh7ZmxhdHRlbjp0cnVlfSlgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7IUFycmF5PCFOb2RlPn0gQXJyYXkgb2YgYXNzaWduZWQgbm9kZXNcbiAgICAgKi9cbiAgICBnZXREaXN0cmlidXRlZE5vZGVzKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm5vZGUubG9jYWxOYW1lID09PSAnc2xvdCcpID9cbiAgICAgICAgdGhpcy5ub2RlLmFzc2lnbmVkTm9kZXMoe2ZsYXR0ZW46IHRydWV9KSA6XG4gICAgICAgIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHNsb3RzIHRoaXMgZWxlbWVudCB3YXMgZGlzdHJpYnV0ZWQgdG8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTbG90RWxlbWVudD59IERlc2NyaXB0aW9uXG4gICAgICovXG4gICAgZ2V0RGVzdGluYXRpb25JbnNlcnRpb25Qb2ludHMoKSB7XG4gICAgICBsZXQgaXAkID0gW107XG4gICAgICBsZXQgbiA9IHRoaXMubm9kZS5hc3NpZ25lZFNsb3Q7XG4gICAgICB3aGlsZSAobikge1xuICAgICAgICBpcCQucHVzaChuKTtcbiAgICAgICAgbiA9IG4uYXNzaWduZWRTbG90O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlwJDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBgaW1wb3J0Tm9kZWAgb24gdGhlIGBvd25lckRvY3VtZW50YCBmb3IgdGhpcyBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGltcG9ydFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcCBUcnVlIGlmIHRoZSBub2RlIHNob3VsZCBiZSBjbG9uZWQgZGVlcGx5IGR1cmluZ1xuICAgICAqICAgaW1wb3J0XG4gICAgICogQHJldHVybiB7Tm9kZX0gQ2xvbmUgb2YgZ2l2ZW4gbm9kZSBpbXBvcnRlZCB0byB0aGlzIG93bmVyIGRvY3VtZW50XG4gICAgICovXG4gICAgaW1wb3J0Tm9kZShub2RlLCBkZWVwKSB7XG4gICAgICBsZXQgZG9jID0gdGhpcy5ub2RlIGluc3RhbmNlb2YgRG9jdW1lbnQgPyB0aGlzLm5vZGUgOlxuICAgICAgICB0aGlzLm5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgIHJldHVybiBkb2MuaW1wb3J0Tm9kZShub2RlLCBkZWVwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IU5vZGU+fSBSZXR1cm5zIGEgZmxhdHRlbmVkIGxpc3Qgb2YgYWxsIGNoaWxkIG5vZGVzIGFuZFxuICAgICAqIG5vZGVzIGFzc2lnbmVkIHRvIGNoaWxkIHNsb3RzLlxuICAgICAqL1xuICAgIGdldEVmZmVjdGl2ZUNoaWxkTm9kZXMoKSB7XG4gICAgICByZXR1cm4gUG9seW1lci5GbGF0dGVuZWROb2Rlc09ic2VydmVyLmdldEZsYXR0ZW5lZE5vZGVzKHRoaXMubm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZpbHRlcmVkIGxpc3Qgb2YgZmxhdHRlbmVkIGNoaWxkIGVsZW1lbnRzIGZvciB0aGlzIGVsZW1lbnQgYmFzZWRcbiAgICAgKiBvbiB0aGUgZ2l2ZW4gc2VsZWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdG8gZmlsdGVyIG5vZGVzIGFnYWluc3RcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxFbGVtZW50Pn0gTGlzdCBvZiBmbGF0dGVuZWQgY2hpbGQgZWxlbWVudHNcbiAgICAgKi9cbiAgICBxdWVyeURpc3RyaWJ1dGVkRWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgIGxldCBjJCA9IHRoaXMuZ2V0RWZmZWN0aXZlQ2hpbGROb2RlcygpO1xuICAgICAgbGV0IGxpc3QgPSBbXTtcbiAgICAgIGZvciAobGV0IGk9MCwgbD1jJC5sZW5ndGgsIGM7IChpPGwpICYmIChjPWMkW2ldKTsgaSsrKSB7XG4gICAgICAgIGlmICgoYy5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpICYmXG4gICAgICAgICAgICBtYXRjaGVzU2VsZWN0b3IoYywgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKGMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3Igc2hhZG93IHJvb3RzLCByZXR1cm5zIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBlbGVtZW50IHdpdGhpbiB0aGlzXG4gICAgICogc2hhZG93IHJvb3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOb2RlfHVuZGVmaW5lZH0gQ3VycmVudGx5IGZvY3VzZWQgZWxlbWVudFxuICAgICAqL1xuICAgIGdldCBhY3RpdmVFbGVtZW50KCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLm5vZGU7XG4gICAgICByZXR1cm4gbm9kZS5fYWN0aXZlRWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbm9kZS5fYWN0aXZlRWxlbWVudCA6IG5vZGUuYWN0aXZlRWxlbWVudDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmb3J3YXJkTWV0aG9kcyhwcm90bywgbWV0aG9kcykge1xuICAgIGZvciAobGV0IGk9MDsgaSA8IG1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtZXRob2QgPSBtZXRob2RzW2ldO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbiAgICAgIHByb3RvW21ldGhvZF0gPSAvKiogQHRoaXMge0RvbUFwaX0gKi8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVbbWV0aG9kXS5hcHBseSh0aGlzLm5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRSZWFkT25seVByb3BlcnRpZXMocHJvdG8sIHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFtZSA9IHByb3BlcnRpZXNbaV07XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIG5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb25zdCBkb21BcGkgPSAvKiogQHR5cGUge0RvbUFwaX0gKi8odGhpcyk7XG4gICAgICAgICAgcmV0dXJuIGRvbUFwaS5ub2RlW25hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRQcm9wZXJ0aWVzKHByb3RvLCBwcm9wZXJ0aWVzKSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbWUgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc3QgZG9tQXBpID0gLyoqIEB0eXBlIHtEb21BcGl9ICovKHRoaXMpO1xuICAgICAgICAgIHJldHVybiBkb21BcGkubm9kZVtuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIC8qKiBAdHlwZSB7RG9tQXBpfSAqLyAodGhpcykubm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZvcndhcmRNZXRob2RzKERvbUFwaS5wcm90b3R5cGUsIFtcbiAgICAnY2xvbmVOb2RlJywgJ2FwcGVuZENoaWxkJywgJ2luc2VydEJlZm9yZScsICdyZW1vdmVDaGlsZCcsXG4gICAgJ3JlcGxhY2VDaGlsZCcsICdzZXRBdHRyaWJ1dGUnLCAncmVtb3ZlQXR0cmlidXRlJyxcbiAgICAncXVlcnlTZWxlY3RvcicsICdxdWVyeVNlbGVjdG9yQWxsJ1xuICBdKTtcblxuICBmb3J3YXJkUmVhZE9ubHlQcm9wZXJ0aWVzKERvbUFwaS5wcm90b3R5cGUsIFtcbiAgICAncGFyZW50Tm9kZScsICdmaXJzdENoaWxkJywgJ2xhc3RDaGlsZCcsXG4gICAgJ25leHRTaWJsaW5nJywgJ3ByZXZpb3VzU2libGluZycsICdmaXJzdEVsZW1lbnRDaGlsZCcsXG4gICAgJ2xhc3RFbGVtZW50Q2hpbGQnLCAnbmV4dEVsZW1lbnRTaWJsaW5nJywgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnLFxuICAgICdjaGlsZE5vZGVzJywgJ2NoaWxkcmVuJywgJ2NsYXNzTGlzdCdcbiAgXSk7XG5cbiAgZm9yd2FyZFByb3BlcnRpZXMoRG9tQXBpLnByb3RvdHlwZSwgW1xuICAgICd0ZXh0Q29udGVudCcsICdpbm5lckhUTUwnXG4gIF0pO1xuXG5cbiAgLyoqXG4gICAqIEV2ZW50IEFQSSB3cmFwcGVyIGNsYXNzIHJldHVybmVkIGZyb20gYFBvbHltZXIuZG9tLih0YXJnZXQpYCB3aGVuXG4gICAqIGB0YXJnZXRgIGlzIGFuIGBFdmVudGAuXG4gICAqL1xuICBjbGFzcyBFdmVudEFwaSB7XG4gICAgY29uc3RydWN0b3IoZXZlbnQpIHtcbiAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBub2RlIG9uIHRoZSBgY29tcG9zZWRQYXRoYCBvZiB0aGlzIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7IUV2ZW50VGFyZ2V0fSBUaGUgbm9kZSB0aGlzIGV2ZW50IHdhcyBkaXNwYXRjaGVkIHRvXG4gICAgICovXG4gICAgZ2V0IHJvb3RUYXJnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ldmVudC5jb21wb3NlZFBhdGgoKVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsb2NhbCAocmUtdGFyZ2V0ZWQpIHRhcmdldCBmb3IgdGhpcyBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyFFdmVudFRhcmdldH0gVGhlIGxvY2FsIChyZS10YXJnZXRlZCkgdGFyZ2V0IGZvciB0aGlzIGV2ZW50LlxuICAgICAqL1xuICAgIGdldCBsb2NhbFRhcmdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmV2ZW50LnRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgY29tcG9zZWRQYXRoYCBmb3IgdGhpcyBldmVudC5cbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8IUV2ZW50VGFyZ2V0Pn0gVGhlIG5vZGVzIHRoaXMgZXZlbnQgcHJvcGFnYXRlZCB0aHJvdWdoXG4gICAgICovXG4gICAgZ2V0IHBhdGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ldmVudC5jb21wb3NlZFBhdGgoKTtcbiAgICB9XG4gIH1cblxuICBQb2x5bWVyLkRvbUFwaSA9IERvbUFwaTtcblxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGRlZXBcbiAgICogQHJldHVybiB7IU5vZGV9XG4gICAqL1xuICBQb2x5bWVyLkRvbUFwaS5wcm90b3R5cGUuY2xvbmVOb2RlO1xuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICogQHJldHVybiB7IU5vZGV9XG4gICAqL1xuICBQb2x5bWVyLkRvbUFwaS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ7XG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHshTm9kZX0gbmV3Q2hpbGRcbiAgICogQHBhcmFtIHtOb2RlfSByZWZDaGlsZFxuICAgKiBAcmV0dXJuIHshTm9kZX1cbiAgICovXG4gIFBvbHltZXIuRG9tQXBpLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU7XG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgKiBAcmV0dXJuIHshTm9kZX1cbiAgICovXG4gIFBvbHltZXIuRG9tQXBpLnByb3RvdHlwZS5yZW1vdmVDaGlsZDtcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0geyFOb2RlfSBvbGRDaGlsZFxuICAgKiBAcGFyYW0geyFOb2RlfSBuZXdDaGlsZFxuICAgKiBAcmV0dXJuIHshTm9kZX1cbiAgICovXG4gIFBvbHltZXIuRG9tQXBpLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ7XG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBQb2x5bWVyLkRvbUFwaS5wcm90b3R5cGUuc2V0QXR0cmlidXRlO1xuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBQb2x5bWVyLkRvbUFwaS5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlO1xuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcmV0dXJuIHs/RWxlbWVudH1cbiAgICovXG4gIFBvbHltZXIuRG9tQXBpLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yO1xuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcmV0dXJuIHshTm9kZUxpc3Q8IUVsZW1lbnQ+fVxuICAgKi9cbiAgUG9seW1lci5Eb21BcGkucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGw7XG5cbiAgLyoqXG4gICAqIExlZ2FjeSBET00gYW5kIEV2ZW50IG1hbmlwdWxhdGlvbiBBUEkgd3JhcHBlciBmYWN0b3J5IHVzZWQgdG8gYWJzdHJhY3RcbiAgICogZGlmZmVyZW5jZXMgYmV0d2VlbiBuYXRpdmUgU2hhZG93IERPTSBhbmQgXCJTaGFkeSBET01cIiB3aGVuIHBvbHlmaWxsaW5nIG9uXG4gICAqIG9sZGVyIGJyb3dzZXJzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaW4gUG9seW1lciAyLnggdXNlIG9mIGBQb2x5bWVyLmRvbWAgaXMgbm8gbG9uZ2VyIHJlcXVpcmVkIGFuZFxuICAgKiBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXMgc2ltcGx5IGZhY2FkZXMgZGlyZWN0bHkgdG8gdGhlIHN0YW5kYXJkIG5hdGl2ZVxuICAgKiBBUEkuXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHN1bW1hcnkgTGVnYWN5IERPTSBhbmQgRXZlbnQgbWFuaXB1bGF0aW9uIEFQSSB3cmFwcGVyIGZhY3RvcnkgdXNlZCB0b1xuICAgKiBhYnN0cmFjdCBkaWZmZXJlbmNlcyBiZXR3ZWVuIG5hdGl2ZSBTaGFkb3cgRE9NIGFuZCBcIlNoYWR5IERPTS5cIlxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAcGFyYW0geyhOb2RlfEV2ZW50KT19IG9iaiBOb2RlIG9yIGV2ZW50IHRvIG9wZXJhdGUgb25cbiAgICogQHJldHVybiB7IURvbUFwaXwhRXZlbnRBcGl9IFdyYXBwZXIgcHJvdmlkaW5nIGVpdGhlciBub2RlIEFQSSBvciBldmVudCBBUElcbiAgICovXG4gIFBvbHltZXIuZG9tID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgb2JqID0gb2JqIHx8IGRvY3VtZW50O1xuICAgIGlmICghb2JqLl9fZG9tQXBpKSB7XG4gICAgICBsZXQgaGVscGVyO1xuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEV2ZW50KSB7XG4gICAgICAgIGhlbHBlciA9IG5ldyBFdmVudEFwaShvYmopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVscGVyID0gbmV3IERvbUFwaShvYmopO1xuICAgICAgfVxuICAgICAgb2JqLl9fZG9tQXBpID0gaGVscGVyO1xuICAgIH1cbiAgICByZXR1cm4gb2JqLl9fZG9tQXBpO1xuICB9O1xuXG4gIFBvbHltZXIuZG9tLm1hdGNoZXNTZWxlY3RvciA9IG1hdGNoZXNTZWxlY3RvcjtcblxuICAvKipcbiAgICogRm9yY2VzIHNldmVyYWwgY2xhc3NlcyBvZiBhc3luY2hyb25vdXNseSBxdWV1ZWQgdGFza3MgdG8gZmx1c2g6XG4gICAqIC0gRGVib3VuY2VycyBhZGRlZCB2aWEgYFBvbHltZXIuZW5xdWV1ZURlYm91bmNlcmBcbiAgICogLSBTaGFkeURPTSBkaXN0cmlidXRpb25cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZmFjYWRlcyB0byBgUG9seW1lci5mbHVzaGAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyLmRvbVxuICAgKi9cbiAgUG9seW1lci5kb20uZmx1c2ggPSBQb2x5bWVyLmZsdXNoO1xuXG4gIC8qKlxuICAgKiBBZGRzIGEgYFBvbHltZXIuRGVib3VuY2VyYCB0byBhIGxpc3Qgb2YgZ2xvYmFsbHkgZmx1c2hhYmxlIHRhc2tzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBmYWNhZGVzIHRvIGBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXJgLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgUG9seW1lci5kb21cbiAgICogQHBhcmFtIHtQb2x5bWVyLkRlYm91bmNlcn0gZGVib3VuY2VyIERlYm91bmNlciB0byBlbnF1ZXVlXG4gICAqL1xuICBQb2x5bWVyLmRvbS5hZGREZWJvdW5jZXIgPSBQb2x5bWVyLmVucXVldWVEZWJvdW5jZXI7XG59KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gdW5yZXNvbHZlZFxuXG4gIGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ3VucmVzb2x2ZWQnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cuV2ViQ29tcG9uZW50cykge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdXZWJDb21wb25lbnRzUmVhZHknLCByZXNvbHZlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSk7XG4gICAgfVxuICB9XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJib290Lmh0bWxcIj5cblxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICBsZXQgYmVmb3JlUmVuZGVyUXVldWUgPSBbXTtcbiAgbGV0IGFmdGVyUmVuZGVyUXVldWUgPSBbXTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZSgpIHtcbiAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgIC8vIGJlZm9yZSBuZXh0IHJlbmRlclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgZmx1c2hRdWV1ZShiZWZvcmVSZW5kZXJRdWV1ZSk7XG4gICAgICAvLyBhZnRlciB0aGUgcmVuZGVyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBydW5RdWV1ZShhZnRlclJlbmRlclF1ZXVlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNhbGxNZXRob2QocXVldWUuc2hpZnQoKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuUXVldWUocXVldWUpIHtcbiAgICBmb3IgKGxldCBpPTAsIGw9cXVldWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjYWxsTWV0aG9kKHF1ZXVlLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxNZXRob2QoaW5mbykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBpbmZvWzBdO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gaW5mb1sxXTtcbiAgICBjb25zdCBhcmdzID0gaW5mb1syXTtcbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2suYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHdoaWxlIChiZWZvcmVSZW5kZXJRdWV1ZS5sZW5ndGggfHwgYWZ0ZXJSZW5kZXJRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGZsdXNoUXVldWUoYmVmb3JlUmVuZGVyUXVldWUpO1xuICAgICAgZmx1c2hRdWV1ZShhZnRlclJlbmRlclF1ZXVlKTtcbiAgICB9XG4gICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTW9kdWxlIGZvciBzY2hlZHVsaW5nIGZsdXNoYWJsZSBwcmUtcmVuZGVyIGFuZCBwb3N0LXJlbmRlciB0YXNrcy5cbiAgICpcbiAgICogQG5hbWVzcGFjZVxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBNb2R1bGUgZm9yIHNjaGVkdWxpbmcgZmx1c2hhYmxlIHByZS1yZW5kZXIgYW5kIHBvc3QtcmVuZGVyIHRhc2tzLlxuICAgKi9cbiAgUG9seW1lci5SZW5kZXJTdGF0dXMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBFbnF1ZXVlcyBhIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgcnVuIGJlZm9yZSB0aGUgbmV4dCByZW5kZXIsIGF0XG4gICAgICogYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgdGltaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIGZvciBlbnF1ZXVpbmcgd29yayB0aGF0IHJlcXVpcmVzIERPTSBtZWFzdXJlbWVudCxcbiAgICAgKiBzaW5jZSBtZWFzdXJlbWVudCBtYXkgbm90IGJlIHJlbGlhYmxlIGluIGN1c3RvbSBlbGVtZW50IGNhbGxiYWNrcyBiZWZvcmVcbiAgICAgKiB0aGUgZmlyc3QgcmVuZGVyLCBhcyB3ZWxsIGFzIGZvciBiYXRjaGluZyBtZWFzdXJlbWVudCB0YXNrcyBpbiBnZW5lcmFsLlxuICAgICAqXG4gICAgICogVGFza3MgaW4gdGhpcyBxdWV1ZSBtYXkgYmUgZmx1c2hlZCBieSBjYWxsaW5nIGBQb2x5bWVyLlJlbmRlclN0YXR1cy5mbHVzaCgpYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlJlbmRlclN0YXR1c1xuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IG9iamVjdCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSBib3VuZCB0b1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKik6dm9pZH0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyFBcnJheT19IGFyZ3MgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGhcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGJlZm9yZU5leHRSZW5kZXI6IGZ1bmN0aW9uKGNvbnRleHQsIGNhbGxiYWNrLCBhcmdzKSB7XG4gICAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgICBzY2hlZHVsZSgpO1xuICAgICAgfVxuICAgICAgYmVmb3JlUmVuZGVyUXVldWUucHVzaChbY29udGV4dCwgY2FsbGJhY2ssIGFyZ3NdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB3aGljaCB3aWxsIGJlIHJ1biBhZnRlciB0aGUgbmV4dCByZW5kZXIsIGVxdWl2YWxlbnRcbiAgICAgKiB0byBvbmUgdGFzayAoYHNldFRpbWVvdXRgKSBhZnRlciB0aGUgbmV4dCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgdHVuaW5nIHRoZSBmaXJzdC1yZW5kZXIgcGVyZm9ybWFuY2Ugb2YgYW5cbiAgICAgKiBlbGVtZW50IG9yIGFwcGxpY2F0aW9uIGJ5IGRlZmVycmluZyBub24tY3JpdGljYWwgd29yayB1bnRpbCBhZnRlciB0aGVcbiAgICAgKiBmaXJzdCBwYWludC4gIFR5cGljYWwgbm9uLXJlbmRlci1jcml0aWNhbCB3b3JrIG1heSBpbmNsdWRlIGFkZGluZyBVSVxuICAgICAqIGV2ZW50IGxpc3RlbmVycyBhbmQgYXJpYSBhdHRyaWJ1dGVzLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUmVuZGVyU3RhdHVzXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IENvbnRleHQgb2JqZWN0IHRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGJvdW5kIHRvXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbiguLi4qKTp2b2lkfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IUFycmF5PX0gYXJncyBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gY2FsbCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgYWZ0ZXJOZXh0UmVuZGVyOiBmdW5jdGlvbihjb250ZXh0LCBjYWxsYmFjaywgYXJncykge1xuICAgICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgICAgc2NoZWR1bGUoKTtcbiAgICAgIH1cbiAgICAgIGFmdGVyUmVuZGVyUXVldWUucHVzaChbY29udGV4dCwgY2FsbGJhY2ssIGFyZ3NdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmx1c2hlcyBhbGwgYGJlZm9yZU5leHRSZW5kZXJgIHRhc2tzLCBmb2xsb3dlZCBieSBhbGwgYGFmdGVyTmV4dFJlbmRlcmBcbiAgICAgKiB0YXNrcy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlJlbmRlclN0YXR1c1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZmx1c2g6IGZsdXNoXG5cbiAgfTtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYm9vdC5odG1sXCI+XG5cbjxzY3JpcHQ+XG5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gcnVuIGEgY2FsbGJhY2sgd2hlbiBIVE1MSW1wb3J0cyBhcmUgcmVhZHkgb3IgaW1tZWRpYXRlbHkgaWZcbiAgLy8gdGhpcyBhcGkgaXMgbm90IGF2YWlsYWJsZS5cbiAgZnVuY3Rpb24gd2hlbkltcG9ydHNSZWFkeShjYikge1xuICAgIGlmICh3aW5kb3cuSFRNTEltcG9ydHMpIHtcbiAgICAgIEhUTUxJbXBvcnRzLndoZW5SZWFkeShjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgaW1wb3J0aW5nIGFuIEhUTUwgZG9jdW1lbnQgaW1wZXJhdGl2ZWx5LlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGEgbmV3IGA8bGluayByZWw9XCJpbXBvcnRcIj5gIGVsZW1lbnQgd2l0aFxuICAgKiB0aGUgcHJvdmlkZWQgVVJMIGFuZCBhcHBlbmRzIGl0IHRvIHRoZSBkb2N1bWVudCB0byBzdGFydCBsb2FkaW5nLlxuICAgKiBJbiB0aGUgYG9ubG9hZGAgY2FsbGJhY2ssIHRoZSBgaW1wb3J0YCBwcm9wZXJ0eSBvZiB0aGUgYGxpbmtgXG4gICAqIGVsZW1lbnQgd2lsbCBjb250YWluIHRoZSBpbXBvcnRlZCBkb2N1bWVudCBjb250ZW50cy5cbiAgICpcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWYgVVJMIHRvIGRvY3VtZW50IHRvIGxvYWQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9uKCFFdmVudCk6dm9pZD19IG9ubG9hZCBDYWxsYmFjayB0byBub3RpZnkgd2hlbiBhbiBpbXBvcnQgc3VjY2Vzc2Z1bGx5XG4gICAqICAgbG9hZGVkLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbighRXJyb3JFdmVudCk6dm9pZD19IG9uZXJyb3IgQ2FsbGJhY2sgdG8gbm90aWZ5IHdoZW4gYW4gaW1wb3J0XG4gICAqICAgdW5zdWNjZXNzZnVsbHkgbG9hZGVkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRBc3luYyBUcnVlIGlmIHRoZSBpbXBvcnQgc2hvdWxkIGJlIGxvYWRlZCBgYXN5bmNgLlxuICAgKiAgIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqIEByZXR1cm4geyFIVE1MTGlua0VsZW1lbnR9IFRoZSBsaW5rIGVsZW1lbnQgZm9yIHRoZSBVUkwgdG8gYmUgbG9hZGVkLlxuICAgKi9cbiAgUG9seW1lci5pbXBvcnRIcmVmID0gZnVuY3Rpb24oaHJlZiwgb25sb2FkLCBvbmVycm9yLCBvcHRBc3luYykge1xuICAgIGxldCBsaW5rID0gLyoqIEB0eXBlIHtIVE1MTGlua0VsZW1lbnR9ICovXG4gICAgICAoZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKCdsaW5rW2hyZWY9XCInICsgaHJlZiArICdcIl1baW1wb3J0LWhyZWZdJykpO1xuICAgIGlmICghbGluaykge1xuICAgICAgbGluayA9IC8qKiBAdHlwZSB7SFRNTExpbmtFbGVtZW50fSAqLyAoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpKTtcbiAgICAgIGxpbmsucmVsID0gJ2ltcG9ydCc7XG4gICAgICBsaW5rLmhyZWYgPSBocmVmO1xuICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2ltcG9ydC1ocmVmJywgJycpO1xuICAgIH1cbiAgICAvLyBhbHdheXMgZW5zdXJlIGxpbmsgaGFzIGBhc3luY2AgYXR0cmlidXRlIGlmIHVzZXIgc3BlY2lmaWVkIG9uZSxcbiAgICAvLyBldmVuIGlmIGl0IHdhcyBwcmV2aW91c2x5IG5vdCBhc3luYy4gVGhpcyBpcyBjb25zaWRlcmVkIGxlc3MgY29uZnVzaW5nLlxuICAgIGlmIChvcHRBc3luYykge1xuICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgJycpO1xuICAgIH1cbiAgICAvLyBOT1RFOiB0aGUgbGluayBtYXkgbm93IGJlIGluIDMgc3RhdGVzOiAoMSkgcGVuZGluZyBpbnNlcnRpb24sXG4gICAgLy8gKDIpIGluZmxpZ2h0LCAoMykgYWxyZWFkeSBsb2FkZWQuIEluIGVhY2ggY2FzZSwgd2UgbmVlZCB0byBhZGRcbiAgICAvLyBldmVudCBsaXN0ZW5lcnMgdG8gcHJvY2VzcyBjYWxsYmFja3MuXG4gICAgbGV0IGNsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRMaXN0ZW5lcik7XG4gICAgICBsaW5rLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgfTtcbiAgICBsZXQgbG9hZExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIC8vIEluIGNhc2Ugb2YgYSBzdWNjZXNzZnVsIGxvYWQsIGNhY2hlIHRoZSBsb2FkIGV2ZW50IG9uIHRoZSBsaW5rIHNvXG4gICAgICAvLyB0aGF0IGl0IGNhbiBiZSB1c2VkIHRvIHNob3J0LWNpcmN1aXQgdGhpcyBtZXRob2QgaW4gdGhlIGZ1dHVyZSB3aGVuXG4gICAgICAvLyBpdCBpcyBjYWxsZWQgd2l0aCB0aGUgc2FtZSBocmVmIHBhcmFtLlxuICAgICAgbGluay5fX2R5bmFtaWNJbXBvcnRMb2FkZWQgPSB0cnVlO1xuICAgICAgaWYgKG9ubG9hZCkge1xuICAgICAgICB3aGVuSW1wb3J0c1JlYWR5KCgpID0+IHtcbiAgICAgICAgICBvbmxvYWQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBlcnJvckxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IsIHJlbW92ZSB0aGUgbGluayBmcm9tIHRoZSBkb2N1bWVudCBzbyB0aGF0IGl0XG4gICAgICAvLyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBhZ2FpbiB0aGUgbmV4dCB0aW1lIGBpbXBvcnRIcmVmYCBpc1xuICAgICAgLy8gY2FsbGVkLlxuICAgICAgaWYgKGxpbmsucGFyZW50Tm9kZSkge1xuICAgICAgICBsaW5rLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgICB9XG4gICAgICBpZiAob25lcnJvcikge1xuICAgICAgICB3aGVuSW1wb3J0c1JlYWR5KCgpID0+IHtcbiAgICAgICAgICBvbmVycm9yKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBsb2FkTGlzdGVuZXIpO1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICBpZiAobGluay5wYXJlbnROb2RlID09IG51bGwpIHtcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgLy8gaWYgdGhlIGxpbmsgYWxyZWFkeSBsb2FkZWQsIGRpc3BhdGNoIGEgZmFrZSBsb2FkIGV2ZW50XG4gICAgLy8gc28gdGhhdCBsaXN0ZW5lcnMgYXJlIGNhbGxlZCBhbmQgZ2V0IGEgcHJvcGVyIGV2ZW50IGFyZ3VtZW50LlxuICAgIH0gZWxzZSBpZiAobGluay5fX2R5bmFtaWNJbXBvcnRMb2FkZWQpIHtcbiAgICAgIGxpbmsuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2xvYWQnKSk7XG4gICAgfVxuICAgIHJldHVybiBsaW5rO1xuICB9O1xuXG59KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwicHJvcGVydHktYWNjZXNzb3JzLmh0bWxcIj5cblxuPHNjcmlwdD5cbiAgKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNvbnN0IEhPU1RfRElSID0gLzpob3N0XFwoOmRpclxcKChsdHJ8cnRsKVxcKVxcKS9nO1xuICAgIGNvbnN0IEhPU1RfRElSX1JFUExBQ01FTlQgPSAnOmhvc3QoW2Rpcj1cIiQxXCJdKSc7XG5cbiAgICBjb25zdCBFTF9ESVIgPSAvKFtcXHNcXHctI1xcLlxcW1xcXVxcKl0qKTpkaXJcXCgobHRyfHJ0bClcXCkvZztcbiAgICBjb25zdCBFTF9ESVJfUkVQTEFDTUVOVCA9ICc6aG9zdChbZGlyPVwiJDJcIl0pICQxJztcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshQXJyYXk8IVBvbHltZXJfRGlyTWl4aW4+fVxuICAgICAqL1xuICAgIGNvbnN0IERJUl9JTlNUQU5DRVMgPSBbXTtcblxuICAgIC8qKiBAdHlwZSB7TXV0YXRpb25PYnNlcnZlcn0gKi9cbiAgICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuXG4gICAgbGV0IERPQ1VNRU5UX0RJUiA9ICcnO1xuXG4gICAgZnVuY3Rpb24gZ2V0UlRMKCkge1xuICAgICAgRE9DVU1FTlRfRElSID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshUG9seW1lcl9EaXJNaXhpbn0gaW5zdGFuY2UgSW5zdGFuY2UgdG8gc2V0IFJUTCBzdGF0dXMgb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRSVEwoaW5zdGFuY2UpIHtcbiAgICAgIGlmICghaW5zdGFuY2UuX19hdXRvRGlyT3B0T3V0KSB7XG4gICAgICAgIGNvbnN0IGVsID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKGluc3RhbmNlKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkaXInLCBET0NVTUVOVF9ESVIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURpcmVjdGlvbigpIHtcbiAgICAgIGdldFJUTCgpO1xuICAgICAgRE9DVU1FTlRfRElSID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IERJUl9JTlNUQU5DRVMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0UlRMKERJUl9JTlNUQU5DRVNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRha2VSZWNvcmRzKCkge1xuICAgICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnRha2VSZWNvcmRzKCkubGVuZ3RoKSB7XG4gICAgICAgIHVwZGF0ZURpcmVjdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBhbGxvd3MgZWxlbWVudHMgdG8gdXNlIHRoZSBgOmRpcmAgQ1NTIFNlbGVjdG9yIHRvIGhhdmVcbiAgICAgKiB0ZXh0IGRpcmVjdGlvbiBzcGVjaWZpYyBzdHlsaW5nLlxuICAgICAqXG4gICAgICogV2l0aCB0aGlzIG1peGluLCBhbnkgc3R5bGVzaGVldCBwcm92aWRlZCBpbiB0aGUgdGVtcGxhdGUgd2lsbCB0cmFuc2Zvcm0gYDpkaXJgIGludG9cbiAgICAgKiBgOmhvc3QoW2Rpcl0pYCBhbmQgc3luYyBkaXJlY3Rpb24gd2l0aCB0aGUgcGFnZSB2aWEgdGhlIGVsZW1lbnQncyBgZGlyYCBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBFbGVtZW50cyBjYW4gb3B0IG91dCBvZiB0aGUgZ2xvYmFsIHBhZ2UgdGV4dCBkaXJlY3Rpb24gYnkgc2V0dGluZyB0aGUgYGRpcmAgYXR0cmlidXRlXG4gICAgICogZGlyZWN0bHkgaW4gYHJlYWR5KClgIG9yIGluIEhUTUwuXG4gICAgICpcbiAgICAgKiBDYXZlYXRzOlxuICAgICAqIC0gQXBwbGljYXRpb25zIG11c3Qgc2V0IGA8aHRtbCBkaXI9XCJsdHJcIj5gIG9yIGA8aHRtbCBkaXI9XCJydGxcIj5gIHRvIHN5bmMgZGlyZWN0aW9uXG4gICAgICogLSBBdXRvbWF0aWMgbGVmdC10by1yaWdodCBvciByaWdodC10by1sZWZ0IHN0eWxpbmcgaXMgc3luYydkIHdpdGggdGhlIGA8aHRtbD5gIGVsZW1lbnQgb25seS5cbiAgICAgKiAtIENoYW5naW5nIGBkaXJgIGF0IHJ1bnRpbWUgaXMgc3VwcG9ydGVkLlxuICAgICAqIC0gT3B0aW5nIG91dCBvZiB0aGUgZ2xvYmFsIGRpcmVjdGlvbiBzdHlsaW5nIGlzIHBlcm1hbmVudFxuICAgICAqXG4gICAgICogQG1peGluRnVuY3Rpb25cbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5Qcm9wZXJ0eUFjY2Vzc29yc1xuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAgICovXG4gICAgUG9seW1lci5EaXJNaXhpbiA9IFBvbHltZXIuZGVkdXBpbmdNaXhpbigoYmFzZSkgPT4ge1xuXG4gICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgIGdldFJUTCgpO1xuICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHVwZGF0ZURpcmVjdGlvbik7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7YXR0cmlidXRlczogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbJ2RpciddfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5QWNjZXNzb3JzfVxuICAgICAgICovXG4gICAgICBjb25zdCBlbGVtZW50QmFzZSA9IFBvbHltZXIuUHJvcGVydHlBY2Nlc3NvcnMoYmFzZSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBvbHltZXJcbiAgICAgICAqIEBtaXhpbkNsYXNzXG4gICAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9EaXJNaXhpbn1cbiAgICAgICAqL1xuICAgICAgY2xhc3MgRGlyIGV4dGVuZHMgZWxlbWVudEJhc2Uge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgX3Byb2Nlc3NTdHlsZVRleHQoY3NzVGV4dCwgYmFzZVVSSSkge1xuICAgICAgICAgIGNzc1RleHQgPSBzdXBlci5fcHJvY2Vzc1N0eWxlVGV4dChjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICAgICAgICBjc3NUZXh0ID0gdGhpcy5fcmVwbGFjZURpckluQ3NzVGV4dChjc3NUZXh0KTtcbiAgICAgICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBsYWNlIGA6ZGlyYCBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHRcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgQ1NTIHRleHQgdG8gcmVwbGFjZSBESVJcbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBNb2RpZmllZCBDU1NcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBfcmVwbGFjZURpckluQ3NzVGV4dCh0ZXh0KSB7XG4gICAgICAgICAgbGV0IHJlcGxhY2VkVGV4dCA9IHRleHQ7XG4gICAgICAgICAgcmVwbGFjZWRUZXh0ID0gcmVwbGFjZWRUZXh0LnJlcGxhY2UoSE9TVF9ESVIsIEhPU1RfRElSX1JFUExBQ01FTlQpO1xuICAgICAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKEVMX0RJUiwgRUxfRElSX1JFUExBQ01FTlQpO1xuICAgICAgICAgIGlmICh0ZXh0ICE9PSByZXBsYWNlZFRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuX19hY3RpdmF0ZURpciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXBsYWNlZFRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgICAgICB0aGlzLl9fYXV0b0Rpck9wdE91dCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGF0IGB0aGlzYCBpcyBhbiBIVE1MRWxlbWVudFxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgcmVhZHkoKSB7XG4gICAgICAgICAgc3VwZXIucmVhZHkoKTtcbiAgICAgICAgICB0aGlzLl9fYXV0b0Rpck9wdE91dCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKS5oYXNBdHRyaWJ1dGUoJ2RpcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IElmIGl0IGV4aXN0cyBvbiBlbGVtZW50QmFzZSwgaXQgY2FuIGJlIHN1cGVyJ2RcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgIGlmIChlbGVtZW50QmFzZS5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9fYWN0aXZhdGVEaXIpIHtcbiAgICAgICAgICAgIHRha2VSZWNvcmRzKCk7XG4gICAgICAgICAgICBESVJfSU5TVEFOQ0VTLnB1c2godGhpcyk7XG4gICAgICAgICAgICBzZXRSVEwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IElmIGl0IGV4aXN0cyBvbiBlbGVtZW50QmFzZSwgaXQgY2FuIGJlIHN1cGVyJ2RcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgIGlmIChlbGVtZW50QmFzZS5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLl9fYWN0aXZhdGVEaXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IERJUl9JTlNUQU5DRVMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgICBESVJfSU5TVEFOQ0VTLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBEaXIuX19hY3RpdmF0ZURpciA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gRGlyO1xuICAgIH0pO1xuICB9KSgpO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYm9vdC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYXN5bmMuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cImRlYm91bmNlLmh0bWxcIj5cblxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gZGV0ZWN0IG5hdGl2ZSB0b3VjaCBhY3Rpb24gc3VwcG9ydFxuICBsZXQgSEFTX05BVElWRV9UQSA9IHR5cGVvZiBkb2N1bWVudC5oZWFkLnN0eWxlLnRvdWNoQWN0aW9uID09PSAnc3RyaW5nJztcbiAgbGV0IEdFU1RVUkVfS0VZID0gJ19fcG9seW1lckdlc3R1cmVzJztcbiAgbGV0IEhBTkRMRURfT0JKID0gJ19fcG9seW1lckdlc3R1cmVzSGFuZGxlZCc7XG4gIGxldCBUT1VDSF9BQ1RJT04gPSAnX19wb2x5bWVyR2VzdHVyZXNUb3VjaEFjdGlvbic7XG4gIC8vIHJhZGl1cyBmb3IgdGFwIGFuZCB0cmFja1xuICBsZXQgVEFQX0RJU1RBTkNFID0gMjU7XG4gIGxldCBUUkFDS19ESVNUQU5DRSA9IDU7XG4gIC8vIG51bWJlciBvZiBsYXN0IE4gdHJhY2sgcG9zaXRpb25zIHRvIGtlZXBcbiAgbGV0IFRSQUNLX0xFTkdUSCA9IDI7XG5cbiAgLy8gRGlzYWJsaW5nIFwibW91c2VcIiBoYW5kbGVycyBmb3IgMjUwMG1zIGlzIGVub3VnaFxuICBsZXQgTU9VU0VfVElNRU9VVCA9IDI1MDA7XG4gIGxldCBNT1VTRV9FVkVOVFMgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdjbGljayddO1xuICAvLyBhbiBhcnJheSBvZiBiaXRtYXNrIHZhbHVlcyBmb3IgbWFwcGluZyBNb3VzZUV2ZW50LndoaWNoIHRvIE1vdXNlRXZlbnQuYnV0dG9uc1xuICBsZXQgTU9VU0VfV0hJQ0hfVE9fQlVUVE9OUyA9IFswLCAxLCA0LCAyXTtcbiAgbGV0IE1PVVNFX0hBU19CVVRUT05TID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IE1vdXNlRXZlbnQoJ3Rlc3QnLCB7YnV0dG9uczogMX0pLmJ1dHRvbnMgPT09IDE7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSkoKTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgUG9zc2libGUgbW91c2UgZXZlbnQgbmFtZVxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG1vdXNlIGV2ZW50LCBmYWxzZSBpZiBub3RcbiAgICovXG4gIGZ1bmN0aW9uIGlzTW91c2VFdmVudChuYW1lKSB7XG4gICAgcmV0dXJuIE1PVVNFX0VWRU5UUy5pbmRleE9mKG5hbWUpID4gLTE7XG4gIH1cblxuICAvKiBlc2xpbnQgbm8tZW1wdHk6IFtcImVycm9yXCIsIHsgXCJhbGxvd0VtcHR5Q2F0Y2hcIjogdHJ1ZSB9XSAqL1xuICAvLyBjaGVjayBmb3IgcGFzc2l2ZSBldmVudCBsaXN0ZW5lcnNcbiAgbGV0IFNVUFBPUlRTX1BBU1NJVkUgPSBmYWxzZTtcbiAgKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBsZXQgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7Z2V0KCkge1NVUFBPUlRTX1BBU1NJVkUgPSB0cnVlO319KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0cyk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgIH0gY2F0Y2goZSkge31cbiAgfSkoKTtcblxuICAvKipcbiAgICogR2VuZXJhdGUgc2V0dGluZ3MgZm9yIGV2ZW50IGxpc3RlbmVycywgZGVwZW5kYW50IG9uIGBQb2x5bWVyLnBhc3NpdmVUb3VjaEdlc3R1cmVzYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIEV2ZW50IG5hbWUgdG8gZGV0ZXJtaW5lIGlmIGB7cGFzc2l2ZX1gIG9wdGlvbiBpcyBuZWVkZWRcbiAgICogQHJldHVybiB7e3Bhc3NpdmU6IGJvb2xlYW59IHwgdW5kZWZpbmVkfSBPcHRpb25zIHRvIHVzZSBmb3IgYWRkRXZlbnRMaXN0ZW5lciBhbmQgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICAgKi9cbiAgZnVuY3Rpb24gUEFTU0lWRV9UT1VDSChldmVudE5hbWUpIHtcbiAgICBpZiAoaXNNb3VzZUV2ZW50KGV2ZW50TmFtZSkgfHwgZXZlbnROYW1lID09PSAndG91Y2hlbmQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChIQVNfTkFUSVZFX1RBICYmIFNVUFBPUlRTX1BBU1NJVkUgJiYgUG9seW1lci5wYXNzaXZlVG91Y2hHZXN0dXJlcykge1xuICAgICAgcmV0dXJuIHtwYXNzaXZlOiB0cnVlfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGZvciB0b3VjaC1vbmx5IGRldmljZXNcbiAgbGV0IElTX1RPVUNIX09OTFkgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUCg/OltvYV1kfGhvbmUpfEFuZHJvaWQvKTtcblxuICBsZXQgR2VzdHVyZVJlY29nbml6ZXIgPSBmdW5jdGlvbigpe307IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgLyoqIEB0eXBlIHtmdW5jdGlvbigpOiB2b2lkfSAqL1xuICBHZXN0dXJlUmVjb2duaXplci5wcm90b3R5cGUucmVzZXQ7XG4gIC8qKiBAdHlwZSB7ZnVuY3Rpb24oTW91c2VFdmVudCk6IHZvaWQgfCB1bmRlZmluZWR9ICovXG4gIEdlc3R1cmVSZWNvZ25pemVyLnByb3RvdHlwZS5tb3VzZWRvd247XG4gIC8qKiBAdHlwZSB7KGZ1bmN0aW9uKE1vdXNlRXZlbnQpOiB2b2lkIHwgdW5kZWZpbmVkKX0gKi9cbiAgR2VzdHVyZVJlY29nbml6ZXIucHJvdG90eXBlLm1vdXNlbW92ZTtcbiAgLyoqIEB0eXBlIHsoZnVuY3Rpb24oTW91c2VFdmVudCk6IHZvaWQgfCB1bmRlZmluZWQpfSAqL1xuICBHZXN0dXJlUmVjb2duaXplci5wcm90b3R5cGUubW91c2V1cDtcbiAgLyoqIEB0eXBlIHsoZnVuY3Rpb24oVG91Y2hFdmVudCk6IHZvaWQgfCB1bmRlZmluZWQpfSAqL1xuICBHZXN0dXJlUmVjb2duaXplci5wcm90b3R5cGUudG91Y2hzdGFydDtcbiAgLyoqIEB0eXBlIHsoZnVuY3Rpb24oVG91Y2hFdmVudCk6IHZvaWQgfCB1bmRlZmluZWQpfSAqL1xuICBHZXN0dXJlUmVjb2duaXplci5wcm90b3R5cGUudG91Y2htb3ZlO1xuICAvKiogQHR5cGUgeyhmdW5jdGlvbihUb3VjaEV2ZW50KTogdm9pZCB8IHVuZGVmaW5lZCl9ICovXG4gIEdlc3R1cmVSZWNvZ25pemVyLnByb3RvdHlwZS50b3VjaGVuZDtcbiAgLyoqIEB0eXBlIHsoZnVuY3Rpb24oTW91c2VFdmVudCk6IHZvaWQgfCB1bmRlZmluZWQpfSAqL1xuICBHZXN0dXJlUmVjb2duaXplci5wcm90b3R5cGUuY2xpY2s7XG5cbiAgLy8ga2VlcCB0cmFjayBvZiBhbnkgbGFiZWxzIGhpdCBieSB0aGUgbW91c2VDYW5jZWxsZXJcbiAgLyoqIEB0eXBlIHshQXJyYXk8IUhUTUxMYWJlbEVsZW1lbnQ+fSAqL1xuICBjb25zdCBjbGlja2VkTGFiZWxzID0gW107XG5cbiAgLyoqIEB0eXBlIHshT2JqZWN0PGJvb2xlYW4+fSAqL1xuICBjb25zdCBsYWJlbGxhYmxlID0ge1xuICAgICdidXR0b24nOiB0cnVlLFxuICAgICdpbnB1dCc6IHRydWUsXG4gICAgJ2tleWdlbic6IHRydWUsXG4gICAgJ21ldGVyJzogdHJ1ZSxcbiAgICAnb3V0cHV0JzogdHJ1ZSxcbiAgICAndGV4dGFyZWEnOiB0cnVlLFxuICAgICdwcm9ncmVzcyc6IHRydWUsXG4gICAgJ3NlbGVjdCc6IHRydWVcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCB0byBjaGVjayBsYWJlbGxpbmcgc3RhdHVzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGVsZW1lbnQgY2FuIGhhdmUgbGFiZWxzXG4gICAqL1xuICBmdW5jdGlvbiBjYW5CZUxhYmVsbGVkKGVsKSB7XG4gICAgcmV0dXJuIGxhYmVsbGFibGVbZWwubG9jYWxOYW1lXSB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBFbGVtZW50IHRoYXQgbWF5IGJlIGxhYmVsbGVkLlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxMYWJlbEVsZW1lbnQ+fSBSZWxldmFudCBsYWJlbCBmb3IgYGVsYFxuICAgKi9cbiAgZnVuY3Rpb24gbWF0Y2hpbmdMYWJlbHMoZWwpIHtcbiAgICBsZXQgbGFiZWxzID0gWy4uLigvKiogQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICovKGVsKS5sYWJlbHMgfHwgW10pXTtcbiAgICAvLyBJRSBkb2Vzbid0IGhhdmUgYGxhYmVsc2AgYW5kIFNhZmFyaSBkb2Vzbid0IHBvcHVsYXRlIGBsYWJlbHNgXG4gICAgLy8gaWYgZWxlbWVudCBpcyBpbiBhIHNoYWRvd3Jvb3QuXG4gICAgLy8gSW4gdGhpcyBpbnN0YW5jZSwgZmluZGluZyB0aGUgbm9uLWFuY2VzdG9yIGxhYmVscyBpcyBlbm91Z2gsXG4gICAgLy8gYXMgdGhlIG1vdXNlQ2FuY2VsbG9yIGNvZGUgd2lsbCBoYW5kbGUgYW5jc3RvciBsYWJlbHNcbiAgICBpZiAoIWxhYmVscy5sZW5ndGgpIHtcbiAgICAgIGxhYmVscyA9IFtdO1xuICAgICAgbGV0IHJvb3QgPSBlbC5nZXRSb290Tm9kZSgpO1xuICAgICAgLy8gaWYgdGhlcmUgaXMgYW4gaWQgb24gYGVsYCwgY2hlY2sgZm9yIGFsbCBsYWJlbHMgd2l0aCBhIG1hdGNoaW5nIGBmb3JgIGF0dHJpYnV0ZVxuICAgICAgaWYgKGVsLmlkKSB7XG4gICAgICAgIGxldCBtYXRjaGluZyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChgbGFiZWxbZm9yID0gJHtlbC5pZH1dYCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsYWJlbHMucHVzaCgvKiogQHR5cGUgeyFIVE1MTGFiZWxFbGVtZW50fSAqLyhtYXRjaGluZ1tpXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYWJlbHM7XG4gIH1cblxuICAvLyB0b3VjaCB3aWxsIG1ha2Ugc3ludGhldGljIG1vdXNlIGV2ZW50c1xuICAvLyBgcHJldmVudERlZmF1bHRgIG9uIHRvdWNoZW5kIHdpbGwgY2FuY2VsIHRoZW0sXG4gIC8vIGJ1dCB0aGlzIGJyZWFrcyBgPGlucHV0PmAgZm9jdXMgYW5kIGxpbmsgY2xpY2tzXG4gIC8vIGRpc2FibGUgbW91c2UgaGFuZGxlcnMgZm9yIE1PVVNFX1RJTUVPVVQgbXMgYWZ0ZXJcbiAgLy8gYSB0b3VjaGVuZCB0byBpZ25vcmUgc3ludGhldGljIG1vdXNlIGV2ZW50c1xuICBsZXQgbW91c2VDYW5jZWxsZXIgPSBmdW5jdGlvbihtb3VzZUV2ZW50KSB7XG4gICAgLy8gQ2hlY2sgZm9yIHNvdXJjZUNhcGFiaWxpdGllcywgdXNlZCB0byBkaXN0aW5ndWlzaCBzeW50aGV0aWMgZXZlbnRzXG4gICAgLy8gaWYgbW91c2VFdmVudCBkaWQgbm90IGNvbWUgZnJvbSBhIGRldmljZSB0aGF0IGZpcmVzIHRvdWNoIGV2ZW50cyxcbiAgICAvLyBpdCB3YXMgbWFkZSBieSBhIHJlYWwgbW91c2UgYW5kIHNob3VsZCBiZSBjb3VudGVkXG4gICAgLy8gaHR0cDovL3dpY2cuZ2l0aHViLmlvL0lucHV0RGV2aWNlQ2FwYWJpbGl0aWVzLyNkb20taW5wdXRkZXZpY2VjYXBhYmlsaXRpZXMtZmlyZXN0b3VjaGV2ZW50c1xuICAgIGxldCBzYyA9IG1vdXNlRXZlbnQuc291cmNlQ2FwYWJpbGl0aWVzO1xuICAgIGlmIChzYyAmJiAhc2MuZmlyZXNUb3VjaEV2ZW50cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBza2lwIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbiAgICBtb3VzZUV2ZW50W0hBTkRMRURfT0JKXSA9IHtza2lwOiB0cnVlfTtcbiAgICAvLyBkaXNhYmxlIFwiZ2hvc3QgY2xpY2tzXCJcbiAgICBpZiAobW91c2VFdmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICBsZXQgY2xpY2tGcm9tTGFiZWwgPSBmYWxzZTtcbiAgICAgIGxldCBwYXRoID0gbW91c2VFdmVudC5jb21wb3NlZFBhdGggJiYgbW91c2VFdmVudC5jb21wb3NlZFBhdGgoKTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChwYXRoW2ldLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgaWYgKHBhdGhbaV0ubG9jYWxOYW1lID09PSAnbGFiZWwnKSB7XG4gICAgICAgICAgICAgIGNsaWNrZWRMYWJlbHMucHVzaChwYXRoW2ldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FuQmVMYWJlbGxlZChwYXRoW2ldKSkge1xuICAgICAgICAgICAgICBsZXQgb3duZXJMYWJlbHMgPSBtYXRjaGluZ0xhYmVscyhwYXRoW2ldKTtcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgb25lIG9mIHRoZSBjbGlja2VkIGxhYmVscyBpcyBsYWJlbGxpbmcgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3duZXJMYWJlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjbGlja0Zyb21MYWJlbCA9IGNsaWNrRnJvbUxhYmVsIHx8IGNsaWNrZWRMYWJlbHMuaW5kZXhPZihvd25lckxhYmVsc1tqXSkgPiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGF0aFtpXSA9PT0gUE9JTlRFUlNUQVRFLm1vdXNlLnRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaWYgb25lIG9mIHRoZSBjbGlja2VkIGxhYmVscyB3YXMgbGFiZWxsaW5nIHRoZSB0YXJnZXQgZWxlbWVudCxcbiAgICAgIC8vIHRoaXMgaXMgbm90IGEgZ2hvc3QgY2xpY2tcbiAgICAgIGlmIChjbGlja0Zyb21MYWJlbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFuPX0gc2V0dXAgVHJ1ZSB0byBhZGQsIGZhbHNlIHRvIHJlbW92ZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHNldHVwVGVhcmRvd25Nb3VzZUNhbmNlbGxlcihzZXR1cCkge1xuICAgIGxldCBldmVudHMgPSBJU19UT1VDSF9PTkxZID8gWydjbGljayddIDogTU9VU0VfRVZFTlRTO1xuICAgIGZvciAobGV0IGkgPSAwLCBlbjsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZW4gPSBldmVudHNbaV07XG4gICAgICBpZiAoc2V0dXApIHtcbiAgICAgICAgLy8gcmVzZXQgY2xpY2tMYWJlbHMgYXJyYXlcbiAgICAgICAgY2xpY2tlZExhYmVscy5sZW5ndGggPSAwO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGVuLCBtb3VzZUNhbmNlbGxlciwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGVuLCBtb3VzZUNhbmNlbGxlciwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaWdub3JlTW91c2UoZSkge1xuICAgIGlmICghUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iKSB7XG4gICAgICBzZXR1cFRlYXJkb3duTW91c2VDYW5jZWxsZXIodHJ1ZSk7XG4gICAgfVxuICAgIGxldCB1bnNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0dXBUZWFyZG93bk1vdXNlQ2FuY2VsbGVyKCk7XG4gICAgICBQT0lOVEVSU1RBVEUubW91c2UudGFyZ2V0ID0gbnVsbDtcbiAgICAgIFBPSU5URVJTVEFURS5tb3VzZS5tb3VzZUlnbm9yZUpvYiA9IG51bGw7XG4gICAgfTtcbiAgICBQT0lOVEVSU1RBVEUubW91c2UudGFyZ2V0ID0gZS5jb21wb3NlZFBhdGgoKVswXTtcbiAgICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IgPSBQb2x5bWVyLkRlYm91bmNlci5kZWJvdW5jZShcbiAgICAgICAgICBQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2JcbiAgICAgICAgLCBQb2x5bWVyLkFzeW5jLnRpbWVPdXQuYWZ0ZXIoTU9VU0VfVElNRU9VVClcbiAgICAgICAgLCB1bnNldCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldiBldmVudCB0byB0ZXN0IGZvciBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGhhcyBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAqL1xuICBmdW5jdGlvbiBoYXNMZWZ0TW91c2VCdXR0b24oZXYpIHtcbiAgICBsZXQgdHlwZSA9IGV2LnR5cGU7XG4gICAgLy8gZXhpdCBlYXJseSBpZiB0aGUgZXZlbnQgaXMgbm90IGEgbW91c2UgZXZlbnRcbiAgICBpZiAoIWlzTW91c2VFdmVudCh0eXBlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBldi5idXR0b24gaXMgbm90IHJlbGlhYmxlIGZvciBtb3VzZW1vdmUgKDAgaXMgb3ZlcmxvYWRlZCBhcyBib3RoIGxlZnQgYnV0dG9uIGFuZCBubyBidXR0b25zKVxuICAgIC8vIGluc3RlYWQgd2UgdXNlIGV2LmJ1dHRvbnMgKGJpdG1hc2sgb2YgYnV0dG9ucykgb3IgZmFsbCBiYWNrIHRvIGV2LndoaWNoIChkZXByZWNhdGVkLCAwIGZvciBubyBidXR0b25zLCAxIGZvciBsZWZ0IGJ1dHRvbilcbiAgICBpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcbiAgICAgIC8vIGFsbG93IHVuZGVmaW5lZCBmb3IgdGVzdGluZyBldmVudHNcbiAgICAgIGxldCBidXR0b25zID0gZXYuYnV0dG9ucyA9PT0gdW5kZWZpbmVkID8gMSA6IGV2LmJ1dHRvbnM7XG4gICAgICBpZiAoKGV2IGluc3RhbmNlb2Ygd2luZG93Lk1vdXNlRXZlbnQpICYmICFNT1VTRV9IQVNfQlVUVE9OUykge1xuICAgICAgICBidXR0b25zID0gTU9VU0VfV0hJQ0hfVE9fQlVUVE9OU1tldi53aGljaF0gfHwgMDtcbiAgICAgIH1cbiAgICAgIC8vIGJ1dHRvbnMgaXMgYSBiaXRtYXNrLCBjaGVjayB0aGF0IHRoZSBsZWZ0IGJ1dHRvbiBiaXQgaXMgc2V0ICgxKVxuICAgICAgcmV0dXJuIEJvb2xlYW4oYnV0dG9ucyAmIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhbGxvdyB1bmRlZmluZWQgZm9yIHRlc3RpbmcgZXZlbnRzXG4gICAgICBsZXQgYnV0dG9uID0gZXYuYnV0dG9uID09PSB1bmRlZmluZWQgPyAwIDogZXYuYnV0dG9uO1xuICAgICAgLy8gZXYuYnV0dG9uIGlzIDAgaW4gbW91c2Vkb3duL21vdXNldXAvY2xpY2sgZm9yIGxlZnQgYnV0dG9uIGFjdGl2YXRpb25cbiAgICAgIHJldHVybiBidXR0b24gPT09IDA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTeW50aGV0aWNDbGljayhldikge1xuICAgIGlmIChldi50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAvLyBldi5kZXRhaWwgaXMgMCBmb3IgSFRNTEVsZW1lbnQuY2xpY2sgaW4gbW9zdCBicm93c2Vyc1xuICAgICAgaWYgKGV2LmRldGFpbCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIGluIHRoZSB3b3JzdCBjYXNlLCBjaGVjayB0aGF0IHRoZSB4L3kgcG9zaXRpb24gb2YgdGhlIGNsaWNrIGlzIHdpdGhpblxuICAgICAgLy8gdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgdGFyZ2V0IG9mIHRoZSBldmVudFxuICAgICAgLy8gVGhhbmtzIElFIDEwID46KFxuICAgICAgbGV0IHQgPSBHZXN0dXJlcy5fZmluZE9yaWdpbmFsVGFyZ2V0KGV2KTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgdGFyZ2V0IG9mIHRoZSBldmVudCBpcyBhbiBlbGVtZW50IHNvIHdlIGNhbiB1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LFxuICAgICAgLy8gaWYgbm90LCBqdXN0IGFzc3VtZSBpdCBpcyBhIHN5bnRoZXRpYyBjbGlja1xuICAgICAgaWYgKCF0Lm5vZGVUeXBlIHx8IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8odCkubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbGV0IGJjciA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8odCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAvLyB1c2UgcGFnZSB4L3kgdG8gYWNjb3VudCBmb3Igc2Nyb2xsaW5nXG4gICAgICBsZXQgeCA9IGV2LnBhZ2VYLCB5ID0gZXYucGFnZVk7XG4gICAgICAvLyBldiBpcyBhIHN5bnRoZXRpYyBjbGljayBpZiB0aGUgcG9zaXRpb24gaXMgb3V0c2lkZSB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSB0YXJnZXRcbiAgICAgIHJldHVybiAhKCh4ID49IGJjci5sZWZ0ICYmIHggPD0gYmNyLnJpZ2h0KSAmJiAoeSA+PSBiY3IudG9wICYmIHkgPD0gYmNyLmJvdHRvbSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgUE9JTlRFUlNUQVRFID0ge1xuICAgIG1vdXNlOiB7XG4gICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICBtb3VzZUlnbm9yZUpvYjogbnVsbFxuICAgIH0sXG4gICAgdG91Y2g6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgaWQ6IC0xLFxuICAgICAgc2Nyb2xsRGVjaWRlZDogZmFsc2VcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZmlyc3RUb3VjaEFjdGlvbihldikge1xuICAgIGxldCB0YSA9ICdhdXRvJztcbiAgICBsZXQgcGF0aCA9IGV2LmNvbXBvc2VkUGF0aCAmJiBldi5jb21wb3NlZFBhdGgoKTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIG47IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG4gPSBwYXRoW2ldO1xuICAgICAgICBpZiAobltUT1VDSF9BQ1RJT05dKSB7XG4gICAgICAgICAgdGEgPSBuW1RPVUNIX0FDVElPTl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhY2tEb2N1bWVudChzdGF0ZU9iaiwgbW92ZWZuLCB1cGZuKSB7XG4gICAgc3RhdGVPYmoubW92ZWZuID0gbW92ZWZuO1xuICAgIHN0YXRlT2JqLnVwZm4gPSB1cGZuO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdmVmbik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHVwZm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gdW50cmFja0RvY3VtZW50KHN0YXRlT2JqKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3RhdGVPYmoubW92ZWZuKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3RhdGVPYmoudXBmbik7XG4gICAgc3RhdGVPYmoubW92ZWZuID0gbnVsbDtcbiAgICBzdGF0ZU9iai51cGZuID0gbnVsbDtcbiAgfVxuXG4gIC8vIHVzZSBhIGRvY3VtZW50LXdpZGUgdG91Y2hlbmQgbGlzdGVuZXIgdG8gc3RhcnQgdGhlIGdob3N0LWNsaWNrIHByZXZlbnRpb24gbWVjaGFuaXNtXG4gIC8vIFVzZSBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgaWYgc3VwcG9ydGVkLCB0byBub3QgYWZmZWN0IHNjcm9sbGluZyBwZXJmb3JtYW5jZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGlnbm9yZU1vdXNlLCBTVVBQT1JUU19QQVNTSVZFID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBNb2R1bGUgZm9yIGFkZGluZyBsaXN0ZW5lcnMgdG8gYSBub2RlIGZvciB0aGUgZm9sbG93aW5nIG5vcm1hbGl6ZWRcbiAgICogY3Jvc3MtcGxhdGZvcm0gXCJnZXN0dXJlXCIgZXZlbnRzOlxuICAgKiAtIGBkb3duYCAtIG1vdXNlIG9yIHRvdWNoIHdlbnQgZG93blxuICAgKiAtIGB1cGAgLSBtb3VzZSBvciB0b3VjaCB3ZW50IHVwXG4gICAqIC0gYHRhcGAgLSBtb3VzZSBjbGljayBvciBmaW5nZXIgdGFwXG4gICAqIC0gYHRyYWNrYCAtIG1vdXNlIGRyYWcgb3IgdG91Y2ggbW92ZVxuICAgKlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyXG4gICAqIEBzdW1tYXJ5IE1vZHVsZSBmb3IgYWRkaW5nIGNyb3NzLXBsYXRmb3JtIGdlc3R1cmUgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgY29uc3QgR2VzdHVyZXMgPSB7XG4gICAgZ2VzdHVyZXM6IHt9LFxuICAgIHJlY29nbml6ZXJzOiBbXSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBlbGVtZW50IHJlbmRlcmVkIG9uIHRoZSBzY3JlZW4gYXQgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGVzLlxuICAgICAqXG4gICAgICogU2ltaWxhciB0byBgZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludGAsIGJ1dCBwaWVyY2VzIHRocm91Z2hcbiAgICAgKiBzaGFkb3cgcm9vdHMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5HZXN0dXJlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IEhvcml6b250YWwgcGl4ZWwgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IFZlcnRpY2FsIHBpeGVsIGNvb3JkaW5hdGVcbiAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSBSZXR1cm5zIHRoZSBkZWVwZXN0IHNoYWRvd1Jvb3QgaW5jbHVzaXZlIGVsZW1lbnRcbiAgICAgKiBmb3VuZCBhdCB0aGUgc2NyZWVuIHBvc2l0aW9uIGdpdmVuLlxuICAgICAqL1xuICAgIGRlZXBUYXJnZXRGaW5kOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBsZXQgbm9kZSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgICBsZXQgbmV4dCA9IG5vZGU7XG4gICAgICAvLyB0aGlzIGNvZGUgcGF0aCBpcyBvbmx5IHRha2VuIHdoZW4gbmF0aXZlIFNoYWRvd0RPTSBpcyB1c2VkXG4gICAgICAvLyBpZiB0aGVyZSBpcyBhIHNoYWRvd3Jvb3QsIGl0IG1heSBoYXZlIGEgbm9kZSBhdCB4L3lcbiAgICAgIC8vIGlmIHRoZXJlIGlzIG5vdCBhIHNoYWRvd3Jvb3QsIGV4aXQgdGhlIGxvb3BcbiAgICAgIHdoaWxlIChuZXh0ICYmIG5leHQuc2hhZG93Um9vdCAmJiAhd2luZG93LlNoYWR5RE9NKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgbm9kZSBhdCB4L3kgaW4gdGhlIHNoYWRvd3Jvb3QsIGxvb2sgZGVlcGVyXG4gICAgICAgIGxldCBvbGROZXh0ID0gbmV4dDtcbiAgICAgICAgbmV4dCA9IG5leHQuc2hhZG93Um9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgICAvLyBvbiBTYWZhcmksIGVsZW1lbnRGcm9tUG9pbnQgbWF5IHJldHVybiB0aGUgc2hhZG93Um9vdCBob3N0XG4gICAgICAgIGlmIChvbGROZXh0ID09PSBuZXh0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBhIGNoZWFwZXIgY2hlY2sgdGhhbiBldi5jb21wb3NlZFBhdGgoKVswXTtcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXYgRXZlbnQuXG4gICAgICogQHJldHVybiB7RXZlbnRUYXJnZXR9IFJldHVybnMgdGhlIGV2ZW50IHRhcmdldC5cbiAgICAgKi9cbiAgICBfZmluZE9yaWdpbmFsVGFyZ2V0OiBmdW5jdGlvbihldikge1xuICAgICAgLy8gc2hhZG93ZG9tXG4gICAgICBpZiAoZXYuY29tcG9zZWRQYXRoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSAvKiogQHR5cGUgeyFBcnJheTwhRXZlbnRUYXJnZXQ+fSAqLyhldi5jb21wb3NlZFBhdGgoKSk7XG4gICAgICAgIC8vIEl0IHNob3VsZG4ndCBiZSwgYnV0IHNvbWV0aW1lcyB0YXJnZXRzIGlzIGVtcHR5ICh3aW5kb3cgb24gU2FmYXJpKS5cbiAgICAgICAgcmV0dXJuIHRhcmdldHMubGVuZ3RoID4gMCA/IHRhcmdldHNbMF0gOiBldi50YXJnZXQ7XG4gICAgICB9XG4gICAgICAvLyBzaGFkeWRvbVxuICAgICAgcmV0dXJuIGV2LnRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldiBFdmVudC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9oYW5kbGVOYXRpdmU6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICBsZXQgaGFuZGxlZDtcbiAgICAgIGxldCB0eXBlID0gZXYudHlwZTtcbiAgICAgIGxldCBub2RlID0gZXYuY3VycmVudFRhcmdldDtcbiAgICAgIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gICAgICBpZiAoIWdvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGdzID0gZ29ialt0eXBlXTtcbiAgICAgIGlmICghZ3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFldltIQU5ETEVEX09CSl0pIHtcbiAgICAgICAgZXZbSEFORExFRF9PQkpdID0ge307XG4gICAgICAgIGlmICh0eXBlLnNsaWNlKDAsIDUpID09PSAndG91Y2gnKSB7XG4gICAgICAgICAgZXYgPSAvKiogQHR5cGUge1RvdWNoRXZlbnR9ICovKGV2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWFzc2lnblxuICAgICAgICAgIGxldCB0ID0gZXYuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgICAgLy8gb25seSBoYW5kbGUgdGhlIGZpcnN0IGZpbmdlclxuICAgICAgICAgICAgaWYgKGV2LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIFBPSU5URVJTVEFURS50b3VjaC5pZCA9IHQuaWRlbnRpZmllcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFBPSU5URVJTVEFURS50b3VjaC5pZCAhPT0gdC5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghSEFTX05BVElWRV9UQSkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCB0eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgICAgICAgICAgICBHZXN0dXJlcy5faGFuZGxlVG91Y2hBY3Rpb24oZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaGFuZGxlZCA9IGV2W0hBTkRMRURfT0JKXTtcbiAgICAgIC8vIHVzZWQgdG8gaWdub3JlIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbiAgICAgIGlmIChoYW5kbGVkLnNraXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gcmVzZXQgcmVjb2duaXplciBzdGF0ZVxuICAgICAgZm9yIChsZXQgaSA9IDAsIHI7IGkgPCBHZXN0dXJlcy5yZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICByID0gR2VzdHVyZXMucmVjb2duaXplcnNbaV07XG4gICAgICAgIGlmIChnc1tyLm5hbWVdICYmICFoYW5kbGVkW3IubmFtZV0pIHtcbiAgICAgICAgICBpZiAoci5mbG93ICYmIHIuZmxvdy5zdGFydC5pbmRleE9mKGV2LnR5cGUpID4gLTEgJiYgci5yZXNldCkge1xuICAgICAgICAgICAgci5yZXNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZW5mb3JjZSBnZXN0dXJlIHJlY29nbml6ZXIgb3JkZXJcbiAgICAgIGZvciAobGV0IGkgPSAwLCByOyBpIDwgR2VzdHVyZXMucmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgciA9IEdlc3R1cmVzLnJlY29nbml6ZXJzW2ldO1xuICAgICAgICBpZiAoZ3Nbci5uYW1lXSAmJiAhaGFuZGxlZFtyLm5hbWVdKSB7XG4gICAgICAgICAgaGFuZGxlZFtyLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICByW3R5cGVdKGV2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZXYgRXZlbnQuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaGFuZGxlVG91Y2hBY3Rpb246IGZ1bmN0aW9uKGV2KSB7XG4gICAgICBsZXQgdCA9IGV2LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgbGV0IHR5cGUgPSBldi50eXBlO1xuICAgICAgaWYgKHR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBQT0lOVEVSU1RBVEUudG91Y2gueCA9IHQuY2xpZW50WDtcbiAgICAgICAgUE9JTlRFUlNUQVRFLnRvdWNoLnkgPSB0LmNsaWVudFk7XG4gICAgICAgIFBPSU5URVJTVEFURS50b3VjaC5zY3JvbGxEZWNpZGVkID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIGlmIChQT0lOVEVSU1RBVEUudG91Y2guc2Nyb2xsRGVjaWRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBQT0lOVEVSU1RBVEUudG91Y2guc2Nyb2xsRGVjaWRlZCA9IHRydWU7XG4gICAgICAgIGxldCB0YSA9IGZpcnN0VG91Y2hBY3Rpb24oZXYpO1xuICAgICAgICBsZXQgcHJldmVudCA9IGZhbHNlO1xuICAgICAgICBsZXQgZHggPSBNYXRoLmFicyhQT0lOVEVSU1RBVEUudG91Y2gueCAtIHQuY2xpZW50WCk7XG4gICAgICAgIGxldCBkeSA9IE1hdGguYWJzKFBPSU5URVJTVEFURS50b3VjaC55IC0gdC5jbGllbnRZKTtcbiAgICAgICAgaWYgKCFldi5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgLy8gc2Nyb2xsaW5nIGlzIGhhcHBlbmluZ1xuICAgICAgICB9IGVsc2UgaWYgKHRhID09PSAnbm9uZScpIHtcbiAgICAgICAgICBwcmV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0YSA9PT0gJ3Bhbi14Jykge1xuICAgICAgICAgIHByZXZlbnQgPSBkeSA+IGR4O1xuICAgICAgICB9IGVsc2UgaWYgKHRhID09PSAncGFuLXknKSB7XG4gICAgICAgICAgcHJldmVudCA9IGR4ID4gZHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZlbnQpIHtcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEdlc3R1cmVzLnByZXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBhIG5vZGUgZm9yIHRoZSBnaXZlbiBnZXN0dXJlIHR5cGUuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5HZXN0dXJlc1xuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byBhZGQgbGlzdGVuZXIgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZUeXBlIEdlc3R1cmUgdHlwZTogYGRvd25gLCBgdXBgLCBgdHJhY2tgLCBvciBgdGFwYFxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBFdmVudCBsaXN0ZW5lciBmdW5jdGlvbiB0byBjYWxsXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGEgZ2VzdHVyZSBldmVudCBsaXN0ZW5lciB3YXMgYWRkZWQuXG4gICAgICogQHRoaXMge0dlc3R1cmVzfVxuICAgICAqL1xuICAgIGFkZExpc3RlbmVyOiBmdW5jdGlvbihub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmICh0aGlzLmdlc3R1cmVzW2V2VHlwZV0pIHtcbiAgICAgICAgdGhpcy5fYWRkKG5vZGUsIGV2VHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gYSBub2RlIGZvciB0aGUgZ2l2ZW4gZ2VzdHVyZSB0eXBlLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuR2VzdHVyZXNcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlIE5vZGUgdG8gcmVtb3ZlIGxpc3RlbmVyIGZyb21cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZUeXBlIEdlc3R1cmUgdHlwZTogYGRvd25gLCBgdXBgLCBgdHJhY2tgLCBvciBgdGFwYFxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBFdmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcmV2aW91c2x5IHBhc3NlZCB0b1xuICAgICAqICBgYWRkTGlzdGVuZXJgLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIGdlc3R1cmUgZXZlbnQgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG4gICAgICogQHRoaXMge0dlc3R1cmVzfVxuICAgICAqL1xuICAgIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbihub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmICh0aGlzLmdlc3R1cmVzW2V2VHlwZV0pIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlKG5vZGUsIGV2VHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBhdXRvbWF0ZSB0aGUgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgbmF0aXZlIGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbm9kZSBOb2RlIG9uIHdoaWNoIHRvIGFkZCB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2VHlwZSBFdmVudCB0eXBlIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGhhbmRsZXIgRXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEB0aGlzIHtHZXN0dXJlc31cbiAgICAgKi9cbiAgICBfYWRkOiBmdW5jdGlvbihub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGxldCByZWNvZ25pemVyID0gdGhpcy5nZXN0dXJlc1tldlR5cGVdO1xuICAgICAgbGV0IGRlcHMgPSByZWNvZ25pemVyLmRlcHM7XG4gICAgICBsZXQgbmFtZSA9IHJlY29nbml6ZXIubmFtZTtcbiAgICAgIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gICAgICBpZiAoIWdvYmopIHtcbiAgICAgICAgbm9kZVtHRVNUVVJFX0tFWV0gPSBnb2JqID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMCwgZGVwLCBnZDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVwID0gZGVwc1tpXTtcbiAgICAgICAgLy8gZG9uJ3QgYWRkIG1vdXNlIGhhbmRsZXJzIG9uIGlPUyBiZWNhdXNlIHRoZXkgY2F1c2UgZ3JheSBzZWxlY3Rpb24gb3ZlcmxheXNcbiAgICAgICAgaWYgKElTX1RPVUNIX09OTFkgJiYgaXNNb3VzZUV2ZW50KGRlcCkgJiYgZGVwICE9PSAnY2xpY2snKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2QgPSBnb2JqW2RlcF07XG4gICAgICAgIGlmICghZ2QpIHtcbiAgICAgICAgICBnb2JqW2RlcF0gPSBnZCA9IHtfY291bnQ6IDB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZC5fY291bnQgPT09IDApIHtcbiAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZGVwLCB0aGlzLl9oYW5kbGVOYXRpdmUsIFBBU1NJVkVfVE9VQ0goZGVwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2RbbmFtZV0gPSAoZ2RbbmFtZV0gfHwgMCkgKyAxO1xuICAgICAgICBnZC5fY291bnQgPSAoZ2QuX2NvdW50IHx8IDApICsgMTtcbiAgICAgIH1cbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldlR5cGUsIGhhbmRsZXIpO1xuICAgICAgaWYgKHJlY29nbml6ZXIudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zZXRUb3VjaEFjdGlvbihub2RlLCByZWNvZ25pemVyLnRvdWNoQWN0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYXV0b21hdGUgZXZlbnQgbGlzdGVuZXIgcmVtb3ZhbCBmb3IgbmF0aXZlIGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbm9kZSBOb2RlIG9uIHdoaWNoIHRvIHJlbW92ZSB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2VHlwZSBFdmVudCB0eXBlIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEV2ZW50Pyl9IGhhbmRsZXIgRXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEB0aGlzIHtHZXN0dXJlc31cbiAgICAgKi9cbiAgICBfcmVtb3ZlOiBmdW5jdGlvbihub2RlLCBldlR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGxldCByZWNvZ25pemVyID0gdGhpcy5nZXN0dXJlc1tldlR5cGVdO1xuICAgICAgbGV0IGRlcHMgPSByZWNvZ25pemVyLmRlcHM7XG4gICAgICBsZXQgbmFtZSA9IHJlY29nbml6ZXIubmFtZTtcbiAgICAgIGxldCBnb2JqID0gbm9kZVtHRVNUVVJFX0tFWV07XG4gICAgICBpZiAoZ29iaikge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgZGVwLCBnZDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkZXAgPSBkZXBzW2ldO1xuICAgICAgICAgIGdkID0gZ29ialtkZXBdO1xuICAgICAgICAgIGlmIChnZCAmJiBnZFtuYW1lXSkge1xuICAgICAgICAgICAgZ2RbbmFtZV0gPSAoZ2RbbmFtZV0gfHwgMSkgLSAxO1xuICAgICAgICAgICAgZ2QuX2NvdW50ID0gKGdkLl9jb3VudCB8fCAxKSAtIDE7XG4gICAgICAgICAgICBpZiAoZ2QuX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkZXAsIHRoaXMuX2hhbmRsZU5hdGl2ZSwgUEFTU0lWRV9UT1VDSChkZXApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldlR5cGUsIGhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgZ2VzdHVyZSBldmVudCByZWNvZ25pemVyIGZvciBhZGRpbmcgbmV3IGN1c3RvbVxuICAgICAqIGdlc3R1cmUgZXZlbnQgdHlwZXMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5HZXN0dXJlc1xuICAgICAqIEBwYXJhbSB7IUdlc3R1cmVSZWNvZ25pemVyfSByZWNvZyBHZXN0dXJlIHJlY29nbml6ZXIgZGVzY3JpcHRvclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHRoaXMge0dlc3R1cmVzfVxuICAgICAqL1xuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihyZWNvZykge1xuICAgICAgdGhpcy5yZWNvZ25pemVycy5wdXNoKHJlY29nKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjb2cuZW1pdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5nZXN0dXJlc1tyZWNvZy5lbWl0c1tpXV0gPSByZWNvZztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZOYW1lIEV2ZW50IG5hbWUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIHRoZSBnZXN0dXJlIGZvciB0aGUgZ2l2ZW4gZXZlbnQgbmFtZS5cbiAgICAgKiBAdGhpcyB7R2VzdHVyZXN9XG4gICAgICovXG4gICAgX2ZpbmRSZWNvZ25pemVyQnlFdmVudDogZnVuY3Rpb24oZXZOYW1lKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgcjsgaSA8IHRoaXMucmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgciA9IHRoaXMucmVjb2duaXplcnNbaV07XG4gICAgICAgIGZvciAobGV0IGogPSAwLCBuOyBqIDwgci5lbWl0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIG4gPSByLmVtaXRzW2pdO1xuICAgICAgICAgIGlmIChuID09PSBldk5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgc2Nyb2xsaW5nIGRpcmVjdGlvbiBvbiBub2RlLlxuICAgICAqXG4gICAgICogVGhpcyB2YWx1ZSBpcyBjaGVja2VkIG9uIGZpcnN0IG1vdmUsIHRodXMgaXQgc2hvdWxkIGJlIGNhbGxlZCBwcmlvciB0b1xuICAgICAqIGFkZGluZyBldmVudCBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5HZXN0dXJlc1xuICAgICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGUgTm9kZSB0byBzZXQgdG91Y2ggYWN0aW9uIHNldHRpbmcgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVG91Y2ggYWN0aW9uIHZhbHVlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBzZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICAgIGlmIChIQVNfTkFUSVZFX1RBKSB7XG4gICAgICAgIC8vIE5PVEU6IGFkZCB0b3VjaEFjdGlvbiBhc3luYyBzbyB0aGF0IGV2ZW50cyBjYW4gYmUgYWRkZWQgaW5cbiAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzLiBPdGhlcndpc2Ugd2UgcnVuIGFmb3VsIG9mIGN1c3RvbVxuICAgICAgICAvLyBlbGVtZW50cyByZXN0cmljdGlvbiBhZ2FpbnN0IHNldHRpbmdzIGF0dHJpYnV0ZXMgKHN0eWxlKSBpbiB0aGVcbiAgICAgICAgLy8gY29uc3RydWN0b3IuXG4gICAgICAgIFBvbHltZXIuQXN5bmMubWljcm9UYXNrLnJ1bigoKSA9PiB7XG4gICAgICAgICAgbm9kZS5zdHlsZS50b3VjaEFjdGlvbiA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG5vZGVbVE9VQ0hfQUNUSU9OXSA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IG9uIHRoZSBgdGFyZ2V0YCBlbGVtZW50IG9mIGB0eXBlYCB3aXRoIHRoZSBnaXZlblxuICAgICAqIGBkZXRhaWxgLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IHRhcmdldCBUaGUgZWxlbWVudCBvbiB3aGljaCB0byBmaXJlIGFuIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGZpcmUuXG4gICAgICogQHBhcmFtIHshT2JqZWN0PX0gZGV0YWlsIFRoZSBkZXRhaWwgb2JqZWN0IHRvIHBvcHVsYXRlIG9uIHRoZSBldmVudC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9maXJlOiBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIGRldGFpbCkge1xuICAgICAgbGV0IGV2ID0gbmV3IEV2ZW50KHR5cGUsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfSk7XG4gICAgICBldi5kZXRhaWwgPSBkZXRhaWw7XG4gICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldik7XG4gICAgICAvLyBmb3J3YXJkIGBwcmV2ZW50RGVmYXVsdGAgaW4gYSBjbGVhbiB3YXlcbiAgICAgIGlmIChldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIGxldCBwcmV2ZW50ZXIgPSBkZXRhaWwucHJldmVudGVyIHx8IGRldGFpbC5zb3VyY2VFdmVudDtcbiAgICAgICAgaWYgKHByZXZlbnRlciAmJiBwcmV2ZW50ZXIucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBwcmV2ZW50ZXIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50cyB0aGUgZGlzcGF0Y2ggYW5kIGRlZmF1bHQgYWN0aW9uIG9mIHRoZSBnaXZlbiBldmVudCBuYW1lLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuR2VzdHVyZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZOYW1lIEV2ZW50IG5hbWUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAdGhpcyB7R2VzdHVyZXN9XG4gICAgICovXG4gICAgcHJldmVudDogZnVuY3Rpb24oZXZOYW1lKSB7XG4gICAgICBsZXQgcmVjb2duaXplciA9IHRoaXMuX2ZpbmRSZWNvZ25pemVyQnlFdmVudChldk5hbWUpO1xuICAgICAgaWYgKHJlY29nbml6ZXIuaW5mbykge1xuICAgICAgICByZWNvZ25pemVyLmluZm8ucHJldmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSAyNTAwbXMgdGltZW91dCBvbiBwcm9jZXNzaW5nIG1vdXNlIGlucHV0IGFmdGVyIGRldGVjdGluZyB0b3VjaCBpbnB1dC5cbiAgICAgKlxuICAgICAqIFRvdWNoIGlucHV0cyBjcmVhdGUgc3ludGhlc2l6ZWQgbW91c2UgaW5wdXRzIGFueXdoZXJlIGZyb20gMCB0byAyMDAwbXMgYWZ0ZXIgdGhlIHRvdWNoLlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBkdXJpbmcgdGVzdGluZyB3aXRoIHNpbXVsYXRlZCB0b3VjaCBpbnB1dHMuXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCBpbiBwcm9kdWN0aW9uIG1heSBjYXVzZSBkdXBsaWNhdGUgdGFwcyBvciBvdGhlciBHZXN0dXJlcy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLkdlc3R1cmVzXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICByZXNldE1vdXNlQ2FuY2VsbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChQT0lOVEVSU1RBVEUubW91c2UubW91c2VJZ25vcmVKb2IpIHtcbiAgICAgICAgUE9JTlRFUlNUQVRFLm1vdXNlLm1vdXNlSWdub3JlSm9iLmZsdXNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG5cbiAgR2VzdHVyZXMucmVnaXN0ZXIoe1xuICAgIG5hbWU6ICdkb3dudXAnLFxuICAgIGRlcHM6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnLCAndG91Y2hlbmQnXSxcbiAgICBmbG93OiB7XG4gICAgICBzdGFydDogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLFxuICAgICAgZW5kOiBbJ21vdXNldXAnLCAndG91Y2hlbmQnXVxuICAgIH0sXG4gICAgZW1pdHM6IFsnZG93bicsICd1cCddLFxuXG4gICAgaW5mbzoge1xuICAgICAgbW92ZWZuOiBudWxsLFxuICAgICAgdXBmbjogbnVsbFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB1bnRyYWNrRG9jdW1lbnQodGhpcy5pbmZvKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgbW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgdCA9IEdlc3R1cmVzLl9maW5kT3JpZ2luYWxUYXJnZXQoZSk7XG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICBsZXQgbW92ZWZuID0gZnVuY3Rpb24gbW92ZWZuKGUpIHtcbiAgICAgICAgaWYgKCFoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgICAgICBzZWxmLl9maXJlKCd1cCcsIHQsIGUpO1xuICAgICAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgbGV0IHVwZm4gPSBmdW5jdGlvbiB1cGZuKGUpIHtcbiAgICAgICAgaWYgKGhhc0xlZnRNb3VzZUJ1dHRvbihlKSkge1xuICAgICAgICAgIHNlbGYuX2ZpcmUoJ3VwJywgdCwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgdW50cmFja0RvY3VtZW50KHNlbGYuaW5mbyk7XG4gICAgICB9O1xuICAgICAgdHJhY2tEb2N1bWVudCh0aGlzLmluZm8sIG1vdmVmbiwgdXBmbik7XG4gICAgICB0aGlzLl9maXJlKCdkb3duJywgdCwgZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICB0b3VjaHN0YXJ0OiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLl9maXJlKCdkb3duJywgR2VzdHVyZXMuX2ZpbmRPcmlnaW5hbFRhcmdldChlKSwgZS5jaGFuZ2VkVG91Y2hlc1swXSwgZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICB0b3VjaGVuZDogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy5fZmlyZSgndXAnLCBHZXN0dXJlcy5fZmluZE9yaWdpbmFsVGFyZ2V0KGUpLCBlLmNoYW5nZWRUb3VjaGVzWzBdLCBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJldmVudGVyXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfZmlyZTogZnVuY3Rpb24odHlwZSwgdGFyZ2V0LCBldmVudCwgcHJldmVudGVyKSB7XG4gICAgICBHZXN0dXJlcy5fZmlyZSh0YXJnZXQsIHR5cGUsIHtcbiAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTogZXZlbnQuY2xpZW50WSxcbiAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICBwcmV2ZW50ZXI6IHByZXZlbnRlcixcbiAgICAgICAgcHJldmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBHZXN0dXJlcy5wcmV2ZW50KGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIEdlc3R1cmVzLnJlZ2lzdGVyKHtcbiAgICBuYW1lOiAndHJhY2snLFxuICAgIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gICAgZGVwczogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnXSxcbiAgICBmbG93OiB7XG4gICAgICBzdGFydDogWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLFxuICAgICAgZW5kOiBbJ21vdXNldXAnLCAndG91Y2hlbmQnXVxuICAgIH0sXG4gICAgZW1pdHM6IFsndHJhY2snXSxcblxuICAgIGluZm86IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgc3RhdGU6ICdzdGFydCcsXG4gICAgICBzdGFydGVkOiBmYWxzZSxcbiAgICAgIG1vdmVzOiBbXSxcbiAgICAgIC8qKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9ICovXG4gICAgICBhZGRNb3ZlOiBmdW5jdGlvbihtb3ZlKSB7XG4gICAgICAgIGlmICh0aGlzLm1vdmVzLmxlbmd0aCA+IFRSQUNLX0xFTkdUSCkge1xuICAgICAgICAgIHRoaXMubW92ZXMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdmVzLnB1c2gobW92ZSk7XG4gICAgICB9LFxuICAgICAgbW92ZWZuOiBudWxsLFxuICAgICAgdXBmbjogbnVsbCxcbiAgICAgIHByZXZlbnQ6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5mby5zdGF0ZSA9ICdzdGFydCc7XG4gICAgICB0aGlzLmluZm8uc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pbmZvLm1vdmVzID0gW107XG4gICAgICB0aGlzLmluZm8ueCA9IDA7XG4gICAgICB0aGlzLmluZm8ueSA9IDA7XG4gICAgICB0aGlzLmluZm8ucHJldmVudCA9IGZhbHNlO1xuICAgICAgdW50cmFja0RvY3VtZW50KHRoaXMuaW5mbyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNNb3ZlZEVub3VnaDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgaWYgKHRoaXMuaW5mby5wcmV2ZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmluZm8uc3RhcnRlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxldCBkeCA9IE1hdGguYWJzKHRoaXMuaW5mby54IC0geCk7XG4gICAgICBsZXQgZHkgPSBNYXRoLmFicyh0aGlzLmluZm8ueSAtIHkpO1xuICAgICAgcmV0dXJuIChkeCA+PSBUUkFDS19ESVNUQU5DRSB8fCBkeSA+PSBUUkFDS19ESVNUQU5DRSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBtb3VzZWRvd246IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB0ID0gR2VzdHVyZXMuX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIGxldCBtb3ZlZm4gPSBmdW5jdGlvbiBtb3ZlZm4oZSkge1xuICAgICAgICBsZXQgeCA9IGUuY2xpZW50WCwgeSA9IGUuY2xpZW50WTtcbiAgICAgICAgaWYgKHNlbGYuaGFzTW92ZWRFbm91Z2goeCwgeSkpIHtcbiAgICAgICAgICAvLyBmaXJzdCBtb3ZlIGlzICdzdGFydCcsIHN1YnNlcXVlbnQgbW92ZXMgYXJlICdtb3ZlJywgbW91c2V1cCBpcyAnZW5kJ1xuICAgICAgICAgIHNlbGYuaW5mby5zdGF0ZSA9IHNlbGYuaW5mby5zdGFydGVkID8gKGUudHlwZSA9PT0gJ21vdXNldXAnID8gJ2VuZCcgOiAndHJhY2snKSA6ICdzdGFydCc7XG4gICAgICAgICAgaWYgKHNlbGYuaW5mby5zdGF0ZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgLy8gaWYgYW5kIG9ubHkgaWYgdHJhY2tpbmcsIGFsd2F5cyBwcmV2ZW50IHRhcFxuICAgICAgICAgICAgR2VzdHVyZXMucHJldmVudCgndGFwJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuaW5mby5hZGRNb3ZlKHt4OiB4LCB5OiB5fSk7XG4gICAgICAgICAgaWYgKCFoYXNMZWZ0TW91c2VCdXR0b24oZSkpIHtcbiAgICAgICAgICAgIC8vIGFsd2F5cyBfZmlyZSBcImVuZFwiXG4gICAgICAgICAgICBzZWxmLmluZm8uc3RhdGUgPSAnZW5kJztcbiAgICAgICAgICAgIHVudHJhY2tEb2N1bWVudChzZWxmLmluZm8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLl9maXJlKHQsIGUpO1xuICAgICAgICAgIHNlbGYuaW5mby5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxldCB1cGZuID0gZnVuY3Rpb24gdXBmbihlKSB7XG4gICAgICAgIGlmIChzZWxmLmluZm8uc3RhcnRlZCkge1xuICAgICAgICAgIG1vdmVmbihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgdGVtcG9yYXJ5IGxpc3RlbmVyc1xuICAgICAgICB1bnRyYWNrRG9jdW1lbnQoc2VsZi5pbmZvKTtcbiAgICAgIH07XG4gICAgICAvLyBhZGQgdGVtcG9yYXJ5IGRvY3VtZW50IGxpc3RlbmVycyBhcyBtb3VzZSByZXRhcmdldHNcbiAgICAgIHRyYWNrRG9jdW1lbnQodGhpcy5pbmZvLCBtb3ZlZm4sIHVwZm4pO1xuICAgICAgdGhpcy5pbmZvLnggPSBlLmNsaWVudFg7XG4gICAgICB0aGlzLmluZm8ueSA9IGUuY2xpZW50WTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHRvdWNoc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGxldCBjdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICB0aGlzLmluZm8ueCA9IGN0LmNsaWVudFg7XG4gICAgICB0aGlzLmluZm8ueSA9IGN0LmNsaWVudFk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGxldCB0ID0gR2VzdHVyZXMuX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICAgIGxldCBjdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICBsZXQgeCA9IGN0LmNsaWVudFgsIHkgPSBjdC5jbGllbnRZO1xuICAgICAgaWYgKHRoaXMuaGFzTW92ZWRFbm91Z2goeCwgeSkpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5mby5zdGF0ZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgIC8vIGlmIGFuZCBvbmx5IGlmIHRyYWNraW5nLCBhbHdheXMgcHJldmVudCB0YXBcbiAgICAgICAgICBHZXN0dXJlcy5wcmV2ZW50KCd0YXAnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZm8uYWRkTW92ZSh7eDogeCwgeTogeX0pO1xuICAgICAgICB0aGlzLl9maXJlKHQsIGN0KTtcbiAgICAgICAgdGhpcy5pbmZvLnN0YXRlID0gJ3RyYWNrJztcbiAgICAgICAgdGhpcy5pbmZvLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgdG91Y2hlbmQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGxldCB0ID0gR2VzdHVyZXMuX2ZpbmRPcmlnaW5hbFRhcmdldChlKTtcbiAgICAgIGxldCBjdCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAvLyBvbmx5IHRyYWNrZW5kIGlmIHRyYWNrIHdhcyBzdGFydGVkIGFuZCBub3QgYWJvcnRlZFxuICAgICAgaWYgKHRoaXMuaW5mby5zdGFydGVkKSB7XG4gICAgICAgIC8vIHJlc2V0IHN0YXJ0ZWQgc3RhdGUgb24gdXBcbiAgICAgICAgdGhpcy5pbmZvLnN0YXRlID0gJ2VuZCc7XG4gICAgICAgIHRoaXMuaW5mby5hZGRNb3ZlKHt4OiBjdC5jbGllbnRYLCB5OiBjdC5jbGllbnRZfSk7XG4gICAgICAgIHRoaXMuX2ZpcmUodCwgY3QsIGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7VG91Y2h9IHRvdWNoXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfZmlyZTogZnVuY3Rpb24odGFyZ2V0LCB0b3VjaCkge1xuICAgICAgbGV0IHNlY29uZGxhc3QgPSB0aGlzLmluZm8ubW92ZXNbdGhpcy5pbmZvLm1vdmVzLmxlbmd0aCAtIDJdO1xuICAgICAgbGV0IGxhc3Rtb3ZlID0gdGhpcy5pbmZvLm1vdmVzW3RoaXMuaW5mby5tb3Zlcy5sZW5ndGggLSAxXTtcbiAgICAgIGxldCBkeCA9IGxhc3Rtb3ZlLnggLSB0aGlzLmluZm8ueDtcbiAgICAgIGxldCBkeSA9IGxhc3Rtb3ZlLnkgLSB0aGlzLmluZm8ueTtcbiAgICAgIGxldCBkZHgsIGRkeSA9IDA7XG4gICAgICBpZiAoc2Vjb25kbGFzdCkge1xuICAgICAgICBkZHggPSBsYXN0bW92ZS54IC0gc2Vjb25kbGFzdC54O1xuICAgICAgICBkZHkgPSBsYXN0bW92ZS55IC0gc2Vjb25kbGFzdC55O1xuICAgICAgfVxuICAgICAgR2VzdHVyZXMuX2ZpcmUodGFyZ2V0LCAndHJhY2snLCB7XG4gICAgICAgIHN0YXRlOiB0aGlzLmluZm8uc3RhdGUsXG4gICAgICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgICAgIHk6IHRvdWNoLmNsaWVudFksXG4gICAgICAgIGR4OiBkeCxcbiAgICAgICAgZHk6IGR5LFxuICAgICAgICBkZHg6IGRkeCxcbiAgICAgICAgZGR5OiBkZHksXG4gICAgICAgIHNvdXJjZUV2ZW50OiB0b3VjaCxcbiAgICAgICAgaG92ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBHZXN0dXJlcy5kZWVwVGFyZ2V0RmluZCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIEdlc3R1cmVzLnJlZ2lzdGVyKHtcbiAgICBuYW1lOiAndGFwJyxcbiAgICBkZXBzOiBbJ21vdXNlZG93bicsICdjbGljaycsICd0b3VjaHN0YXJ0JywgJ3RvdWNoZW5kJ10sXG4gICAgZmxvdzoge1xuICAgICAgc3RhcnQ6IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSxcbiAgICAgIGVuZDogWydjbGljaycsICd0b3VjaGVuZCddXG4gICAgfSxcbiAgICBlbWl0czogWyd0YXAnXSxcbiAgICBpbmZvOiB7XG4gICAgICB4OiBOYU4sXG4gICAgICB5OiBOYU4sXG4gICAgICBwcmV2ZW50OiBmYWxzZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbmZvLnggPSBOYU47XG4gICAgICB0aGlzLmluZm8ueSA9IE5hTjtcbiAgICAgIHRoaXMuaW5mby5wcmV2ZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBzYXZlOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLmluZm8ueCA9IGUuY2xpZW50WDtcbiAgICAgIHRoaXMuaW5mby55ID0gZS5jbGllbnRZO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHRoaXMge0dlc3R1cmVSZWNvZ25pemVyfVxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgbW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICAgIHRoaXMuc2F2ZShlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoaGFzTGVmdE1vdXNlQnV0dG9uKGUpKSB7XG4gICAgICAgIHRoaXMuZm9yd2FyZChlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHRvdWNoc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuc2F2ZShlLmNoYW5nZWRUb3VjaGVzWzBdLCBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtHZXN0dXJlUmVjb2duaXplcn1cbiAgICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHRvdWNoZW5kOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLmZvcndhcmQoZS5jaGFuZ2VkVG91Y2hlc1swXSwgZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2VzdHVyZVJlY29nbml6ZXJ9XG4gICAgICogQHBhcmFtIHtFdmVudCB8IFRvdWNofSBlXG4gICAgICogQHBhcmFtIHtFdmVudD19IHByZXZlbnRlclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgZm9yd2FyZDogZnVuY3Rpb24oZSwgcHJldmVudGVyKSB7XG4gICAgICBsZXQgZHggPSBNYXRoLmFicyhlLmNsaWVudFggLSB0aGlzLmluZm8ueCk7XG4gICAgICBsZXQgZHkgPSBNYXRoLmFicyhlLmNsaWVudFkgLSB0aGlzLmluZm8ueSk7XG4gICAgICAvLyBmaW5kIG9yaWdpbmFsIHRhcmdldCBmcm9tIGBwcmV2ZW50ZXJgIGZvciBUb3VjaEV2ZW50cywgb3IgYGVgIGZvciBNb3VzZUV2ZW50c1xuICAgICAgbGV0IHQgPSBHZXN0dXJlcy5fZmluZE9yaWdpbmFsVGFyZ2V0KC8qKiBAdHlwZSB7RXZlbnR9ICovKHByZXZlbnRlciB8fCBlKSk7XG4gICAgICBpZiAoIXQgfHwgdC5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBkeCxkeSBjYW4gYmUgTmFOIGlmIGBjbGlja2AgaGFzIGJlZW4gc2ltdWxhdGVkIGFuZCB0aGVyZSB3YXMgbm8gYGRvd25gIGZvciBgc3RhcnRgXG4gICAgICBpZiAoaXNOYU4oZHgpIHx8IGlzTmFOKGR5KSB8fCAoZHggPD0gVEFQX0RJU1RBTkNFICYmIGR5IDw9IFRBUF9ESVNUQU5DRSkgfHwgaXNTeW50aGV0aWNDbGljayhlKSkge1xuICAgICAgICAvLyBwcmV2ZW50IHRhcHMgZnJvbSBiZWluZyBnZW5lcmF0ZWQgaWYgYW4gZXZlbnQgaGFzIGNhbmNlbGVkIHRoZW1cbiAgICAgICAgaWYgKCF0aGlzLmluZm8ucHJldmVudCkge1xuICAgICAgICAgIEdlc3R1cmVzLl9maXJlKHQsICd0YXAnLCB7XG4gICAgICAgICAgICB4OiBlLmNsaWVudFgsXG4gICAgICAgICAgICB5OiBlLmNsaWVudFksXG4gICAgICAgICAgICBzb3VyY2VFdmVudDogZSxcbiAgICAgICAgICAgIHByZXZlbnRlcjogcHJldmVudGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgR2VzdHVyZXMuZmluZE9yaWdpbmFsVGFyZ2V0ID0gR2VzdHVyZXMuX2ZpbmRPcmlnaW5hbFRhcmdldDtcblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgR2VzdHVyZXMuYWRkID0gR2VzdHVyZXMuYWRkTGlzdGVuZXI7XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIEdlc3R1cmVzLnJlbW92ZSA9IEdlc3R1cmVzLnJlbW92ZUxpc3RlbmVyO1xuXG4gIFBvbHltZXIuR2VzdHVyZXMgPSBHZXN0dXJlcztcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiKGZ1bmN0aW9uKCl7LypcblxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgaz17fTtmdW5jdGlvbiBuKCl7dGhpcy5lbmQ9dGhpcy5zdGFydD0wO3RoaXMucnVsZXM9dGhpcy5wYXJlbnQ9dGhpcy5wcmV2aW91cz1udWxsO3RoaXMuY3NzVGV4dD10aGlzLnBhcnNlZENzc1RleHQ9XCJcIjt0aGlzLmF0UnVsZT0hMTt0aGlzLnR5cGU9MDt0aGlzLnBhcnNlZFNlbGVjdG9yPXRoaXMuc2VsZWN0b3I9dGhpcy5rZXlmcmFtZXNOYW1lPVwiXCJ9XG5mdW5jdGlvbiBwKGEpe2E9YS5yZXBsYWNlKGJhLFwiXCIpLnJlcGxhY2UoY2EsXCJcIik7dmFyIGM9cixiPWEsZD1uZXcgbjtkLnN0YXJ0PTA7ZC5lbmQ9Yi5sZW5ndGg7Zm9yKHZhciBlPWQsZj0wLGg9Yi5sZW5ndGg7ZjxoO2YrKylpZihcIntcIj09PWJbZl0pe2UucnVsZXN8fChlLnJ1bGVzPVtdKTt2YXIgZz1lLG09Zy5ydWxlc1tnLnJ1bGVzLmxlbmd0aC0xXXx8bnVsbDtlPW5ldyBuO2Uuc3RhcnQ9ZisxO2UucGFyZW50PWc7ZS5wcmV2aW91cz1tO2cucnVsZXMucHVzaChlKX1lbHNlXCJ9XCI9PT1iW2ZdJiYoZS5lbmQ9ZisxLGU9ZS5wYXJlbnR8fGQpO3JldHVybiBjKGQsYSl9XG5mdW5jdGlvbiByKGEsYyl7dmFyIGI9Yy5zdWJzdHJpbmcoYS5zdGFydCxhLmVuZC0xKTthLnBhcnNlZENzc1RleHQ9YS5jc3NUZXh0PWIudHJpbSgpO2EucGFyZW50JiYoYj1jLnN1YnN0cmluZyhhLnByZXZpb3VzP2EucHJldmlvdXMuZW5kOmEucGFyZW50LnN0YXJ0LGEuc3RhcnQtMSksYj1kYShiKSxiPWIucmVwbGFjZSh0LFwiIFwiKSxiPWIuc3Vic3RyaW5nKGIubGFzdEluZGV4T2YoXCI7XCIpKzEpLGI9YS5wYXJzZWRTZWxlY3Rvcj1hLnNlbGVjdG9yPWIudHJpbSgpLGEuYXRSdWxlPTA9PT1iLmluZGV4T2YoXCJAXCIpLGEuYXRSdWxlPzA9PT1iLmluZGV4T2YoXCJAbWVkaWFcIik/YS50eXBlPXU6Yi5tYXRjaChlYSkmJihhLnR5cGU9dixhLmtleWZyYW1lc05hbWU9YS5zZWxlY3Rvci5zcGxpdCh0KS5wb3AoKSk6YS50eXBlPTA9PT1iLmluZGV4T2YoXCItLVwiKT93OnkpO2lmKGI9YS5ydWxlcylmb3IodmFyIGQ9MCxlPWIubGVuZ3RoLGY7ZDxlJiYoZj1iW2RdKTtkKyspcihmLGMpO3JldHVybiBhfVxuZnVuY3Rpb24gZGEoYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxcXChbMC05YS1mXXsxLDZ9KVxccy9naSxmdW5jdGlvbihhLGIpe2E9Yjtmb3IoYj02LWEubGVuZ3RoO2ItLTspYT1cIjBcIithO3JldHVyblwiXFxcXFwiK2F9KX1cbmZ1bmN0aW9uIHooYSxjLGIpe2I9dm9pZCAwPT09Yj9cIlwiOmI7dmFyIGQ9XCJcIjtpZihhLmNzc1RleHR8fGEucnVsZXMpe3ZhciBlPWEucnVsZXMsZjtpZihmPWUpZj1lWzBdLGY9IShmJiZmLnNlbGVjdG9yJiYwPT09Zi5zZWxlY3Rvci5pbmRleE9mKFwiLS1cIikpO2lmKGYpe2Y9MDtmb3IodmFyIGg9ZS5sZW5ndGgsZztmPGgmJihnPWVbZl0pO2YrKylkPXooZyxjLGQpfWVsc2UgYz9jPWEuY3NzVGV4dDooYz1hLmNzc1RleHQsYz1jLnJlcGxhY2UoZmEsXCJcIikucmVwbGFjZShoYSxcIlwiKSxjPWMucmVwbGFjZShpYSxcIlwiKS5yZXBsYWNlKGphLFwiXCIpKSwoZD1jLnRyaW0oKSkmJihkPVwiICBcIitkK1wiXFxuXCIpfWQmJihhLnNlbGVjdG9yJiYoYis9YS5zZWxlY3RvcitcIiB7XFxuXCIpLGIrPWQsYS5zZWxlY3RvciYmKGIrPVwifVxcblxcblwiKSk7cmV0dXJuIGJ9XG52YXIgeT0xLHY9Nyx1PTQsdz0xRTMsYmE9L1xcL1xcKlteKl0qXFwqKyhbXi8qXVteKl0qXFwqKykqXFwvL2dpbSxjYT0vQGltcG9ydFteO10qOy9naW0sZmE9Lyg/Ol5bXjtcXC1cXHN9XSspPy0tW147e31dKj86W157fTtdKj8oPzpbO1xcbl18JCkvZ2ltLGhhPS8oPzpeW147XFwtXFxzfV0rKT8tLVteO3t9XSo/Oltee307XSo/e1tefV0qP30oPzpbO1xcbl18JCk/L2dpbSxpYT0vQGFwcGx5XFxzKlxcKD9bXik7XSpcXCk/XFxzKig/Ols7XFxuXXwkKT8vZ2ltLGphPS9bXjs6XSo/OlteO10qP3ZhclxcKFteO10qXFwpKD86WztcXG5dfCQpPy9naW0sZWE9L15AW15cXHNdKmtleWZyYW1lcy8sdD0vXFxzKy9nO3ZhciBrYT1Qcm9taXNlLnJlc29sdmUoKTtmdW5jdGlvbiBsYShhKXtpZihhPWtbYV0pYS5fYXBwbHlTaGltQ3VycmVudFZlcnNpb249YS5fYXBwbHlTaGltQ3VycmVudFZlcnNpb258fDAsYS5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb249YS5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb258fDAsYS5fYXBwbHlTaGltTmV4dFZlcnNpb249KGEuX2FwcGx5U2hpbU5leHRWZXJzaW9ufHwwKSsxfWZ1bmN0aW9uIEEoYSl7cmV0dXJuIGEuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPT09YS5fYXBwbHlTaGltTmV4dFZlcnNpb259ZnVuY3Rpb24gbWEoYSl7YS5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb249YS5fYXBwbHlTaGltTmV4dFZlcnNpb247YS5ifHwoYS5iPSEwLGthLnRoZW4oZnVuY3Rpb24oKXthLl9hcHBseVNoaW1DdXJyZW50VmVyc2lvbj1hLl9hcHBseVNoaW1OZXh0VmVyc2lvbjthLmI9ITF9KSl9O3ZhciBCPSEod2luZG93LlNoYWR5RE9NJiZ3aW5kb3cuU2hhZHlET00uaW5Vc2UpLEM7ZnVuY3Rpb24gRChhKXtDPWEmJmEuc2hpbWNzc3Byb3BlcnRpZXM/ITE6Qnx8IShuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLzYwMXxFZGdlXFwvMTUvKXx8IXdpbmRvdy5DU1N8fCFDU1Muc3VwcG9ydHN8fCFDU1Muc3VwcG9ydHMoXCJib3gtc2hhZG93XCIsXCIwIDAgMCB2YXIoLS1mb28pXCIpKX13aW5kb3cuU2hhZHlDU1MmJnZvaWQgMCE9PXdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M/Qz13aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzOndpbmRvdy5TaGFkeUNTUz8oRCh3aW5kb3cuU2hhZHlDU1MpLHdpbmRvdy5TaGFkeUNTUz12b2lkIDApOkQod2luZG93LldlYkNvbXBvbmVudHMmJndpbmRvdy5XZWJDb21wb25lbnRzLmZsYWdzKTt2YXIgRT1DO3ZhciBHPS8oPzpefFs7XFxze11cXHMqKSgtLVtcXHctXSo/KVxccyo6XFxzKig/OigoPzonKD86XFxcXCd8LikqPyd8XCIoPzpcXFxcXCJ8LikqP1wifFxcKFteKV0qP1xcKXxbXn07e10pKyl8XFx7KFtefV0qKVxcfSg/Oig/PVs7XFxzfV0pfCQpKS9naSxIPS8oPzpefFxcVyspQGFwcGx5XFxzKlxcKD8oW14pO1xcbl0qKVxcKT8vZ2ksbmE9L0BtZWRpYVxccyguKikvO3ZhciBJPW5ldyBTZXQ7ZnVuY3Rpb24gSihhKXtpZighYSlyZXR1cm5cIlwiO1wic3RyaW5nXCI9PT10eXBlb2YgYSYmKGE9cChhKSk7cmV0dXJuIHooYSxFKX1mdW5jdGlvbiBLKGEpeyFhLl9fY3NzUnVsZXMmJmEudGV4dENvbnRlbnQmJihhLl9fY3NzUnVsZXM9cChhLnRleHRDb250ZW50KSk7cmV0dXJuIGEuX19jc3NSdWxlc3x8bnVsbH1mdW5jdGlvbiBMKGEsYyxiLGQpe2lmKGEpe3ZhciBlPSExLGY9YS50eXBlO2lmKGQmJmY9PT11KXt2YXIgaD1hLnNlbGVjdG9yLm1hdGNoKG5hKTtoJiYod2luZG93Lm1hdGNoTWVkaWEoaFsxXSkubWF0Y2hlc3x8KGU9ITApKX1mPT09eT9jKGEpOmImJmY9PT12P2IoYSk6Zj09PXcmJihlPSEwKTtpZigoYT1hLnJ1bGVzKSYmIWUpe2U9MDtmPWEubGVuZ3RoO2Zvcih2YXIgZztlPGYmJihnPWFbZV0pO2UrKylMKGcsYyxiLGQpfX19XG5mdW5jdGlvbiBNKGEsYyl7dmFyIGI9YS5pbmRleE9mKFwidmFyKFwiKTtpZigtMT09PWIpcmV0dXJuIGMoYSxcIlwiLFwiXCIsXCJcIik7YTp7dmFyIGQ9MDt2YXIgZT1iKzM7Zm9yKHZhciBmPWEubGVuZ3RoO2U8ZjtlKyspaWYoXCIoXCI9PT1hW2VdKWQrKztlbHNlIGlmKFwiKVwiPT09YVtlXSYmMD09PS0tZClicmVhayBhO2U9LTF9ZD1hLnN1YnN0cmluZyhiKzQsZSk7Yj1hLnN1YnN0cmluZygwLGIpO2E9TShhLnN1YnN0cmluZyhlKzEpLGMpO2U9ZC5pbmRleE9mKFwiLFwiKTtyZXR1cm4tMT09PWU/YyhiLGQudHJpbSgpLFwiXCIsYSk6YyhiLGQuc3Vic3RyaW5nKDAsZSkudHJpbSgpLGQuc3Vic3RyaW5nKGUrMSkudHJpbSgpLGEpfTt2YXIgb2E9LztcXHMqL20scGE9L15cXHMqKGluaXRpYWwpfChpbmhlcml0KVxccyokLyxOPS9cXHMqIWltcG9ydGFudC87ZnVuY3Rpb24gTygpe3RoaXMuYT17fX1PLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxjKXthPWEudHJpbSgpO3RoaXMuYVthXT17aDpjLGk6e319fTtPLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7YT1hLnRyaW0oKTtyZXR1cm4gdGhpcy5hW2FdfHxudWxsfTt2YXIgUD1udWxsO2Z1bmN0aW9uIFEoKXt0aGlzLmI9dGhpcy5jPW51bGw7dGhpcy5hPW5ldyBPfVEucHJvdG90eXBlLm89ZnVuY3Rpb24oYSl7YT1ILnRlc3QoYSl8fEcudGVzdChhKTtILmxhc3RJbmRleD0wO0cubGFzdEluZGV4PTA7cmV0dXJuIGF9O1xuUS5wcm90b3R5cGUubT1mdW5jdGlvbihhLGMpe2lmKHZvaWQgMD09PWEuYSl7dmFyIGI9W107Zm9yKHZhciBkPWEuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVcIiksZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO2lmKGYuaGFzQXR0cmlidXRlKFwic2hhZHktdW5zY29wZWRcIikpe2lmKCFCKXt2YXIgaD1mLnRleHRDb250ZW50O0kuaGFzKGgpfHwoSS5hZGQoaCksaD1mLmNsb25lTm9kZSghMCksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChoKSk7Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGYpfX1lbHNlIGIucHVzaChmLnRleHRDb250ZW50KSxmLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZil9KGI9Yi5qb2luKFwiXCIpLnRyaW0oKSk/KGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLGQudGV4dENvbnRlbnQ9YixhLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKGQsYS5jb250ZW50LmZpcnN0Q2hpbGQpLGI9ZCk6Yj1udWxsO2EuYT1ifXJldHVybihhPWEuYSk/dGhpcy5qKGEsXG5jKTpudWxsfTtRLnByb3RvdHlwZS5qPWZ1bmN0aW9uKGEsYyl7Yz12b2lkIDA9PT1jP1wiXCI6Yzt2YXIgYj1LKGEpO3RoaXMubChiLGMpO2EudGV4dENvbnRlbnQ9SihiKTtyZXR1cm4gYn07US5wcm90b3R5cGUuZj1mdW5jdGlvbihhKXt2YXIgYz10aGlzLGI9SyhhKTtMKGIsZnVuY3Rpb24oYSl7XCI6cm9vdFwiPT09YS5zZWxlY3RvciYmKGEuc2VsZWN0b3I9XCJodG1sXCIpO2MuZyhhKX0pO2EudGV4dENvbnRlbnQ9SihiKTtyZXR1cm4gYn07US5wcm90b3R5cGUubD1mdW5jdGlvbihhLGMpe3ZhciBiPXRoaXM7dGhpcy5jPWM7TChhLGZ1bmN0aW9uKGEpe2IuZyhhKX0pO3RoaXMuYz1udWxsfTtRLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe2EuY3NzVGV4dD1xYSh0aGlzLGEucGFyc2VkQ3NzVGV4dCk7XCI6cm9vdFwiPT09YS5zZWxlY3RvciYmKGEuc2VsZWN0b3I9XCI6aG9zdCA+ICpcIil9O1xuZnVuY3Rpb24gcWEoYSxjKXtjPWMucmVwbGFjZShHLGZ1bmN0aW9uKGIsYyxlLGYpe3JldHVybiByYShhLGIsYyxlLGYpfSk7cmV0dXJuIFIoYSxjKX1cbmZ1bmN0aW9uIFIoYSxjKXtmb3IodmFyIGI7Yj1ILmV4ZWMoYyk7KXt2YXIgZD1iWzBdLGU9YlsxXTtiPWIuaW5kZXg7dmFyIGY9Yy5zbGljZSgwLGIrZC5pbmRleE9mKFwiQGFwcGx5XCIpKTtjPWMuc2xpY2UoYitkLmxlbmd0aCk7dmFyIGg9UyhhLGYpO2Q9dm9pZCAwO3ZhciBnPWE7ZT1lLnJlcGxhY2Uob2EsXCJcIik7dmFyIG09W107dmFyIGw9Zy5hLmdldChlKTtsfHwoZy5hLnNldChlLHt9KSxsPWcuYS5nZXQoZSkpO2lmKGwpe2cuYyYmKGwuaVtnLmNdPSEwKTt2YXIgcT1sLmg7Zm9yKGQgaW4gcSlnPWgmJmhbZF0sbD1bZCxcIjogdmFyKFwiLGUsXCJfLV9cIixkXSxnJiZsLnB1c2goXCIsXCIsZy5yZXBsYWNlKE4sXCJcIikpLGwucHVzaChcIilcIiksTi50ZXN0KHFbZF0pJiZsLnB1c2goXCIgIWltcG9ydGFudFwiKSxtLnB1c2gobC5qb2luKFwiXCIpKX1kPW0uam9pbihcIjsgXCIpO2M9XCJcIitmK2QrYztILmxhc3RJbmRleD1iK2QubGVuZ3RofXJldHVybiBjfVxuZnVuY3Rpb24gUyhhLGMpe2M9Yy5zcGxpdChcIjtcIik7Zm9yKHZhciBiLGQsZT17fSxmPTAsaDtmPGMubGVuZ3RoO2YrKylpZihiPWNbZl0paWYoaD1iLnNwbGl0KFwiOlwiKSwxPGgubGVuZ3RoKXtiPWhbMF0udHJpbSgpO3ZhciBnPWE7ZD1iO2g9aC5zbGljZSgxKS5qb2luKFwiOlwiKTt2YXIgbT1wYS5leGVjKGgpO20mJihtWzFdPyhnLmJ8fChnLmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm1ldGFcIiksZy5iLnNldEF0dHJpYnV0ZShcImFwcGx5LXNoaW0tbWVhc3VyZVwiLFwiXCIpLGcuYi5zdHlsZS5hbGw9XCJpbml0aWFsXCIsZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChnLmIpKSxkPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGcuYikuZ2V0UHJvcGVydHlWYWx1ZShkKSk6ZD1cImFwcGx5LXNoaW0taW5oZXJpdFwiLGg9ZCk7ZD1oO2VbYl09ZH1yZXR1cm4gZX1mdW5jdGlvbiBzYShhLGMpe2lmKFApZm9yKHZhciBiIGluIGMuaSliIT09YS5jJiZQKGIpfVxuZnVuY3Rpb24gcmEoYSxjLGIsZCxlKXtkJiZNKGQsZnVuY3Rpb24oYyxiKXtiJiZhLmEuZ2V0KGIpJiYoZT1cIkBhcHBseSBcIitiK1wiO1wiKX0pO2lmKCFlKXJldHVybiBjO3ZhciBmPVIoYSxcIlwiK2UpLGg9Yy5zbGljZSgwLGMuaW5kZXhPZihcIi0tXCIpKSxnPWY9UyhhLGYpLG09YS5hLmdldChiKSxsPW0mJm0uaDtsP2c9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGwpLGYpOmEuYS5zZXQoYixnKTt2YXIgcT1bXSx4LGFhPSExO2Zvcih4IGluIGcpe3ZhciBGPWZbeF07dm9pZCAwPT09RiYmKEY9XCJpbml0aWFsXCIpOyFsfHx4IGluIGx8fChhYT0hMCk7cS5wdXNoKFwiXCIrYitcIl8tX1wiK3grXCI6IFwiK0YpfWFhJiZzYShhLG0pO20mJihtLmg9Zyk7ZCYmKGg9YytcIjtcIitoKTtyZXR1cm5cIlwiK2grcS5qb2luKFwiOyBcIikrXCI7XCJ9US5wcm90b3R5cGUuZGV0ZWN0TWl4aW49US5wcm90b3R5cGUubztRLnByb3RvdHlwZS50cmFuc2Zvcm1TdHlsZT1RLnByb3RvdHlwZS5qO1xuUS5wcm90b3R5cGUudHJhbnNmb3JtQ3VzdG9tU3R5bGU9US5wcm90b3R5cGUuZjtRLnByb3RvdHlwZS50cmFuc2Zvcm1SdWxlcz1RLnByb3RvdHlwZS5sO1EucHJvdG90eXBlLnRyYW5zZm9ybVJ1bGU9US5wcm90b3R5cGUuZztRLnByb3RvdHlwZS50cmFuc2Zvcm1UZW1wbGF0ZT1RLnByb3RvdHlwZS5tO1EucHJvdG90eXBlLl9zZXBhcmF0b3I9XCJfLV9cIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoUS5wcm90b3R5cGUsXCJpbnZhbGlkQ2FsbGJhY2tcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFB9LHNldDpmdW5jdGlvbihhKXtQPWF9fSk7dmFyIFQ9bnVsbCx0YT13aW5kb3cuSFRNTEltcG9ydHMmJndpbmRvdy5IVE1MSW1wb3J0cy53aGVuUmVhZHl8fG51bGwsVTtmdW5jdGlvbiB1YShhKXtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXt0YT90YShhKTooVHx8KFQ9bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7VT1hfSksXCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZT9VKCk6ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIixmdW5jdGlvbigpe1wiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGUmJlUoKX0pKSxULnRoZW4oZnVuY3Rpb24oKXthJiZhKCl9KSl9KX07dmFyIFY9bmV3IFE7ZnVuY3Rpb24gVygpe3ZhciBhPXRoaXM7dGhpcy5hPW51bGw7dWEoZnVuY3Rpb24oKXtYKGEpfSk7Vi5pbnZhbGlkQ2FsbGJhY2s9bGF9ZnVuY3Rpb24gWChhKXthLmF8fChhLmE9d2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlLGEuYSYmKGEuYS50cmFuc2Zvcm1DYWxsYmFjaz1mdW5jdGlvbihhKXtWLmYoYSl9LGEuYS52YWxpZGF0ZUNhbGxiYWNrPWZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7YS5hLmVucXVldWVkJiZZKGEpfSl9KSl9Vy5wcm90b3R5cGUucHJlcGFyZVRlbXBsYXRlPWZ1bmN0aW9uKGEsYyl7WCh0aGlzKTtrW2NdPWE7Yz1WLm0oYSxjKTthLl9zdHlsZUFzdD1jfTtcbmZ1bmN0aW9uIFkoYSl7WChhKTtpZihhLmEpe3ZhciBjPWEuYS5wcm9jZXNzU3R5bGVzKCk7aWYoYS5hLmVucXVldWVkKXtmb3IodmFyIGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9YS5hLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoY1tiXSk7ZCYmVi5mKGQpfWEuYS5lbnF1ZXVlZD0hMX19fVcucHJvdG90eXBlLnN0eWxlU3VidHJlZT1mdW5jdGlvbihhLGMpe1godGhpcyk7aWYoYylmb3IodmFyIGIgaW4gYyludWxsPT09Yj9hLnN0eWxlLnJlbW92ZVByb3BlcnR5KGIpOmEuc3R5bGUuc2V0UHJvcGVydHkoYixjW2JdKTtpZihhLnNoYWRvd1Jvb3QpZm9yKHRoaXMuc3R5bGVFbGVtZW50KGEpLGE9YS5zaGFkb3dSb290LmNoaWxkcmVufHxhLnNoYWRvd1Jvb3QuY2hpbGROb2RlcyxjPTA7YzxhLmxlbmd0aDtjKyspdGhpcy5zdHlsZVN1YnRyZWUoYVtjXSk7ZWxzZSBmb3IoYT1hLmNoaWxkcmVufHxhLmNoaWxkTm9kZXMsYz0wO2M8YS5sZW5ndGg7YysrKXRoaXMuc3R5bGVTdWJ0cmVlKGFbY10pfTtcblcucHJvdG90eXBlLnN0eWxlRWxlbWVudD1mdW5jdGlvbihhKXtYKHRoaXMpO3ZhciBjPWEubG9jYWxOYW1lLGI7Yz8tMTxjLmluZGV4T2YoXCItXCIpP2I9YzpiPWEuZ2V0QXR0cmlidXRlJiZhLmdldEF0dHJpYnV0ZShcImlzXCIpfHxcIlwiOmI9YS5pcztpZigoYz1rW2JdKSYmIUEoYykpe2lmKEEoYyl8fGMuX2FwcGx5U2hpbVZhbGlkYXRpbmdWZXJzaW9uIT09Yy5fYXBwbHlTaGltTmV4dFZlcnNpb24pdGhpcy5wcmVwYXJlVGVtcGxhdGUoYyxiKSxtYShjKTtpZihhPWEuc2hhZG93Um9vdClpZihhPWEucXVlcnlTZWxlY3RvcihcInN0eWxlXCIpKWEuX19jc3NSdWxlcz1jLl9zdHlsZUFzdCxhLnRleHRDb250ZW50PUooYy5fc3R5bGVBc3QpfX07Vy5wcm90b3R5cGUuc3R5bGVEb2N1bWVudD1mdW5jdGlvbihhKXtYKHRoaXMpO3RoaXMuc3R5bGVTdWJ0cmVlKGRvY3VtZW50LmJvZHksYSl9O1xuaWYoIXdpbmRvdy5TaGFkeUNTU3x8IXdpbmRvdy5TaGFkeUNTUy5TY29waW5nU2hpbSl7dmFyIFo9bmV3IFcsdmE9d2luZG93LlNoYWR5Q1NTJiZ3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2U7d2luZG93LlNoYWR5Q1NTPXtwcmVwYXJlVGVtcGxhdGU6ZnVuY3Rpb24oYSxjKXtZKFopO1oucHJlcGFyZVRlbXBsYXRlKGEsYyl9LHN0eWxlU3VidHJlZTpmdW5jdGlvbihhLGMpe1koWik7Wi5zdHlsZVN1YnRyZWUoYSxjKX0sc3R5bGVFbGVtZW50OmZ1bmN0aW9uKGEpe1koWik7Wi5zdHlsZUVsZW1lbnQoYSl9LHN0eWxlRG9jdW1lbnQ6ZnVuY3Rpb24oYSl7WShaKTtaLnN0eWxlRG9jdW1lbnQoYSl9LGdldENvbXB1dGVkU3R5bGVWYWx1ZTpmdW5jdGlvbihhLGMpe3JldHVybihhPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoYykpP2EudHJpbSgpOlwiXCJ9LG5hdGl2ZUNzczpFLG5hdGl2ZVNoYWRvdzpCfTt2YSYmKHdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZT1cbnZhKX13aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltPVY7fSkuY2FsbCh0aGlzKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHktc2hpbS5taW4uanMubWFwXG4iLCJcbnJlcXVpcmUoJy4vYXBwbHktc2hpbS5taW4uanMnKTtcbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uLy4uL3BvbHltZXIvcG9seW1lci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vLi4vaXJvbi1mbGV4LWxheW91dC9pcm9uLWZsZXgtbGF5b3V0Lmh0bWxcIj5cblxuPCEtLVxuYXBwLWRyYXdlciBpcyBhIG5hdmlnYXRpb24gZHJhd2VyIHRoYXQgY2FuIHNsaWRlIGluIGZyb20gdGhlIGxlZnQgb3IgcmlnaHQuXG5cbkV4YW1wbGU6XG5cbkFsaWduIHRoZSBkcmF3ZXIgYXQgdGhlIHN0YXJ0LCB3aGljaCBpcyBsZWZ0IGluIExUUiBsYXlvdXRzIChkZWZhdWx0KTpcblxuYGBgaHRtbFxuPGFwcC1kcmF3ZXIgb3BlbmVkPjwvYXBwLWRyYXdlcj5cbmBgYFxuXG5BbGlnbiB0aGUgZHJhd2VyIGF0IHRoZSBlbmQ6XG5cbmBgYGh0bWxcbjxhcHAtZHJhd2VyIGFsaWduPVwiZW5kXCIgb3BlbmVkPjwvYXBwLWRyYXdlcj5cbmBgYFxuXG5UbyBtYWtlIHRoZSBjb250ZW50cyBvZiB0aGUgZHJhd2VyIHNjcm9sbGFibGUsIGNyZWF0ZSBhIHdyYXBwZXIgZm9yIHRoZSBzY3JvbGxcbmNvbnRlbnQsIGFuZCBhcHBseSBoZWlnaHQgYW5kIG92ZXJmbG93IHN0eWxlcyB0byBpdC5cblxuYGBgaHRtbFxuPGFwcC1kcmF3ZXI+XG4gIDxkaXYgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IG92ZXJmbG93OiBhdXRvO1wiPjwvZGl2PlxuPC9hcHAtZHJhd2VyPlxuYGBgXG5cbiMjIyBTdHlsaW5nXG5cbkN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLVxuYC0tYXBwLWRyYXdlci13aWR0aGAgICAgICAgICAgICAgfCBXaWR0aCBvZiB0aGUgZHJhd2VyICAgICAgICAgICAgICAgICAgICB8IDI1NnB4XG5gLS1hcHAtZHJhd2VyLWNvbnRlbnQtY29udGFpbmVyYCB8IE1peGluIGZvciB0aGUgZHJhd2VyIGNvbnRlbnQgY29udGFpbmVyIHwge31cbmAtLWFwcC1kcmF3ZXItc2NyaW0tYmFja2dyb3VuZGAgIHwgQmFja2dyb3VuZCBmb3IgdGhlIHNjcmltICAgICAgICAgICAgICAgfCByZ2JhKDAsIDAsIDAsIDAuNSlcblxuKipOT1RFOioqIElmIHlvdSB1c2UgYDxhcHAtZHJhd2VyPmAgd2l0aCBgPGFwcC1kcmF3ZXItbGF5b3V0PmAgYW5kIHNwZWNpZnkgYSB2YWx1ZSBmb3JcbmAtLWFwcC1kcmF3ZXItd2lkdGhgLCB0aGF0IHZhbHVlIG11c3QgYmUgYWNjZXNzaWJsZSBieSBib3RoIGVsZW1lbnRzLiBUaGlzIGNhbiBiZSBkb25lIGJ5XG5kZWZpbmluZyB0aGUgdmFsdWUgb24gdGhlIGA6aG9zdGAgdGhhdCBjb250YWlucyBgPGFwcC1kcmF3ZXItbGF5b3V0PmAgKG9yIGBodG1sYCBpZiBvdXRzaWRlXG5hIHNoYWRvdyByb290KTpcblxuYGBgY3NzXG46aG9zdCB7XG4gIC0tYXBwLWRyYXdlci13aWR0aDogMzAwcHg7XG59XG5gYGBcblxuQGdyb3VwIEFwcCBFbGVtZW50c1xuQGVsZW1lbnQgYXBwLWRyYXdlclxuQGRlbW8gYXBwLWRyYXdlci9kZW1vL2xlZnQtZHJhd2VyLmh0bWwgU2ltcGxlIExlZnQgRHJhd2VyXG5AZGVtbyBhcHAtZHJhd2VyL2RlbW8vcmlnaHQtZHJhd2VyLmh0bWwgUmlnaHQgRHJhd2VyIHdpdGggSWNvbnNcbi0tPlxuXG48ZG9tLW1vZHVsZSBpZD1cImFwcC1kcmF3ZXJcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IC0xMjBweDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGJvdHRvbTogLTEyMHB4O1xuICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiB2aXNpYmlsaXR5O1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbb3BlbmVkXSkge1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbcGVyc2lzdGVudF0pIHtcbiAgICAgICAgd2lkdGg6IHZhcigtLWFwcC1kcmF3ZXItd2lkdGgsIDI1NnB4KTtcbiAgICAgIH1cblxuICAgICAgOmhvc3QoW3BlcnNpc3RlbnRdW3Bvc2l0aW9uPWxlZnRdKSB7XG4gICAgICAgIHJpZ2h0OiBhdXRvO1xuICAgICAgfVxuXG4gICAgICA6aG9zdChbcGVyc2lzdGVudF1bcG9zaXRpb249cmlnaHRdKSB7XG4gICAgICAgIGxlZnQ6IGF1dG87XG4gICAgICB9XG5cbiAgICAgICNjb250ZW50Q29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcblxuICAgICAgICB3aWR0aDogdmFyKC0tYXBwLWRyYXdlci13aWR0aCwgMjU2cHgpO1xuICAgICAgICBwYWRkaW5nOiAxMjBweCAwO1xuXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IC13ZWJraXQtdHJhbnNmb3JtO1xuICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiB0cmFuc2Zvcm07XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO1xuXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XG5cbiAgICAgICAgQGFwcGx5IC0tYXBwLWRyYXdlci1jb250ZW50LWNvbnRhaW5lcjtcbiAgICAgIH1cblxuICAgICAgI2NvbnRlbnRDb250YWluZXJbcGVyc2lzdGVudF0ge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgI2NvbnRlbnRDb250YWluZXJbcG9zaXRpb249cmlnaHRdIHtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIGxlZnQ6IGF1dG87XG5cbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICAjY29udGVudENvbnRhaW5lcltzd2lwZS1vcGVuXTo6YWZ0ZXIge1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAxMDAlO1xuXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG5cbiAgICAgICAgd2lkdGg6IDIwcHg7XG5cbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICB9XG5cbiAgICAgICNjb250ZW50Q29udGFpbmVyW3N3aXBlLW9wZW5dW3Bvc2l0aW9uPXJpZ2h0XTo6YWZ0ZXIge1xuICAgICAgICByaWdodDogMTAwJTtcbiAgICAgICAgbGVmdDogYXV0bztcbiAgICAgIH1cblxuICAgICAgI2NvbnRlbnRDb250YWluZXJbb3BlbmVkXSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgI3NjcmltIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGxlZnQ6IDA7XG5cbiAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogb3BhY2l0eTtcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgICAgIHRyYW5zZm9ybTogIHRyYW5zbGF0ZVooMCk7XG5cbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYXBwLWRyYXdlci1zY3JpbS1iYWNrZ3JvdW5kLCByZ2JhKDAsIDAsIDAsIDAuNSkpO1xuICAgICAgfVxuXG4gICAgICAjc2NyaW0udmlzaWJsZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG5cbiAgICAgIDpob3N0KFtuby10cmFuc2l0aW9uXSkgI2NvbnRlbnRDb250YWluZXIge1xuICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBub25lO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG5cbiAgICA8ZGl2IGlkPVwic2NyaW1cIiBvbi1jbGljaz1cImNsb3NlXCI+PC9kaXY+XG5cbiAgICA8IS0tIEhBQ0soa2VhbnVsZWUpOiBCaW5kIGF0dHJpYnV0ZXMgaGVyZSAoaW4gYWRkaXRpb24gdG8gOmhvc3QpIGZvciBzdHlsaW5nIHRvIHdvcmthcm91bmQgU2FmYXJpXG4gICAgYnVnLiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTcwNzYyIC0tPlxuICAgIDxkaXYgaWQ9XCJjb250ZW50Q29udGFpbmVyXCIgb3BlbmVkJD1cIltbb3BlbmVkXV1cIiBwZXJzaXN0ZW50JD1cIltbcGVyc2lzdGVudF1dXCJcbiAgICAgICAgcG9zaXRpb24kPVwiW1twb3NpdGlvbl1dXCIgc3dpcGUtb3BlbiQ9XCJbW3N3aXBlT3Blbl1dXCI+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG5cbiAgPHNjcmlwdD5cblxuICAgIFBvbHltZXIoe1xuICAgICAgaXM6ICdhcHAtZHJhd2VyJyxcblxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9wZW5lZCBzdGF0ZSBvZiB0aGUgZHJhd2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbmVkOiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgICAgbm90aWZ5OiB0cnVlLFxuICAgICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZHJhd2VyIGRvZXMgbm90IGhhdmUgYSBzY3JpbSBhbmQgY2Fubm90IGJlIHN3aXBlZCBjbG9zZS5cbiAgICAgICAgICovXG4gICAgICAgIHBlcnNpc3RlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICByZWZsZWN0VG9BdHRyaWJ1dGU6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gb2YgdGhlIGRyYXdlciBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgICAqL1xuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHtcbiAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgdmFsdWU6IDIwMFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYWxpZ25tZW50IG9mIHRoZSBkcmF3ZXIgb24gdGhlIHNjcmVlbiAoJ2xlZnQnLCAncmlnaHQnLCAnc3RhcnQnIG9yICdlbmQnKS5cbiAgICAgICAgICogJ3N0YXJ0JyBjb21wdXRlcyB0byBsZWZ0IGFuZCAnZW5kJyB0byByaWdodCBpbiBMVFIgbGF5b3V0IGFuZCB2aWNlIHZlcnNhIGluIFJUTFxuICAgICAgICAgKiBsYXlvdXQuXG4gICAgICAgICAqL1xuICAgICAgICBhbGlnbjoge1xuICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICB2YWx1ZTogJ2xlZnQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb21wdXRlZCwgcmVhZC1vbmx5IHBvc2l0aW9uIG9mIHRoZSBkcmF3ZXIgb24gdGhlIHNjcmVlbiAoJ2xlZnQnIG9yICdyaWdodCcpLlxuICAgICAgICAgKi9cbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhbiBhcmVhIGF0IHRoZSBlZGdlIG9mIHRoZSBzY3JlZW4gdG8gc3dpcGUgb3BlbiB0aGUgZHJhd2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgc3dpcGVPcGVuOiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgICAgcmVmbGVjdFRvQXR0cmlidXRlOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYXAga2V5Ym9hcmQgZm9jdXMgd2hlbiB0aGUgZHJhd2VyIGlzIG9wZW5lZCBhbmQgbm90IHBlcnNpc3RlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBub0ZvY3VzVHJhcDoge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHN3aXBpbmcgb24gdGhlIGRyYXdlci5cbiAgICAgICAgICovXG4gICAgICAgIGRpc2FibGVTd2lwZToge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG9ic2VydmVyczogW1xuICAgICAgICAncmVzZXRMYXlvdXQocG9zaXRpb24sIGlzQXR0YWNoZWQpJyxcbiAgICAgICAgJ19yZXNldFBvc2l0aW9uKGFsaWduLCBpc0F0dGFjaGVkKScsXG4gICAgICAgICdfc3R5bGVUcmFuc2l0aW9uRHVyYXRpb24odHJhbnNpdGlvbkR1cmF0aW9uKScsXG4gICAgICAgICdfb3BlbmVkUGVyc2lzdGVudENoYW5nZWQob3BlbmVkLCBwZXJzaXN0ZW50KSdcbiAgICAgIF0sXG5cbiAgICAgIF90cmFuc2xhdGVPZmZzZXQ6IDAsXG5cbiAgICAgIF90cmFja0RldGFpbHM6IG51bGwsXG5cbiAgICAgIF9kcmF3ZXJTdGF0ZTogMCxcblxuICAgICAgX2JvdW5kRXNjS2V5ZG93bkhhbmRsZXI6IG51bGwsXG5cbiAgICAgIF9maXJzdFRhYlN0b3A6IG51bGwsXG5cbiAgICAgIF9sYXN0VGFiU3RvcDogbnVsbCxcblxuICAgICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBQb2x5bWVyLlJlbmRlclN0YXR1cy5hZnRlck5leHRSZW5kZXIodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5fYm91bmRFc2NLZXlkb3duSGFuZGxlciA9IHRoaXMuX2VzY0tleWRvd25IYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fdGFiS2V5ZG93bkhhbmRsZXIuYmluZCh0aGlzKSlcblxuICAgICAgICAgIC8vIE9ubHkgbGlzdGVuIGZvciBob3Jpem9udGFsIHRyYWNrIHNvIHlvdSBjYW4gdmVydGljYWxseSBzY3JvbGwgaW5zaWRlIHRoZSBkcmF3ZXIuXG4gICAgICAgICAgdGhpcy5saXN0ZW4odGhpcywgJ3RyYWNrJywgJ190cmFjaycpO1xuICAgICAgICAgIHRoaXMuc2V0U2Nyb2xsRGlyZWN0aW9uKCd5Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZmlyZSgnYXBwLXJlc2V0LWxheW91dCcpO1xuICAgICAgfSxcblxuICAgICAgZGV0YWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fYm91bmRFc2NLZXlkb3duSGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIE9wZW5zIHRoZSBkcmF3ZXIuXG4gICAgICAgKi9cbiAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wZW5lZCA9IHRydWU7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIENsb3NlcyB0aGUgZHJhd2VyLlxuICAgICAgICovXG4gICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub3BlbmVkID0gZmFsc2U7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgdGhlIGRyYXdlciBvcGVuIGFuZCBjbG9zZS5cbiAgICAgICAqL1xuICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vcGVuZWQgPSAhdGhpcy5vcGVuZWQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBkcmF3ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgd2lkdGggb2YgdGhlIGRyYXdlciBpbiBwaXhlbHMuXG4gICAgICAgKi9cbiAgICAgIGdldFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NhdmVkV2lkdGggfHwgdGhpcy4kLmNvbnRlbnRDb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICB9LFxuXG4gICAgICBfaXNSVEw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykuZGlyZWN0aW9uID09PSAncnRsJztcbiAgICAgIH0sXG5cbiAgICAgIF9yZXNldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmFsaWduKSB7XG4gICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24odGhpcy5faXNSVEwoKSA/ICdyaWdodCcgOiAnbGVmdCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICB0aGlzLl9zZXRQb3NpdGlvbih0aGlzLl9pc1JUTCgpID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24odGhpcy5hbGlnbik7XG4gICAgICB9LFxuXG4gICAgICBfZXNjS2V5ZG93bkhhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBFU0NfS0VZQ09ERSA9IDI3O1xuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gRVNDX0tFWUNPREUpIHtcbiAgICAgICAgICAvLyBQcmV2ZW50IGFueSBzaWRlIGVmZmVjdHMgaWYgYXBwLWRyYXdlciBjbG9zZXMuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF90cmFjazogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGVyc2lzdGVudCB8fCB0aGlzLmRpc2FibGVTd2lwZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgdXNlciBzZWxlY3Rpb24gb24gZGVza3RvcC5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRldGFpbC5zdGF0ZSkge1xuICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndHJhY2snOlxuICAgICAgICAgICAgdGhpcy5fdHJhY2tNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICB0aGlzLl90cmFja0VuZChldmVudCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3RyYWNrU3RhcnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2RyYXdlclN0YXRlID0gdGhpcy5fRFJBV0VSX1NUQVRFLlRSQUNLSU5HO1xuXG4gICAgICAgIHZhciByZWN0ID0gdGhpcy4kLmNvbnRlbnRDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuX3NhdmVkV2lkdGggPSByZWN0LndpZHRoO1xuICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgdGhpcy5fdHJhbnNsYXRlT2Zmc2V0ID0gcmVjdC5sZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZU9mZnNldCA9IHJlY3QucmlnaHQgLSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RyYWNrRGV0YWlscyA9IFtdO1xuXG4gICAgICAgIC8vIERpc2FibGUgdHJhbnNpdGlvbnMgc2luY2Ugc3R5bGUgYXR0cmlidXRlcyB3aWxsIHJlZmxlY3QgdXNlciB0cmFjayBldmVudHMuXG4gICAgICAgIHRoaXMuX3N0eWxlVHJhbnNpdGlvbkR1cmF0aW9uKDApO1xuICAgICAgICB0aGlzLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICB9LFxuXG4gICAgICBfdHJhY2tNb3ZlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB0aGlzLl90cmFuc2xhdGVEcmF3ZXIoZXZlbnQuZGV0YWlsLmR4ICsgdGhpcy5fdHJhbnNsYXRlT2Zmc2V0KTtcblxuICAgICAgICAvLyBVc2UgRGF0ZS5ub3coKSBzaW5jZSBldmVudC50aW1lU3RhbXAgaXMgaW5jb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAoZS5nLiBtb3N0XG4gICAgICAgIC8vIGJyb3dzZXJzIHVzZSBtaWxsaXNlY29uZHMgYnV0IEZGIDQ0IHVzZXMgbWljcm9zZWNvbmRzKS5cbiAgICAgICAgdGhpcy5fdHJhY2tEZXRhaWxzLnB1c2goe1xuICAgICAgICAgIGR4OiBldmVudC5kZXRhaWwuZHgsXG4gICAgICAgICAgdGltZVN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgX3RyYWNrRW5kOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgeCA9IGV2ZW50LmRldGFpbC5keCArIHRoaXMuX3RyYW5zbGF0ZU9mZnNldDtcbiAgICAgICAgdmFyIGRyYXdlcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuICAgICAgICB2YXIgaXNQb3NpdGlvbkxlZnQgPSB0aGlzLnBvc2l0aW9uID09PSAnbGVmdCc7XG4gICAgICAgIHZhciBpc0luRW5kU3RhdGUgPSBpc1Bvc2l0aW9uTGVmdCA/ICh4ID49IDAgfHwgeCA8PSAtZHJhd2VyV2lkdGgpIDpcbiAgICAgICAgICAoeCA8PSAwIHx8IHggPj0gZHJhd2VyV2lkdGgpO1xuXG4gICAgICAgIGlmICghaXNJbkVuZFN0YXRlKSB7XG4gICAgICAgICAgLy8gTm8gbG9uZ2VyIG5lZWQgdGhlIHRyYWNrIGV2ZW50cyBhZnRlciB0aGlzIG1ldGhvZCByZXR1cm5zIC0gYWxsb3cgdGhlbSB0byBiZSBHQydkLlxuICAgICAgICAgIHZhciB0cmFja0RldGFpbHMgPSB0aGlzLl90cmFja0RldGFpbHM7XG4gICAgICAgICAgdGhpcy5fdHJhY2tEZXRhaWxzID0gbnVsbDtcblxuICAgICAgICAgIHRoaXMuX2ZsaW5nRHJhd2VyKGV2ZW50LCB0cmFja0RldGFpbHMpO1xuICAgICAgICAgIGlmICh0aGlzLl9kcmF3ZXJTdGF0ZSA9PT0gdGhpcy5fRFJBV0VSX1NUQVRFLkZMSU5HSU5HKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGRyYXdlciBpcyBub3QgZmxpbmdpbmcsIHRvZ2dsZSB0aGUgb3BlbmVkIHN0YXRlIGJhc2VkIG9uIHRoZSBwb3NpdGlvbiBvZlxuICAgICAgICAvLyB0aGUgZHJhd2VyLlxuICAgICAgICB2YXIgaGFsZldpZHRoID0gZHJhd2VyV2lkdGggLyAyO1xuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmR4IDwgLWhhbGZXaWR0aCkge1xuICAgICAgICAgIHRoaXMub3BlbmVkID0gdGhpcy5wb3NpdGlvbiA9PT0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwuZHggPiBoYWxmV2lkdGgpIHtcbiAgICAgICAgICB0aGlzLm9wZW5lZCA9IHRoaXMucG9zaXRpb24gPT09ICdsZWZ0JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0luRW5kU3RhdGUpIHtcbiAgICAgICAgICB0aGlzLmRlYm91bmNlKCdfcmVzZXREcmF3ZXJTdGF0ZScsIHRoaXMuX3Jlc2V0RHJhd2VyU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGVib3VuY2UoJ19yZXNldERyYXdlclN0YXRlJywgdGhpcy5fcmVzZXREcmF3ZXJTdGF0ZSwgdGhpcy50cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3R5bGVUcmFuc2l0aW9uRHVyYXRpb24odGhpcy50cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9yZXNldERyYXdlclRyYW5zbGF0ZSgpO1xuICAgICAgICB0aGlzLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcbiAgICAgIH0sXG5cbiAgICAgIF9jYWxjdWxhdGVWZWxvY2l0eTogZnVuY3Rpb24oZXZlbnQsIHRyYWNrRGV0YWlscykge1xuICAgICAgICAvLyBGaW5kIHRoZSBvbGRlc3QgdHJhY2sgZXZlbnQgdGhhdCBpcyB3aXRoaW4gMTAwbXMgdXNpbmcgYmluYXJ5IHNlYXJjaC5cbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciB0aW1lTG93ZXJCb3VuZCA9IG5vdyAtIDEwMDtcbiAgICAgICAgdmFyIHRyYWNrRGV0YWlsO1xuICAgICAgICB2YXIgbWluID0gMDtcbiAgICAgICAgdmFyIG1heCA9IHRyYWNrRGV0YWlscy5sZW5ndGggLSAxO1xuXG4gICAgICAgIHdoaWxlIChtaW4gPD0gbWF4KSB7XG4gICAgICAgICAgLy8gRmxvb3Igb2YgYXZlcmFnZSBvZiBtaW4gYW5kIG1heC5cbiAgICAgICAgICB2YXIgbWlkID0gKG1pbiArIG1heCkgPj4gMTtcbiAgICAgICAgICB2YXIgZCA9IHRyYWNrRGV0YWlsc1ttaWRdO1xuICAgICAgICAgIGlmIChkLnRpbWVTdGFtcCA+PSB0aW1lTG93ZXJCb3VuZCkge1xuICAgICAgICAgICAgdHJhY2tEZXRhaWwgPSBkO1xuICAgICAgICAgICAgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWluID0gbWlkICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2tEZXRhaWwpIHtcbiAgICAgICAgICB2YXIgZHggPSBldmVudC5kZXRhaWwuZHggLSB0cmFja0RldGFpbC5keDtcbiAgICAgICAgICB2YXIgZHQgPSAobm93IC0gdHJhY2tEZXRhaWwudGltZVN0YW1wKSB8fCAxO1xuICAgICAgICAgIHJldHVybiBkeCAvIGR0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSxcblxuICAgICAgX2ZsaW5nRHJhd2VyOiBmdW5jdGlvbihldmVudCwgdHJhY2tEZXRhaWxzKSB7XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IHRoaXMuX2NhbGN1bGF0ZVZlbG9jaXR5KGV2ZW50LCB0cmFja0RldGFpbHMpO1xuXG4gICAgICAgIC8vIERvIG5vdCBmbGluZyBpZiB2ZWxvY2l0eSBpcyBub3QgYWJvdmUgYSB0aHJlc2hvbGQuXG4gICAgICAgIGlmIChNYXRoLmFicyh2ZWxvY2l0eSkgPCB0aGlzLl9NSU5fRkxJTkdfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZHJhd2VyU3RhdGUgPSB0aGlzLl9EUkFXRVJfU1RBVEUuRkxJTkdJTkc7XG5cbiAgICAgICAgdmFyIHggPSBldmVudC5kZXRhaWwuZHggKyB0aGlzLl90cmFuc2xhdGVPZmZzZXQ7XG4gICAgICAgIHZhciBkcmF3ZXJXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIGlzUG9zaXRpb25MZWZ0ID0gdGhpcy5wb3NpdGlvbiA9PT0gJ2xlZnQnO1xuICAgICAgICB2YXIgaXNWZWxvY2l0eVBvc2l0aXZlID0gdmVsb2NpdHkgPiAwO1xuICAgICAgICB2YXIgaXNDbG9zaW5nTGVmdCA9ICFpc1ZlbG9jaXR5UG9zaXRpdmUgJiYgaXNQb3NpdGlvbkxlZnQ7XG4gICAgICAgIHZhciBpc0Nsb3NpbmdSaWdodCA9IGlzVmVsb2NpdHlQb3NpdGl2ZSAmJiAhaXNQb3NpdGlvbkxlZnQ7XG4gICAgICAgIHZhciBkeDtcbiAgICAgICAgaWYgKGlzQ2xvc2luZ0xlZnQpIHtcbiAgICAgICAgICBkeCA9IC0oeCArIGRyYXdlcldpZHRoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Nsb3NpbmdSaWdodCkge1xuICAgICAgICAgIGR4ID0gKGRyYXdlcldpZHRoIC0geCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHggPSAteDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuZm9yY2UgYSBtaW5pbXVtIHRyYW5zaXRpb24gdmVsb2NpdHkgdG8gbWFrZSB0aGUgZHJhd2VyIGZlZWwgc25hcHB5LlxuICAgICAgICBpZiAoaXNWZWxvY2l0eVBvc2l0aXZlKSB7XG4gICAgICAgICAgdmVsb2NpdHkgPSBNYXRoLm1heCh2ZWxvY2l0eSwgdGhpcy5fTUlOX1RSQU5TSVRJT05fVkVMT0NJVFkpO1xuICAgICAgICAgIHRoaXMub3BlbmVkID0gdGhpcy5wb3NpdGlvbiA9PT0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZlbG9jaXR5ID0gTWF0aC5taW4odmVsb2NpdHksIC10aGlzLl9NSU5fVFJBTlNJVElPTl9WRUxPQ0lUWSk7XG4gICAgICAgICAgdGhpcy5vcGVuZWQgPSB0aGlzLnBvc2l0aW9uID09PSAncmlnaHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdGltZSBuZWVkZWQgdG8gZmluaXNoIHRoZSB0cmFuc2l0aW9uIGJhc2VkIG9uIHRoZVxuICAgICAgICAvLyBpbml0aWFsIHNsb3BlIG9mIHRoZSB0aW1pbmcgZnVuY3Rpb24uXG4gICAgICAgIHZhciB0ID0gdGhpcy5fRkxJTkdfSU5JVElBTF9TTE9QRSAqIGR4IC8gdmVsb2NpdHlcbiAgICAgICAgdGhpcy5fc3R5bGVUcmFuc2l0aW9uRHVyYXRpb24odCk7XG4gICAgICAgIHRoaXMuX3N0eWxlVHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uKHRoaXMuX0ZMSU5HX1RJTUlOR19GVU5DVElPTik7XG5cbiAgICAgICAgdGhpcy5fcmVzZXREcmF3ZXJUcmFuc2xhdGUoKTtcbiAgICAgICAgdGhpcy5kZWJvdW5jZSgnX3Jlc2V0RHJhd2VyU3RhdGUnLCB0aGlzLl9yZXNldERyYXdlclN0YXRlLCB0KTtcbiAgICAgIH0sXG5cbiAgICAgIF9zdHlsZVRyYW5zaXRpb25EdXJhdGlvbjogZnVuY3Rpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbiArICdtcyc7XG4gICAgICAgIHRoaXMuJC5jb250ZW50Q29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uICsgJ21zJztcbiAgICAgICAgdGhpcy4kLnNjcmltLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uICsgJ21zJztcbiAgICAgIH0sXG5cbiAgICAgIF9zdHlsZVRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogZnVuY3Rpb24odGltaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy4kLmNvbnRlbnRDb250YWluZXIuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdGltaW5nRnVuY3Rpb247XG4gICAgICAgIHRoaXMuJC5zY3JpbS5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB0aW1pbmdGdW5jdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIF90cmFuc2xhdGVEcmF3ZXI6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgdmFyIGRyYXdlcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB4ID0gTWF0aC5tYXgoLWRyYXdlcldpZHRoLCBNYXRoLm1pbih4LCAwKSk7XG4gICAgICAgICAgdGhpcy4kLnNjcmltLnN0eWxlLm9wYWNpdHkgPSAxICsgeCAvIGRyYXdlcldpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHggPSBNYXRoLm1heCgwLCBNYXRoLm1pbih4LCBkcmF3ZXJXaWR0aCkpO1xuICAgICAgICAgIHRoaXMuJC5zY3JpbS5zdHlsZS5vcGFjaXR5ID0gMSAtIHggLyBkcmF3ZXJXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhbnNsYXRlM2QoeCArICdweCcsICcwJywgJzAnLCB0aGlzLiQuY29udGVudENvbnRhaW5lcik7XG4gICAgICB9LFxuXG4gICAgICBfcmVzZXREcmF3ZXJUcmFuc2xhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiQuc2NyaW0uc3R5bGUub3BhY2l0eSA9ICcnO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSgnJywgdGhpcy4kLmNvbnRlbnRDb250YWluZXIpO1xuICAgICAgfSxcblxuICAgICAgX3Jlc2V0RHJhd2VyU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2xkU3RhdGUgPSB0aGlzLl9kcmF3ZXJTdGF0ZTtcblxuICAgICAgICAvLyBJZiB0aGUgZHJhd2VyIHdhcyBmbGluZ2luZywgd2UgbmVlZCB0byByZXNldCB0aGUgc3R5bGUgYXR0cmlidXRlcy5cbiAgICAgICAgaWYgKG9sZFN0YXRlID09PSB0aGlzLl9EUkFXRVJfU1RBVEUuRkxJTkdJTkcpIHtcbiAgICAgICAgICB0aGlzLl9zdHlsZVRyYW5zaXRpb25EdXJhdGlvbih0aGlzLnRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgdGhpcy5fc3R5bGVUcmFuc2l0aW9uVGltaW5nRnVuY3Rpb24oJycpO1xuICAgICAgICAgIHRoaXMuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2F2ZWRXaWR0aCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMub3BlbmVkKSB7XG4gICAgICAgICAgdGhpcy5fZHJhd2VyU3RhdGUgPSB0aGlzLnBlcnNpc3RlbnQgP1xuICAgICAgICAgICAgdGhpcy5fRFJBV0VSX1NUQVRFLk9QRU5FRF9QRVJTSVNURU5UIDogdGhpcy5fRFJBV0VSX1NUQVRFLk9QRU5FRDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9kcmF3ZXJTdGF0ZSA9IHRoaXMuX0RSQVdFUl9TVEFURS5DTE9TRUQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2xkU3RhdGUgIT09IHRoaXMuX2RyYXdlclN0YXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RyYXdlclN0YXRlID09PSB0aGlzLl9EUkFXRVJfU1RBVEUuT1BFTkVEKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRLZXlib2FyZEZvY3VzVHJhcCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2JvdW5kRXNjS2V5ZG93bkhhbmRsZXIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fYm91bmRFc2NLZXlkb3duSGFuZGxlcik7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgb24gaW5pdGlhbCBsb2FkLlxuICAgICAgICAgIGlmIChvbGRTdGF0ZSAhPT0gdGhpcy5fRFJBV0VSX1NUQVRFLklOSVQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnYXBwLWRyYXdlci10cmFuc2l0aW9uZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzZXRzIHRoZSBsYXlvdXQuXG4gICAgICAgKlxuICAgICAgICogQG1ldGhvZCByZXNldExheW91dFxuICAgICAgICovXG4gICAgICByZXNldExheW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnYXBwLXJlc2V0LWxheW91dCcpO1xuICAgICAgfSxcblxuICAgICAgX3NldEtleWJvYXJkRm9jdXNUcmFwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubm9Gb2N1c1RyYXApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOT1RFOiBVbmxlc3Mgd2UgdXNlIC9kZWVwLyAod2hpY2ggd2Ugc2hvdWxkbid0IHNpbmNlIGl0J3MgZGVwcmVjYXRlZCksIHRoaXMgd2lsbFxuICAgICAgICAvLyBub3Qgc2VsZWN0IGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgc2hhZG93IHJvb3RzLlxuICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHNTZWxlY3RvciA9IFtcbiAgICAgICAgICAgICdhW2hyZWZdOm5vdChbdGFiaW5kZXg9XCItMVwiXSknLFxuICAgICAgICAgICAgJ2FyZWFbaHJlZl06bm90KFt0YWJpbmRleD1cIi0xXCJdKScsXG4gICAgICAgICAgICAnaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XCItMVwiXSknLFxuICAgICAgICAgICAgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cIi0xXCJdKScsXG4gICAgICAgICAgICAndGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XCItMVwiXSknLFxuICAgICAgICAgICAgJ2J1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cIi0xXCJdKScsXG4gICAgICAgICAgICAnaWZyYW1lOm5vdChbdGFiaW5kZXg9XCItMVwiXSknLFxuICAgICAgICAgICAgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleD1cIi0xXCJdKScsXG4gICAgICAgICAgICAnW2NvbnRlbnRFZGl0YWJsZT10cnVlXTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJ1xuICAgICAgICAgIF0uam9pbignLCcpO1xuICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBQb2x5bWVyLmRvbSh0aGlzKS5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZUVsZW1lbnRzU2VsZWN0b3IpO1xuXG4gICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fZmlyc3RUYWJTdG9wID0gZm9jdXNhYmxlRWxlbWVudHNbMF07XG4gICAgICAgICAgdGhpcy5fbGFzdFRhYlN0b3AgPSBmb2N1c2FibGVFbGVtZW50c1tmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXNldCBzYXZlZCB0YWIgc3RvcHMgd2hlbiB0aGVyZSBhcmUgbm8gZm9jdXNhYmxlIGVsZW1lbnRzIGluIHRoZSBkcmF3ZXIuXG4gICAgICAgICAgdGhpcy5fZmlyc3RUYWJTdG9wID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9sYXN0VGFiU3RvcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb2N1cyBvbiBhcHAtZHJhd2VyIGlmIGl0IGhhcyBub24temVybyB0YWJpbmRleC4gT3RoZXJ3aXNlLCBmb2N1cyB0aGUgZmlyc3QgZm9jdXNhYmxlXG4gICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIGRyYXdlciwgaWYgaXQgZXhpc3RzLiBVc2UgdGhlIHRhYmluZGV4IGF0dHJpYnV0ZSBzaW5jZSB0aGUgdGhpcy50YWJJbmRleFxuICAgICAgICAvLyBwcm9wZXJ0eSBpbiBJRS9FZGdlIHJldHVybnMgMCAoaW5zdGVhZCBvZiAtMSkgd2hlbiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzZXQuXG4gICAgICAgIHZhciB0YWJpbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICBpZiAodGFiaW5kZXggJiYgcGFyc2VJbnQodGFiaW5kZXgsIDEwKSA+IC0xKSB7XG4gICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2ZpcnN0VGFiU3RvcCkge1xuICAgICAgICAgIHRoaXMuX2ZpcnN0VGFiU3RvcC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfdGFiS2V5ZG93bkhhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLm5vRm9jdXNUcmFwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIFRBQl9LRVlDT0RFID0gOTtcbiAgICAgICAgaWYgKHRoaXMuX2RyYXdlclN0YXRlID09PSB0aGlzLl9EUkFXRVJfU1RBVEUuT1BFTkVEICYmIGV2ZW50LmtleUNvZGUgPT09IFRBQl9LRVlDT0RFKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZmlyc3RUYWJTdG9wICYmIFBvbHltZXIuZG9tKGV2ZW50KS5sb2NhbFRhcmdldCA9PT0gdGhpcy5fZmlyc3RUYWJTdG9wKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIHRoaXMuX2xhc3RUYWJTdG9wLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0VGFiU3RvcCAmJiBQb2x5bWVyLmRvbShldmVudCkubG9jYWxUYXJnZXQgPT09IHRoaXMuX2xhc3RUYWJTdG9wKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIHRoaXMuX2ZpcnN0VGFiU3RvcC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX29wZW5lZFBlcnNpc3RlbnRDaGFuZ2VkOiBmdW5jdGlvbihvcGVuZWQsIHBlcnNpc3RlbnQpIHtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcygndmlzaWJsZScsIG9wZW5lZCAmJiAhcGVyc2lzdGVudCwgdGhpcy4kLnNjcmltKTtcblxuICAgICAgICAvLyBVc2UgYSBkZWJvdW5jZSB0aW1lciBpbnN0ZWFkIG9mIHRyYW5zaXRpb25lbmQgc2luY2UgdHJhbnNpdGlvbmVuZCB3b24ndCBmaXJlIHdoZW5cbiAgICAgICAgLy8gYXBwLWRyYXdlciBpcyBkaXNwbGF5OiBub25lLlxuICAgICAgICB0aGlzLmRlYm91bmNlKCdfcmVzZXREcmF3ZXJTdGF0ZScsIHRoaXMuX3Jlc2V0RHJhd2VyU3RhdGUsIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0sXG5cbiAgICAgIF9NSU5fRkxJTkdfVEhSRVNIT0xEOiAwLjIsXG5cbiAgICAgIF9NSU5fVFJBTlNJVElPTl9WRUxPQ0lUWTogMS4yLFxuXG4gICAgICBfRkxJTkdfVElNSU5HX0ZVTkNUSU9OOiAnY3ViaWMtYmV6aWVyKDAuNjY3LCAxLCAwLjY2NywgMSknLFxuXG4gICAgICBfRkxJTkdfSU5JVElBTF9TTE9QRTogMS41LFxuXG4gICAgICBfRFJBV0VSX1NUQVRFOiB7XG4gICAgICAgIElOSVQ6IDAsXG4gICAgICAgIE9QRU5FRDogMSxcbiAgICAgICAgT1BFTkVEX1BFUlNJU1RFTlQ6IDIsXG4gICAgICAgIENMT1NFRDogMyxcbiAgICAgICAgVFJBQ0tJTkc6IDQsXG4gICAgICAgIEZMSU5HSU5HOiA1XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZWQgd2hlbiB0aGUgbGF5b3V0IG9mIGFwcC1kcmF3ZXIgaGFzIGNoYW5nZWQuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IGFwcC1yZXNldC1sYXlvdXRcbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVkIHdoZW4gYXBwLWRyYXdlciBoYXMgZmluaXNoZWQgdHJhbnNpdGlvbmluZy5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgYXBwLWRyYXdlci10cmFuc2l0aW9uZWRcbiAgICAgICAqL1xuICAgIH0pO1xuICA8L3NjcmlwdD5cbjwvZG9tLW1vZHVsZT5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cblxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL2Jvb3QuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL3V0aWxzL21peGluLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9taXhpbnMvcHJvcGVydGllcy1jaGFuZ2VkLmh0bWxcIj5cblxuPHNjcmlwdD5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29weSBvZiBgcHJvcHNgIHdpdGggZWFjaCBwcm9wZXJ0eSBub3JtYWxpemVkIHN1Y2ggdGhhdFxuICAgKiB1cGdyYWRlZCBpdCBpcyBhbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhIHR5cGUgcHJvcGVydHkgeyB0eXBlOiBUeXBlfS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gbm9ybWFsaXplXG4gICAqIEByZXR1cm4ge09iamVjdH0gQ29weSBvZiBpbnB1dCBgcHJvcHNgIHdpdGggbm9ybWFsaXplZCBwcm9wZXJ0aWVzIHRoYXRcbiAgICogYXJlIGluIHRoZSBmb3JtIHt0eXBlOiBUeXBlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydGllcyhwcm9wcykge1xuICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuICAgIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICAgIGNvbnN0IG8gPSBwcm9wc1twXTtcbiAgICAgIG91dHB1dFtwXSA9ICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJykgPyB7dHlwZTogb30gOiBvO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIHRoYXQgcHJvdmlkZXMgYSBtaW5pbWFsIHN0YXJ0aW5nIHBvaW50IHRvIHVzaW5nIHRoZSBQcm9wZXJ0aWVzQ2hhbmdlZFxuICAgKiBtaXhpbiBieSBwcm92aWRpbmcgYSBtZWNoYW5pc20gdG8gZGVjbGFyZSBwcm9wZXJ0aWVzIGluIGEgc3RhdGljXG4gICAqIGdldHRlciAoZS5nLiBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7IHJldHVybiB7IGZvbzogU3RyaW5nIH0gfSkuIENoYW5nZXNcbiAgICogYXJlIHJlcG9ydGVkIHZpYSB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgbWV0aG9kLlxuICAgKlxuICAgKiBUaGlzIG1peGluIHByb3ZpZGVzIG5vIHNwZWNpZmljIHN1cHBvcnQgZm9yIHJlbmRlcmluZy4gVXNlcnMgYXJlIGV4cGVjdGVkXG4gICAqIHRvIGNyZWF0ZSBhIFNoYWRvd1Jvb3QgYW5kIHB1dCBjb250ZW50IGludG8gaXQgYW5kIHVwZGF0ZSBpdCBpbiB3aGF0ZXZlclxuICAgKiB3YXkgbWFrZXMgc2Vuc2UuIFRoaXMgY2FuIGJlIGRvbmUgaW4gcmVhY3Rpb24gdG8gcHJvcGVydGllcyBjaGFuZ2luZyBieVxuICAgKiBpbXBsZW1lbnRpbmcgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAuXG4gICAqXG4gICAqIEBtaXhpbkZ1bmN0aW9uXG4gICAqIEBwb2x5bWVyXG4gICAqIEBhcHBsaWVzTWl4aW4gUG9seW1lci5Qcm9wZXJ0aWVzQ2hhbmdlZFxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBNaXhpbiB0aGF0IHByb3ZpZGVzIGEgbWluaW1hbCBzdGFydGluZyBwb2ludCBmb3IgdXNpbmdcbiAgICogdGhlIFByb3BlcnRpZXNDaGFuZ2VkIG1peGluIGJ5IHByb3ZpZGluZyBhIGRlY2xhcmF0aXZlIGBwcm9wZXJ0aWVzYCBvYmplY3QuXG4gICAqL1xuICAgUG9seW1lci5Qcm9wZXJ0aWVzTWl4aW4gPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyB7c3VwZXJDbGFzc31cbiAgICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICAgKi9cbiAgICBjb25zdCBiYXNlID0gUG9seW1lci5Qcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1cGVyIGNsYXNzIGNvbnN0cnVjdG9yIGZvciB0aGUgZ2l2ZW4gY2xhc3MsIGlmIGl0IGlzIGFuXG4gICAgICogaW5zdGFuY2Ugb2YgdGhlIFByb3BlcnRpZXNNaXhpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgICAgKiBAcmV0dXJuIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gU3VwZXIgY2xhc3MgY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdXBlclByb3BlcnRpZXNDbGFzcyhjb25zdHJ1Y3Rvcikge1xuICAgICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbnN0cnVjdG9yKTtcblxuICAgICAgLy8gTm90ZSwgdGhlIGBQcm9wZXJ0aWVzTWl4aW5gIGNsYXNzIGJlbG93IG9ubHkgcmVmZXJzIHRvIHRoZSBjbGFzc1xuICAgICAgLy8gZ2VuZXJhdGVkIGJ5IHRoaXMgY2FsbCB0byB0aGUgbWl4aW47IHRoZSBpbnN0YW5jZW9mIHRlc3Qgb25seSB3b3Jrc1xuICAgICAgLy8gYmVjYXVzZSB0aGUgbWl4aW4gaXMgZGVkdXBlZCBhbmQgZ3VhcmFudGVlZCBvbmx5IHRvIGFwcGx5IG9uY2UsIGhlbmNlXG4gICAgICAvLyBhbGwgY29uc3RydWN0b3JzIGluIGEgcHJvdG8gY2hhaW4gd2lsbCBzZWUgdGhlIHNhbWUgYFByb3BlcnRpZXNNaXhpbmBcbiAgICAgIHJldHVybiAoc3VwZXJDdG9yLnByb3RvdHlwZSBpbnN0YW5jZW9mIFByb3BlcnRpZXNNaXhpbikgP1xuICAgICAgICAvKiogQHR5cGUge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyAoc3VwZXJDdG9yKSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGBwcm9wZXJ0aWVzYCBvYmplY3QgZm9yIHRoZVxuICAgICAqIGdpdmVuIGNsYXNzLiBQcm9wZXJ0aWVzIG5vdCBpbiBvYmplY3QgZm9ybWF0IGFyZSBjb252ZXJ0ZWQgdG8gYXRcbiAgICAgKiBsZWFzdCB7dHlwZX0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE1lbW9pemVkIHByb3BlcnRpZXMgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3duUHJvcGVydGllcyhjb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX293blByb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgICAgIGxldCBwcm9wcyA9IG51bGw7XG5cbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3Byb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpICYmIGNvbnN0cnVjdG9yLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICBwcm9wcyA9IG5vcm1hbGl6ZVByb3BlcnRpZXMoY29uc3RydWN0b3IucHJvcGVydGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXMgPSBwcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBvbHltZXJcbiAgICAgKiBAbWl4aW5DbGFzc1xuICAgICAqIEBleHRlbmRzIHtiYXNlfVxuICAgICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNNaXhpbn1cbiAgICAgKiBAdW5yZXN0cmljdGVkXG4gICAgICovXG4gICAgY2xhc3MgUHJvcGVydGllc01peGluIGV4dGVuZHMgYmFzZSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogSW1wbGVtZW50cyBzdGFuZGFyZCBjdXN0b20gZWxlbWVudHMgZ2V0dGVyIHRvIG9ic2VydmVzIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgKiBsaXN0ZWQgaW4gYHByb3BlcnRpZXNgLlxuICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAgIHJldHVybiBwcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocCA9PiB0aGlzLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwKSkgOiBbXTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaW5hbGl6ZXMgYW4gZWxlbWVudCBkZWZpbml0aW9uLCBpbmNsdWRpbmcgZW5zdXJpbmcgYW55IHN1cGVyIGNsYXNzZXNcbiAgICAgICAqIGFyZSBhbHNvIGZpbmFsaXplZC4gVGhpcyBpbmNsdWRlcyBlbnN1cmluZyBwcm9wZXJ0eVxuICAgICAgICogYWNjZXNzb3JzIGV4aXN0IG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICAgICAqIGBfZmluYWxpemVDbGFzc2AgdG8gZmluYWxpemUgZWFjaCBjb25zdHJ1Y3RvciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgc3RhdGljIGZpbmFsaXplKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19maW5hbGl6ZWQnLCB0aGlzKSkpIHtcbiAgICAgICAgICBjb25zdCBzdXBlckN0b3IgPSBzdXBlclByb3BlcnRpZXNDbGFzcygvKiogQHR5cGUge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSk7XG4gICAgICAgICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgICAgICAgc3VwZXJDdG9yLmZpbmFsaXplKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX19maW5hbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX2ZpbmFsaXplQ2xhc3MoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZpbmFsaXplIGFuIGVsZW1lbnQgY2xhc3MuIFRoaXMgaW5jbHVkZXMgZW5zdXJpbmcgcHJvcGVydHlcbiAgICAgICAqIGFjY2Vzc29ycyBleGlzdCBvbiB0aGUgZWxlbWVudCBwcm90b3R5cGUuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieVxuICAgICAgICogYGZpbmFsaXplYCBhbmQgZmluYWxpemVzIHRoZSBjbGFzcyBjb25zdHJ1Y3Rvci5cbiAgICAgICAqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKTtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIGFsbCBwcm9wZXJ0aWVzLCBpbmNsdWRpbmcgdGhvc2UgaW5oZXJpdGVkXG4gICAgICAgKiBmcm9tIHN1cGVyIGNsYXNzZXMuIFByb3BlcnRpZXMgbm90IGluIG9iamVjdCBmb3JtYXQgYXJlIGNvbnZlcnRlZCB0b1xuICAgICAgICogYXQgbGVhc3Qge3R5cGV9LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBmb3IgdGhpcyBjbGFzc1xuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBzdGF0aWMgZ2V0IF9wcm9wZXJ0aWVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19wcm9wZXJ0aWVzJywgdGhpcykpKSB7XG4gICAgICAgICAgY29uc3Qgc3VwZXJDdG9yID0gc3VwZXJQcm9wZXJ0aWVzQ2xhc3MoLyoqIEB0eXBlIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpO1xuICAgICAgICAgIHRoaXMuX19wcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgICAgICAgIHN1cGVyQ3RvciAmJiBzdXBlckN0b3IuX3Byb3BlcnRpZXMsXG4gICAgICAgICAgICBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX19wcm9wZXJ0aWVzO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCB0byByZXR1cm4gdHlwZSBzcGVjaWZpZWQgaW4gdGhlXG4gICAgICAgKiBzdGF0aWMgYHByb3BlcnRpZXNgIG9iamVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICAgICogQHJldHVybiB7Kn0gVHlwZSB0byB3aGljaCB0byBkZXNlcmlhbGl6ZSBhdHRyaWJ1dGVcbiAgICAgICAqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyB0eXBlRm9yUHJvcGVydHkobmFtZSkge1xuICAgICAgICBjb25zdCBpbmZvID0gdGhpcy5fcHJvcGVydGllc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIGluZm8gJiYgaW5mby50eXBlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCBhbmQgYWRkcyBhIGNhbGwgdG9cbiAgICAgICAqIGBmaW5hbGl6ZWAgd2hpY2ggbGF6aWx5IGNvbmZpZ3VyZXMgdGhlIGVsZW1lbnQncyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgKi9cbiAgICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5maW5hbGl6ZSgpO1xuICAgICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBhZGRlZCB0byBhIGRvY3VtZW50LlxuICAgICAgICogQ2FsbHMgYF9lbmFibGVQcm9wZXJ0aWVzYCB0byB0dXJuIG9uIHByb3BlcnR5IHN5c3RlbSBmcm9tXG4gICAgICAgKiBgUHJvcGVydGllc0NoYW5nZWRgLlxuICAgICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmIChzdXBlci5jb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBhIGRvY3VtZW50XG4gICAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb3BlcnRpZXNNaXhpbjtcblxuICB9KTtcblxufSkoKTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9ib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9taXhpbi5odG1sXCI+XG5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIDEueCBiYWNrd2FyZHMtY29tcGF0aWJsZSBhdXRvLXdyYXBwZXIgZm9yIHRlbXBsYXRlIHR5cGUgZXh0ZW5zaW9uc1xuICAvLyBUaGlzIGlzIGEgY2xlYXIgbGF5ZXJpbmcgdmlvbGF0aW9uIGFuZCBnaXZlcyBmYXZvcmVkLW5hdGlvbiBzdGF0dXMgdG9cbiAgLy8gZG9tLWlmIGFuZCBkb20tcmVwZWF0IHRlbXBsYXRlcy4gIFRoaXMgaXMgYSBjb25jZWl0IHdlJ3JlIGNob29zaW5nIHRvIGtlZXBcbiAgLy8gYS4pIHRvIGVhc2UgMS54IGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGR1ZSB0byBsb3NzIG9mIGBpc2AsIGFuZFxuICAvLyBiLikgdG8gbWFpbnRhaW4gaWYvcmVwZWF0IGNhcGFiaWxpdHkgaW4gcGFyc2VyLWNvbnN0cmFpbmVkIGVsZW1lbnRzXG4gIC8vICAgICAoZS5nLiB0YWJsZSwgc2VsZWN0KSBpbiBsaWV1IG9mIG5hdGl2ZSBDRSB0eXBlIGV4dGVuc2lvbnMgd2l0aG91dFxuICAvLyAgICAgbWFzc2l2ZSBuZXcgaW52ZW50aW9uIGluIHRoaXMgc3BhY2UgKGUuZy4gZGlyZWN0aXZlIHN5c3RlbSlcbiAgY29uc3QgdGVtcGxhdGVFeHRlbnNpb25zID0ge1xuICAgICdkb20taWYnOiB0cnVlLFxuICAgICdkb20tcmVwZWF0JzogdHJ1ZVxuICB9O1xuICBmdW5jdGlvbiB3cmFwVGVtcGxhdGVFeHRlbnNpb24obm9kZSkge1xuICAgIGxldCBpcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpcycpO1xuICAgIGlmIChpcyAmJiB0ZW1wbGF0ZUV4dGVuc2lvbnNbaXNdKSB7XG4gICAgICBsZXQgdCA9IG5vZGU7XG4gICAgICB0LnJlbW92ZUF0dHJpYnV0ZSgnaXMnKTtcbiAgICAgIG5vZGUgPSB0Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChpcyk7XG4gICAgICB0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIHQpO1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0KTtcbiAgICAgIHdoaWxlKHQuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUodC5hdHRyaWJ1dGVzWzBdLm5hbWUsIHQuYXR0cmlidXRlc1swXS52YWx1ZSk7XG4gICAgICAgIHQucmVtb3ZlQXR0cmlidXRlKHQuYXR0cmlidXRlc1swXS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kVGVtcGxhdGVOb2RlKHJvb3QsIG5vZGVJbmZvKSB7XG4gICAgLy8gcmVjdXJzaXZlbHkgYXNjZW5kIHRyZWUgdW50aWwgd2UgaGl0IHJvb3RcbiAgICBsZXQgcGFyZW50ID0gbm9kZUluZm8ucGFyZW50SW5mbyAmJiBmaW5kVGVtcGxhdGVOb2RlKHJvb3QsIG5vZGVJbmZvLnBhcmVudEluZm8pO1xuICAgIC8vIHVud2luZCB0aGUgc3RhY2ssIHJldHVybmluZyB0aGUgaW5kZXhlZCBub2RlIGF0IGVhY2ggbGV2ZWxcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBtYXJnaW5hbGx5IGZhc3RlciB0aGFuIGluZGV4aW5nIHZpYSBjaGlsZE5vZGVzXG4gICAgICAvLyAoaHR0cDovL2pzcGVyZi5jb20vY2hpbGRub2Rlcy1sb29rdXApXG4gICAgICBmb3IgKGxldCBuPXBhcmVudC5maXJzdENoaWxkLCBpPTA7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgICBpZiAobm9kZUluZm8ucGFyZW50SW5kZXggPT09IGkrKykge1xuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNvbnN0cnVjdCBgJGAgbWFwIChmcm9tIGlkIGFubm90YXRpb25zKVxuICBmdW5jdGlvbiBhcHBseUlkVG9NYXAoaW5zdCwgbWFwLCBub2RlLCBub2RlSW5mbykge1xuICAgIGlmIChub2RlSW5mby5pZCkge1xuICAgICAgbWFwW25vZGVJbmZvLmlkXSA9IG5vZGU7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBldmVudCBsaXN0ZW5lcnMgKGZyb20gZXZlbnQgYW5ub3RhdGlvbnMpXG4gIGZ1bmN0aW9uIGFwcGx5RXZlbnRMaXN0ZW5lcihpbnN0LCBub2RlLCBub2RlSW5mbykge1xuICAgIGlmIChub2RlSW5mby5ldmVudHMgJiYgbm9kZUluZm8uZXZlbnRzLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaj0wLCBlJD1ub2RlSW5mby5ldmVudHMsIGU7IChqPGUkLmxlbmd0aCkgJiYgKGU9ZSRbal0pOyBqKyspIHtcbiAgICAgICAgaW5zdC5fYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBlLm5hbWUsIGUudmFsdWUsIGluc3QpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHB1c2ggY29uZmlndXJhdGlvbiByZWZlcmVuY2VzIGF0IGNvbmZpZ3VyZSB0aW1lXG4gIGZ1bmN0aW9uIGFwcGx5VGVtcGxhdGVDb250ZW50KGluc3QsIG5vZGUsIG5vZGVJbmZvKSB7XG4gICAgaWYgKG5vZGVJbmZvLnRlbXBsYXRlSW5mbykge1xuICAgICAgbm9kZS5fdGVtcGxhdGVJbmZvID0gbm9kZUluZm8udGVtcGxhdGVJbmZvO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVFdmVudEhhbmRsZXIoY29udGV4dCwgZXZlbnROYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgLy8gSW5zdGFuY2VzIGNhbiBvcHRpb25hbGx5IGhhdmUgYSBfbWV0aG9kSG9zdCB3aGljaCBhbGxvd3MgcmVkaXJlY3Rpbmcgd2hlcmVcbiAgICAvLyB0byBmaW5kIG1ldGhvZHMuIEN1cnJlbnRseSB1c2VkIGJ5IGB0ZW1wbGF0aXplYC5cbiAgICBjb250ZXh0ID0gY29udGV4dC5fbWV0aG9kSG9zdCB8fCBjb250ZXh0O1xuICAgIGxldCBoYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGNvbnRleHRbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgY29udGV4dFttZXRob2ROYW1lXShlLCBlLmRldGFpbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2xpc3RlbmVyIG1ldGhvZCBgJyArIG1ldGhvZE5hbWUgKyAnYCBub3QgZGVmaW5lZCcpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH1cblxuICAvKipcbiAgICogRWxlbWVudCBtaXhpbiB0aGF0IHByb3ZpZGVzIGJhc2ljIHRlbXBsYXRlIHBhcnNpbmcgYW5kIHN0YW1waW5nLCBpbmNsdWRpbmdcbiAgICogdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZS1yZWxhdGVkIGZlYXR1cmVzIGZvciBzdGFtcGVkIHRlbXBsYXRlczpcbiAgICpcbiAgICogLSBEZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgKGBvbi1ldmVudG5hbWU9XCJsaXN0ZW5lclwiYClcbiAgICogLSBNYXAgb2Ygbm9kZSBpZCdzIHRvIHN0YW1wZWQgbm9kZSBpbnN0YW5jZXMgKGB0aGlzLiQuaWRgKVxuICAgKiAtIE5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50IGNhY2hpbmcvcmVtb3ZhbCBhbmQgcmUtaW5zdGFsbGF0aW9uIChwZXJmb3JtYW5jZVxuICAgKiAgIG9wdGltaXphdGlvbilcbiAgICpcbiAgICogQG1peGluRnVuY3Rpb25cbiAgICogQHBvbHltZXJcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIGJhc2ljIHRlbXBsYXRlIHBhcnNpbmcgYW5kIHN0YW1waW5nXG4gICAqL1xuICBQb2x5bWVyLlRlbXBsYXRlU3RhbXAgPSBQb2x5bWVyLmRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgICAvKipcbiAgICAgKiBAcG9seW1lclxuICAgICAqIEBtaXhpbkNsYXNzXG4gICAgICogQGltcGxlbWVudHMge1BvbHltZXJfVGVtcGxhdGVTdGFtcH1cbiAgICAgKi9cbiAgICBjbGFzcyBUZW1wbGF0ZVN0YW1wIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2NhbnMgYSB0ZW1wbGF0ZSB0byBwcm9kdWNlIHRlbXBsYXRlIG1ldGFkYXRhLlxuICAgICAgICpcbiAgICAgICAqIFRlbXBsYXRlLXNwZWNpZmljIG1ldGFkYXRhIGFyZSBzdG9yZWQgaW4gdGhlIG9iamVjdCByZXR1cm5lZCwgYW5kIG5vZGUtXG4gICAgICAgKiBzcGVjaWZpYyBtZXRhZGF0YSBhcmUgc3RvcmVkIGluIG9iamVjdHMgaW4gaXRzIGZsYXR0ZW5lZCBgbm9kZUluZm9MaXN0YFxuICAgICAgICogYXJyYXkuICBPbmx5IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSB0aGF0IHdlcmUgcGFyc2VkIGFzIG5vZGVzIG9mXG4gICAgICAgKiBpbnRlcmVzdCBjb250YWluIGFuIG9iamVjdCBpbiBgbm9kZUluZm9MaXN0YC4gIEVhY2ggYG5vZGVJbmZvYCBvYmplY3RcbiAgICAgICAqIGNvbnRhaW5zIGFuIGBpbmRleGAgKGBjaGlsZE5vZGVzYCBpbmRleCBpbiBwYXJlbnQpIGFuZCBvcHRpb25hbGx5XG4gICAgICAgKiBgcGFyZW50YCwgd2hpY2ggcG9pbnRzIHRvIG5vZGUgaW5mbyBvZiBpdHMgcGFyZW50IChpbmNsdWRpbmcgaXRzIGluZGV4KS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgdGVtcGxhdGUgbWV0YWRhdGEgb2JqZWN0IHJldHVybmVkIGZyb20gdGhpcyBtZXRob2QgaGFzIHRoZSBmb2xsb3dpbmdcbiAgICAgICAqIHN0cnVjdHVyZSAobWFueSBmaWVsZHMgb3B0aW9uYWwpOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgIHtcbiAgICAgICAqICAgICAvLyBGbGF0dGVuZWQgbGlzdCBvZiBub2RlIG1ldGFkYXRhIChmb3Igbm9kZXMgdGhhdCBnZW5lcmF0ZWQgbWV0YWRhdGEpXG4gICAgICAgKiAgICAgbm9kZUluZm9MaXN0OiBbXG4gICAgICAgKiAgICAgICB7XG4gICAgICAgKiAgICAgICAgIC8vIGBpZGAgYXR0cmlidXRlIGZvciBhbnkgbm9kZXMgd2l0aCBpZCdzIGZvciBnZW5lcmF0aW5nIGAkYCBtYXBcbiAgICAgICAqICAgICAgICAgaWQ6IHtzdHJpbmd9LFxuICAgICAgICogICAgICAgICAvLyBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgIGV2ZW50czogW1xuICAgICAgICogICAgICAgICAgIHtcbiAgICAgICAqICAgICAgICAgICAgIG5hbWU6IHtzdHJpbmd9LCAgIC8vIGV2ZW50IG5hbWVcbiAgICAgICAqICAgICAgICAgICAgIHZhbHVlOiB7c3RyaW5nfSwgIC8vIGhhbmRsZXIgbWV0aG9kIG5hbWVcbiAgICAgICAqICAgICAgICAgICB9LCAuLi5cbiAgICAgICAqICAgICAgICAgXSxcbiAgICAgICAqICAgICAgICAgLy8gTm90ZXMgd2hlbiB0aGUgdGVtcGxhdGUgY29udGFpbmVkIGEgYDxzbG90PmAgZm9yIHNoYWR5IERPTVxuICAgICAgICogICAgICAgICAvLyBvcHRpbWl6YXRpb24gcHVycG9zZXNcbiAgICAgICAqICAgICAgICAgaGFzSW5zZXJ0aW9uUG9pbnQ6IHtib29sZWFufSxcbiAgICAgICAqICAgICAgICAgLy8gRm9yIG5lc3RlZCBgPHRlbXBsYXRlPmBgIG5vZGVzLCBuZXN0ZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgICAqICAgICAgICAgdGVtcGxhdGVJbmZvOiB7b2JqZWN0fSwgLy8gbmVzdGVkIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgIC8vIE1ldGFkYXRhIHRvIGFsbG93IGVmZmljaWVudCByZXRyaWV2YWwgb2YgaW5zdGFuY2VkIG5vZGVcbiAgICAgICAqICAgICAgICAgLy8gY29ycmVzcG9uZGluZyB0byB0aGlzIG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgIHBhcmVudEluZm86IHtudW1iZXJ9LCAgIC8vIHJlZmVyZW5jZSB0byBwYXJlbnQgbm9kZUluZm8+XG4gICAgICAgKiAgICAgICAgIHBhcmVudEluZGV4OiB7bnVtYmVyfSwgIC8vIGluZGV4IGluIHBhcmVudCdzIGBjaGlsZE5vZGVzYCBjb2xsZWN0aW9uXG4gICAgICAgKiAgICAgICAgIGluZm9JbmRleDoge251bWJlcn0sICAgIC8vIGluZGV4IG9mIHRoaXMgYG5vZGVJbmZvYCBpbiBgdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdGBcbiAgICAgICAqICAgICAgIH0sXG4gICAgICAgKiAgICAgICAuLi5cbiAgICAgICAqICAgICBdLFxuICAgICAgICogICAgIC8vIFdoZW4gdHJ1ZSwgdGhlIHRlbXBsYXRlIGhhZCB0aGUgYHN0cmlwLXdoaXRlc3BhY2VgIGF0dHJpYnV0ZVxuICAgICAgICogICAgIC8vIG9yIHdhcyBuZXN0ZWQgaW4gYSB0ZW1wbGF0ZSB3aXRoIHRoYXQgc2V0dGluZ1xuICAgICAgICogICAgIHN0cmlwV2hpdGVzcGFjZToge2Jvb2xlYW59LFxuICAgICAgICogICAgIC8vIEZvciBuZXN0ZWQgdGVtcGxhdGVzLCBuZXN0ZWQgdGVtcGxhdGUgY29udGVudCBpcyBtb3ZlZCBpbnRvXG4gICAgICAgKiAgICAgLy8gYSBkb2N1bWVudCBmcmFnbWVudCBzdG9yZWQgaGVyZTsgdGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdG9cbiAgICAgICAqICAgICAvLyBhdm9pZCB0aGUgY29zdCBvZiBuZXN0ZWQgdGVtcGxhdGUgY2xvbmluZ1xuICAgICAgICogICAgIGNvbnRlbnQ6IHtEb2N1bWVudEZyYWdtZW50fVxuICAgICAgICogICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBraWNrcyBvZmYgYSByZWN1cnNpdmUgdHJlZXdhbGsgYXMgZm9sbG93czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBcbiAgICAgICAqICAgIF9wYXJzZVRlbXBsYXRlIDwtLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICAgKiAgICAgIF9wYXJzZVRlbXBsYXRlQ29udGVudCAgICAgICAgICAgICAgfFxuICAgICAgICogICAgICAgIF9wYXJzZVRlbXBsYXRlTm9kZSAgPC0tLS0tLS0tLS0tLXwtLStcbiAgICAgICAqICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUgLS0rICB8XG4gICAgICAgKiAgICAgICAgICBfcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMgLS0tLS0tLS0tK1xuICAgICAgICogICAgICAgICAgX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlc1xuICAgICAgICogICAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVcbiAgICAgICAqXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBvdmVycmlkZGVuIHRvIGFkZCBjdXN0b20gbWV0YWRhdGEgYWJvdXQgdGVtcGxhdGVzXG4gICAgICAgKiB0byBlaXRoZXIgYHRlbXBsYXRlSW5mb2Agb3IgYG5vZGVJbmZvYC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgbWF5IGJlIGRlc3RydWN0aXZlIHRvIHRoZSB0ZW1wbGF0ZSwgaW4gdGhhdFxuICAgICAgICogZS5nLiBldmVudCBhbm5vdGF0aW9ucyBtYXkgYmUgcmVtb3ZlZCBhZnRlciBiZWluZyBub3RlZCBpbiB0aGVcbiAgICAgICAqIHRlbXBsYXRlIG1ldGFkYXRhLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIHBhcnNlXG4gICAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mbz19IG91dGVyVGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZyb20gdGhlIG91dGVyXG4gICAgICAgKiAgIHRlbXBsYXRlLCBmb3IgcGFyc2luZyBuZXN0ZWQgdGVtcGxhdGVzXG4gICAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBQYXJzZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCBvdXRlclRlbXBsYXRlSW5mbykge1xuICAgICAgICAvLyBzaW5jZSBhIHRlbXBsYXRlIG1heSBiZSByZS11c2VkLCBtZW1vLWl6ZSBtZXRhZGF0YVxuICAgICAgICBpZiAoIXRlbXBsYXRlLl90ZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGVtcGxhdGUuX3RlbXBsYXRlSW5mbyA9IHt9O1xuICAgICAgICAgIHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3QgPSBbXTtcbiAgICAgICAgICB0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlID1cbiAgICAgICAgICAgIChvdXRlclRlbXBsYXRlSW5mbyAmJiBvdXRlclRlbXBsYXRlSW5mby5zdHJpcFdoaXRlU3BhY2UpIHx8XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNBdHRyaWJ1dGUoJ3N0cmlwLXdoaXRlc3BhY2UnKTtcbiAgICAgICAgICB0aGlzLl9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCB7cGFyZW50OiBudWxsfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlLl90ZW1wbGF0ZUluZm87XG4gICAgICB9XG5cbiAgICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBub2RlIGFuZCBhZGRzIHRlbXBsYXRlIGFuZCBub2RlIG1ldGFkYXRhIGJhc2VkIG9uXG4gICAgICAgKiB0aGUgY3VycmVudCBub2RlLCBhbmQgaXRzIGBjaGlsZE5vZGVzYCBhbmQgYGF0dHJpYnV0ZXNgLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBvdmVycmlkZGVuIHRvIGFkZCBjdXN0b20gbm9kZSBvciB0ZW1wbGF0ZSBzcGVjaWZpY1xuICAgICAgICogbWV0YWRhdGEgYmFzZWQgb24gdGhpcyBub2RlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAgIGxldCBub3RlZDtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovKG5vZGUpO1xuICAgICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gJ3RlbXBsYXRlJyAmJiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3ByZXNlcnZlLWNvbnRlbnQnKSkge1xuICAgICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubG9jYWxOYW1lID09PSAnc2xvdCcpIHtcbiAgICAgICAgICAvLyBGb3IgU2hhZHlEb20gb3B0aW1pemF0aW9uLCBpbmRpY2F0aW5nIHRoZXJlIGlzIGFuIGluc2VydGlvbiBwb2ludFxuICAgICAgICAgIHRlbXBsYXRlSW5mby5oYXNJbnNlcnRpb25Qb2ludCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMoZWxlbWVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykgfHwgbm90ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlcyAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3RlZDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQYXJzZXMgdGVtcGxhdGUgY2hpbGQgbm9kZXMgZm9yIHRoZSBnaXZlbiByb290IG5vZGUuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgYWxzbyB3cmFwcyB3aGl0ZWxpc3RlZCBsZWdhY3kgdGVtcGxhdGUgZXh0ZW5zaW9uc1xuICAgICAgICogKGBpcz1cImRvbS1pZlwiYCBhbmQgYGlzPVwiZG9tLXJlcGVhdFwiYCkgd2l0aCB0aGVpciBlcXVpdmFsZW50IGVsZW1lbnRcbiAgICAgICAqIHdyYXBwZXJzLCBjb2xsYXBzZXMgdGV4dCBub2RlcywgYW5kIHN0cmlwcyB3aGl0ZXNwYWNlIGZyb20gdGhlIHRlbXBsYXRlXG4gICAgICAgKiBpZiB0aGUgYHRlbXBsYXRlSW5mby5zdHJpcFdoaXRlc3BhY2VgIHNldHRpbmcgd2FzIHByb3ZpZGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gcm9vdCBSb290IG5vZGUgd2hvc2UgYGNoaWxkTm9kZXNgIHdpbGwgYmUgcGFyc2VkXG4gICAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzKHJvb3QsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgICAgaWYgKHJvb3QubG9jYWxOYW1lID09PSAnc2NyaXB0JyB8fCByb290LmxvY2FsTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBub2RlPXJvb3QuZmlyc3RDaGlsZCwgcGFyZW50SW5kZXg9MCwgbmV4dDsgbm9kZTsgbm9kZT1uZXh0KSB7XG4gICAgICAgICAgLy8gV3JhcCB0ZW1wbGF0ZXNcbiAgICAgICAgICBpZiAobm9kZS5sb2NhbE5hbWUgPT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgbm9kZSA9IHdyYXBUZW1wbGF0ZUV4dGVuc2lvbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29sbGFwc2UgYWRqYWNlbnQgdGV4dE5vZGVzOiBmaXhlcyBhbiBJRSBpc3N1ZSB0aGF0IGNhbiBjYXVzZVxuICAgICAgICAgIC8vIHRleHQgbm9kZXMgdG8gYmUgaW5leHBsaWNhYmx5IHNwbGl0ID0oXG4gICAgICAgICAgLy8gbm90ZSB0aGF0IHJvb3Qubm9ybWFsaXplKCkgc2hvdWxkIHdvcmsgYnV0IGRvZXMgbm90IHNvIHdlIGRvIHRoaXNcbiAgICAgICAgICAvLyBtYW51YWxseS5cbiAgICAgICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAgIGxldCAvKiogTm9kZSAqLyBuID0gbmV4dDtcbiAgICAgICAgICAgIHdoaWxlIChuICYmIChuLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkpIHtcbiAgICAgICAgICAgICAgbm9kZS50ZXh0Q29udGVudCArPSBuLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICBuZXh0ID0gbi5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZChuKTtcbiAgICAgICAgICAgICAgbiA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvcHRpb25hbGx5IHN0cmlwIHdoaXRlc3BhY2VcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlICYmICFub2RlLnRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgICByb290LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGNoaWxkSW5mbyA9IHsgcGFyZW50SW5kZXgsIHBhcmVudEluZm86IG5vZGVJbmZvIH07XG4gICAgICAgICAgaWYgKHRoaXMuX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgY2hpbGRJbmZvKSkge1xuICAgICAgICAgICAgY2hpbGRJbmZvLmluZm9JbmRleCA9IHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3QucHVzaCgvKiogQHR5cGUgeyFOb2RlSW5mb30gKi8oY2hpbGRJbmZvKSkgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJbmNyZW1lbnQgaWYgbm90IHJlbW92ZWRcbiAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRJbmRleCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBjb250ZW50IGZvciB0aGUgZ2l2ZW4gbmVzdGVkIGA8dGVtcGxhdGU+YC5cbiAgICAgICAqXG4gICAgICAgKiBOZXN0ZWQgdGVtcGxhdGUgaW5mbyBpcyBzdG9yZWQgYXMgYHRlbXBsYXRlSW5mb2AgaW4gdGhlIGN1cnJlbnQgbm9kZSdzXG4gICAgICAgKiBgbm9kZUluZm9gLiBgdGVtcGxhdGUuY29udGVudGAgaXMgcmVtb3ZlZCBhbmQgc3RvcmVkIGluIGB0ZW1wbGF0ZUluZm9gLlxuICAgICAgICogSXQgd2lsbCB0aGVuIGJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgaG9zdCB0byBzZXQgaXQgYmFjayB0byB0aGVcbiAgICAgICAqIHRlbXBsYXRlIGFuZCBmb3IgdXNlcnMgc3RhbXBpbmcgbmVzdGVkIHRlbXBsYXRlcyB0byB1c2UgdGhlXG4gICAgICAgKiBgX2NvbnRlbnRGb3JUZW1wbGF0ZWAgbWV0aG9kIHRvIHJldHJpZXZlIHRoZSBjb250ZW50IGZvciB0aGlzIHRlbXBsYXRlXG4gICAgICAgKiAoYW4gb3B0aW1pemF0aW9uIHRvIGF2b2lkIHRoZSBjb3N0IG9mIGNsb25pbmcgbmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlIChhIDx0ZW1wbGF0ZT4pXG4gICAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gb3V0ZXJUZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgICAqICAgdGhhdCBpbmNsdWRlcyB0aGUgdGVtcGxhdGUgYG5vZGVgXG4gICAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAgICovXG4gICAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShub2RlLCBvdXRlclRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuX3BhcnNlVGVtcGxhdGUobm9kZSwgb3V0ZXJUZW1wbGF0ZUluZm8pO1xuICAgICAgICBsZXQgY29udGVudCA9IHRlbXBsYXRlSW5mby5jb250ZW50ID1cbiAgICAgICAgICBub2RlLmNvbnRlbnQub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZS5jb250ZW50KTtcbiAgICAgICAgbm9kZUluZm8udGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQYXJzZXMgdGVtcGxhdGUgbm9kZSBhdHRyaWJ1dGVzIGFuZCBhZGRzIG5vZGUgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAgICogZm9yIG5vZGVzIG9mIGludGVyZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgICAgLy8gTWFrZSBjb3B5IG9mIG9yaWdpbmFsIGF0dHJpYnV0ZSBsaXN0LCBzaW5jZSB0aGUgb3JkZXIgbWF5IGNoYW5nZVxuICAgICAgICAvLyBhcyBhdHRyaWJ1dGVzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZFxuICAgICAgICBsZXQgbm90ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGF0dHJzID0gQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpO1xuICAgICAgICBmb3IgKGxldCBpPWF0dHJzLmxlbmd0aC0xLCBhOyAoYT1hdHRyc1tpXSk7IGktLSkge1xuICAgICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgYS5uYW1lLCBhLnZhbHVlKSB8fCBub3RlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90ZWQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUGFyc2VzIGEgc2luZ2xlIHRlbXBsYXRlIG5vZGUgYXR0cmlidXRlIGFuZCBhZGRzIG5vZGUgbWV0YWRhdGEgdG9cbiAgICAgICAqIGBub2RlSW5mb2AgZm9yIGF0dHJpYnV0ZXMgb2YgaW50ZXJlc3QuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBpbXBsZW1lbnRhdGlvbiBhZGRzIG1ldGFkYXRhIGZvciBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIGF0dHJpYnV0ZXNcbiAgICAgICAqIGFuZCBgaWRgIGF0dHJpYnV0ZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEF0dHJpYnV0ZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgICAqL1xuICAgICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBldmVudHMgKG9uLSopXG4gICAgICAgIGlmIChuYW1lLnNsaWNlKDAsIDMpID09PSAnb24tJykge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgIG5vZGVJbmZvLmV2ZW50cyA9IG5vZGVJbmZvLmV2ZW50cyB8fCBbXTtcbiAgICAgICAgICBub2RlSW5mby5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLnNsaWNlKDMpLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdGF0aWMgaWRcbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ2lkJykge1xuICAgICAgICAgIG5vZGVJbmZvLmlkID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGBjb250ZW50YCBkb2N1bWVudCBmcmFnbWVudCBmb3IgYSBnaXZlbiB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgbmVzdGVkIHRlbXBsYXRlcywgUG9seW1lciBwZXJmb3JtcyBhbiBvcHRpbWl6YXRpb24gdG8gY2FjaGUgbmVzdGVkXG4gICAgICAgKiB0ZW1wbGF0ZSBjb250ZW50IHRvIGF2b2lkIHRoZSBjb3N0IG9mIGNsb25pbmcgZGVlcGx5IG5lc3RlZCB0ZW1wbGF0ZXMuXG4gICAgICAgKiBUaGlzIG1ldGhvZCByZXRyaWV2ZXMgdGhlIGNhY2hlZCBjb250ZW50IGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcmV0cmlldmUgYGNvbnRlbnRgIGZvclxuICAgICAgICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH0gQ29udGVudCBmcmFnbWVudFxuICAgICAgICovXG4gICAgICBzdGF0aWMgX2NvbnRlbnRGb3JUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICBsZXQgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50V2l0aEluZm99ICovICh0ZW1wbGF0ZSkuX3RlbXBsYXRlSW5mbztcbiAgICAgICAgcmV0dXJuICh0ZW1wbGF0ZUluZm8gJiYgdGVtcGxhdGVJbmZvLmNvbnRlbnQpIHx8IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2xvbmVzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBjb250ZW50IGFuZCByZXR1cm5zIGEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgICAqIGNvbnRhaW5pbmcgdGhlIGNsb25lZCBkb20uXG4gICAgICAgKlxuICAgICAgICogVGhlIHRlbXBsYXRlIGlzIHBhcnNlZCAob25jZSBhbmQgbWVtb2l6ZWQpIHVzaW5nIHRoaXMgbGlicmFyeSdzXG4gICAgICAgKiB0ZW1wbGF0ZSBwYXJzaW5nIGZlYXR1cmVzLCBhbmQgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyB2YWx1ZS1hZGRlZFxuICAgICAgICogZmVhdHVyZXM6XG4gICAgICAgKiAqIEFkZHMgZGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIGF0dHJpYnV0ZXNcbiAgICAgICAqICogR2VuZXJhdGVzIGFuIFwiaWQgbWFwXCIgZm9yIGFsbCBub2RlcyB3aXRoIGlkJ3MgdW5kZXIgYCRgIG9uIHJldHVybmVkXG4gICAgICAgKiAgIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICAgKiAqIFBhc3NlcyB0ZW1wbGF0ZSBpbmZvIGluY2x1ZGluZyBgY29udGVudGAgYmFjayB0byB0ZW1wbGF0ZXMgYXNcbiAgICAgICAqICAgYF90ZW1wbGF0ZUluZm9gIChhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0byBhdm9pZCBkZWVwIHRlbXBsYXRlXG4gICAgICAgKiAgIGNsb25pbmcpXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0IHRoZSBtZW1vaXplZCB0ZW1wbGF0ZSBwYXJzaW5nIHByb2Nlc3MgaXMgZGVzdHJ1Y3RpdmUgdG8gdGhlXG4gICAgICAgKiB0ZW1wbGF0ZTogYXR0cmlidXRlcyBmb3IgYmluZGluZ3MgYW5kIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBhcmVcbiAgICAgICAqIHJlbW92ZWQgYWZ0ZXIgYmVpbmcgbm90ZWQgaW4gbm90ZXMsIGFuZCBhbnkgbmVzdGVkIGA8dGVtcGxhdGU+LmNvbnRlbnRgXG4gICAgICAgKiBpcyByZW1vdmVkIGFuZCBzdG9yZWQgaW4gbm90ZXMgYXMgd2VsbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAgICogQHJldHVybiB7IVN0YW1wZWRUZW1wbGF0ZX0gQ2xvbmVkIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgICAqL1xuICAgICAgX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgLy8gUG9seWZpbGwgc3VwcG9ydDogYm9vdHN0cmFwIHRoZSB0ZW1wbGF0ZSBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlblxuICAgICAgICBpZiAodGVtcGxhdGUgJiYgIXRlbXBsYXRlLmNvbnRlbnQgJiZcbiAgICAgICAgICAgIHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50ICYmIEhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUpIHtcbiAgICAgICAgICBIVE1MVGVtcGxhdGVFbGVtZW50LmRlY29yYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIGxldCBub2RlSW5mbyA9IHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3Q7XG4gICAgICAgIGxldCBjb250ZW50ID0gdGVtcGxhdGVJbmZvLmNvbnRlbnQgfHwgdGVtcGxhdGUuY29udGVudDtcbiAgICAgICAgbGV0IGRvbSA9IC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH0gKi8gKGRvY3VtZW50LmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSkpO1xuICAgICAgICAvLyBOT1RFOiBTaGFkeURvbSBvcHRpbWl6YXRpb24gaW5kaWNhdGluZyB0aGVyZSBpcyBhbiBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgZG9tLl9fbm9JbnNlcnRpb25Qb2ludCA9ICF0ZW1wbGF0ZUluZm8uaGFzSW5zZXJ0aW9uUG9pbnQ7XG4gICAgICAgIGxldCBub2RlcyA9IGRvbS5ub2RlTGlzdCA9IG5ldyBBcnJheShub2RlSW5mby5sZW5ndGgpO1xuICAgICAgICBkb20uJCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpPTAsIGw9bm9kZUluZm8ubGVuZ3RoLCBpbmZvOyAoaTxsKSAmJiAoaW5mbz1ub2RlSW5mb1tpXSk7IGkrKykge1xuICAgICAgICAgIGxldCBub2RlID0gbm9kZXNbaV0gPSBmaW5kVGVtcGxhdGVOb2RlKGRvbSwgaW5mbyk7XG4gICAgICAgICAgYXBwbHlJZFRvTWFwKHRoaXMsIGRvbS4kLCBub2RlLCBpbmZvKTtcbiAgICAgICAgICBhcHBseVRlbXBsYXRlQ29udGVudCh0aGlzLCBub2RlLCBpbmZvKTtcbiAgICAgICAgICBhcHBseUV2ZW50TGlzdGVuZXIodGhpcywgbm9kZSwgaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgZG9tID0gLyoqIEB0eXBlIHshU3RhbXBlZFRlbXBsYXRlfSAqLyhkb20pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICAgIHJldHVybiBkb207XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciBieSBtZXRob2QgbmFtZSBmb3IgdGhlIGV2ZW50IHByb3ZpZGVkLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIGdlbmVyYXRlcyBhIGhhbmRsZXIgZnVuY3Rpb24gdGhhdCBsb29rcyB1cCB0aGUgbWV0aG9kXG4gICAgICAgKiBuYW1lIGF0IGhhbmRsaW5nIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGFkZCBsaXN0ZW5lciBvblxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBOYW1lIG9mIG1ldGhvZFxuICAgICAgICogQHBhcmFtIHsqPX0gY29udGV4dCBDb250ZXh0IHRoZSBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgb24gKGRlZmF1bHRzXG4gICAgICAgKiAgIHRvIGBub2RlYClcbiAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBHZW5lcmF0ZWQgaGFuZGxlciBmdW5jdGlvblxuICAgICAgICovXG4gICAgICBfYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIG1ldGhvZE5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgbm9kZTtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBjcmVhdGVOb2RlRXZlbnRIYW5kbGVyKGNvbnRleHQsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgcG9pbnQgZm9yIGFkZGluZyBjdXN0b20gb3Igc2ltdWxhdGVkIGV2ZW50IGhhbmRsaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgTm9kZSB0byBhZGQgZXZlbnQgbGlzdGVuZXIgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudFxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICovXG4gICAgICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgcG9pbnQgZm9yIGFkZGluZyBjdXN0b20gb3Igc2ltdWxhdGVkIGV2ZW50IGhhbmRsaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmcm9tXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KTp2b2lkfSBoYW5kbGVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZVxuICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgX3JlbW92ZUV2ZW50TGlzdGVuZXJGcm9tTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gVGVtcGxhdGVTdGFtcDtcblxuICB9KTtcblxufSkoKTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbi0tPlxuXG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiYm9vdC5odG1sXCI+XG5cbjxzY3JpcHQ+XG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgc3RydWN0dXJlZCBkYXRhIHBhdGggc3RyaW5ncy5cbiAgICpcbiAgICogQG5hbWVzcGFjZVxuICAgKiBAbWVtYmVyb2YgUG9seW1lclxuICAgKiBAc3VtbWFyeSBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBzdHJ1Y3R1cmVkIGRhdGEgcGF0aCBzdHJpbmdzLlxuICAgKi9cbiAgY29uc3QgUGF0aCA9IHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgc3RydWN0dXJlZCBkYXRhIHBhdGggKGhhcyBkb3RzKS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBQb2x5bWVyLlBhdGguaXNQYXRoKCdmb28uYmFyLmJheicpIC8vIHRydWVcbiAgICAgKiBQb2x5bWVyLlBhdGguaXNQYXRoKCdmb28nKSAgICAgICAgIC8vIGZhbHNlXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5QYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmdcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgY29udGFpbmVkIG9uZSBvciBtb3JlIGRvdHNcbiAgICAgKi9cbiAgICBpc1BhdGg6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmluZGV4T2YoJy4nKSA+PSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByb290IHByb3BlcnR5IG5hbWUgZm9yIHRoZSBnaXZlbiBwYXRoLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIFBvbHltZXIuUGF0aC5yb290KCdmb28uYmFyLmJheicpIC8vICdmb28nXG4gICAgICogUG9seW1lci5QYXRoLnJvb3QoJ2ZvbycpICAgICAgICAgLy8gJ2ZvbydcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBQb2x5bWVyLlBhdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZ1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gUm9vdCBwcm9wZXJ0eSBuYW1lXG4gICAgICovXG4gICAgcm9vdDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgbGV0IGRvdEluZGV4ID0gcGF0aC5pbmRleE9mKCcuJyk7XG4gICAgICBpZiAoZG90SW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZG90SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBgYmFzZWAgaXMgYGZvby5iYXJgLCBgZm9vYCBpcyBhbiBhbmNlc3RvciwgYGZvby5iYXJgIGlzIG5vdFxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgYmFzZSBwYXRoLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIFBvbHltZXIuUGF0aC5pc0FuY2VzdG9yKCdmb28uYmFyJywgJ2ZvbycpICAgICAgICAgLy8gdHJ1ZVxuICAgICAqIFBvbHltZXIuUGF0aC5pc0FuY2VzdG9yKCdmb28uYmFyJywgJ2Zvby5iYXInKSAgICAgLy8gZmFsc2VcbiAgICAgKiBQb2x5bWVyLlBhdGguaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28uYmFyLmJheicpIC8vIGZhbHNlXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5QYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nIHRvIHRlc3QuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgcGF0aGAgaXMgYW4gYW5jZXN0b3Igb2YgYGJhc2VgLlxuICAgICAqL1xuICAgIGlzQW5jZXN0b3I6IGZ1bmN0aW9uKGJhc2UsIHBhdGgpIHtcbiAgICAgIC8vICAgICBiYXNlLnN0YXJ0c1dpdGgocGF0aCArICcuJyk7XG4gICAgICByZXR1cm4gYmFzZS5pbmRleE9mKHBhdGggKyAnLicpID09PSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBgYmFzZWAgaXMgYGZvby5iYXJgLCBgZm9vLmJhci5iYXpgIGlzIGFuIGRlc2NlbmRhbnRcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBQb2x5bWVyLlBhdGguaXNEZXNjZW5kYW50KCdmb28uYmFyJywgJ2Zvby5iYXIuYmF6JykgLy8gdHJ1ZVxuICAgICAqIFBvbHltZXIuUGF0aC5pc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vLmJhcicpICAgICAvLyBmYWxzZVxuICAgICAqIFBvbHltZXIuUGF0aC5pc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIFBhdGggc3RyaW5nIHRvIHRlc3QgYWdhaW5zdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZyB0byB0ZXN0LlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGEgZGVzY2VuZGFudCBvZiBgYmFzZWAuXG4gICAgICovXG4gICAgaXNEZXNjZW5kYW50OiBmdW5jdGlvbihiYXNlLCBwYXRoKSB7XG4gICAgICAvLyAgICAgcGF0aC5zdGFydHNXaXRoKGJhc2UgKyAnLicpO1xuICAgICAgcmV0dXJuIHBhdGguaW5kZXhPZihiYXNlICsgJy4nKSA9PT0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYSBwcmV2aW91cyBiYXNlIHBhdGggd2l0aCBhIG5ldyBiYXNlIHBhdGgsIHByZXNlcnZpbmcgdGhlXG4gICAgICogcmVtYWluZGVyIG9mIHRoZSBwYXRoLlxuICAgICAqXG4gICAgICogVXNlciBtdXN0IGVuc3VyZSBgcGF0aGAgaGFzIGEgcHJlZml4IG9mIGBiYXNlYC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBQb2x5bWVyLlBhdGgudHJhbnNsYXRlKCdmb28uYmFyJywgJ3pvdCcsICdmb28uYmFyLmJheicpIC8vICd6b3QuYmF6J1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIEN1cnJlbnQgYmFzZSBzdHJpbmcgdG8gcmVtb3ZlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0Jhc2UgTmV3IGJhc2Ugc3RyaW5nIHRvIHJlcGxhY2Ugd2l0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdHJhbnNsYXRlXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIHN0cmluZ1xuICAgICAqL1xuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oYmFzZSwgbmV3QmFzZSwgcGF0aCkge1xuICAgICAgcmV0dXJuIG5ld0Jhc2UgKyBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmcgdG8gdGVzdFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGVxdWFsIHRvIGBiYXNlYFxuICAgICAqIEB0aGlzIHtQYXRofVxuICAgICAqL1xuICAgIG1hdGNoZXM6IGZ1bmN0aW9uKGJhc2UsIHBhdGgpIHtcbiAgICAgIHJldHVybiAoYmFzZSA9PT0gcGF0aCkgfHxcbiAgICAgICAgICAgICB0aGlzLmlzQW5jZXN0b3IoYmFzZSwgcGF0aCkgfHxcbiAgICAgICAgICAgICB0aGlzLmlzRGVzY2VuZGFudChiYXNlLCBwYXRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYXJyYXktYmFzZWQgcGF0aHMgdG8gZmxhdHRlbmVkIHBhdGguICBTdHJpbmctYmFzZWQgcGF0aHNcbiAgICAgKiBhcmUgcmV0dXJuZWQgYXMtaXMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogUG9seW1lci5QYXRoLm5vcm1hbGl6ZShbJ2Zvby5iYXInLCAwLCAnYmF6J10pICAvLyAnZm9vLmJhci4wLmJheidcbiAgICAgKiBQb2x5bWVyLlBhdGgubm9ybWFsaXplKCdmb28uYmFyLjAuYmF6JykgICAgICAgIC8vICdmb28uYmFyLjAuYmF6J1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIElucHV0IHBhdGhcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEZsYXR0ZW5lZCBwYXRoXG4gICAgICovXG4gICAgbm9ybWFsaXplOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICBsZXQgcGFydHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgYXJncyA9IHBhdGhbaV0udG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuICAgICAgICAgIGZvciAobGV0IGo9MDsgajxhcmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGFyZ3Nbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBhIHBhdGggaW50byBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy4gQWNjZXB0cyBlaXRoZXIgYXJyYXlzXG4gICAgICogb2YgcGF0aCBwYXJ0cyBvciBzdHJpbmdzLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIFBvbHltZXIuUGF0aC5zcGxpdChbJ2Zvby5iYXInLCAwLCAnYmF6J10pICAvLyBbJ2ZvbycsICdiYXInLCAnMCcsICdiYXonXVxuICAgICAqIFBvbHltZXIuUGF0aC5zcGxpdCgnZm9vLmJhci4wLmJheicpICAgICAgICAvLyBbJ2ZvbycsICdiYXInLCAnMCcsICdiYXonXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIElucHV0IHBhdGhcbiAgICAgKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gQXJyYXkgb2YgcGF0aCBwYXJ0c1xuICAgICAqIEB0aGlzIHtQYXRofVxuICAgICAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc31cbiAgICAgKi9cbiAgICBzcGxpdDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKHBhdGgpLnNwbGl0KCcuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aC50b1N0cmluZygpLnNwbGl0KCcuJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlYWRzIGEgdmFsdWUgZnJvbSBhIHBhdGguICBJZiBhbnkgc3ViLXByb3BlcnR5IGluIHRoZSBwYXRoIGlzIGB1bmRlZmluZWRgLFxuICAgICAqIHRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAgKHdpbGwgbmV2ZXIgdGhyb3cuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUG9seW1lci5QYXRoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJvb3QgT2JqZWN0IGZyb20gd2hpY2ggdG8gZGVyZWZlcmVuY2UgcGF0aCBmcm9tXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byByZWFkXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBpbmZvIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCB0byBgaW5mb2AsIHRoZSBub3JtYWxpemVkXG4gICAgICogIChmbGF0dGVuZWQpIHBhdGggd2lsbCBiZSBzZXQgdG8gYGluZm8ucGF0aGAuXG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgYXQgcGF0aCwgb3IgYHVuZGVmaW5lZGAgaWYgdGhlIHBhdGggY291bGQgbm90IGJlXG4gICAgICogIGZ1bGx5IGRlcmVmZXJlbmNlZC5cbiAgICAgKiBAdGhpcyB7UGF0aH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKHJvb3QsIHBhdGgsIGluZm8pIHtcbiAgICAgIGxldCBwcm9wID0gcm9vdDtcbiAgICAgIGxldCBwYXJ0cyA9IHRoaXMuc3BsaXQocGF0aCk7XG4gICAgICAvLyBMb29wIG92ZXIgcGF0aCBwYXJ0c1swLi5uLTFdIGFuZCBkZXJlZmVyZW5jZVxuICAgICAgZm9yIChsZXQgaT0wOyBpPHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghcHJvcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICBwcm9wID0gcHJvcFtwYXJ0XTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgIGluZm8ucGF0aCA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgdG8gYSBwYXRoLiAgSWYgYW55IHN1Yi1wcm9wZXJ0eSBpbiB0aGUgcGF0aCBpcyBgdW5kZWZpbmVkYCxcbiAgICAgKiB0aGlzIG1ldGhvZCB3aWxsIG5vLW9wLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFBvbHltZXIuUGF0aFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByb290IE9iamVjdCBmcm9tIHdoaWNoIHRvIGRlcmVmZXJlbmNlIHBhdGggZnJvbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gc2V0XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdG8gcGF0aFxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gVGhlIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQgcGF0aFxuICAgICAqIEB0aGlzIHtQYXRofVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ocm9vdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIGxldCBwcm9wID0gcm9vdDtcbiAgICAgIGxldCBwYXJ0cyA9IHRoaXMuc3BsaXQocGF0aCk7XG4gICAgICBsZXQgbGFzdCA9IHBhcnRzW3BhcnRzLmxlbmd0aC0xXTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIExvb3Agb3ZlciBwYXRoIHBhcnRzWzAuLm4tMl0gYW5kIGRlcmVmZXJlbmNlXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxwYXJ0cy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICAgICAgbGV0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICBwcm9wID0gcHJvcFtwYXJ0XTtcbiAgICAgICAgICBpZiAoIXByb3ApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHZhbHVlIHRvIG9iamVjdCBhdCBlbmQgb2YgcGF0aFxuICAgICAgICBwcm9wW2xhc3RdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaW1wbGUgcHJvcGVydHkgc2V0XG4gICAgICAgIHByb3BbcGF0aF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcuJyk7XG4gICAgfVxuXG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgc3RydWN0dXJlZCBkYXRhIHBhdGggKGhhcyBkb3RzKS5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIGBQb2x5bWVyLlBhdGguaXNQYXRoYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBcbiAgICogUG9seW1lci5QYXRoLmlzRGVlcCgnZm9vLmJhci5iYXonKSAvLyB0cnVlXG4gICAqIFBvbHltZXIuUGF0aC5pc0RlZXAoJ2ZvbycpICAgICAgICAgLy8gZmFsc2VcbiAgICogYGBgXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBtZW1iZXJvZiBQb2x5bWVyLlBhdGhcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmdcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGNvbnRhaW5lZCBvbmUgb3IgbW9yZSBkb3RzXG4gICAqL1xuICBQYXRoLmlzRGVlcCA9IFBhdGguaXNQYXRoO1xuXG4gIFBvbHltZXIuUGF0aCA9IFBhdGg7XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4tLT5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9ib290Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi91dGlscy9yZXNvbHZlLXVybC5odG1sXCI+XG48c2NyaXB0PlxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgbGV0IG1vZHVsZXMgPSB7fTtcbiAgbGV0IGxjTW9kdWxlcyA9IHt9O1xuICBmdW5jdGlvbiBmaW5kTW9kdWxlKGlkKSB7XG4gICAgcmV0dXJuIG1vZHVsZXNbaWRdIHx8IGxjTW9kdWxlc1tpZC50b0xvd2VyQ2FzZSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlT3V0c2lkZVRlbXBsYXRlQ2hlY2soaW5zdCkge1xuICAgIGlmIChpbnN0LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpIHtcbiAgICAgIGNvbnNvbGUud2FybignZG9tLW1vZHVsZSAlcyBoYXMgc3R5bGUgb3V0c2lkZSB0ZW1wbGF0ZScsIGluc3QuaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYGRvbS1tb2R1bGVgIGVsZW1lbnQgcmVnaXN0ZXJzIHRoZSBkb20gaXQgY29udGFpbnMgdG8gdGhlIG5hbWUgZ2l2ZW5cbiAgICogYnkgdGhlIG1vZHVsZSdzIGlkIGF0dHJpYnV0ZS4gSXQgcHJvdmlkZXMgYSB1bmlmaWVkIGRhdGFiYXNlIG9mIGRvbVxuICAgKiBhY2Nlc3NpYmxlIHZpYSBpdHMgc3RhdGljIGBpbXBvcnRgIEFQSS5cbiAgICpcbiAgICogQSBrZXkgdXNlIGNhc2Ugb2YgYGRvbS1tb2R1bGVgIGlzIGZvciBwcm92aWRpbmcgY3VzdG9tIGVsZW1lbnQgYDx0ZW1wbGF0ZT5gc1xuICAgKiB2aWEgSFRNTCBpbXBvcnRzIHRoYXQgYXJlIHBhcnNlZCBieSB0aGUgbmF0aXZlIEhUTUwgcGFyc2VyLCB0aGF0IGNhbiBiZVxuICAgKiByZWxvY2F0ZWQgZHVyaW5nIGEgYnVuZGxpbmcgcGFzcyBhbmQgc3RpbGwgbG9va2VkIHVwIGJ5IGBpZGAuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqICAgICA8ZG9tLW1vZHVsZSBpZD1cImZvb1wiPlxuICAgKiAgICAgICA8aW1nIHNyYz1cInN0dWZmLnBuZ1wiPlxuICAgKiAgICAgPC9kb20tbW9kdWxlPlxuICAgKlxuICAgKiBUaGVuIGluIGNvZGUgaW4gc29tZSBvdGhlciBsb2NhdGlvbiB0aGF0IGNhbm5vdCBhY2Nlc3MgdGhlIGRvbS1tb2R1bGUgYWJvdmVcbiAgICpcbiAgICogICAgIGxldCBpbWcgPSBjdXN0b21FbGVtZW50cy5nZXQoJ2RvbS1tb2R1bGUnKS5pbXBvcnQoJ2ZvbycsICdpbWcnKTtcbiAgICpcbiAgICogQGN1c3RvbUVsZW1lbnRcbiAgICogQGV4dGVuZHMgSFRNTEVsZW1lbnRcbiAgICogQG1lbWJlcm9mIFBvbHltZXJcbiAgICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgdGhhdCBwcm92aWRlcyBhIHJlZ2lzdHJ5IG9mIHJlbG9jYXRhYmxlIERPTSBjb250ZW50XG4gICAqICAgYnkgYGlkYCB0aGF0IGlzIGFnbm9zdGljIHRvIGJ1bmRsaW5nLlxuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqL1xuICBjbGFzcyBEb21Nb2R1bGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsnaWQnXTsgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBlbGVtZW50IHNwZWNpZmllZCBieSB0aGUgY3NzIGBzZWxlY3RvcmAgaW4gdGhlIG1vZHVsZVxuICAgICAqIHJlZ2lzdGVyZWQgYnkgYGlkYC4gRm9yIGV4YW1wbGUsIHRoaXMuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgZG9tLW1vZHVsZSBpbiB3aGljaCB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBzZWxlY3RvciBUaGUgY3NzIHNlbGVjdG9yIGJ5IHdoaWNoIHRvIGZpbmQgdGhlIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7RWxlbWVudH0gUmV0dXJucyB0aGUgZWxlbWVudCB3aGljaCBtYXRjaGVzIGBzZWxlY3RvcmAgaW4gdGhlXG4gICAgICogbW9kdWxlIHJlZ2lzdGVyZWQgYXQgdGhlIHNwZWNpZmllZCBgaWRgLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbXBvcnQoaWQsIHNlbGVjdG9yKSB7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgbGV0IG0gPSBmaW5kTW9kdWxlKGlkKTtcbiAgICAgICAgaWYgKG0gJiYgc2VsZWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gbS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7XG4gICAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGFic29sdXRlIFVSTCBvZiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gb2YgdGhpcyBgZG9tLW1vZHVsZWAuXG4gICAgICpcbiAgICAgKiBUaGlzIHZhbHVlIHdpbGwgZGlmZmVyIGZyb20gdGhpcyBlbGVtZW50J3MgYG93bmVyRG9jdW1lbnRgIGluIHRoZVxuICAgICAqIGZvbGxvd2luZyB3YXlzOlxuICAgICAqIC0gVGFrZXMgaW50byBhY2NvdW50IGFueSBgYXNzZXRwYXRoYCBhdHRyaWJ1dGUgYWRkZWQgZHVyaW5nIGJ1bmRsaW5nXG4gICAgICogICB0byBpbmRpY2F0ZSB0aGUgb3JpZ2luYWwgbG9jYXRpb24gcmVsYXRpdmUgdG8gdGhlIGJ1bmRsZWQgbG9jYXRpb25cbiAgICAgKiAtIFVzZXMgdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsJ3MgYGltcG9ydEZvckVsZW1lbnRgIEFQSSB0byBlbnN1cmVcbiAgICAgKiAgIHRoZSBwYXRoIGlzIHJlbGF0aXZlIHRvIHRoZSBpbXBvcnQgZG9jdW1lbnQncyBsb2NhdGlvbiBzaW5jZVxuICAgICAqICAgYG93bmVyRG9jdW1lbnRgIGlzIG5vdCBjdXJyZW50bHkgcG9seWZpbGxlZFxuICAgICAqL1xuICAgIGdldCBhc3NldHBhdGgoKSB7XG4gICAgICAvLyBEb24ndCBvdmVycmlkZSBleGlzdGluZyBhc3NldHBhdGguXG4gICAgICBpZiAoIXRoaXMuX19hc3NldHBhdGgpIHtcbiAgICAgICAgLy8gbm90ZTogYXNzZXRwYXRoIHNldCB2aWEgYW4gYXR0cmlidXRlIG11c3QgYmUgcmVsYXRpdmUgdG8gdGhpc1xuICAgICAgICAvLyBlbGVtZW50J3MgbG9jYXRpb247IGFjY29tb2RhdGUgcG9seWZpbGxlZCBIVE1MSW1wb3J0c1xuICAgICAgICBjb25zdCBvd25lciA9IHdpbmRvdy5IVE1MSW1wb3J0cyAmJiBIVE1MSW1wb3J0cy5pbXBvcnRGb3JFbGVtZW50ID9cbiAgICAgICAgICBIVE1MSW1wb3J0cy5pbXBvcnRGb3JFbGVtZW50KHRoaXMpIHx8IGRvY3VtZW50IDogdGhpcy5vd25lckRvY3VtZW50O1xuICAgICAgICBjb25zdCB1cmwgPSBQb2x5bWVyLlJlc29sdmVVcmwucmVzb2x2ZVVybChcbiAgICAgICAgICB0aGlzLmdldEF0dHJpYnV0ZSgnYXNzZXRwYXRoJykgfHwgJycsIG93bmVyLmJhc2VVUkkpO1xuICAgICAgICB0aGlzLl9fYXNzZXRwYXRoID0gUG9seW1lci5SZXNvbHZlVXJsLnBhdGhGcm9tVXJsKHVybCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX2Fzc2V0cGF0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgdGhlIGRvbS1tb2R1bGUgYXQgYSBnaXZlbiBpZC4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkXG4gICAgICogd2hlbiBhIGRvbS1tb2R1bGUgaXMgaW1wZXJhdGl2ZWx5IGNyZWF0ZWQuIEZvclxuICAgICAqIGV4YW1wbGUsIGBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkb20tbW9kdWxlJykucmVnaXN0ZXIoJ2ZvbycpYC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGlkIFRoZSBpZCBhdCB3aGljaCB0byByZWdpc3RlciB0aGUgZG9tLW1vZHVsZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHJlZ2lzdGVyKGlkKSB7XG4gICAgICBpZCA9IGlkIHx8IHRoaXMuaWQ7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAvLyBzdG9yZSBpZCBzZXBhcmF0ZSBmcm9tIGxvd2VyY2FzZWQgaWQgc28gdGhhdFxuICAgICAgICAvLyBpbiBhbGwgY2FzZXMgbWl4ZWRDYXNlIGlkIHdpbGwgc3RvcmVkIGRpc3RpbmN0bHlcbiAgICAgICAgLy8gYW5kIGxvd2VyY2FzZSB2ZXJzaW9uIGlzIGEgZmFsbGJhY2tcbiAgICAgICAgbW9kdWxlc1tpZF0gPSB0aGlzO1xuICAgICAgICBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV0gPSB0aGlzO1xuICAgICAgICBzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIERvbU1vZHVsZS5wcm90b3R5cGVbJ21vZHVsZXMnXSA9IG1vZHVsZXM7XG5cbiAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tbW9kdWxlJywgRG9tTW9kdWxlKTtcblxuICAvLyBleHBvcnRcbiAgUG9seW1lci5Eb21Nb2R1bGUgPSBEb21Nb2R1bGU7XG5cbn0pKCk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTggT3B0aW9ubWljIEdtYkhcblxuVGhpcyBpcyBhIFwid3JhcHBlclwiIGFyb3VuZCB5b3VyIGFwcCAtIHBvdGVudGlhbGx5IG5vdGhpbmcgdG8gZG8gaGVyZSEgIDotKVxuLS0+XG5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9ib3dlcl9jb21wb25lbnRzL3BvbHltZXIvcG9seW1lci1lbGVtZW50Lmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLWRyYXdlci9hcHAtZHJhd2VyLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9ib3dlcl9jb21wb25lbnRzL2FwcC1sYXlvdXQvYXBwLWRyYXdlci1sYXlvdXQvYXBwLWRyYXdlci1sYXlvdXQuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtaGVhZGVyL2FwcC1oZWFkZXIuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtaGVhZGVyLWxheW91dC9hcHAtaGVhZGVyLWxheW91dC5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vYm93ZXJfY29tcG9uZW50cy9hcHAtbGF5b3V0L2FwcC1zY3JvbGwtZWZmZWN0cy9hcHAtc2Nyb2xsLWVmZmVjdHMuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2Jvd2VyX2NvbXBvbmVudHMvYXBwLWxheW91dC9hcHAtdG9vbGJhci9hcHAtdG9vbGJhci5odG1sXCI+XG48bGluayByZWw9XCJpbXBvcnRcIiBocmVmPVwiLi4vYm93ZXJfY29tcG9uZW50cy9pcm9uLXBhZ2VzL2lyb24tcGFnZXMuaHRtbFwiPlxuPGxpbmsgcmVsPVwiaW1wb3J0XCIgaHJlZj1cIi4uL2Jvd2VyX2NvbXBvbmVudHMvaXJvbi1zZWxlY3Rvci9pcm9uLXNlbGVjdG9yLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCIuLi9ib3dlcl9jb21wb25lbnRzL3BhcGVyLWljb24tYnV0dG9uL3BhcGVyLWljb24tYnV0dG9uLmh0bWxcIj5cbjxsaW5rIHJlbD1cImltcG9ydFwiIGhyZWY9XCJvcHRpbm9taWMtaWNvbnMuaHRtbFwiPlxuXG48ZG9tLW1vZHVsZSBpZD1cIm9wdGlub21pYy1hcHBcIj5cbiAgPHRlbXBsYXRlPlxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgLS1hcHAtcHJpbWFyeS1jb2xvcjogI0ZBRkFGQTtcbiAgICAgICAgLS1hcHAtc3Ryb25nOiAjMjEyMTIxO1xuICAgICAgICAtLWFwcC1saWdodDogIzlFOUU5RTtcblxuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cblxuICAgICAgYXBwLWRyYXdlci1sYXlvdXQ6bm90KFtuYXJyb3ddKSBbZHJhd2VyLXRvZ2dsZV0ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuXG4gICAgICBhcHAtaGVhZGVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWFwcC1saWdodCk7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFwcC1wcmltYXJ5LWNvbG9yKTtcbiAgICAgIH1cblxuXG4gICAgICBhcHAtdG9vbGJhciB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1hcHAtbGlnaHQpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hcHAtcHJpbWFyeS1jb2xvcik7XG4gICAgICAgIC0tYXBwLXRvb2xiYXItZm9udC1zaXplOiAxOHB4O1xuICAgICAgfVxuXG4gICAgICBhcHAtaGVhZGVyIHBhcGVyLWljb24tYnV0dG9uIHtcbiAgICAgICAgLS1wYXBlci1pY29uLWJ1dHRvbi1pbmstY29sb3I6IHZhcigtLWFwcC1zdHJvbmcpO1xuICAgICAgfVxuXG4gICAgICAuZHJhd2VyLWxpc3Qge1xuICAgICAgICBtYXJnaW46IDAgMjBweDtcbiAgICAgIH1cblxuICAgICAgLmRyYXdlci1saXN0IGEge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcGFkZGluZzogMCAxNnB4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1hcHAtc3Ryb25nKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQwcHg7XG4gICAgICB9XG5cbiAgICAgIC5kcmF3ZXItbGlzdCBhLmlyb24tc2VsZWN0ZWQge1xuICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgfVxuXG4gICAgICBhcHAtZHJhd2VyIHtcbiAgICAgICAgLS1hcHAtZHJhd2VyLWNvbnRlbnQtY29udGFpbmVyOiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYXBwLXByaW1hcnktY29sb3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5hcHAtdGl0bGUge1xuICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMS4yNXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgIH1cblxuICAgIDwvc3R5bGU+XG5cbiAgICA8YXBwLWRyYXdlci1sYXlvdXQgZnVsbGJsZWVkIGZvcmNlLW5hcnJvdz5cbiAgICAgIDwhLS0gRHJhd2VyIGNvbnRlbnQgLS0+XG4gICAgICA8YXBwLWRyYXdlciBpZD1cImRyYXdlclwiIHNsb3Q9XCJkcmF3ZXJcIiBhbGlnbj1cInN0YXJ0XCIgc3dpcGUtb3Blbj1cInRydWVcIiBwZXJzaXN0ZW50PVwidHJ1ZVwiPlxuICAgICAgICA8YXBwLXRvb2xiYXIgY2xhc3M9XCJhcHAtdGl0bGVcIj5NZW51PC9hcHAtdG9vbGJhcj5cbiAgICAgICAgPGlyb24tc2VsZWN0b3Igc2VsZWN0ZWQ9XCJ7e3BhZ2V9fVwiIGF0dHItZm9yLXNlbGVjdGVkPVwibmFtZVwiIGNsYXNzPVwiZHJhd2VyLWxpc3RcIiByb2xlPVwibmF2aWdhdGlvblwiPlxuICAgICAgICAgIDxhIG5hbWU9XCJzdGFydFwiPlN0YXJ0c2VpdGU8L2E+XG4gICAgICAgICAgPGEgbmFtZT1cImhlbHBcIj5Eb2t1bWVudGF0aW9uPC9hPlxuICAgICAgICA8L2lyb24tc2VsZWN0b3I+XG4gICAgICA8L2FwcC1kcmF3ZXI+XG5cbiAgICAgIDwhLS0gTWFpbiBjb250ZW50IC0tPlxuICAgICAgPGFwcC1oZWFkZXItbGF5b3V0IGhhcy1zY3JvbGxpbmctcmVnaW9uPlxuXG4gICAgICAgIDxhcHAtaGVhZGVyIHNsb3Q9XCJoZWFkZXJcIiBjb25kZW5zZXMgcmV2ZWFscyBlZmZlY3RzPVwid2F0ZXJmYWxsXCI+XG4gICAgICAgICAgPGFwcC10b29sYmFyPlxuICAgICAgICAgICAgPHBhcGVyLWljb24tYnV0dG9uIGljb249XCJvcHRpbm9taWMtaWNvbnM6bWVudVwiIGRyYXdlci10b2dnbGU+PC9wYXBlci1pY29uLWJ1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgbWFpbi10aXRsZSBjbGFzcz1cImFwcC10aXRsZVwiPk9wdGlub21pYzwvZGl2PlxuICAgICAgICAgIDwvYXBwLXRvb2xiYXI+XG4gICAgICAgIDwvYXBwLWhlYWRlcj5cblxuICAgICAgICA8aXJvbi1wYWdlcyBzZWxlY3RlZD1cIltbcGFnZV1dXCIgYXR0ci1mb3Itc2VsZWN0ZWQ9XCJuYW1lXCIgZmFsbGJhY2stc2VsZWN0aW9uPVwic3RhcnRcIiByb2xlPVwibWFpblwiPlxuICAgICAgICAgIDxvcHRpbm9taWMtc3RhcnQgbmFtZT1cInN0YXJ0XCI+PC9vcHRpbm9taWMtc3RhcnQ+XG4gICAgICAgICAgPG9wdGlub21pYy1oZWxwIG5hbWU9XCJoZWxwXCI+PC9vcHRpbm9taWMtaGVscD5cbiAgICAgICAgPC9pcm9uLXBhZ2VzPlxuICAgICAgPC9hcHAtaGVhZGVyLWxheW91dD5cbiAgICA8L2FwcC1kcmF3ZXItbGF5b3V0PlxuICA8L3RlbXBsYXRlPlxuXG4gIDxzY3JpcHQ+XG4gICAgY2xhc3MgT3B0aW5vbWljQXBwIGV4dGVuZHMgUG9seW1lci5FbGVtZW50IHtcblxuICAgICAgc3RhdGljIGdldCBpcygpIHtcbiAgICAgICAgcmV0dXJuICdvcHRpbm9taWMtYXBwJztcbiAgICAgIH1cblxuICAgICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZTogdHJ1ZSxcbiAgICAgICAgICAgIG9ic2VydmVyOiAnX3BhZ2VDaGFuZ2VkJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxhenlQYWdlczoge1xuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQgKCAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcInN0YXJ0XCIgKi8gJy4vYXBwLXN0YXJ0Lmh0bWwnKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaGVscDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGltcG9ydCAoIC8qIHdlYnBhY2tDaHVua05hbWU6IFwib3B0aW5vbWljLWhlbHBcIiAqLyAnLi9vcHRpbm9taWMtaGVscC5odG1sJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZXJzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICdfcm91dGVQYWdlQ2hhbmdlZChwYWdlKScsXG4gICAgICAgIF07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgfVxuXG4gICAgICBfcm91dGVQYWdlQ2hhbmdlZChwYWdlKSB7XG4gICAgICAgIC8vIFBvbHltZXIgMi4wIHdpbGwgY2FsbCB3aXRoIGB1bmRlZmluZWRgIG9uIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAvLyBJZ25vcmUgdW50aWwgd2UgYXJlIHByb3Blcmx5IGNhbGxlZCB3aXRoIGEgc3RyaW5nLlxuICAgICAgICBpZiAocGFnZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbm8gcGFnZSB3YXMgZm91bmQgaW4gdGhlIHJvdXRlIGRhdGEsIHBhZ2Ugd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgIC8vIERlYXVsdCB0byAnc3RhcnQnIGluIHRoYXQgY2FzZS5cbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZSB8fCAnc3RhcnQnO1xuXG4gICAgICAgIC8vIENsb3NlIGEgbm9uLXBlcnNpc3RlbnQgZHJhd2VyIHdoZW4gdGhlIHBhZ2UgJiByb3V0ZSBhcmUgY2hhbmdlZC5cbiAgICAgICAgaWYgKCF0aGlzLiQuZHJhd2VyLnBlcnNpc3RlbnQpIHtcbiAgICAgICAgICB0aGlzLiQuZHJhd2VyLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3BhZ2VDaGFuZ2VkKHBhZ2UpIHtcbiAgICAgICAgcGFnZSA9IHBhZ2VcbiAgICAgICAgaWYgKHRoaXMubGF6eVBhZ2VzW3BhZ2VdKSB7XG4gICAgICAgICAgdGhpcy5sYXp5UGFnZXNbcGFnZV0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zaG93UGFnZTQwNCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9zaG93U3RhcnQoKSB7XG4gICAgICAgIHRoaXMucGFnZSA9ICdzdGFydCc7XG4gICAgICB9XG5cbiAgICAgIF9zaG93SGVscCgpIHtcbiAgICAgICAgdGhpcy5wYWdlID0gJ3ZpZXc0MDQnO1xuICAgICAgfVxuXG5cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0gTGlmZWN5Y2xlIC0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIHJlYWR5KCkge1xuICAgICAgICBzdXBlci5yZWFkeSgpO1xuICAgICAgICB0aGlzLl9zaG93U3RhcnQoKTtcbiAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShPcHRpbm9taWNBcHAuaXMsIE9wdGlub21pY0FwcCk7XG4gIDwvc2NyaXB0PlxuPC9kb20tbW9kdWxlPiJdLCJzb3VyY2VSb290IjoiIn0=